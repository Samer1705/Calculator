
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00004346  000043da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800176  00800176  000044f0  2**0
                  ALLOC
  3 .stab         00002124  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d34  00000000  00000000  00006614  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  00007348  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000259  00000000  00000000  00007548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002676  00000000  00000000  000077a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001567  00000000  00000000  00009e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013e1  00000000  00000000  0000b37e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000c760  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000032c  00000000  00000000  0000c980  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000d34  00000000  00000000  0000ccac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e4       	ldi	r30, 0x46	; 70
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <main>
      8a:	0c 94 a1 21 	jmp	0x4342	; 0x4342 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 a4 04 	call	0x948	; 0x948 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 1c 03 	call	0x638	; 0x638 <__subsf3>
     1bc:	0e 94 62 05 	call	0xac4	; 0xac4 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 62 05 	call	0xac4	; 0xac4 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__floatundisf>:
     1e8:	a2 e0       	ldi	r26, 0x02	; 2
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 25 21 	jmp	0x424a	; 0x424a <__prologue_saves__>
     1f4:	12 2f       	mov	r17, r18
     1f6:	b3 2e       	mov	r11, r19
     1f8:	a4 2e       	mov	r10, r20
     1fa:	95 2e       	mov	r9, r21
     1fc:	86 2e       	mov	r8, r22
     1fe:	37 2e       	mov	r3, r23
     200:	28 2e       	mov	r2, r24
     202:	9a 83       	std	Y+2, r25	; 0x02
     204:	c2 2e       	mov	r12, r18
     206:	d3 2e       	mov	r13, r19
     208:	e4 2e       	mov	r14, r20
     20a:	f5 2e       	mov	r15, r21
     20c:	a7 01       	movw	r20, r14
     20e:	96 01       	movw	r18, r12
     210:	60 e0       	ldi	r22, 0x00	; 0
     212:	70 e0       	ldi	r23, 0x00	; 0
     214:	80 e0       	ldi	r24, 0x00	; 0
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	21 17       	cp	r18, r17
     21a:	a1 f4       	brne	.+40     	; 0x244 <__floatundisf+0x5c>
     21c:	3b 15       	cp	r19, r11
     21e:	91 f4       	brne	.+36     	; 0x244 <__floatundisf+0x5c>
     220:	4a 15       	cp	r20, r10
     222:	81 f4       	brne	.+32     	; 0x244 <__floatundisf+0x5c>
     224:	59 15       	cp	r21, r9
     226:	71 f4       	brne	.+28     	; 0x244 <__floatundisf+0x5c>
     228:	68 15       	cp	r22, r8
     22a:	61 f4       	brne	.+24     	; 0x244 <__floatundisf+0x5c>
     22c:	73 15       	cp	r23, r3
     22e:	51 f4       	brne	.+20     	; 0x244 <__floatundisf+0x5c>
     230:	82 15       	cp	r24, r2
     232:	41 f4       	brne	.+16     	; 0x244 <__floatundisf+0x5c>
     234:	aa 81       	ldd	r26, Y+2	; 0x02
     236:	9a 17       	cp	r25, r26
     238:	29 f4       	brne	.+10     	; 0x244 <__floatundisf+0x5c>
     23a:	c7 01       	movw	r24, r14
     23c:	b6 01       	movw	r22, r12
     23e:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__floatunsisf>
     242:	aa c0       	rjmp	.+340    	; 0x398 <__floatundisf+0x1b0>
     244:	21 2f       	mov	r18, r17
     246:	3b 2d       	mov	r19, r11
     248:	4a 2d       	mov	r20, r10
     24a:	59 2d       	mov	r21, r9
     24c:	68 2d       	mov	r22, r8
     24e:	73 2d       	mov	r23, r3
     250:	82 2d       	mov	r24, r2
     252:	9a 81       	ldd	r25, Y+2	; 0x02
     254:	00 e2       	ldi	r16, 0x20	; 32
     256:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__lshrdi3>
     25a:	c9 01       	movw	r24, r18
     25c:	da 01       	movw	r26, r20
     25e:	80 30       	cpi	r24, 0x00	; 0
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	9e 07       	cpc	r25, r30
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	ae 07       	cpc	r26, r30
     268:	e0 e0       	ldi	r30, 0x00	; 0
     26a:	be 07       	cpc	r27, r30
     26c:	80 f4       	brcc	.+32     	; 0x28e <__floatundisf+0xa6>
     26e:	8f 3f       	cpi	r24, 0xFF	; 255
     270:	91 05       	cpc	r25, r1
     272:	a1 05       	cpc	r26, r1
     274:	b1 05       	cpc	r27, r1
     276:	31 f0       	breq	.+12     	; 0x284 <__floatundisf+0x9c>
     278:	28 f0       	brcs	.+10     	; 0x284 <__floatundisf+0x9c>
     27a:	28 e0       	ldi	r18, 0x08	; 8
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	50 e0       	ldi	r21, 0x00	; 0
     282:	16 c0       	rjmp	.+44     	; 0x2b0 <__floatundisf+0xc8>
     284:	20 e0       	ldi	r18, 0x00	; 0
     286:	30 e0       	ldi	r19, 0x00	; 0
     288:	40 e0       	ldi	r20, 0x00	; 0
     28a:	50 e0       	ldi	r21, 0x00	; 0
     28c:	11 c0       	rjmp	.+34     	; 0x2b0 <__floatundisf+0xc8>
     28e:	80 30       	cpi	r24, 0x00	; 0
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	9f 07       	cpc	r25, r31
     294:	f0 e0       	ldi	r31, 0x00	; 0
     296:	af 07       	cpc	r26, r31
     298:	f1 e0       	ldi	r31, 0x01	; 1
     29a:	bf 07       	cpc	r27, r31
     29c:	28 f0       	brcs	.+10     	; 0x2a8 <__floatundisf+0xc0>
     29e:	28 e1       	ldi	r18, 0x18	; 24
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <__floatundisf+0xc8>
     2a8:	20 e1       	ldi	r18, 0x10	; 16
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 e0       	ldi	r20, 0x00	; 0
     2ae:	50 e0       	ldi	r21, 0x00	; 0
     2b0:	02 2e       	mov	r0, r18
     2b2:	04 c0       	rjmp	.+8      	; 0x2bc <__floatundisf+0xd4>
     2b4:	b6 95       	lsr	r27
     2b6:	a7 95       	ror	r26
     2b8:	97 95       	ror	r25
     2ba:	87 95       	ror	r24
     2bc:	0a 94       	dec	r0
     2be:	d2 f7       	brpl	.-12     	; 0x2b4 <__floatundisf+0xcc>
     2c0:	fc 01       	movw	r30, r24
     2c2:	ea 58       	subi	r30, 0x8A	; 138
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	80 81       	ld	r24, Z
     2c8:	29 01       	movw	r4, r18
     2ca:	3a 01       	movw	r6, r20
     2cc:	48 0e       	add	r4, r24
     2ce:	51 1c       	adc	r5, r1
     2d0:	61 1c       	adc	r6, r1
     2d2:	71 1c       	adc	r7, r1
     2d4:	49 82       	std	Y+1, r4	; 0x01
     2d6:	21 2f       	mov	r18, r17
     2d8:	3b 2d       	mov	r19, r11
     2da:	4a 2d       	mov	r20, r10
     2dc:	59 2d       	mov	r21, r9
     2de:	68 2d       	mov	r22, r8
     2e0:	73 2d       	mov	r23, r3
     2e2:	82 2d       	mov	r24, r2
     2e4:	9a 81       	ldd	r25, Y+2	; 0x02
     2e6:	04 2d       	mov	r16, r4
     2e8:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__lshrdi3>
     2ec:	c9 01       	movw	r24, r18
     2ee:	da 01       	movw	r26, r20
     2f0:	4c 01       	movw	r8, r24
     2f2:	5d 01       	movw	r10, r26
     2f4:	80 e2       	ldi	r24, 0x20	; 32
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	84 19       	sub	r24, r4
     2fa:	95 09       	sbc	r25, r5
     2fc:	04 c0       	rjmp	.+8      	; 0x306 <__floatundisf+0x11e>
     2fe:	cc 0c       	add	r12, r12
     300:	dd 1c       	adc	r13, r13
     302:	ee 1c       	adc	r14, r14
     304:	ff 1c       	adc	r15, r15
     306:	8a 95       	dec	r24
     308:	d2 f7       	brpl	.-12     	; 0x2fe <__floatundisf+0x116>
     30a:	c1 14       	cp	r12, r1
     30c:	d1 04       	cpc	r13, r1
     30e:	e1 04       	cpc	r14, r1
     310:	f1 04       	cpc	r15, r1
     312:	41 f0       	breq	.+16     	; 0x324 <__floatundisf+0x13c>
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	90 e0       	ldi	r25, 0x00	; 0
     318:	a0 e0       	ldi	r26, 0x00	; 0
     31a:	b0 e0       	ldi	r27, 0x00	; 0
     31c:	88 2a       	or	r8, r24
     31e:	99 2a       	or	r9, r25
     320:	aa 2a       	or	r10, r26
     322:	bb 2a       	or	r11, r27
     324:	90 e2       	ldi	r25, 0x20	; 32
     326:	49 16       	cp	r4, r25
     328:	51 04       	cpc	r5, r1
     32a:	61 04       	cpc	r6, r1
     32c:	71 04       	cpc	r7, r1
     32e:	59 f4       	brne	.+22     	; 0x346 <__floatundisf+0x15e>
     330:	0f 2e       	mov	r0, r31
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ef 2e       	mov	r14, r31
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	ff 2e       	mov	r15, r31
     33a:	f0 e8       	ldi	r31, 0x80	; 128
     33c:	0f 2f       	mov	r16, r31
     33e:	ff e4       	ldi	r31, 0x4F	; 79
     340:	1f 2f       	mov	r17, r31
     342:	f0 2d       	mov	r31, r0
     344:	21 c0       	rjmp	.+66     	; 0x388 <__floatundisf+0x1a0>
     346:	af e1       	ldi	r26, 0x1F	; 31
     348:	4a 16       	cp	r4, r26
     34a:	51 04       	cpc	r5, r1
     34c:	61 04       	cpc	r6, r1
     34e:	71 04       	cpc	r7, r1
     350:	59 f4       	brne	.+22     	; 0x368 <__floatundisf+0x180>
     352:	0f 2e       	mov	r0, r31
     354:	f0 e0       	ldi	r31, 0x00	; 0
     356:	ef 2e       	mov	r14, r31
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	ff 2e       	mov	r15, r31
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	0f 2f       	mov	r16, r31
     360:	ff e4       	ldi	r31, 0x4F	; 79
     362:	1f 2f       	mov	r17, r31
     364:	f0 2d       	mov	r31, r0
     366:	10 c0       	rjmp	.+32     	; 0x388 <__floatundisf+0x1a0>
     368:	61 e0       	ldi	r22, 0x01	; 1
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	09 80       	ldd	r0, Y+1	; 0x01
     372:	04 c0       	rjmp	.+8      	; 0x37c <__floatundisf+0x194>
     374:	66 0f       	add	r22, r22
     376:	77 1f       	adc	r23, r23
     378:	88 1f       	adc	r24, r24
     37a:	99 1f       	adc	r25, r25
     37c:	0a 94       	dec	r0
     37e:	d2 f7       	brpl	.-12     	; 0x374 <__floatundisf+0x18c>
     380:	0e 94 04 05 	call	0xa08	; 0xa08 <__floatsisf>
     384:	7b 01       	movw	r14, r22
     386:	8c 01       	movw	r16, r24
     388:	c5 01       	movw	r24, r10
     38a:	b4 01       	movw	r22, r8
     38c:	0e 94 b6 05 	call	0xb6c	; 0xb6c <__floatunsisf>
     390:	a8 01       	movw	r20, r16
     392:	97 01       	movw	r18, r14
     394:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
     398:	22 96       	adiw	r28, 0x02	; 2
     39a:	e2 e1       	ldi	r30, 0x12	; 18
     39c:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__epilogue_restores__>

000003a0 <_fpadd_parts>:
     3a0:	a0 e0       	ldi	r26, 0x00	; 0
     3a2:	b0 e0       	ldi	r27, 0x00	; 0
     3a4:	e6 ed       	ldi	r30, 0xD6	; 214
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	0c 94 25 21 	jmp	0x424a	; 0x424a <__prologue_saves__>
     3ac:	dc 01       	movw	r26, r24
     3ae:	2b 01       	movw	r4, r22
     3b0:	fa 01       	movw	r30, r20
     3b2:	9c 91       	ld	r25, X
     3b4:	92 30       	cpi	r25, 0x02	; 2
     3b6:	08 f4       	brcc	.+2      	; 0x3ba <_fpadd_parts+0x1a>
     3b8:	39 c1       	rjmp	.+626    	; 0x62c <__stack+0x1cd>
     3ba:	eb 01       	movw	r28, r22
     3bc:	88 81       	ld	r24, Y
     3be:	82 30       	cpi	r24, 0x02	; 2
     3c0:	08 f4       	brcc	.+2      	; 0x3c4 <_fpadd_parts+0x24>
     3c2:	33 c1       	rjmp	.+614    	; 0x62a <__stack+0x1cb>
     3c4:	94 30       	cpi	r25, 0x04	; 4
     3c6:	69 f4       	brne	.+26     	; 0x3e2 <_fpadd_parts+0x42>
     3c8:	84 30       	cpi	r24, 0x04	; 4
     3ca:	09 f0       	breq	.+2      	; 0x3ce <_fpadd_parts+0x2e>
     3cc:	2f c1       	rjmp	.+606    	; 0x62c <__stack+0x1cd>
     3ce:	11 96       	adiw	r26, 0x01	; 1
     3d0:	9c 91       	ld	r25, X
     3d2:	11 97       	sbiw	r26, 0x01	; 1
     3d4:	89 81       	ldd	r24, Y+1	; 0x01
     3d6:	98 17       	cp	r25, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <_fpadd_parts+0x3c>
     3da:	28 c1       	rjmp	.+592    	; 0x62c <__stack+0x1cd>
     3dc:	ae e6       	ldi	r26, 0x6E	; 110
     3de:	b0 e0       	ldi	r27, 0x00	; 0
     3e0:	25 c1       	rjmp	.+586    	; 0x62c <__stack+0x1cd>
     3e2:	84 30       	cpi	r24, 0x04	; 4
     3e4:	09 f4       	brne	.+2      	; 0x3e8 <_fpadd_parts+0x48>
     3e6:	21 c1       	rjmp	.+578    	; 0x62a <__stack+0x1cb>
     3e8:	82 30       	cpi	r24, 0x02	; 2
     3ea:	a9 f4       	brne	.+42     	; 0x416 <_fpadd_parts+0x76>
     3ec:	92 30       	cpi	r25, 0x02	; 2
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <_fpadd_parts+0x52>
     3f0:	1d c1       	rjmp	.+570    	; 0x62c <__stack+0x1cd>
     3f2:	9a 01       	movw	r18, r20
     3f4:	ad 01       	movw	r20, r26
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	ea 01       	movw	r28, r20
     3fa:	09 90       	ld	r0, Y+
     3fc:	ae 01       	movw	r20, r28
     3fe:	e9 01       	movw	r28, r18
     400:	09 92       	st	Y+, r0
     402:	9e 01       	movw	r18, r28
     404:	81 50       	subi	r24, 0x01	; 1
     406:	c1 f7       	brne	.-16     	; 0x3f8 <_fpadd_parts+0x58>
     408:	e2 01       	movw	r28, r4
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	11 96       	adiw	r26, 0x01	; 1
     40e:	9c 91       	ld	r25, X
     410:	89 23       	and	r24, r25
     412:	81 83       	std	Z+1, r24	; 0x01
     414:	08 c1       	rjmp	.+528    	; 0x626 <__stack+0x1c7>
     416:	92 30       	cpi	r25, 0x02	; 2
     418:	09 f4       	brne	.+2      	; 0x41c <_fpadd_parts+0x7c>
     41a:	07 c1       	rjmp	.+526    	; 0x62a <__stack+0x1cb>
     41c:	12 96       	adiw	r26, 0x02	; 2
     41e:	2d 90       	ld	r2, X+
     420:	3c 90       	ld	r3, X
     422:	13 97       	sbiw	r26, 0x03	; 3
     424:	eb 01       	movw	r28, r22
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	9b 81       	ldd	r25, Y+3	; 0x03
     42a:	14 96       	adiw	r26, 0x04	; 4
     42c:	ad 90       	ld	r10, X+
     42e:	bd 90       	ld	r11, X+
     430:	cd 90       	ld	r12, X+
     432:	dc 90       	ld	r13, X
     434:	17 97       	sbiw	r26, 0x07	; 7
     436:	ec 80       	ldd	r14, Y+4	; 0x04
     438:	fd 80       	ldd	r15, Y+5	; 0x05
     43a:	0e 81       	ldd	r16, Y+6	; 0x06
     43c:	1f 81       	ldd	r17, Y+7	; 0x07
     43e:	91 01       	movw	r18, r2
     440:	28 1b       	sub	r18, r24
     442:	39 0b       	sbc	r19, r25
     444:	b9 01       	movw	r22, r18
     446:	37 ff       	sbrs	r19, 7
     448:	04 c0       	rjmp	.+8      	; 0x452 <_fpadd_parts+0xb2>
     44a:	66 27       	eor	r22, r22
     44c:	77 27       	eor	r23, r23
     44e:	62 1b       	sub	r22, r18
     450:	73 0b       	sbc	r23, r19
     452:	60 32       	cpi	r22, 0x20	; 32
     454:	71 05       	cpc	r23, r1
     456:	0c f0       	brlt	.+2      	; 0x45a <_fpadd_parts+0xba>
     458:	61 c0       	rjmp	.+194    	; 0x51c <__stack+0xbd>
     45a:	12 16       	cp	r1, r18
     45c:	13 06       	cpc	r1, r19
     45e:	6c f5       	brge	.+90     	; 0x4ba <__stack+0x5b>
     460:	37 01       	movw	r6, r14
     462:	48 01       	movw	r8, r16
     464:	06 2e       	mov	r0, r22
     466:	04 c0       	rjmp	.+8      	; 0x470 <__stack+0x11>
     468:	96 94       	lsr	r9
     46a:	87 94       	ror	r8
     46c:	77 94       	ror	r7
     46e:	67 94       	ror	r6
     470:	0a 94       	dec	r0
     472:	d2 f7       	brpl	.-12     	; 0x468 <__stack+0x9>
     474:	21 e0       	ldi	r18, 0x01	; 1
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	50 e0       	ldi	r21, 0x00	; 0
     47c:	04 c0       	rjmp	.+8      	; 0x486 <__stack+0x27>
     47e:	22 0f       	add	r18, r18
     480:	33 1f       	adc	r19, r19
     482:	44 1f       	adc	r20, r20
     484:	55 1f       	adc	r21, r21
     486:	6a 95       	dec	r22
     488:	d2 f7       	brpl	.-12     	; 0x47e <__stack+0x1f>
     48a:	21 50       	subi	r18, 0x01	; 1
     48c:	30 40       	sbci	r19, 0x00	; 0
     48e:	40 40       	sbci	r20, 0x00	; 0
     490:	50 40       	sbci	r21, 0x00	; 0
     492:	2e 21       	and	r18, r14
     494:	3f 21       	and	r19, r15
     496:	40 23       	and	r20, r16
     498:	51 23       	and	r21, r17
     49a:	21 15       	cp	r18, r1
     49c:	31 05       	cpc	r19, r1
     49e:	41 05       	cpc	r20, r1
     4a0:	51 05       	cpc	r21, r1
     4a2:	21 f0       	breq	.+8      	; 0x4ac <__stack+0x4d>
     4a4:	21 e0       	ldi	r18, 0x01	; 1
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	79 01       	movw	r14, r18
     4ae:	8a 01       	movw	r16, r20
     4b0:	e6 28       	or	r14, r6
     4b2:	f7 28       	or	r15, r7
     4b4:	08 29       	or	r16, r8
     4b6:	19 29       	or	r17, r9
     4b8:	3c c0       	rjmp	.+120    	; 0x532 <__stack+0xd3>
     4ba:	23 2b       	or	r18, r19
     4bc:	d1 f1       	breq	.+116    	; 0x532 <__stack+0xd3>
     4be:	26 0e       	add	r2, r22
     4c0:	37 1e       	adc	r3, r23
     4c2:	35 01       	movw	r6, r10
     4c4:	46 01       	movw	r8, r12
     4c6:	06 2e       	mov	r0, r22
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__stack+0x73>
     4ca:	96 94       	lsr	r9
     4cc:	87 94       	ror	r8
     4ce:	77 94       	ror	r7
     4d0:	67 94       	ror	r6
     4d2:	0a 94       	dec	r0
     4d4:	d2 f7       	brpl	.-12     	; 0x4ca <__stack+0x6b>
     4d6:	21 e0       	ldi	r18, 0x01	; 1
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	50 e0       	ldi	r21, 0x00	; 0
     4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__stack+0x89>
     4e0:	22 0f       	add	r18, r18
     4e2:	33 1f       	adc	r19, r19
     4e4:	44 1f       	adc	r20, r20
     4e6:	55 1f       	adc	r21, r21
     4e8:	6a 95       	dec	r22
     4ea:	d2 f7       	brpl	.-12     	; 0x4e0 <__stack+0x81>
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	30 40       	sbci	r19, 0x00	; 0
     4f0:	40 40       	sbci	r20, 0x00	; 0
     4f2:	50 40       	sbci	r21, 0x00	; 0
     4f4:	2a 21       	and	r18, r10
     4f6:	3b 21       	and	r19, r11
     4f8:	4c 21       	and	r20, r12
     4fa:	5d 21       	and	r21, r13
     4fc:	21 15       	cp	r18, r1
     4fe:	31 05       	cpc	r19, r1
     500:	41 05       	cpc	r20, r1
     502:	51 05       	cpc	r21, r1
     504:	21 f0       	breq	.+8      	; 0x50e <__stack+0xaf>
     506:	21 e0       	ldi	r18, 0x01	; 1
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	59 01       	movw	r10, r18
     510:	6a 01       	movw	r12, r20
     512:	a6 28       	or	r10, r6
     514:	b7 28       	or	r11, r7
     516:	c8 28       	or	r12, r8
     518:	d9 28       	or	r13, r9
     51a:	0b c0       	rjmp	.+22     	; 0x532 <__stack+0xd3>
     51c:	82 15       	cp	r24, r2
     51e:	93 05       	cpc	r25, r3
     520:	2c f0       	brlt	.+10     	; 0x52c <__stack+0xcd>
     522:	1c 01       	movw	r2, r24
     524:	aa 24       	eor	r10, r10
     526:	bb 24       	eor	r11, r11
     528:	65 01       	movw	r12, r10
     52a:	03 c0       	rjmp	.+6      	; 0x532 <__stack+0xd3>
     52c:	ee 24       	eor	r14, r14
     52e:	ff 24       	eor	r15, r15
     530:	87 01       	movw	r16, r14
     532:	11 96       	adiw	r26, 0x01	; 1
     534:	9c 91       	ld	r25, X
     536:	d2 01       	movw	r26, r4
     538:	11 96       	adiw	r26, 0x01	; 1
     53a:	8c 91       	ld	r24, X
     53c:	98 17       	cp	r25, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <__stack+0xe3>
     540:	45 c0       	rjmp	.+138    	; 0x5cc <__stack+0x16d>
     542:	99 23       	and	r25, r25
     544:	39 f0       	breq	.+14     	; 0x554 <__stack+0xf5>
     546:	a8 01       	movw	r20, r16
     548:	97 01       	movw	r18, r14
     54a:	2a 19       	sub	r18, r10
     54c:	3b 09       	sbc	r19, r11
     54e:	4c 09       	sbc	r20, r12
     550:	5d 09       	sbc	r21, r13
     552:	06 c0       	rjmp	.+12     	; 0x560 <__stack+0x101>
     554:	a6 01       	movw	r20, r12
     556:	95 01       	movw	r18, r10
     558:	2e 19       	sub	r18, r14
     55a:	3f 09       	sbc	r19, r15
     55c:	40 0b       	sbc	r20, r16
     55e:	51 0b       	sbc	r21, r17
     560:	57 fd       	sbrc	r21, 7
     562:	08 c0       	rjmp	.+16     	; 0x574 <__stack+0x115>
     564:	11 82       	std	Z+1, r1	; 0x01
     566:	33 82       	std	Z+3, r3	; 0x03
     568:	22 82       	std	Z+2, r2	; 0x02
     56a:	24 83       	std	Z+4, r18	; 0x04
     56c:	35 83       	std	Z+5, r19	; 0x05
     56e:	46 83       	std	Z+6, r20	; 0x06
     570:	57 83       	std	Z+7, r21	; 0x07
     572:	1d c0       	rjmp	.+58     	; 0x5ae <__stack+0x14f>
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	81 83       	std	Z+1, r24	; 0x01
     578:	33 82       	std	Z+3, r3	; 0x03
     57a:	22 82       	std	Z+2, r2	; 0x02
     57c:	88 27       	eor	r24, r24
     57e:	99 27       	eor	r25, r25
     580:	dc 01       	movw	r26, r24
     582:	82 1b       	sub	r24, r18
     584:	93 0b       	sbc	r25, r19
     586:	a4 0b       	sbc	r26, r20
     588:	b5 0b       	sbc	r27, r21
     58a:	84 83       	std	Z+4, r24	; 0x04
     58c:	95 83       	std	Z+5, r25	; 0x05
     58e:	a6 83       	std	Z+6, r26	; 0x06
     590:	b7 83       	std	Z+7, r27	; 0x07
     592:	0d c0       	rjmp	.+26     	; 0x5ae <__stack+0x14f>
     594:	22 0f       	add	r18, r18
     596:	33 1f       	adc	r19, r19
     598:	44 1f       	adc	r20, r20
     59a:	55 1f       	adc	r21, r21
     59c:	24 83       	std	Z+4, r18	; 0x04
     59e:	35 83       	std	Z+5, r19	; 0x05
     5a0:	46 83       	std	Z+6, r20	; 0x06
     5a2:	57 83       	std	Z+7, r21	; 0x07
     5a4:	82 81       	ldd	r24, Z+2	; 0x02
     5a6:	93 81       	ldd	r25, Z+3	; 0x03
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	93 83       	std	Z+3, r25	; 0x03
     5ac:	82 83       	std	Z+2, r24	; 0x02
     5ae:	24 81       	ldd	r18, Z+4	; 0x04
     5b0:	35 81       	ldd	r19, Z+5	; 0x05
     5b2:	46 81       	ldd	r20, Z+6	; 0x06
     5b4:	57 81       	ldd	r21, Z+7	; 0x07
     5b6:	da 01       	movw	r26, r20
     5b8:	c9 01       	movw	r24, r18
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	a1 09       	sbc	r26, r1
     5be:	b1 09       	sbc	r27, r1
     5c0:	8f 5f       	subi	r24, 0xFF	; 255
     5c2:	9f 4f       	sbci	r25, 0xFF	; 255
     5c4:	af 4f       	sbci	r26, 0xFF	; 255
     5c6:	bf 43       	sbci	r27, 0x3F	; 63
     5c8:	28 f3       	brcs	.-54     	; 0x594 <__stack+0x135>
     5ca:	0b c0       	rjmp	.+22     	; 0x5e2 <__stack+0x183>
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	33 82       	std	Z+3, r3	; 0x03
     5d0:	22 82       	std	Z+2, r2	; 0x02
     5d2:	ea 0c       	add	r14, r10
     5d4:	fb 1c       	adc	r15, r11
     5d6:	0c 1d       	adc	r16, r12
     5d8:	1d 1d       	adc	r17, r13
     5da:	e4 82       	std	Z+4, r14	; 0x04
     5dc:	f5 82       	std	Z+5, r15	; 0x05
     5de:	06 83       	std	Z+6, r16	; 0x06
     5e0:	17 83       	std	Z+7, r17	; 0x07
     5e2:	83 e0       	ldi	r24, 0x03	; 3
     5e4:	80 83       	st	Z, r24
     5e6:	24 81       	ldd	r18, Z+4	; 0x04
     5e8:	35 81       	ldd	r19, Z+5	; 0x05
     5ea:	46 81       	ldd	r20, Z+6	; 0x06
     5ec:	57 81       	ldd	r21, Z+7	; 0x07
     5ee:	57 ff       	sbrs	r21, 7
     5f0:	1a c0       	rjmp	.+52     	; 0x626 <__stack+0x1c7>
     5f2:	c9 01       	movw	r24, r18
     5f4:	aa 27       	eor	r26, r26
     5f6:	97 fd       	sbrc	r25, 7
     5f8:	a0 95       	com	r26
     5fa:	ba 2f       	mov	r27, r26
     5fc:	81 70       	andi	r24, 0x01	; 1
     5fe:	90 70       	andi	r25, 0x00	; 0
     600:	a0 70       	andi	r26, 0x00	; 0
     602:	b0 70       	andi	r27, 0x00	; 0
     604:	56 95       	lsr	r21
     606:	47 95       	ror	r20
     608:	37 95       	ror	r19
     60a:	27 95       	ror	r18
     60c:	82 2b       	or	r24, r18
     60e:	93 2b       	or	r25, r19
     610:	a4 2b       	or	r26, r20
     612:	b5 2b       	or	r27, r21
     614:	84 83       	std	Z+4, r24	; 0x04
     616:	95 83       	std	Z+5, r25	; 0x05
     618:	a6 83       	std	Z+6, r26	; 0x06
     61a:	b7 83       	std	Z+7, r27	; 0x07
     61c:	82 81       	ldd	r24, Z+2	; 0x02
     61e:	93 81       	ldd	r25, Z+3	; 0x03
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	93 83       	std	Z+3, r25	; 0x03
     624:	82 83       	std	Z+2, r24	; 0x02
     626:	df 01       	movw	r26, r30
     628:	01 c0       	rjmp	.+2      	; 0x62c <__stack+0x1cd>
     62a:	d2 01       	movw	r26, r4
     62c:	cd 01       	movw	r24, r26
     62e:	cd b7       	in	r28, 0x3d	; 61
     630:	de b7       	in	r29, 0x3e	; 62
     632:	e2 e1       	ldi	r30, 0x12	; 18
     634:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__epilogue_restores__>

00000638 <__subsf3>:
     638:	a0 e2       	ldi	r26, 0x20	; 32
     63a:	b0 e0       	ldi	r27, 0x00	; 0
     63c:	e2 e2       	ldi	r30, 0x22	; 34
     63e:	f3 e0       	ldi	r31, 0x03	; 3
     640:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__+0x18>
     644:	69 83       	std	Y+1, r22	; 0x01
     646:	7a 83       	std	Y+2, r23	; 0x02
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	9c 83       	std	Y+4, r25	; 0x04
     64c:	2d 83       	std	Y+5, r18	; 0x05
     64e:	3e 83       	std	Y+6, r19	; 0x06
     650:	4f 83       	std	Y+7, r20	; 0x07
     652:	58 87       	std	Y+8, r21	; 0x08
     654:	e9 e0       	ldi	r30, 0x09	; 9
     656:	ee 2e       	mov	r14, r30
     658:	f1 2c       	mov	r15, r1
     65a:	ec 0e       	add	r14, r28
     65c:	fd 1e       	adc	r15, r29
     65e:	ce 01       	movw	r24, r28
     660:	01 96       	adiw	r24, 0x01	; 1
     662:	b7 01       	movw	r22, r14
     664:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     668:	8e 01       	movw	r16, r28
     66a:	0f 5e       	subi	r16, 0xEF	; 239
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	ce 01       	movw	r24, r28
     670:	05 96       	adiw	r24, 0x05	; 5
     672:	b8 01       	movw	r22, r16
     674:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     678:	8a 89       	ldd	r24, Y+18	; 0x12
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	89 27       	eor	r24, r25
     67e:	8a 8b       	std	Y+18, r24	; 0x12
     680:	c7 01       	movw	r24, r14
     682:	b8 01       	movw	r22, r16
     684:	ae 01       	movw	r20, r28
     686:	47 5e       	subi	r20, 0xE7	; 231
     688:	5f 4f       	sbci	r21, 0xFF	; 255
     68a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     68e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__pack_f>
     692:	a0 96       	adiw	r28, 0x20	; 32
     694:	e6 e0       	ldi	r30, 0x06	; 6
     696:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__+0x18>

0000069a <__addsf3>:
     69a:	a0 e2       	ldi	r26, 0x20	; 32
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	e3 e5       	ldi	r30, 0x53	; 83
     6a0:	f3 e0       	ldi	r31, 0x03	; 3
     6a2:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__+0x18>
     6a6:	69 83       	std	Y+1, r22	; 0x01
     6a8:	7a 83       	std	Y+2, r23	; 0x02
     6aa:	8b 83       	std	Y+3, r24	; 0x03
     6ac:	9c 83       	std	Y+4, r25	; 0x04
     6ae:	2d 83       	std	Y+5, r18	; 0x05
     6b0:	3e 83       	std	Y+6, r19	; 0x06
     6b2:	4f 83       	std	Y+7, r20	; 0x07
     6b4:	58 87       	std	Y+8, r21	; 0x08
     6b6:	f9 e0       	ldi	r31, 0x09	; 9
     6b8:	ef 2e       	mov	r14, r31
     6ba:	f1 2c       	mov	r15, r1
     6bc:	ec 0e       	add	r14, r28
     6be:	fd 1e       	adc	r15, r29
     6c0:	ce 01       	movw	r24, r28
     6c2:	01 96       	adiw	r24, 0x01	; 1
     6c4:	b7 01       	movw	r22, r14
     6c6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     6ca:	8e 01       	movw	r16, r28
     6cc:	0f 5e       	subi	r16, 0xEF	; 239
     6ce:	1f 4f       	sbci	r17, 0xFF	; 255
     6d0:	ce 01       	movw	r24, r28
     6d2:	05 96       	adiw	r24, 0x05	; 5
     6d4:	b8 01       	movw	r22, r16
     6d6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     6da:	c7 01       	movw	r24, r14
     6dc:	b8 01       	movw	r22, r16
     6de:	ae 01       	movw	r20, r28
     6e0:	47 5e       	subi	r20, 0xE7	; 231
     6e2:	5f 4f       	sbci	r21, 0xFF	; 255
     6e4:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <_fpadd_parts>
     6e8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__pack_f>
     6ec:	a0 96       	adiw	r28, 0x20	; 32
     6ee:	e6 e0       	ldi	r30, 0x06	; 6
     6f0:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__+0x18>

000006f4 <__mulsf3>:
     6f4:	a0 e2       	ldi	r26, 0x20	; 32
     6f6:	b0 e0       	ldi	r27, 0x00	; 0
     6f8:	e0 e8       	ldi	r30, 0x80	; 128
     6fa:	f3 e0       	ldi	r31, 0x03	; 3
     6fc:	0c 94 25 21 	jmp	0x424a	; 0x424a <__prologue_saves__>
     700:	69 83       	std	Y+1, r22	; 0x01
     702:	7a 83       	std	Y+2, r23	; 0x02
     704:	8b 83       	std	Y+3, r24	; 0x03
     706:	9c 83       	std	Y+4, r25	; 0x04
     708:	2d 83       	std	Y+5, r18	; 0x05
     70a:	3e 83       	std	Y+6, r19	; 0x06
     70c:	4f 83       	std	Y+7, r20	; 0x07
     70e:	58 87       	std	Y+8, r21	; 0x08
     710:	ce 01       	movw	r24, r28
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	be 01       	movw	r22, r28
     716:	67 5f       	subi	r22, 0xF7	; 247
     718:	7f 4f       	sbci	r23, 0xFF	; 255
     71a:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     71e:	ce 01       	movw	r24, r28
     720:	05 96       	adiw	r24, 0x05	; 5
     722:	be 01       	movw	r22, r28
     724:	6f 5e       	subi	r22, 0xEF	; 239
     726:	7f 4f       	sbci	r23, 0xFF	; 255
     728:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     72c:	99 85       	ldd	r25, Y+9	; 0x09
     72e:	92 30       	cpi	r25, 0x02	; 2
     730:	88 f0       	brcs	.+34     	; 0x754 <__mulsf3+0x60>
     732:	89 89       	ldd	r24, Y+17	; 0x11
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	c8 f0       	brcs	.+50     	; 0x76a <__mulsf3+0x76>
     738:	94 30       	cpi	r25, 0x04	; 4
     73a:	19 f4       	brne	.+6      	; 0x742 <__mulsf3+0x4e>
     73c:	82 30       	cpi	r24, 0x02	; 2
     73e:	51 f4       	brne	.+20     	; 0x754 <__mulsf3+0x60>
     740:	04 c0       	rjmp	.+8      	; 0x74a <__mulsf3+0x56>
     742:	84 30       	cpi	r24, 0x04	; 4
     744:	29 f4       	brne	.+10     	; 0x750 <__mulsf3+0x5c>
     746:	92 30       	cpi	r25, 0x02	; 2
     748:	81 f4       	brne	.+32     	; 0x76a <__mulsf3+0x76>
     74a:	8e e6       	ldi	r24, 0x6E	; 110
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	c6 c0       	rjmp	.+396    	; 0x8dc <__mulsf3+0x1e8>
     750:	92 30       	cpi	r25, 0x02	; 2
     752:	49 f4       	brne	.+18     	; 0x766 <__mulsf3+0x72>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	9a 85       	ldd	r25, Y+10	; 0x0a
     758:	8a 89       	ldd	r24, Y+18	; 0x12
     75a:	98 13       	cpse	r25, r24
     75c:	21 e0       	ldi	r18, 0x01	; 1
     75e:	2a 87       	std	Y+10, r18	; 0x0a
     760:	ce 01       	movw	r24, r28
     762:	09 96       	adiw	r24, 0x09	; 9
     764:	bb c0       	rjmp	.+374    	; 0x8dc <__mulsf3+0x1e8>
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	49 f4       	brne	.+18     	; 0x77c <__mulsf3+0x88>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	9a 85       	ldd	r25, Y+10	; 0x0a
     76e:	8a 89       	ldd	r24, Y+18	; 0x12
     770:	98 13       	cpse	r25, r24
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	2a 8b       	std	Y+18, r18	; 0x12
     776:	ce 01       	movw	r24, r28
     778:	41 96       	adiw	r24, 0x11	; 17
     77a:	b0 c0       	rjmp	.+352    	; 0x8dc <__mulsf3+0x1e8>
     77c:	2d 84       	ldd	r2, Y+13	; 0x0d
     77e:	3e 84       	ldd	r3, Y+14	; 0x0e
     780:	4f 84       	ldd	r4, Y+15	; 0x0f
     782:	58 88       	ldd	r5, Y+16	; 0x10
     784:	6d 88       	ldd	r6, Y+21	; 0x15
     786:	7e 88       	ldd	r7, Y+22	; 0x16
     788:	8f 88       	ldd	r8, Y+23	; 0x17
     78a:	98 8c       	ldd	r9, Y+24	; 0x18
     78c:	ee 24       	eor	r14, r14
     78e:	ff 24       	eor	r15, r15
     790:	87 01       	movw	r16, r14
     792:	aa 24       	eor	r10, r10
     794:	bb 24       	eor	r11, r11
     796:	65 01       	movw	r12, r10
     798:	40 e0       	ldi	r20, 0x00	; 0
     79a:	50 e0       	ldi	r21, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	e0 e0       	ldi	r30, 0x00	; 0
     7a2:	f0 e0       	ldi	r31, 0x00	; 0
     7a4:	c1 01       	movw	r24, r2
     7a6:	81 70       	andi	r24, 0x01	; 1
     7a8:	90 70       	andi	r25, 0x00	; 0
     7aa:	89 2b       	or	r24, r25
     7ac:	e9 f0       	breq	.+58     	; 0x7e8 <__mulsf3+0xf4>
     7ae:	e6 0c       	add	r14, r6
     7b0:	f7 1c       	adc	r15, r7
     7b2:	08 1d       	adc	r16, r8
     7b4:	19 1d       	adc	r17, r9
     7b6:	9a 01       	movw	r18, r20
     7b8:	ab 01       	movw	r20, r22
     7ba:	2a 0d       	add	r18, r10
     7bc:	3b 1d       	adc	r19, r11
     7be:	4c 1d       	adc	r20, r12
     7c0:	5d 1d       	adc	r21, r13
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a0 e0       	ldi	r26, 0x00	; 0
     7c8:	b0 e0       	ldi	r27, 0x00	; 0
     7ca:	e6 14       	cp	r14, r6
     7cc:	f7 04       	cpc	r15, r7
     7ce:	08 05       	cpc	r16, r8
     7d0:	19 05       	cpc	r17, r9
     7d2:	20 f4       	brcc	.+8      	; 0x7dc <__mulsf3+0xe8>
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	ba 01       	movw	r22, r20
     7de:	a9 01       	movw	r20, r18
     7e0:	48 0f       	add	r20, r24
     7e2:	59 1f       	adc	r21, r25
     7e4:	6a 1f       	adc	r22, r26
     7e6:	7b 1f       	adc	r23, r27
     7e8:	aa 0c       	add	r10, r10
     7ea:	bb 1c       	adc	r11, r11
     7ec:	cc 1c       	adc	r12, r12
     7ee:	dd 1c       	adc	r13, r13
     7f0:	97 fe       	sbrs	r9, 7
     7f2:	08 c0       	rjmp	.+16     	; 0x804 <__mulsf3+0x110>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a0 e0       	ldi	r26, 0x00	; 0
     7fa:	b0 e0       	ldi	r27, 0x00	; 0
     7fc:	a8 2a       	or	r10, r24
     7fe:	b9 2a       	or	r11, r25
     800:	ca 2a       	or	r12, r26
     802:	db 2a       	or	r13, r27
     804:	31 96       	adiw	r30, 0x01	; 1
     806:	e0 32       	cpi	r30, 0x20	; 32
     808:	f1 05       	cpc	r31, r1
     80a:	49 f0       	breq	.+18     	; 0x81e <__mulsf3+0x12a>
     80c:	66 0c       	add	r6, r6
     80e:	77 1c       	adc	r7, r7
     810:	88 1c       	adc	r8, r8
     812:	99 1c       	adc	r9, r9
     814:	56 94       	lsr	r5
     816:	47 94       	ror	r4
     818:	37 94       	ror	r3
     81a:	27 94       	ror	r2
     81c:	c3 cf       	rjmp	.-122    	; 0x7a4 <__mulsf3+0xb0>
     81e:	fa 85       	ldd	r31, Y+10	; 0x0a
     820:	ea 89       	ldd	r30, Y+18	; 0x12
     822:	2b 89       	ldd	r18, Y+19	; 0x13
     824:	3c 89       	ldd	r19, Y+20	; 0x14
     826:	8b 85       	ldd	r24, Y+11	; 0x0b
     828:	9c 85       	ldd	r25, Y+12	; 0x0c
     82a:	28 0f       	add	r18, r24
     82c:	39 1f       	adc	r19, r25
     82e:	2e 5f       	subi	r18, 0xFE	; 254
     830:	3f 4f       	sbci	r19, 0xFF	; 255
     832:	17 c0       	rjmp	.+46     	; 0x862 <__mulsf3+0x16e>
     834:	ca 01       	movw	r24, r20
     836:	81 70       	andi	r24, 0x01	; 1
     838:	90 70       	andi	r25, 0x00	; 0
     83a:	89 2b       	or	r24, r25
     83c:	61 f0       	breq	.+24     	; 0x856 <__mulsf3+0x162>
     83e:	16 95       	lsr	r17
     840:	07 95       	ror	r16
     842:	f7 94       	ror	r15
     844:	e7 94       	ror	r14
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	a0 e0       	ldi	r26, 0x00	; 0
     84c:	b0 e8       	ldi	r27, 0x80	; 128
     84e:	e8 2a       	or	r14, r24
     850:	f9 2a       	or	r15, r25
     852:	0a 2b       	or	r16, r26
     854:	1b 2b       	or	r17, r27
     856:	76 95       	lsr	r23
     858:	67 95       	ror	r22
     85a:	57 95       	ror	r21
     85c:	47 95       	ror	r20
     85e:	2f 5f       	subi	r18, 0xFF	; 255
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	77 fd       	sbrc	r23, 7
     864:	e7 cf       	rjmp	.-50     	; 0x834 <__mulsf3+0x140>
     866:	0c c0       	rjmp	.+24     	; 0x880 <__mulsf3+0x18c>
     868:	44 0f       	add	r20, r20
     86a:	55 1f       	adc	r21, r21
     86c:	66 1f       	adc	r22, r22
     86e:	77 1f       	adc	r23, r23
     870:	17 fd       	sbrc	r17, 7
     872:	41 60       	ori	r20, 0x01	; 1
     874:	ee 0c       	add	r14, r14
     876:	ff 1c       	adc	r15, r15
     878:	00 1f       	adc	r16, r16
     87a:	11 1f       	adc	r17, r17
     87c:	21 50       	subi	r18, 0x01	; 1
     87e:	30 40       	sbci	r19, 0x00	; 0
     880:	40 30       	cpi	r20, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	59 07       	cpc	r21, r25
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	69 07       	cpc	r22, r25
     88a:	90 e4       	ldi	r25, 0x40	; 64
     88c:	79 07       	cpc	r23, r25
     88e:	60 f3       	brcs	.-40     	; 0x868 <__mulsf3+0x174>
     890:	2b 8f       	std	Y+27, r18	; 0x1b
     892:	3c 8f       	std	Y+28, r19	; 0x1c
     894:	db 01       	movw	r26, r22
     896:	ca 01       	movw	r24, r20
     898:	8f 77       	andi	r24, 0x7F	; 127
     89a:	90 70       	andi	r25, 0x00	; 0
     89c:	a0 70       	andi	r26, 0x00	; 0
     89e:	b0 70       	andi	r27, 0x00	; 0
     8a0:	80 34       	cpi	r24, 0x40	; 64
     8a2:	91 05       	cpc	r25, r1
     8a4:	a1 05       	cpc	r26, r1
     8a6:	b1 05       	cpc	r27, r1
     8a8:	61 f4       	brne	.+24     	; 0x8c2 <__mulsf3+0x1ce>
     8aa:	47 fd       	sbrc	r20, 7
     8ac:	0a c0       	rjmp	.+20     	; 0x8c2 <__mulsf3+0x1ce>
     8ae:	e1 14       	cp	r14, r1
     8b0:	f1 04       	cpc	r15, r1
     8b2:	01 05       	cpc	r16, r1
     8b4:	11 05       	cpc	r17, r1
     8b6:	29 f0       	breq	.+10     	; 0x8c2 <__mulsf3+0x1ce>
     8b8:	40 5c       	subi	r20, 0xC0	; 192
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	6f 4f       	sbci	r22, 0xFF	; 255
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	40 78       	andi	r20, 0x80	; 128
     8c2:	1a 8e       	std	Y+26, r1	; 0x1a
     8c4:	fe 17       	cp	r31, r30
     8c6:	11 f0       	breq	.+4      	; 0x8cc <__mulsf3+0x1d8>
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	8a 8f       	std	Y+26, r24	; 0x1a
     8cc:	4d 8f       	std	Y+29, r20	; 0x1d
     8ce:	5e 8f       	std	Y+30, r21	; 0x1e
     8d0:	6f 8f       	std	Y+31, r22	; 0x1f
     8d2:	78 a3       	std	Y+32, r23	; 0x20
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	89 8f       	std	Y+25, r24	; 0x19
     8d8:	ce 01       	movw	r24, r28
     8da:	49 96       	adiw	r24, 0x19	; 25
     8dc:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__pack_f>
     8e0:	a0 96       	adiw	r28, 0x20	; 32
     8e2:	e2 e1       	ldi	r30, 0x12	; 18
     8e4:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__epilogue_restores__>

000008e8 <__gtsf2>:
     8e8:	a8 e1       	ldi	r26, 0x18	; 24
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
     8ec:	ea e7       	ldi	r30, 0x7A	; 122
     8ee:	f4 e0       	ldi	r31, 0x04	; 4
     8f0:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__+0x18>
     8f4:	69 83       	std	Y+1, r22	; 0x01
     8f6:	7a 83       	std	Y+2, r23	; 0x02
     8f8:	8b 83       	std	Y+3, r24	; 0x03
     8fa:	9c 83       	std	Y+4, r25	; 0x04
     8fc:	2d 83       	std	Y+5, r18	; 0x05
     8fe:	3e 83       	std	Y+6, r19	; 0x06
     900:	4f 83       	std	Y+7, r20	; 0x07
     902:	58 87       	std	Y+8, r21	; 0x08
     904:	89 e0       	ldi	r24, 0x09	; 9
     906:	e8 2e       	mov	r14, r24
     908:	f1 2c       	mov	r15, r1
     90a:	ec 0e       	add	r14, r28
     90c:	fd 1e       	adc	r15, r29
     90e:	ce 01       	movw	r24, r28
     910:	01 96       	adiw	r24, 0x01	; 1
     912:	b7 01       	movw	r22, r14
     914:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     918:	8e 01       	movw	r16, r28
     91a:	0f 5e       	subi	r16, 0xEF	; 239
     91c:	1f 4f       	sbci	r17, 0xFF	; 255
     91e:	ce 01       	movw	r24, r28
     920:	05 96       	adiw	r24, 0x05	; 5
     922:	b8 01       	movw	r22, r16
     924:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     928:	89 85       	ldd	r24, Y+9	; 0x09
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	40 f0       	brcs	.+16     	; 0x93e <__gtsf2+0x56>
     92e:	89 89       	ldd	r24, Y+17	; 0x11
     930:	82 30       	cpi	r24, 0x02	; 2
     932:	28 f0       	brcs	.+10     	; 0x93e <__gtsf2+0x56>
     934:	c7 01       	movw	r24, r14
     936:	b8 01       	movw	r22, r16
     938:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fpcmp_parts_f>
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__gtsf2+0x58>
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	68 96       	adiw	r28, 0x18	; 24
     942:	e6 e0       	ldi	r30, 0x06	; 6
     944:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__+0x18>

00000948 <__gesf2>:
     948:	a8 e1       	ldi	r26, 0x18	; 24
     94a:	b0 e0       	ldi	r27, 0x00	; 0
     94c:	ea ea       	ldi	r30, 0xAA	; 170
     94e:	f4 e0       	ldi	r31, 0x04	; 4
     950:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__+0x18>
     954:	69 83       	std	Y+1, r22	; 0x01
     956:	7a 83       	std	Y+2, r23	; 0x02
     958:	8b 83       	std	Y+3, r24	; 0x03
     95a:	9c 83       	std	Y+4, r25	; 0x04
     95c:	2d 83       	std	Y+5, r18	; 0x05
     95e:	3e 83       	std	Y+6, r19	; 0x06
     960:	4f 83       	std	Y+7, r20	; 0x07
     962:	58 87       	std	Y+8, r21	; 0x08
     964:	89 e0       	ldi	r24, 0x09	; 9
     966:	e8 2e       	mov	r14, r24
     968:	f1 2c       	mov	r15, r1
     96a:	ec 0e       	add	r14, r28
     96c:	fd 1e       	adc	r15, r29
     96e:	ce 01       	movw	r24, r28
     970:	01 96       	adiw	r24, 0x01	; 1
     972:	b7 01       	movw	r22, r14
     974:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     978:	8e 01       	movw	r16, r28
     97a:	0f 5e       	subi	r16, 0xEF	; 239
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	ce 01       	movw	r24, r28
     980:	05 96       	adiw	r24, 0x05	; 5
     982:	b8 01       	movw	r22, r16
     984:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     988:	89 85       	ldd	r24, Y+9	; 0x09
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	40 f0       	brcs	.+16     	; 0x99e <__gesf2+0x56>
     98e:	89 89       	ldd	r24, Y+17	; 0x11
     990:	82 30       	cpi	r24, 0x02	; 2
     992:	28 f0       	brcs	.+10     	; 0x99e <__gesf2+0x56>
     994:	c7 01       	movw	r24, r14
     996:	b8 01       	movw	r22, r16
     998:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fpcmp_parts_f>
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <__gesf2+0x58>
     99e:	8f ef       	ldi	r24, 0xFF	; 255
     9a0:	68 96       	adiw	r28, 0x18	; 24
     9a2:	e6 e0       	ldi	r30, 0x06	; 6
     9a4:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__+0x18>

000009a8 <__ltsf2>:
     9a8:	a8 e1       	ldi	r26, 0x18	; 24
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	ea ed       	ldi	r30, 0xDA	; 218
     9ae:	f4 e0       	ldi	r31, 0x04	; 4
     9b0:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__prologue_saves__+0x18>
     9b4:	69 83       	std	Y+1, r22	; 0x01
     9b6:	7a 83       	std	Y+2, r23	; 0x02
     9b8:	8b 83       	std	Y+3, r24	; 0x03
     9ba:	9c 83       	std	Y+4, r25	; 0x04
     9bc:	2d 83       	std	Y+5, r18	; 0x05
     9be:	3e 83       	std	Y+6, r19	; 0x06
     9c0:	4f 83       	std	Y+7, r20	; 0x07
     9c2:	58 87       	std	Y+8, r21	; 0x08
     9c4:	89 e0       	ldi	r24, 0x09	; 9
     9c6:	e8 2e       	mov	r14, r24
     9c8:	f1 2c       	mov	r15, r1
     9ca:	ec 0e       	add	r14, r28
     9cc:	fd 1e       	adc	r15, r29
     9ce:	ce 01       	movw	r24, r28
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	b7 01       	movw	r22, r14
     9d4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     9d8:	8e 01       	movw	r16, r28
     9da:	0f 5e       	subi	r16, 0xEF	; 239
     9dc:	1f 4f       	sbci	r17, 0xFF	; 255
     9de:	ce 01       	movw	r24, r28
     9e0:	05 96       	adiw	r24, 0x05	; 5
     9e2:	b8 01       	movw	r22, r16
     9e4:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     9e8:	89 85       	ldd	r24, Y+9	; 0x09
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	40 f0       	brcs	.+16     	; 0x9fe <__ltsf2+0x56>
     9ee:	89 89       	ldd	r24, Y+17	; 0x11
     9f0:	82 30       	cpi	r24, 0x02	; 2
     9f2:	28 f0       	brcs	.+10     	; 0x9fe <__ltsf2+0x56>
     9f4:	c7 01       	movw	r24, r14
     9f6:	b8 01       	movw	r22, r16
     9f8:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fpcmp_parts_f>
     9fc:	01 c0       	rjmp	.+2      	; 0xa00 <__ltsf2+0x58>
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	68 96       	adiw	r28, 0x18	; 24
     a02:	e6 e0       	ldi	r30, 0x06	; 6
     a04:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__epilogue_restores__+0x18>

00000a08 <__floatsisf>:
     a08:	a8 e0       	ldi	r26, 0x08	; 8
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	ea e0       	ldi	r30, 0x0A	; 10
     a0e:	f5 e0       	ldi	r31, 0x05	; 5
     a10:	0c 94 2e 21 	jmp	0x425c	; 0x425c <__prologue_saves__+0x12>
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	89 83       	std	Y+1, r24	; 0x01
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	88 27       	eor	r24, r24
     a22:	b7 fd       	sbrc	r27, 7
     a24:	83 95       	inc	r24
     a26:	99 27       	eor	r25, r25
     a28:	aa 27       	eor	r26, r26
     a2a:	bb 27       	eor	r27, r27
     a2c:	b8 2e       	mov	r11, r24
     a2e:	21 15       	cp	r18, r1
     a30:	31 05       	cpc	r19, r1
     a32:	41 05       	cpc	r20, r1
     a34:	51 05       	cpc	r21, r1
     a36:	19 f4       	brne	.+6      	; 0xa3e <__floatsisf+0x36>
     a38:	82 e0       	ldi	r24, 0x02	; 2
     a3a:	89 83       	std	Y+1, r24	; 0x01
     a3c:	3a c0       	rjmp	.+116    	; 0xab2 <__floatsisf+0xaa>
     a3e:	88 23       	and	r24, r24
     a40:	a9 f0       	breq	.+42     	; 0xa6c <__floatsisf+0x64>
     a42:	20 30       	cpi	r18, 0x00	; 0
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	38 07       	cpc	r19, r24
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	48 07       	cpc	r20, r24
     a4c:	80 e8       	ldi	r24, 0x80	; 128
     a4e:	58 07       	cpc	r21, r24
     a50:	29 f4       	brne	.+10     	; 0xa5c <__floatsisf+0x54>
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	9f ec       	ldi	r25, 0xCF	; 207
     a5a:	30 c0       	rjmp	.+96     	; 0xabc <__floatsisf+0xb4>
     a5c:	ee 24       	eor	r14, r14
     a5e:	ff 24       	eor	r15, r15
     a60:	87 01       	movw	r16, r14
     a62:	e2 1a       	sub	r14, r18
     a64:	f3 0a       	sbc	r15, r19
     a66:	04 0b       	sbc	r16, r20
     a68:	15 0b       	sbc	r17, r21
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <__floatsisf+0x68>
     a6c:	79 01       	movw	r14, r18
     a6e:	8a 01       	movw	r16, r20
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__clzsi2>
     a8a:	01 97       	sbiw	r24, 0x01	; 1
     a8c:	18 16       	cp	r1, r24
     a8e:	19 06       	cpc	r1, r25
     a90:	84 f4       	brge	.+32     	; 0xab2 <__floatsisf+0xaa>
     a92:	08 2e       	mov	r0, r24
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__floatsisf+0x96>
     a96:	ee 0c       	add	r14, r14
     a98:	ff 1c       	adc	r15, r15
     a9a:	00 1f       	adc	r16, r16
     a9c:	11 1f       	adc	r17, r17
     a9e:	0a 94       	dec	r0
     aa0:	d2 f7       	brpl	.-12     	; 0xa96 <__floatsisf+0x8e>
     aa2:	ed 82       	std	Y+5, r14	; 0x05
     aa4:	fe 82       	std	Y+6, r15	; 0x06
     aa6:	0f 83       	std	Y+7, r16	; 0x07
     aa8:	18 87       	std	Y+8, r17	; 0x08
     aaa:	c8 1a       	sub	r12, r24
     aac:	d9 0a       	sbc	r13, r25
     aae:	dc 82       	std	Y+4, r13	; 0x04
     ab0:	cb 82       	std	Y+3, r12	; 0x03
     ab2:	ba 82       	std	Y+2, r11	; 0x02
     ab4:	ce 01       	movw	r24, r28
     ab6:	01 96       	adiw	r24, 0x01	; 1
     ab8:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__pack_f>
     abc:	28 96       	adiw	r28, 0x08	; 8
     abe:	e9 e0       	ldi	r30, 0x09	; 9
     ac0:	0c 94 4a 21 	jmp	0x4294	; 0x4294 <__epilogue_restores__+0x12>

00000ac4 <__fixsfsi>:
     ac4:	ac e0       	ldi	r26, 0x0C	; 12
     ac6:	b0 e0       	ldi	r27, 0x00	; 0
     ac8:	e8 e6       	ldi	r30, 0x68	; 104
     aca:	f5 e0       	ldi	r31, 0x05	; 5
     acc:	0c 94 35 21 	jmp	0x426a	; 0x426a <__prologue_saves__+0x20>
     ad0:	69 83       	std	Y+1, r22	; 0x01
     ad2:	7a 83       	std	Y+2, r23	; 0x02
     ad4:	8b 83       	std	Y+3, r24	; 0x03
     ad6:	9c 83       	std	Y+4, r25	; 0x04
     ad8:	ce 01       	movw	r24, r28
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	be 01       	movw	r22, r28
     ade:	6b 5f       	subi	r22, 0xFB	; 251
     ae0:	7f 4f       	sbci	r23, 0xFF	; 255
     ae2:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <__unpack_f>
     ae6:	8d 81       	ldd	r24, Y+5	; 0x05
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	61 f1       	breq	.+88     	; 0xb44 <__fixsfsi+0x80>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	50 f1       	brcs	.+84     	; 0xb44 <__fixsfsi+0x80>
     af0:	84 30       	cpi	r24, 0x04	; 4
     af2:	21 f4       	brne	.+8      	; 0xafc <__fixsfsi+0x38>
     af4:	8e 81       	ldd	r24, Y+6	; 0x06
     af6:	88 23       	and	r24, r24
     af8:	51 f1       	breq	.+84     	; 0xb4e <__fixsfsi+0x8a>
     afa:	2e c0       	rjmp	.+92     	; 0xb58 <__fixsfsi+0x94>
     afc:	2f 81       	ldd	r18, Y+7	; 0x07
     afe:	38 85       	ldd	r19, Y+8	; 0x08
     b00:	37 fd       	sbrc	r19, 7
     b02:	20 c0       	rjmp	.+64     	; 0xb44 <__fixsfsi+0x80>
     b04:	6e 81       	ldd	r22, Y+6	; 0x06
     b06:	2f 31       	cpi	r18, 0x1F	; 31
     b08:	31 05       	cpc	r19, r1
     b0a:	1c f0       	brlt	.+6      	; 0xb12 <__fixsfsi+0x4e>
     b0c:	66 23       	and	r22, r22
     b0e:	f9 f0       	breq	.+62     	; 0xb4e <__fixsfsi+0x8a>
     b10:	23 c0       	rjmp	.+70     	; 0xb58 <__fixsfsi+0x94>
     b12:	8e e1       	ldi	r24, 0x1E	; 30
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	82 1b       	sub	r24, r18
     b18:	93 0b       	sbc	r25, r19
     b1a:	29 85       	ldd	r18, Y+9	; 0x09
     b1c:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1e:	4b 85       	ldd	r20, Y+11	; 0x0b
     b20:	5c 85       	ldd	r21, Y+12	; 0x0c
     b22:	04 c0       	rjmp	.+8      	; 0xb2c <__fixsfsi+0x68>
     b24:	56 95       	lsr	r21
     b26:	47 95       	ror	r20
     b28:	37 95       	ror	r19
     b2a:	27 95       	ror	r18
     b2c:	8a 95       	dec	r24
     b2e:	d2 f7       	brpl	.-12     	; 0xb24 <__fixsfsi+0x60>
     b30:	66 23       	and	r22, r22
     b32:	b1 f0       	breq	.+44     	; 0xb60 <__fixsfsi+0x9c>
     b34:	50 95       	com	r21
     b36:	40 95       	com	r20
     b38:	30 95       	com	r19
     b3a:	21 95       	neg	r18
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	4f 4f       	sbci	r20, 0xFF	; 255
     b40:	5f 4f       	sbci	r21, 0xFF	; 255
     b42:	0e c0       	rjmp	.+28     	; 0xb60 <__fixsfsi+0x9c>
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	09 c0       	rjmp	.+18     	; 0xb60 <__fixsfsi+0x9c>
     b4e:	2f ef       	ldi	r18, 0xFF	; 255
     b50:	3f ef       	ldi	r19, 0xFF	; 255
     b52:	4f ef       	ldi	r20, 0xFF	; 255
     b54:	5f e7       	ldi	r21, 0x7F	; 127
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <__fixsfsi+0x9c>
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	50 e8       	ldi	r21, 0x80	; 128
     b60:	b9 01       	movw	r22, r18
     b62:	ca 01       	movw	r24, r20
     b64:	2c 96       	adiw	r28, 0x0c	; 12
     b66:	e2 e0       	ldi	r30, 0x02	; 2
     b68:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__epilogue_restores__+0x20>

00000b6c <__floatunsisf>:
     b6c:	a8 e0       	ldi	r26, 0x08	; 8
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	ec eb       	ldi	r30, 0xBC	; 188
     b72:	f5 e0       	ldi	r31, 0x05	; 5
     b74:	0c 94 2d 21 	jmp	0x425a	; 0x425a <__prologue_saves__+0x10>
     b78:	7b 01       	movw	r14, r22
     b7a:	8c 01       	movw	r16, r24
     b7c:	61 15       	cp	r22, r1
     b7e:	71 05       	cpc	r23, r1
     b80:	81 05       	cpc	r24, r1
     b82:	91 05       	cpc	r25, r1
     b84:	19 f4       	brne	.+6      	; 0xb8c <__floatunsisf+0x20>
     b86:	82 e0       	ldi	r24, 0x02	; 2
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	60 c0       	rjmp	.+192    	; 0xc4c <__floatunsisf+0xe0>
     b8c:	83 e0       	ldi	r24, 0x03	; 3
     b8e:	89 83       	std	Y+1, r24	; 0x01
     b90:	8e e1       	ldi	r24, 0x1E	; 30
     b92:	c8 2e       	mov	r12, r24
     b94:	d1 2c       	mov	r13, r1
     b96:	dc 82       	std	Y+4, r13	; 0x04
     b98:	cb 82       	std	Y+3, r12	; 0x03
     b9a:	ed 82       	std	Y+5, r14	; 0x05
     b9c:	fe 82       	std	Y+6, r15	; 0x06
     b9e:	0f 83       	std	Y+7, r16	; 0x07
     ba0:	18 87       	std	Y+8, r17	; 0x08
     ba2:	c8 01       	movw	r24, r16
     ba4:	b7 01       	movw	r22, r14
     ba6:	0e 94 ae 06 	call	0xd5c	; 0xd5c <__clzsi2>
     baa:	fc 01       	movw	r30, r24
     bac:	31 97       	sbiw	r30, 0x01	; 1
     bae:	f7 ff       	sbrs	r31, 7
     bb0:	3b c0       	rjmp	.+118    	; 0xc28 <__floatunsisf+0xbc>
     bb2:	22 27       	eor	r18, r18
     bb4:	33 27       	eor	r19, r19
     bb6:	2e 1b       	sub	r18, r30
     bb8:	3f 0b       	sbc	r19, r31
     bba:	57 01       	movw	r10, r14
     bbc:	68 01       	movw	r12, r16
     bbe:	02 2e       	mov	r0, r18
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <__floatunsisf+0x5e>
     bc2:	d6 94       	lsr	r13
     bc4:	c7 94       	ror	r12
     bc6:	b7 94       	ror	r11
     bc8:	a7 94       	ror	r10
     bca:	0a 94       	dec	r0
     bcc:	d2 f7       	brpl	.-12     	; 0xbc2 <__floatunsisf+0x56>
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	a0 e0       	ldi	r26, 0x00	; 0
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	04 c0       	rjmp	.+8      	; 0xbe8 <__floatunsisf+0x7c>
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	aa 1f       	adc	r26, r26
     be6:	bb 1f       	adc	r27, r27
     be8:	2a 95       	dec	r18
     bea:	d2 f7       	brpl	.-12     	; 0xbe0 <__floatunsisf+0x74>
     bec:	01 97       	sbiw	r24, 0x01	; 1
     bee:	a1 09       	sbc	r26, r1
     bf0:	b1 09       	sbc	r27, r1
     bf2:	8e 21       	and	r24, r14
     bf4:	9f 21       	and	r25, r15
     bf6:	a0 23       	and	r26, r16
     bf8:	b1 23       	and	r27, r17
     bfa:	00 97       	sbiw	r24, 0x00	; 0
     bfc:	a1 05       	cpc	r26, r1
     bfe:	b1 05       	cpc	r27, r1
     c00:	21 f0       	breq	.+8      	; 0xc0a <__floatunsisf+0x9e>
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	50 e0       	ldi	r21, 0x00	; 0
     c06:	60 e0       	ldi	r22, 0x00	; 0
     c08:	70 e0       	ldi	r23, 0x00	; 0
     c0a:	4a 29       	or	r20, r10
     c0c:	5b 29       	or	r21, r11
     c0e:	6c 29       	or	r22, r12
     c10:	7d 29       	or	r23, r13
     c12:	4d 83       	std	Y+5, r20	; 0x05
     c14:	5e 83       	std	Y+6, r21	; 0x06
     c16:	6f 83       	std	Y+7, r22	; 0x07
     c18:	78 87       	std	Y+8, r23	; 0x08
     c1a:	8e e1       	ldi	r24, 0x1E	; 30
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	8e 1b       	sub	r24, r30
     c20:	9f 0b       	sbc	r25, r31
     c22:	9c 83       	std	Y+4, r25	; 0x04
     c24:	8b 83       	std	Y+3, r24	; 0x03
     c26:	12 c0       	rjmp	.+36     	; 0xc4c <__floatunsisf+0xe0>
     c28:	30 97       	sbiw	r30, 0x00	; 0
     c2a:	81 f0       	breq	.+32     	; 0xc4c <__floatunsisf+0xe0>
     c2c:	0e 2e       	mov	r0, r30
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__floatunsisf+0xcc>
     c30:	ee 0c       	add	r14, r14
     c32:	ff 1c       	adc	r15, r15
     c34:	00 1f       	adc	r16, r16
     c36:	11 1f       	adc	r17, r17
     c38:	0a 94       	dec	r0
     c3a:	d2 f7       	brpl	.-12     	; 0xc30 <__floatunsisf+0xc4>
     c3c:	ed 82       	std	Y+5, r14	; 0x05
     c3e:	fe 82       	std	Y+6, r15	; 0x06
     c40:	0f 83       	std	Y+7, r16	; 0x07
     c42:	18 87       	std	Y+8, r17	; 0x08
     c44:	ce 1a       	sub	r12, r30
     c46:	df 0a       	sbc	r13, r31
     c48:	dc 82       	std	Y+4, r13	; 0x04
     c4a:	cb 82       	std	Y+3, r12	; 0x03
     c4c:	1a 82       	std	Y+2, r1	; 0x02
     c4e:	ce 01       	movw	r24, r28
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	0e 94 fd 06 	call	0xdfa	; 0xdfa <__pack_f>
     c56:	28 96       	adiw	r28, 0x08	; 8
     c58:	ea e0       	ldi	r30, 0x0A	; 10
     c5a:	0c 94 49 21 	jmp	0x4292	; 0x4292 <__epilogue_restores__+0x10>

00000c5e <__lshrdi3>:
     c5e:	ef 92       	push	r14
     c60:	ff 92       	push	r15
     c62:	0f 93       	push	r16
     c64:	df 93       	push	r29
     c66:	cf 93       	push	r28
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	60 97       	sbiw	r28, 0x10	; 16
     c6e:	0f b6       	in	r0, 0x3f	; 63
     c70:	f8 94       	cli
     c72:	de bf       	out	0x3e, r29	; 62
     c74:	0f be       	out	0x3f, r0	; 63
     c76:	cd bf       	out	0x3d, r28	; 61
     c78:	a8 2f       	mov	r26, r24
     c7a:	00 23       	and	r16, r16
     c7c:	09 f4       	brne	.+2      	; 0xc80 <__lshrdi3+0x22>
     c7e:	61 c0       	rjmp	.+194    	; 0xd42 <__lshrdi3+0xe4>
     c80:	7e 01       	movw	r14, r28
     c82:	08 94       	sec
     c84:	e1 1c       	adc	r14, r1
     c86:	f1 1c       	adc	r15, r1
     c88:	88 e0       	ldi	r24, 0x08	; 8
     c8a:	f7 01       	movw	r30, r14
     c8c:	11 92       	st	Z+, r1
     c8e:	8a 95       	dec	r24
     c90:	e9 f7       	brne	.-6      	; 0xc8c <__lshrdi3+0x2e>
     c92:	29 83       	std	Y+1, r18	; 0x01
     c94:	3a 83       	std	Y+2, r19	; 0x02
     c96:	4b 83       	std	Y+3, r20	; 0x03
     c98:	5c 83       	std	Y+4, r21	; 0x04
     c9a:	6d 83       	std	Y+5, r22	; 0x05
     c9c:	7e 83       	std	Y+6, r23	; 0x06
     c9e:	af 83       	std	Y+7, r26	; 0x07
     ca0:	98 87       	std	Y+8, r25	; 0x08
     ca2:	80 e2       	ldi	r24, 0x20	; 32
     ca4:	80 1b       	sub	r24, r16
     ca6:	e8 2f       	mov	r30, r24
     ca8:	ff 27       	eor	r31, r31
     caa:	e7 fd       	sbrc	r30, 7
     cac:	f0 95       	com	r31
     cae:	4d 81       	ldd	r20, Y+5	; 0x05
     cb0:	5e 81       	ldd	r21, Y+6	; 0x06
     cb2:	6f 81       	ldd	r22, Y+7	; 0x07
     cb4:	78 85       	ldd	r23, Y+8	; 0x08
     cb6:	18 16       	cp	r1, r24
     cb8:	84 f0       	brlt	.+32     	; 0xcda <__lshrdi3+0x7c>
     cba:	1d 86       	std	Y+13, r1	; 0x0d
     cbc:	1e 86       	std	Y+14, r1	; 0x0e
     cbe:	1f 86       	std	Y+15, r1	; 0x0f
     cc0:	18 8a       	std	Y+16, r1	; 0x10
     cc2:	88 27       	eor	r24, r24
     cc4:	99 27       	eor	r25, r25
     cc6:	8e 1b       	sub	r24, r30
     cc8:	9f 0b       	sbc	r25, r31
     cca:	04 c0       	rjmp	.+8      	; 0xcd4 <__lshrdi3+0x76>
     ccc:	76 95       	lsr	r23
     cce:	67 95       	ror	r22
     cd0:	57 95       	ror	r21
     cd2:	47 95       	ror	r20
     cd4:	8a 95       	dec	r24
     cd6:	d2 f7       	brpl	.-12     	; 0xccc <__lshrdi3+0x6e>
     cd8:	28 c0       	rjmp	.+80     	; 0xd2a <__lshrdi3+0xcc>
     cda:	20 2f       	mov	r18, r16
     cdc:	33 27       	eor	r19, r19
     cde:	27 fd       	sbrc	r18, 7
     ce0:	30 95       	com	r19
     ce2:	db 01       	movw	r26, r22
     ce4:	ca 01       	movw	r24, r20
     ce6:	02 2e       	mov	r0, r18
     ce8:	04 c0       	rjmp	.+8      	; 0xcf2 <__lshrdi3+0x94>
     cea:	b6 95       	lsr	r27
     cec:	a7 95       	ror	r26
     cee:	97 95       	ror	r25
     cf0:	87 95       	ror	r24
     cf2:	0a 94       	dec	r0
     cf4:	d2 f7       	brpl	.-12     	; 0xcea <__lshrdi3+0x8c>
     cf6:	8d 87       	std	Y+13, r24	; 0x0d
     cf8:	9e 87       	std	Y+14, r25	; 0x0e
     cfa:	af 87       	std	Y+15, r26	; 0x0f
     cfc:	b8 8b       	std	Y+16, r27	; 0x10
     cfe:	04 c0       	rjmp	.+8      	; 0xd08 <__lshrdi3+0xaa>
     d00:	44 0f       	add	r20, r20
     d02:	55 1f       	adc	r21, r21
     d04:	66 1f       	adc	r22, r22
     d06:	77 1f       	adc	r23, r23
     d08:	ea 95       	dec	r30
     d0a:	d2 f7       	brpl	.-12     	; 0xd00 <__lshrdi3+0xa2>
     d0c:	89 81       	ldd	r24, Y+1	; 0x01
     d0e:	9a 81       	ldd	r25, Y+2	; 0x02
     d10:	ab 81       	ldd	r26, Y+3	; 0x03
     d12:	bc 81       	ldd	r27, Y+4	; 0x04
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__lshrdi3+0xc0>
     d16:	b6 95       	lsr	r27
     d18:	a7 95       	ror	r26
     d1a:	97 95       	ror	r25
     d1c:	87 95       	ror	r24
     d1e:	2a 95       	dec	r18
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__lshrdi3+0xb8>
     d22:	48 2b       	or	r20, r24
     d24:	59 2b       	or	r21, r25
     d26:	6a 2b       	or	r22, r26
     d28:	7b 2b       	or	r23, r27
     d2a:	49 87       	std	Y+9, r20	; 0x09
     d2c:	5a 87       	std	Y+10, r21	; 0x0a
     d2e:	6b 87       	std	Y+11, r22	; 0x0b
     d30:	7c 87       	std	Y+12, r23	; 0x0c
     d32:	29 85       	ldd	r18, Y+9	; 0x09
     d34:	3a 85       	ldd	r19, Y+10	; 0x0a
     d36:	4b 85       	ldd	r20, Y+11	; 0x0b
     d38:	5c 85       	ldd	r21, Y+12	; 0x0c
     d3a:	6d 85       	ldd	r22, Y+13	; 0x0d
     d3c:	7e 85       	ldd	r23, Y+14	; 0x0e
     d3e:	af 85       	ldd	r26, Y+15	; 0x0f
     d40:	98 89       	ldd	r25, Y+16	; 0x10
     d42:	8a 2f       	mov	r24, r26
     d44:	60 96       	adiw	r28, 0x10	; 16
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	cf 91       	pop	r28
     d52:	df 91       	pop	r29
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	08 95       	ret

00000d5c <__clzsi2>:
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	7b 01       	movw	r14, r22
     d66:	8c 01       	movw	r16, r24
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	e8 16       	cp	r14, r24
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	f8 06       	cpc	r15, r24
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	08 07       	cpc	r16, r24
     d74:	80 e0       	ldi	r24, 0x00	; 0
     d76:	18 07       	cpc	r17, r24
     d78:	88 f4       	brcc	.+34     	; 0xd9c <__clzsi2+0x40>
     d7a:	8f ef       	ldi	r24, 0xFF	; 255
     d7c:	e8 16       	cp	r14, r24
     d7e:	f1 04       	cpc	r15, r1
     d80:	01 05       	cpc	r16, r1
     d82:	11 05       	cpc	r17, r1
     d84:	31 f0       	breq	.+12     	; 0xd92 <__clzsi2+0x36>
     d86:	28 f0       	brcs	.+10     	; 0xd92 <__clzsi2+0x36>
     d88:	88 e0       	ldi	r24, 0x08	; 8
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
     d8e:	b0 e0       	ldi	r27, 0x00	; 0
     d90:	17 c0       	rjmp	.+46     	; 0xdc0 <__clzsi2+0x64>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e0       	ldi	r26, 0x00	; 0
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	12 c0       	rjmp	.+36     	; 0xdc0 <__clzsi2+0x64>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
     d9e:	e8 16       	cp	r14, r24
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	f8 06       	cpc	r15, r24
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	08 07       	cpc	r16, r24
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	18 07       	cpc	r17, r24
     dac:	28 f0       	brcs	.+10     	; 0xdb8 <__clzsi2+0x5c>
     dae:	88 e1       	ldi	r24, 0x18	; 24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <__clzsi2+0x64>
     db8:	80 e1       	ldi	r24, 0x10	; 16
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	a0 e0       	ldi	r26, 0x00	; 0
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	20 e2       	ldi	r18, 0x20	; 32
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	40 e0       	ldi	r20, 0x00	; 0
     dc6:	50 e0       	ldi	r21, 0x00	; 0
     dc8:	28 1b       	sub	r18, r24
     dca:	39 0b       	sbc	r19, r25
     dcc:	4a 0b       	sbc	r20, r26
     dce:	5b 0b       	sbc	r21, r27
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <__clzsi2+0x7e>
     dd2:	16 95       	lsr	r17
     dd4:	07 95       	ror	r16
     dd6:	f7 94       	ror	r15
     dd8:	e7 94       	ror	r14
     dda:	8a 95       	dec	r24
     ddc:	d2 f7       	brpl	.-12     	; 0xdd2 <__clzsi2+0x76>
     dde:	f7 01       	movw	r30, r14
     de0:	ea 58       	subi	r30, 0x8A	; 138
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	80 81       	ld	r24, Z
     de6:	28 1b       	sub	r18, r24
     de8:	31 09       	sbc	r19, r1
     dea:	41 09       	sbc	r20, r1
     dec:	51 09       	sbc	r21, r1
     dee:	c9 01       	movw	r24, r18
     df0:	1f 91       	pop	r17
     df2:	0f 91       	pop	r16
     df4:	ff 90       	pop	r15
     df6:	ef 90       	pop	r14
     df8:	08 95       	ret

00000dfa <__pack_f>:
     dfa:	df 92       	push	r13
     dfc:	ef 92       	push	r14
     dfe:	ff 92       	push	r15
     e00:	0f 93       	push	r16
     e02:	1f 93       	push	r17
     e04:	fc 01       	movw	r30, r24
     e06:	e4 80       	ldd	r14, Z+4	; 0x04
     e08:	f5 80       	ldd	r15, Z+5	; 0x05
     e0a:	06 81       	ldd	r16, Z+6	; 0x06
     e0c:	17 81       	ldd	r17, Z+7	; 0x07
     e0e:	d1 80       	ldd	r13, Z+1	; 0x01
     e10:	80 81       	ld	r24, Z
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	48 f4       	brcc	.+18     	; 0xe28 <__pack_f+0x2e>
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	a0 e1       	ldi	r26, 0x10	; 16
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e8 2a       	or	r14, r24
     e20:	f9 2a       	or	r15, r25
     e22:	0a 2b       	or	r16, r26
     e24:	1b 2b       	or	r17, r27
     e26:	a5 c0       	rjmp	.+330    	; 0xf72 <__pack_f+0x178>
     e28:	84 30       	cpi	r24, 0x04	; 4
     e2a:	09 f4       	brne	.+2      	; 0xe2e <__pack_f+0x34>
     e2c:	9f c0       	rjmp	.+318    	; 0xf6c <__pack_f+0x172>
     e2e:	82 30       	cpi	r24, 0x02	; 2
     e30:	21 f4       	brne	.+8      	; 0xe3a <__pack_f+0x40>
     e32:	ee 24       	eor	r14, r14
     e34:	ff 24       	eor	r15, r15
     e36:	87 01       	movw	r16, r14
     e38:	05 c0       	rjmp	.+10     	; 0xe44 <__pack_f+0x4a>
     e3a:	e1 14       	cp	r14, r1
     e3c:	f1 04       	cpc	r15, r1
     e3e:	01 05       	cpc	r16, r1
     e40:	11 05       	cpc	r17, r1
     e42:	19 f4       	brne	.+6      	; 0xe4a <__pack_f+0x50>
     e44:	e0 e0       	ldi	r30, 0x00	; 0
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	96 c0       	rjmp	.+300    	; 0xf76 <__pack_f+0x17c>
     e4a:	62 81       	ldd	r22, Z+2	; 0x02
     e4c:	73 81       	ldd	r23, Z+3	; 0x03
     e4e:	9f ef       	ldi	r25, 0xFF	; 255
     e50:	62 38       	cpi	r22, 0x82	; 130
     e52:	79 07       	cpc	r23, r25
     e54:	0c f0       	brlt	.+2      	; 0xe58 <__pack_f+0x5e>
     e56:	5b c0       	rjmp	.+182    	; 0xf0e <__pack_f+0x114>
     e58:	22 e8       	ldi	r18, 0x82	; 130
     e5a:	3f ef       	ldi	r19, 0xFF	; 255
     e5c:	26 1b       	sub	r18, r22
     e5e:	37 0b       	sbc	r19, r23
     e60:	2a 31       	cpi	r18, 0x1A	; 26
     e62:	31 05       	cpc	r19, r1
     e64:	2c f0       	brlt	.+10     	; 0xe70 <__pack_f+0x76>
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e0       	ldi	r20, 0x00	; 0
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	2a c0       	rjmp	.+84     	; 0xec4 <__pack_f+0xca>
     e70:	b8 01       	movw	r22, r16
     e72:	a7 01       	movw	r20, r14
     e74:	02 2e       	mov	r0, r18
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <__pack_f+0x86>
     e78:	76 95       	lsr	r23
     e7a:	67 95       	ror	r22
     e7c:	57 95       	ror	r21
     e7e:	47 95       	ror	r20
     e80:	0a 94       	dec	r0
     e82:	d2 f7       	brpl	.-12     	; 0xe78 <__pack_f+0x7e>
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a0 e0       	ldi	r26, 0x00	; 0
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <__pack_f+0x9c>
     e8e:	88 0f       	add	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	aa 1f       	adc	r26, r26
     e94:	bb 1f       	adc	r27, r27
     e96:	2a 95       	dec	r18
     e98:	d2 f7       	brpl	.-12     	; 0xe8e <__pack_f+0x94>
     e9a:	01 97       	sbiw	r24, 0x01	; 1
     e9c:	a1 09       	sbc	r26, r1
     e9e:	b1 09       	sbc	r27, r1
     ea0:	8e 21       	and	r24, r14
     ea2:	9f 21       	and	r25, r15
     ea4:	a0 23       	and	r26, r16
     ea6:	b1 23       	and	r27, r17
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	a1 05       	cpc	r26, r1
     eac:	b1 05       	cpc	r27, r1
     eae:	21 f0       	breq	.+8      	; 0xeb8 <__pack_f+0xbe>
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	a0 e0       	ldi	r26, 0x00	; 0
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	9a 01       	movw	r18, r20
     eba:	ab 01       	movw	r20, r22
     ebc:	28 2b       	or	r18, r24
     ebe:	39 2b       	or	r19, r25
     ec0:	4a 2b       	or	r20, r26
     ec2:	5b 2b       	or	r21, r27
     ec4:	da 01       	movw	r26, r20
     ec6:	c9 01       	movw	r24, r18
     ec8:	8f 77       	andi	r24, 0x7F	; 127
     eca:	90 70       	andi	r25, 0x00	; 0
     ecc:	a0 70       	andi	r26, 0x00	; 0
     ece:	b0 70       	andi	r27, 0x00	; 0
     ed0:	80 34       	cpi	r24, 0x40	; 64
     ed2:	91 05       	cpc	r25, r1
     ed4:	a1 05       	cpc	r26, r1
     ed6:	b1 05       	cpc	r27, r1
     ed8:	39 f4       	brne	.+14     	; 0xee8 <__pack_f+0xee>
     eda:	27 ff       	sbrs	r18, 7
     edc:	09 c0       	rjmp	.+18     	; 0xef0 <__pack_f+0xf6>
     ede:	20 5c       	subi	r18, 0xC0	; 192
     ee0:	3f 4f       	sbci	r19, 0xFF	; 255
     ee2:	4f 4f       	sbci	r20, 0xFF	; 255
     ee4:	5f 4f       	sbci	r21, 0xFF	; 255
     ee6:	04 c0       	rjmp	.+8      	; 0xef0 <__pack_f+0xf6>
     ee8:	21 5c       	subi	r18, 0xC1	; 193
     eea:	3f 4f       	sbci	r19, 0xFF	; 255
     eec:	4f 4f       	sbci	r20, 0xFF	; 255
     eee:	5f 4f       	sbci	r21, 0xFF	; 255
     ef0:	e0 e0       	ldi	r30, 0x00	; 0
     ef2:	f0 e0       	ldi	r31, 0x00	; 0
     ef4:	20 30       	cpi	r18, 0x00	; 0
     ef6:	a0 e0       	ldi	r26, 0x00	; 0
     ef8:	3a 07       	cpc	r19, r26
     efa:	a0 e0       	ldi	r26, 0x00	; 0
     efc:	4a 07       	cpc	r20, r26
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	5a 07       	cpc	r21, r26
     f02:	10 f0       	brcs	.+4      	; 0xf08 <__pack_f+0x10e>
     f04:	e1 e0       	ldi	r30, 0x01	; 1
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	79 01       	movw	r14, r18
     f0a:	8a 01       	movw	r16, r20
     f0c:	27 c0       	rjmp	.+78     	; 0xf5c <__pack_f+0x162>
     f0e:	60 38       	cpi	r22, 0x80	; 128
     f10:	71 05       	cpc	r23, r1
     f12:	64 f5       	brge	.+88     	; 0xf6c <__pack_f+0x172>
     f14:	fb 01       	movw	r30, r22
     f16:	e1 58       	subi	r30, 0x81	; 129
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	d8 01       	movw	r26, r16
     f1c:	c7 01       	movw	r24, r14
     f1e:	8f 77       	andi	r24, 0x7F	; 127
     f20:	90 70       	andi	r25, 0x00	; 0
     f22:	a0 70       	andi	r26, 0x00	; 0
     f24:	b0 70       	andi	r27, 0x00	; 0
     f26:	80 34       	cpi	r24, 0x40	; 64
     f28:	91 05       	cpc	r25, r1
     f2a:	a1 05       	cpc	r26, r1
     f2c:	b1 05       	cpc	r27, r1
     f2e:	39 f4       	brne	.+14     	; 0xf3e <__pack_f+0x144>
     f30:	e7 fe       	sbrs	r14, 7
     f32:	0d c0       	rjmp	.+26     	; 0xf4e <__pack_f+0x154>
     f34:	80 e4       	ldi	r24, 0x40	; 64
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <__pack_f+0x14c>
     f3e:	8f e3       	ldi	r24, 0x3F	; 63
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	a0 e0       	ldi	r26, 0x00	; 0
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e8 0e       	add	r14, r24
     f48:	f9 1e       	adc	r15, r25
     f4a:	0a 1f       	adc	r16, r26
     f4c:	1b 1f       	adc	r17, r27
     f4e:	17 ff       	sbrs	r17, 7
     f50:	05 c0       	rjmp	.+10     	; 0xf5c <__pack_f+0x162>
     f52:	16 95       	lsr	r17
     f54:	07 95       	ror	r16
     f56:	f7 94       	ror	r15
     f58:	e7 94       	ror	r14
     f5a:	31 96       	adiw	r30, 0x01	; 1
     f5c:	87 e0       	ldi	r24, 0x07	; 7
     f5e:	16 95       	lsr	r17
     f60:	07 95       	ror	r16
     f62:	f7 94       	ror	r15
     f64:	e7 94       	ror	r14
     f66:	8a 95       	dec	r24
     f68:	d1 f7       	brne	.-12     	; 0xf5e <__pack_f+0x164>
     f6a:	05 c0       	rjmp	.+10     	; 0xf76 <__pack_f+0x17c>
     f6c:	ee 24       	eor	r14, r14
     f6e:	ff 24       	eor	r15, r15
     f70:	87 01       	movw	r16, r14
     f72:	ef ef       	ldi	r30, 0xFF	; 255
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	6e 2f       	mov	r22, r30
     f78:	67 95       	ror	r22
     f7a:	66 27       	eor	r22, r22
     f7c:	67 95       	ror	r22
     f7e:	90 2f       	mov	r25, r16
     f80:	9f 77       	andi	r25, 0x7F	; 127
     f82:	d7 94       	ror	r13
     f84:	dd 24       	eor	r13, r13
     f86:	d7 94       	ror	r13
     f88:	8e 2f       	mov	r24, r30
     f8a:	86 95       	lsr	r24
     f8c:	49 2f       	mov	r20, r25
     f8e:	46 2b       	or	r20, r22
     f90:	58 2f       	mov	r21, r24
     f92:	5d 29       	or	r21, r13
     f94:	b7 01       	movw	r22, r14
     f96:	ca 01       	movw	r24, r20
     f98:	1f 91       	pop	r17
     f9a:	0f 91       	pop	r16
     f9c:	ff 90       	pop	r15
     f9e:	ef 90       	pop	r14
     fa0:	df 90       	pop	r13
     fa2:	08 95       	ret

00000fa4 <__unpack_f>:
     fa4:	fc 01       	movw	r30, r24
     fa6:	db 01       	movw	r26, r22
     fa8:	40 81       	ld	r20, Z
     faa:	51 81       	ldd	r21, Z+1	; 0x01
     fac:	22 81       	ldd	r18, Z+2	; 0x02
     fae:	62 2f       	mov	r22, r18
     fb0:	6f 77       	andi	r22, 0x7F	; 127
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	22 1f       	adc	r18, r18
     fb6:	22 27       	eor	r18, r18
     fb8:	22 1f       	adc	r18, r18
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	89 2f       	mov	r24, r25
     fbe:	88 0f       	add	r24, r24
     fc0:	82 2b       	or	r24, r18
     fc2:	28 2f       	mov	r18, r24
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	99 1f       	adc	r25, r25
     fc8:	99 27       	eor	r25, r25
     fca:	99 1f       	adc	r25, r25
     fcc:	11 96       	adiw	r26, 0x01	; 1
     fce:	9c 93       	st	X, r25
     fd0:	11 97       	sbiw	r26, 0x01	; 1
     fd2:	21 15       	cp	r18, r1
     fd4:	31 05       	cpc	r19, r1
     fd6:	a9 f5       	brne	.+106    	; 0x1042 <__unpack_f+0x9e>
     fd8:	41 15       	cp	r20, r1
     fda:	51 05       	cpc	r21, r1
     fdc:	61 05       	cpc	r22, r1
     fde:	71 05       	cpc	r23, r1
     fe0:	11 f4       	brne	.+4      	; 0xfe6 <__unpack_f+0x42>
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	37 c0       	rjmp	.+110    	; 0x1054 <__unpack_f+0xb0>
     fe6:	82 e8       	ldi	r24, 0x82	; 130
     fe8:	9f ef       	ldi	r25, 0xFF	; 255
     fea:	13 96       	adiw	r26, 0x03	; 3
     fec:	9c 93       	st	X, r25
     fee:	8e 93       	st	-X, r24
     ff0:	12 97       	sbiw	r26, 0x02	; 2
     ff2:	9a 01       	movw	r18, r20
     ff4:	ab 01       	movw	r20, r22
     ff6:	67 e0       	ldi	r22, 0x07	; 7
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	55 1f       	adc	r21, r21
    1000:	6a 95       	dec	r22
    1002:	d1 f7       	brne	.-12     	; 0xff8 <__unpack_f+0x54>
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	8c 93       	st	X, r24
    1008:	0d c0       	rjmp	.+26     	; 0x1024 <__unpack_f+0x80>
    100a:	22 0f       	add	r18, r18
    100c:	33 1f       	adc	r19, r19
    100e:	44 1f       	adc	r20, r20
    1010:	55 1f       	adc	r21, r21
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	8d 91       	ld	r24, X+
    1016:	9c 91       	ld	r25, X
    1018:	13 97       	sbiw	r26, 0x03	; 3
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	13 96       	adiw	r26, 0x03	; 3
    101e:	9c 93       	st	X, r25
    1020:	8e 93       	st	-X, r24
    1022:	12 97       	sbiw	r26, 0x02	; 2
    1024:	20 30       	cpi	r18, 0x00	; 0
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	38 07       	cpc	r19, r24
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	48 07       	cpc	r20, r24
    102e:	80 e4       	ldi	r24, 0x40	; 64
    1030:	58 07       	cpc	r21, r24
    1032:	58 f3       	brcs	.-42     	; 0x100a <__unpack_f+0x66>
    1034:	14 96       	adiw	r26, 0x04	; 4
    1036:	2d 93       	st	X+, r18
    1038:	3d 93       	st	X+, r19
    103a:	4d 93       	st	X+, r20
    103c:	5c 93       	st	X, r21
    103e:	17 97       	sbiw	r26, 0x07	; 7
    1040:	08 95       	ret
    1042:	2f 3f       	cpi	r18, 0xFF	; 255
    1044:	31 05       	cpc	r19, r1
    1046:	79 f4       	brne	.+30     	; 0x1066 <__unpack_f+0xc2>
    1048:	41 15       	cp	r20, r1
    104a:	51 05       	cpc	r21, r1
    104c:	61 05       	cpc	r22, r1
    104e:	71 05       	cpc	r23, r1
    1050:	19 f4       	brne	.+6      	; 0x1058 <__unpack_f+0xb4>
    1052:	84 e0       	ldi	r24, 0x04	; 4
    1054:	8c 93       	st	X, r24
    1056:	08 95       	ret
    1058:	64 ff       	sbrs	r22, 4
    105a:	03 c0       	rjmp	.+6      	; 0x1062 <__unpack_f+0xbe>
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	8c 93       	st	X, r24
    1060:	12 c0       	rjmp	.+36     	; 0x1086 <__unpack_f+0xe2>
    1062:	1c 92       	st	X, r1
    1064:	10 c0       	rjmp	.+32     	; 0x1086 <__unpack_f+0xe2>
    1066:	2f 57       	subi	r18, 0x7F	; 127
    1068:	30 40       	sbci	r19, 0x00	; 0
    106a:	13 96       	adiw	r26, 0x03	; 3
    106c:	3c 93       	st	X, r19
    106e:	2e 93       	st	-X, r18
    1070:	12 97       	sbiw	r26, 0x02	; 2
    1072:	83 e0       	ldi	r24, 0x03	; 3
    1074:	8c 93       	st	X, r24
    1076:	87 e0       	ldi	r24, 0x07	; 7
    1078:	44 0f       	add	r20, r20
    107a:	55 1f       	adc	r21, r21
    107c:	66 1f       	adc	r22, r22
    107e:	77 1f       	adc	r23, r23
    1080:	8a 95       	dec	r24
    1082:	d1 f7       	brne	.-12     	; 0x1078 <__unpack_f+0xd4>
    1084:	70 64       	ori	r23, 0x40	; 64
    1086:	14 96       	adiw	r26, 0x04	; 4
    1088:	4d 93       	st	X+, r20
    108a:	5d 93       	st	X+, r21
    108c:	6d 93       	st	X+, r22
    108e:	7c 93       	st	X, r23
    1090:	17 97       	sbiw	r26, 0x07	; 7
    1092:	08 95       	ret

00001094 <__fpcmp_parts_f>:
    1094:	1f 93       	push	r17
    1096:	dc 01       	movw	r26, r24
    1098:	fb 01       	movw	r30, r22
    109a:	9c 91       	ld	r25, X
    109c:	92 30       	cpi	r25, 0x02	; 2
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <__fpcmp_parts_f+0xe>
    10a0:	47 c0       	rjmp	.+142    	; 0x1130 <__fpcmp_parts_f+0x9c>
    10a2:	80 81       	ld	r24, Z
    10a4:	82 30       	cpi	r24, 0x02	; 2
    10a6:	08 f4       	brcc	.+2      	; 0x10aa <__fpcmp_parts_f+0x16>
    10a8:	43 c0       	rjmp	.+134    	; 0x1130 <__fpcmp_parts_f+0x9c>
    10aa:	94 30       	cpi	r25, 0x04	; 4
    10ac:	51 f4       	brne	.+20     	; 0x10c2 <__fpcmp_parts_f+0x2e>
    10ae:	11 96       	adiw	r26, 0x01	; 1
    10b0:	1c 91       	ld	r17, X
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	99 f5       	brne	.+102    	; 0x111c <__fpcmp_parts_f+0x88>
    10b6:	81 81       	ldd	r24, Z+1	; 0x01
    10b8:	68 2f       	mov	r22, r24
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	61 1b       	sub	r22, r17
    10be:	71 09       	sbc	r23, r1
    10c0:	3f c0       	rjmp	.+126    	; 0x1140 <__fpcmp_parts_f+0xac>
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	21 f0       	breq	.+8      	; 0x10ce <__fpcmp_parts_f+0x3a>
    10c6:	92 30       	cpi	r25, 0x02	; 2
    10c8:	31 f4       	brne	.+12     	; 0x10d6 <__fpcmp_parts_f+0x42>
    10ca:	82 30       	cpi	r24, 0x02	; 2
    10cc:	b9 f1       	breq	.+110    	; 0x113c <__fpcmp_parts_f+0xa8>
    10ce:	81 81       	ldd	r24, Z+1	; 0x01
    10d0:	88 23       	and	r24, r24
    10d2:	89 f1       	breq	.+98     	; 0x1136 <__fpcmp_parts_f+0xa2>
    10d4:	2d c0       	rjmp	.+90     	; 0x1130 <__fpcmp_parts_f+0x9c>
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	1c 91       	ld	r17, X
    10da:	11 97       	sbiw	r26, 0x01	; 1
    10dc:	82 30       	cpi	r24, 0x02	; 2
    10de:	f1 f0       	breq	.+60     	; 0x111c <__fpcmp_parts_f+0x88>
    10e0:	81 81       	ldd	r24, Z+1	; 0x01
    10e2:	18 17       	cp	r17, r24
    10e4:	d9 f4       	brne	.+54     	; 0x111c <__fpcmp_parts_f+0x88>
    10e6:	12 96       	adiw	r26, 0x02	; 2
    10e8:	2d 91       	ld	r18, X+
    10ea:	3c 91       	ld	r19, X
    10ec:	13 97       	sbiw	r26, 0x03	; 3
    10ee:	82 81       	ldd	r24, Z+2	; 0x02
    10f0:	93 81       	ldd	r25, Z+3	; 0x03
    10f2:	82 17       	cp	r24, r18
    10f4:	93 07       	cpc	r25, r19
    10f6:	94 f0       	brlt	.+36     	; 0x111c <__fpcmp_parts_f+0x88>
    10f8:	28 17       	cp	r18, r24
    10fa:	39 07       	cpc	r19, r25
    10fc:	bc f0       	brlt	.+46     	; 0x112c <__fpcmp_parts_f+0x98>
    10fe:	14 96       	adiw	r26, 0x04	; 4
    1100:	8d 91       	ld	r24, X+
    1102:	9d 91       	ld	r25, X+
    1104:	0d 90       	ld	r0, X+
    1106:	bc 91       	ld	r27, X
    1108:	a0 2d       	mov	r26, r0
    110a:	24 81       	ldd	r18, Z+4	; 0x04
    110c:	35 81       	ldd	r19, Z+5	; 0x05
    110e:	46 81       	ldd	r20, Z+6	; 0x06
    1110:	57 81       	ldd	r21, Z+7	; 0x07
    1112:	28 17       	cp	r18, r24
    1114:	39 07       	cpc	r19, r25
    1116:	4a 07       	cpc	r20, r26
    1118:	5b 07       	cpc	r21, r27
    111a:	18 f4       	brcc	.+6      	; 0x1122 <__fpcmp_parts_f+0x8e>
    111c:	11 23       	and	r17, r17
    111e:	41 f0       	breq	.+16     	; 0x1130 <__fpcmp_parts_f+0x9c>
    1120:	0a c0       	rjmp	.+20     	; 0x1136 <__fpcmp_parts_f+0xa2>
    1122:	82 17       	cp	r24, r18
    1124:	93 07       	cpc	r25, r19
    1126:	a4 07       	cpc	r26, r20
    1128:	b5 07       	cpc	r27, r21
    112a:	40 f4       	brcc	.+16     	; 0x113c <__fpcmp_parts_f+0xa8>
    112c:	11 23       	and	r17, r17
    112e:	19 f0       	breq	.+6      	; 0x1136 <__fpcmp_parts_f+0xa2>
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	05 c0       	rjmp	.+10     	; 0x1140 <__fpcmp_parts_f+0xac>
    1136:	6f ef       	ldi	r22, 0xFF	; 255
    1138:	7f ef       	ldi	r23, 0xFF	; 255
    113a:	02 c0       	rjmp	.+4      	; 0x1140 <__fpcmp_parts_f+0xac>
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	cb 01       	movw	r24, r22
    1142:	1f 91       	pop	r17
    1144:	08 95       	ret

00001146 <GPIO_setupPinDirection>:
/*
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	00 d0       	rcall	.+0      	; 0x114c <GPIO_setupPinDirection+0x6>
    114c:	00 d0       	rcall	.+0      	; 0x114e <GPIO_setupPinDirection+0x8>
    114e:	0f 92       	push	r0
    1150:	cd b7       	in	r28, 0x3d	; 61
    1152:	de b7       	in	r29, 0x3e	; 62
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	6a 83       	std	Y+2, r22	; 0x02
    1158:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	88 30       	cpi	r24, 0x08	; 8
    115e:	08 f0       	brcs	.+2      	; 0x1162 <GPIO_setupPinDirection+0x1c>
    1160:	d5 c0       	rjmp	.+426    	; 0x130c <GPIO_setupPinDirection+0x1c6>
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	84 30       	cpi	r24, 0x04	; 4
    1166:	08 f0       	brcs	.+2      	; 0x116a <GPIO_setupPinDirection+0x24>
    1168:	d1 c0       	rjmp	.+418    	; 0x130c <GPIO_setupPinDirection+0x1c6>
	{
		/* Setup the pin direction as required */
		switch(port_num)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3d 83       	std	Y+5, r19	; 0x05
    1172:	2c 83       	std	Y+4, r18	; 0x04
    1174:	8c 81       	ldd	r24, Y+4	; 0x04
    1176:	9d 81       	ldd	r25, Y+5	; 0x05
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	09 f4       	brne	.+2      	; 0x1180 <GPIO_setupPinDirection+0x3a>
    117e:	43 c0       	rjmp	.+134    	; 0x1206 <GPIO_setupPinDirection+0xc0>
    1180:	2c 81       	ldd	r18, Y+4	; 0x04
    1182:	3d 81       	ldd	r19, Y+5	; 0x05
    1184:	22 30       	cpi	r18, 0x02	; 2
    1186:	31 05       	cpc	r19, r1
    1188:	2c f4       	brge	.+10     	; 0x1194 <GPIO_setupPinDirection+0x4e>
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	9d 81       	ldd	r25, Y+5	; 0x05
    118e:	00 97       	sbiw	r24, 0x00	; 0
    1190:	71 f0       	breq	.+28     	; 0x11ae <GPIO_setupPinDirection+0x68>
    1192:	bc c0       	rjmp	.+376    	; 0x130c <GPIO_setupPinDirection+0x1c6>
    1194:	2c 81       	ldd	r18, Y+4	; 0x04
    1196:	3d 81       	ldd	r19, Y+5	; 0x05
    1198:	22 30       	cpi	r18, 0x02	; 2
    119a:	31 05       	cpc	r19, r1
    119c:	09 f4       	brne	.+2      	; 0x11a0 <GPIO_setupPinDirection+0x5a>
    119e:	5f c0       	rjmp	.+190    	; 0x125e <GPIO_setupPinDirection+0x118>
    11a0:	8c 81       	ldd	r24, Y+4	; 0x04
    11a2:	9d 81       	ldd	r25, Y+5	; 0x05
    11a4:	83 30       	cpi	r24, 0x03	; 3
    11a6:	91 05       	cpc	r25, r1
    11a8:	09 f4       	brne	.+2      	; 0x11ac <GPIO_setupPinDirection+0x66>
    11aa:	85 c0       	rjmp	.+266    	; 0x12b6 <GPIO_setupPinDirection+0x170>
    11ac:	af c0       	rjmp	.+350    	; 0x130c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRA,pin_num);
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	81 30       	cpi	r24, 0x01	; 1
    11b2:	a1 f4       	brne	.+40     	; 0x11dc <GPIO_setupPinDirection+0x96>
    11b4:	aa e3       	ldi	r26, 0x3A	; 58
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	ea e3       	ldi	r30, 0x3A	; 58
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	48 2f       	mov	r20, r24
    11c0:	8a 81       	ldd	r24, Y+2	; 0x02
    11c2:	28 2f       	mov	r18, r24
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	02 2e       	mov	r0, r18
    11cc:	02 c0       	rjmp	.+4      	; 0x11d2 <GPIO_setupPinDirection+0x8c>
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	0a 94       	dec	r0
    11d4:	e2 f7       	brpl	.-8      	; 0x11ce <GPIO_setupPinDirection+0x88>
    11d6:	84 2b       	or	r24, r20
    11d8:	8c 93       	st	X, r24
    11da:	98 c0       	rjmp	.+304    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRA,pin_num);
    11dc:	aa e3       	ldi	r26, 0x3A	; 58
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ea e3       	ldi	r30, 0x3A	; 58
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	48 2f       	mov	r20, r24
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	02 2e       	mov	r0, r18
    11f4:	02 c0       	rjmp	.+4      	; 0x11fa <GPIO_setupPinDirection+0xb4>
    11f6:	88 0f       	add	r24, r24
    11f8:	99 1f       	adc	r25, r25
    11fa:	0a 94       	dec	r0
    11fc:	e2 f7       	brpl	.-8      	; 0x11f6 <GPIO_setupPinDirection+0xb0>
    11fe:	80 95       	com	r24
    1200:	84 23       	and	r24, r20
    1202:	8c 93       	st	X, r24
    1204:	83 c0       	rjmp	.+262    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRB,pin_num);
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	a1 f4       	brne	.+40     	; 0x1234 <GPIO_setupPinDirection+0xee>
    120c:	a7 e3       	ldi	r26, 0x37	; 55
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e7 e3       	ldi	r30, 0x37	; 55
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <GPIO_setupPinDirection+0xe4>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <GPIO_setupPinDirection+0xe0>
    122e:	84 2b       	or	r24, r20
    1230:	8c 93       	st	X, r24
    1232:	6c c0       	rjmp	.+216    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRB,pin_num);
    1234:	a7 e3       	ldi	r26, 0x37	; 55
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	48 2f       	mov	r20, r24
    1240:	8a 81       	ldd	r24, Y+2	; 0x02
    1242:	28 2f       	mov	r18, r24
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	02 2e       	mov	r0, r18
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <GPIO_setupPinDirection+0x10c>
    124e:	88 0f       	add	r24, r24
    1250:	99 1f       	adc	r25, r25
    1252:	0a 94       	dec	r0
    1254:	e2 f7       	brpl	.-8      	; 0x124e <GPIO_setupPinDirection+0x108>
    1256:	80 95       	com	r24
    1258:	84 23       	and	r24, r20
    125a:	8c 93       	st	X, r24
    125c:	57 c0       	rjmp	.+174    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRC,pin_num);
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	81 30       	cpi	r24, 0x01	; 1
    1262:	a1 f4       	brne	.+40     	; 0x128c <GPIO_setupPinDirection+0x146>
    1264:	a4 e3       	ldi	r26, 0x34	; 52
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	e4 e3       	ldi	r30, 0x34	; 52
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	48 2f       	mov	r20, r24
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	81 e0       	ldi	r24, 0x01	; 1
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	02 2e       	mov	r0, r18
    127c:	02 c0       	rjmp	.+4      	; 0x1282 <GPIO_setupPinDirection+0x13c>
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	0a 94       	dec	r0
    1284:	e2 f7       	brpl	.-8      	; 0x127e <GPIO_setupPinDirection+0x138>
    1286:	84 2b       	or	r24, r20
    1288:	8c 93       	st	X, r24
    128a:	40 c0       	rjmp	.+128    	; 0x130c <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRC,pin_num);
    128c:	a4 e3       	ldi	r26, 0x34	; 52
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	e4 e3       	ldi	r30, 0x34	; 52
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	48 2f       	mov	r20, r24
    1298:	8a 81       	ldd	r24, Y+2	; 0x02
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	81 e0       	ldi	r24, 0x01	; 1
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	02 2e       	mov	r0, r18
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <GPIO_setupPinDirection+0x164>
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	0a 94       	dec	r0
    12ac:	e2 f7       	brpl	.-8      	; 0x12a6 <GPIO_setupPinDirection+0x160>
    12ae:	80 95       	com	r24
    12b0:	84 23       	and	r24, r20
    12b2:	8c 93       	st	X, r24
    12b4:	2b c0       	rjmp	.+86     	; 0x130c <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRD,pin_num);
    12b6:	8b 81       	ldd	r24, Y+3	; 0x03
    12b8:	81 30       	cpi	r24, 0x01	; 1
    12ba:	a1 f4       	brne	.+40     	; 0x12e4 <GPIO_setupPinDirection+0x19e>
    12bc:	a1 e3       	ldi	r26, 0x31	; 49
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	e1 e3       	ldi	r30, 0x31	; 49
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	48 2f       	mov	r20, r24
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	02 2e       	mov	r0, r18
    12d4:	02 c0       	rjmp	.+4      	; 0x12da <GPIO_setupPinDirection+0x194>
    12d6:	88 0f       	add	r24, r24
    12d8:	99 1f       	adc	r25, r25
    12da:	0a 94       	dec	r0
    12dc:	e2 f7       	brpl	.-8      	; 0x12d6 <GPIO_setupPinDirection+0x190>
    12de:	84 2b       	or	r24, r20
    12e0:	8c 93       	st	X, r24
    12e2:	14 c0       	rjmp	.+40     	; 0x130c <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRD,pin_num);
    12e4:	a1 e3       	ldi	r26, 0x31	; 49
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	e1 e3       	ldi	r30, 0x31	; 49
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
    12ee:	48 2f       	mov	r20, r24
    12f0:	8a 81       	ldd	r24, Y+2	; 0x02
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 2e       	mov	r0, r18
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <GPIO_setupPinDirection+0x1bc>
    12fe:	88 0f       	add	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <GPIO_setupPinDirection+0x1b8>
    1306:	80 95       	com	r24
    1308:	84 23       	and	r24, r20
    130a:	8c 93       	st	X, r24
			break;
		}
	}
}
    130c:	0f 90       	pop	r0
    130e:	0f 90       	pop	r0
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	cf 91       	pop	r28
    1318:	df 91       	pop	r29
    131a:	08 95       	ret

0000131c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    131c:	df 93       	push	r29
    131e:	cf 93       	push	r28
    1320:	00 d0       	rcall	.+0      	; 0x1322 <GPIO_writePin+0x6>
    1322:	00 d0       	rcall	.+0      	; 0x1324 <GPIO_writePin+0x8>
    1324:	0f 92       	push	r0
    1326:	cd b7       	in	r28, 0x3d	; 61
    1328:	de b7       	in	r29, 0x3e	; 62
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	6a 83       	std	Y+2, r22	; 0x02
    132e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	88 30       	cpi	r24, 0x08	; 8
    1334:	08 f0       	brcs	.+2      	; 0x1338 <GPIO_writePin+0x1c>
    1336:	e4 c0       	rjmp	.+456    	; 0x1500 <GPIO_writePin+0x1e4>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	84 30       	cpi	r24, 0x04	; 4
    133c:	08 f0       	brcs	.+2      	; 0x1340 <GPIO_writePin+0x24>
    133e:	e0 c0       	rjmp	.+448    	; 0x1500 <GPIO_writePin+0x1e4>
	{
		/* Set up the pin value as required */
		switch (port_num)
    1340:	89 81       	ldd	r24, Y+1	; 0x01
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	3d 83       	std	Y+5, r19	; 0x05
    1348:	2c 83       	std	Y+4, r18	; 0x04
    134a:	8c 81       	ldd	r24, Y+4	; 0x04
    134c:	9d 81       	ldd	r25, Y+5	; 0x05
    134e:	81 30       	cpi	r24, 0x01	; 1
    1350:	91 05       	cpc	r25, r1
    1352:	09 f4       	brne	.+2      	; 0x1356 <GPIO_writePin+0x3a>
    1354:	47 c0       	rjmp	.+142    	; 0x13e4 <GPIO_writePin+0xc8>
    1356:	2c 81       	ldd	r18, Y+4	; 0x04
    1358:	3d 81       	ldd	r19, Y+5	; 0x05
    135a:	22 30       	cpi	r18, 0x02	; 2
    135c:	31 05       	cpc	r19, r1
    135e:	2c f4       	brge	.+10     	; 0x136a <GPIO_writePin+0x4e>
    1360:	8c 81       	ldd	r24, Y+4	; 0x04
    1362:	9d 81       	ldd	r25, Y+5	; 0x05
    1364:	00 97       	sbiw	r24, 0x00	; 0
    1366:	71 f0       	breq	.+28     	; 0x1384 <GPIO_writePin+0x68>
    1368:	cb c0       	rjmp	.+406    	; 0x1500 <GPIO_writePin+0x1e4>
    136a:	2c 81       	ldd	r18, Y+4	; 0x04
    136c:	3d 81       	ldd	r19, Y+5	; 0x05
    136e:	22 30       	cpi	r18, 0x02	; 2
    1370:	31 05       	cpc	r19, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <GPIO_writePin+0x5a>
    1374:	67 c0       	rjmp	.+206    	; 0x1444 <GPIO_writePin+0x128>
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	9d 81       	ldd	r25, Y+5	; 0x05
    137a:	83 30       	cpi	r24, 0x03	; 3
    137c:	91 05       	cpc	r25, r1
    137e:	09 f4       	brne	.+2      	; 0x1382 <GPIO_writePin+0x66>
    1380:	91 c0       	rjmp	.+290    	; 0x14a4 <GPIO_writePin+0x188>
    1382:	be c0       	rjmp	.+380    	; 0x1500 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTA, pin_num);
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	88 23       	and	r24, r24
    1388:	a9 f4       	brne	.+42     	; 0x13b4 <GPIO_writePin+0x98>
    138a:	ab e3       	ldi	r26, 0x3B	; 59
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	eb e3       	ldi	r30, 0x3B	; 59
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	48 2f       	mov	r20, r24
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	02 2e       	mov	r0, r18
    13a2:	02 c0       	rjmp	.+4      	; 0x13a8 <GPIO_writePin+0x8c>
    13a4:	88 0f       	add	r24, r24
    13a6:	99 1f       	adc	r25, r25
    13a8:	0a 94       	dec	r0
    13aa:	e2 f7       	brpl	.-8      	; 0x13a4 <GPIO_writePin+0x88>
    13ac:	80 95       	com	r24
    13ae:	84 23       	and	r24, r20
    13b0:	8c 93       	st	X, r24
    13b2:	a6 c0       	rjmp	.+332    	; 0x1500 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTA, pin_num);
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	81 30       	cpi	r24, 0x01	; 1
    13b8:	09 f0       	breq	.+2      	; 0x13bc <GPIO_writePin+0xa0>
    13ba:	a2 c0       	rjmp	.+324    	; 0x1500 <GPIO_writePin+0x1e4>
    13bc:	ab e3       	ldi	r26, 0x3B	; 59
    13be:	b0 e0       	ldi	r27, 0x00	; 0
    13c0:	eb e3       	ldi	r30, 0x3B	; 59
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	80 81       	ld	r24, Z
    13c6:	48 2f       	mov	r20, r24
    13c8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ca:	28 2f       	mov	r18, r24
    13cc:	30 e0       	ldi	r19, 0x00	; 0
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	02 2e       	mov	r0, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_writePin+0xbe>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	0a 94       	dec	r0
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_writePin+0xba>
    13de:	84 2b       	or	r24, r20
    13e0:	8c 93       	st	X, r24
    13e2:	8e c0       	rjmp	.+284    	; 0x1500 <GPIO_writePin+0x1e4>
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTB, pin_num);
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	88 23       	and	r24, r24
    13e8:	a9 f4       	brne	.+42     	; 0x1414 <GPIO_writePin+0xf8>
    13ea:	a8 e3       	ldi	r26, 0x38	; 56
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	e8 e3       	ldi	r30, 0x38	; 56
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	48 2f       	mov	r20, r24
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	02 2e       	mov	r0, r18
    1402:	02 c0       	rjmp	.+4      	; 0x1408 <GPIO_writePin+0xec>
    1404:	88 0f       	add	r24, r24
    1406:	99 1f       	adc	r25, r25
    1408:	0a 94       	dec	r0
    140a:	e2 f7       	brpl	.-8      	; 0x1404 <GPIO_writePin+0xe8>
    140c:	80 95       	com	r24
    140e:	84 23       	and	r24, r20
    1410:	8c 93       	st	X, r24
    1412:	76 c0       	rjmp	.+236    	; 0x1500 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTB, pin_num);
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	09 f0       	breq	.+2      	; 0x141c <GPIO_writePin+0x100>
    141a:	72 c0       	rjmp	.+228    	; 0x1500 <GPIO_writePin+0x1e4>
    141c:	a8 e3       	ldi	r26, 0x38	; 56
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	e8 e3       	ldi	r30, 0x38	; 56
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	48 2f       	mov	r20, r24
    1428:	8a 81       	ldd	r24, Y+2	; 0x02
    142a:	28 2f       	mov	r18, r24
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	02 2e       	mov	r0, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_writePin+0x11e>
    1436:	88 0f       	add	r24, r24
    1438:	99 1f       	adc	r25, r25
    143a:	0a 94       	dec	r0
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_writePin+0x11a>
    143e:	84 2b       	or	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	5e c0       	rjmp	.+188    	; 0x1500 <GPIO_writePin+0x1e4>
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTC, pin_num);
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	88 23       	and	r24, r24
    1448:	a9 f4       	brne	.+42     	; 0x1474 <GPIO_writePin+0x158>
    144a:	a5 e3       	ldi	r26, 0x35	; 53
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e5 e3       	ldi	r30, 0x35	; 53
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_writePin+0x14c>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_writePin+0x148>
    146c:	80 95       	com	r24
    146e:	84 23       	and	r24, r20
    1470:	8c 93       	st	X, r24
    1472:	46 c0       	rjmp	.+140    	; 0x1500 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTC, pin_num);
    1474:	8b 81       	ldd	r24, Y+3	; 0x03
    1476:	81 30       	cpi	r24, 0x01	; 1
    1478:	09 f0       	breq	.+2      	; 0x147c <GPIO_writePin+0x160>
    147a:	42 c0       	rjmp	.+132    	; 0x1500 <GPIO_writePin+0x1e4>
    147c:	a5 e3       	ldi	r26, 0x35	; 53
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e3       	ldi	r30, 0x35	; 53
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	48 2f       	mov	r20, r24
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	02 2e       	mov	r0, r18
    1494:	02 c0       	rjmp	.+4      	; 0x149a <GPIO_writePin+0x17e>
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	0a 94       	dec	r0
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <GPIO_writePin+0x17a>
    149e:	84 2b       	or	r24, r20
    14a0:	8c 93       	st	X, r24
    14a2:	2e c0       	rjmp	.+92     	; 0x1500 <GPIO_writePin+0x1e4>
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTD, pin_num);
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	88 23       	and	r24, r24
    14a8:	a9 f4       	brne	.+42     	; 0x14d4 <GPIO_writePin+0x1b8>
    14aa:	a2 e3       	ldi	r26, 0x32	; 50
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e2 e3       	ldi	r30, 0x32	; 50
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	48 2f       	mov	r20, r24
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	02 2e       	mov	r0, r18
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <GPIO_writePin+0x1ac>
    14c4:	88 0f       	add	r24, r24
    14c6:	99 1f       	adc	r25, r25
    14c8:	0a 94       	dec	r0
    14ca:	e2 f7       	brpl	.-8      	; 0x14c4 <GPIO_writePin+0x1a8>
    14cc:	80 95       	com	r24
    14ce:	84 23       	and	r24, r20
    14d0:	8c 93       	st	X, r24
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTD, pin_num);
    14d4:	8b 81       	ldd	r24, Y+3	; 0x03
    14d6:	81 30       	cpi	r24, 0x01	; 1
    14d8:	99 f4       	brne	.+38     	; 0x1500 <GPIO_writePin+0x1e4>
    14da:	a2 e3       	ldi	r26, 0x32	; 50
    14dc:	b0 e0       	ldi	r27, 0x00	; 0
    14de:	e2 e3       	ldi	r30, 0x32	; 50
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	48 2f       	mov	r20, r24
    14e6:	8a 81       	ldd	r24, Y+2	; 0x02
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	02 2e       	mov	r0, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_writePin+0x1dc>
    14f4:	88 0f       	add	r24, r24
    14f6:	99 1f       	adc	r25, r25
    14f8:	0a 94       	dec	r0
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_writePin+0x1d8>
    14fc:	84 2b       	or	r24, r20
    14fe:	8c 93       	st	X, r24
			break;
		}
	}
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <GPIO_readPin>:
/*
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	29 97       	sbiw	r28, 0x09	; 9
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	89 83       	std	Y+1, r24	; 0x01
    1526:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1528:	8a 81       	ldd	r24, Y+2	; 0x02
    152a:	88 30       	cpi	r24, 0x08	; 8
    152c:	08 f0       	brcs	.+2      	; 0x1530 <GPIO_readPin+0x20>
    152e:	8d c0       	rjmp	.+282    	; 0x164a <GPIO_readPin+0x13a>
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	84 30       	cpi	r24, 0x04	; 4
    1534:	08 f0       	brcs	.+2      	; 0x1538 <GPIO_readPin+0x28>
    1536:	89 c0       	rjmp	.+274    	; 0x164a <GPIO_readPin+0x13a>
	{
		/* Return the value of the desired pin as required */
		switch (port_num)
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	39 87       	std	Y+9, r19	; 0x09
    1540:	28 87       	std	Y+8, r18	; 0x08
    1542:	48 85       	ldd	r20, Y+8	; 0x08
    1544:	59 85       	ldd	r21, Y+9	; 0x09
    1546:	41 30       	cpi	r20, 0x01	; 1
    1548:	51 05       	cpc	r21, r1
    154a:	89 f1       	breq	.+98     	; 0x15ae <GPIO_readPin+0x9e>
    154c:	88 85       	ldd	r24, Y+8	; 0x08
    154e:	99 85       	ldd	r25, Y+9	; 0x09
    1550:	82 30       	cpi	r24, 0x02	; 2
    1552:	91 05       	cpc	r25, r1
    1554:	34 f4       	brge	.+12     	; 0x1562 <GPIO_readPin+0x52>
    1556:	28 85       	ldd	r18, Y+8	; 0x08
    1558:	39 85       	ldd	r19, Y+9	; 0x09
    155a:	21 15       	cp	r18, r1
    155c:	31 05       	cpc	r19, r1
    155e:	69 f0       	breq	.+26     	; 0x157a <GPIO_readPin+0x6a>
    1560:	74 c0       	rjmp	.+232    	; 0x164a <GPIO_readPin+0x13a>
    1562:	48 85       	ldd	r20, Y+8	; 0x08
    1564:	59 85       	ldd	r21, Y+9	; 0x09
    1566:	42 30       	cpi	r20, 0x02	; 2
    1568:	51 05       	cpc	r21, r1
    156a:	d9 f1       	breq	.+118    	; 0x15e2 <GPIO_readPin+0xd2>
    156c:	88 85       	ldd	r24, Y+8	; 0x08
    156e:	99 85       	ldd	r25, Y+9	; 0x09
    1570:	83 30       	cpi	r24, 0x03	; 3
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <GPIO_readPin+0x68>
    1576:	4f c0       	rjmp	.+158    	; 0x1616 <GPIO_readPin+0x106>
    1578:	68 c0       	rjmp	.+208    	; 0x164a <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			return (BIT_IS_SET(PINA, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    157a:	e9 e3       	ldi	r30, 0x39	; 57
    157c:	f0 e0       	ldi	r31, 0x00	; 0
    157e:	80 81       	ld	r24, Z
    1580:	28 2f       	mov	r18, r24
    1582:	30 e0       	ldi	r19, 0x00	; 0
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	88 2f       	mov	r24, r24
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	a9 01       	movw	r20, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <GPIO_readPin+0x82>
    158e:	55 95       	asr	r21
    1590:	47 95       	ror	r20
    1592:	8a 95       	dec	r24
    1594:	e2 f7       	brpl	.-8      	; 0x158e <GPIO_readPin+0x7e>
    1596:	ca 01       	movw	r24, r20
    1598:	81 70       	andi	r24, 0x01	; 1
    159a:	90 70       	andi	r25, 0x00	; 0
    159c:	88 23       	and	r24, r24
    159e:	19 f0       	breq	.+6      	; 0x15a6 <GPIO_readPin+0x96>
    15a0:	51 e0       	ldi	r21, 0x01	; 1
    15a2:	5e 83       	std	Y+6, r21	; 0x06
    15a4:	01 c0       	rjmp	.+2      	; 0x15a8 <GPIO_readPin+0x98>
    15a6:	1e 82       	std	Y+6, r1	; 0x06
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	8f 83       	std	Y+7, r24	; 0x07
    15ac:	4f c0       	rjmp	.+158    	; 0x164c <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    15ae:	e6 e3       	ldi	r30, 0x36	; 54
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	88 2f       	mov	r24, r24
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a9 01       	movw	r20, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <GPIO_readPin+0xb6>
    15c2:	55 95       	asr	r21
    15c4:	47 95       	ror	r20
    15c6:	8a 95       	dec	r24
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <GPIO_readPin+0xb2>
    15ca:	ca 01       	movw	r24, r20
    15cc:	81 70       	andi	r24, 0x01	; 1
    15ce:	90 70       	andi	r25, 0x00	; 0
    15d0:	88 23       	and	r24, r24
    15d2:	19 f0       	breq	.+6      	; 0x15da <GPIO_readPin+0xca>
    15d4:	51 e0       	ldi	r21, 0x01	; 1
    15d6:	5d 83       	std	Y+5, r21	; 0x05
    15d8:	01 c0       	rjmp	.+2      	; 0x15dc <GPIO_readPin+0xcc>
    15da:	1d 82       	std	Y+5, r1	; 0x05
    15dc:	8d 81       	ldd	r24, Y+5	; 0x05
    15de:	8f 83       	std	Y+7, r24	; 0x07
    15e0:	35 c0       	rjmp	.+106    	; 0x164c <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    15e2:	e3 e3       	ldi	r30, 0x33	; 51
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	88 2f       	mov	r24, r24
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	a9 01       	movw	r20, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_readPin+0xea>
    15f6:	55 95       	asr	r21
    15f8:	47 95       	ror	r20
    15fa:	8a 95       	dec	r24
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_readPin+0xe6>
    15fe:	ca 01       	movw	r24, r20
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	90 70       	andi	r25, 0x00	; 0
    1604:	88 23       	and	r24, r24
    1606:	19 f0       	breq	.+6      	; 0x160e <GPIO_readPin+0xfe>
    1608:	51 e0       	ldi	r21, 0x01	; 1
    160a:	5c 83       	std	Y+4, r21	; 0x04
    160c:	01 c0       	rjmp	.+2      	; 0x1610 <GPIO_readPin+0x100>
    160e:	1c 82       	std	Y+4, r1	; 0x04
    1610:	8c 81       	ldd	r24, Y+4	; 0x04
    1612:	8f 83       	std	Y+7, r24	; 0x07
    1614:	1b c0       	rjmp	.+54     	; 0x164c <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1616:	e0 e3       	ldi	r30, 0x30	; 48
    1618:	f0 e0       	ldi	r31, 0x00	; 0
    161a:	80 81       	ld	r24, Z
    161c:	28 2f       	mov	r18, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	8a 81       	ldd	r24, Y+2	; 0x02
    1622:	88 2f       	mov	r24, r24
    1624:	90 e0       	ldi	r25, 0x00	; 0
    1626:	a9 01       	movw	r20, r18
    1628:	02 c0       	rjmp	.+4      	; 0x162e <GPIO_readPin+0x11e>
    162a:	55 95       	asr	r21
    162c:	47 95       	ror	r20
    162e:	8a 95       	dec	r24
    1630:	e2 f7       	brpl	.-8      	; 0x162a <GPIO_readPin+0x11a>
    1632:	ca 01       	movw	r24, r20
    1634:	81 70       	andi	r24, 0x01	; 1
    1636:	90 70       	andi	r25, 0x00	; 0
    1638:	88 23       	and	r24, r24
    163a:	19 f0       	breq	.+6      	; 0x1642 <GPIO_readPin+0x132>
    163c:	51 e0       	ldi	r21, 0x01	; 1
    163e:	5b 83       	std	Y+3, r21	; 0x03
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <GPIO_readPin+0x134>
    1642:	1b 82       	std	Y+3, r1	; 0x03
    1644:	8b 81       	ldd	r24, Y+3	; 0x03
    1646:	8f 83       	std	Y+7, r24	; 0x07
    1648:	01 c0       	rjmp	.+2      	; 0x164c <GPIO_readPin+0x13c>
			break;
		}
	}
	return LOGIC_LOW;
    164a:	1f 82       	std	Y+7, r1	; 0x07
    164c:	8f 81       	ldd	r24, Y+7	; 0x07
}
    164e:	29 96       	adiw	r28, 0x09	; 9
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1660:	df 93       	push	r29
    1662:	cf 93       	push	r28
    1664:	00 d0       	rcall	.+0      	; 0x1666 <GPIO_setupPortDirection+0x6>
    1666:	00 d0       	rcall	.+0      	; 0x1668 <GPIO_setupPortDirection+0x8>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    1670:	89 81       	ldd	r24, Y+1	; 0x01
    1672:	84 30       	cpi	r24, 0x04	; 4
    1674:	90 f5       	brcc	.+100    	; 0x16da <GPIO_setupPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port_num)
    1676:	89 81       	ldd	r24, Y+1	; 0x01
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3c 83       	std	Y+4, r19	; 0x04
    167e:	2b 83       	std	Y+3, r18	; 0x03
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	9c 81       	ldd	r25, Y+4	; 0x04
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	d1 f0       	breq	.+52     	; 0x16be <GPIO_setupPortDirection+0x5e>
    168a:	2b 81       	ldd	r18, Y+3	; 0x03
    168c:	3c 81       	ldd	r19, Y+4	; 0x04
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	2c f4       	brge	.+10     	; 0x169e <GPIO_setupPortDirection+0x3e>
    1694:	8b 81       	ldd	r24, Y+3	; 0x03
    1696:	9c 81       	ldd	r25, Y+4	; 0x04
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	61 f0       	breq	.+24     	; 0x16b4 <GPIO_setupPortDirection+0x54>
    169c:	1e c0       	rjmp	.+60     	; 0x16da <GPIO_setupPortDirection+0x7a>
    169e:	2b 81       	ldd	r18, Y+3	; 0x03
    16a0:	3c 81       	ldd	r19, Y+4	; 0x04
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	81 f0       	breq	.+32     	; 0x16c8 <GPIO_setupPortDirection+0x68>
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	91 05       	cpc	r25, r1
    16b0:	81 f0       	breq	.+32     	; 0x16d2 <GPIO_setupPortDirection+0x72>
    16b2:	13 c0       	rjmp	.+38     	; 0x16da <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16b4:	ea e3       	ldi	r30, 0x3A	; 58
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	80 83       	st	Z, r24
    16bc:	0e c0       	rjmp	.+28     	; 0x16da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16be:	e7 e3       	ldi	r30, 0x37	; 55
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	8a 81       	ldd	r24, Y+2	; 0x02
    16c4:	80 83       	st	Z, r24
    16c6:	09 c0       	rjmp	.+18     	; 0x16da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16c8:	e4 e3       	ldi	r30, 0x34	; 52
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	8a 81       	ldd	r24, Y+2	; 0x02
    16ce:	80 83       	st	Z, r24
    16d0:	04 c0       	rjmp	.+8      	; 0x16da <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16d2:	e1 e3       	ldi	r30, 0x31	; 49
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <GPIO_writePort+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <GPIO_writePort+0x8>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	90 f5       	brcc	.+100    	; 0x1762 <GPIO_writePort+0x7a>
	{
		/* Setup the port value as required */
		switch(port_num)
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	3c 83       	std	Y+4, r19	; 0x04
    1706:	2b 83       	std	Y+3, r18	; 0x03
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	81 30       	cpi	r24, 0x01	; 1
    170e:	91 05       	cpc	r25, r1
    1710:	d1 f0       	breq	.+52     	; 0x1746 <GPIO_writePort+0x5e>
    1712:	2b 81       	ldd	r18, Y+3	; 0x03
    1714:	3c 81       	ldd	r19, Y+4	; 0x04
    1716:	22 30       	cpi	r18, 0x02	; 2
    1718:	31 05       	cpc	r19, r1
    171a:	2c f4       	brge	.+10     	; 0x1726 <GPIO_writePort+0x3e>
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	61 f0       	breq	.+24     	; 0x173c <GPIO_writePort+0x54>
    1724:	1e c0       	rjmp	.+60     	; 0x1762 <GPIO_writePort+0x7a>
    1726:	2b 81       	ldd	r18, Y+3	; 0x03
    1728:	3c 81       	ldd	r19, Y+4	; 0x04
    172a:	22 30       	cpi	r18, 0x02	; 2
    172c:	31 05       	cpc	r19, r1
    172e:	81 f0       	breq	.+32     	; 0x1750 <GPIO_writePort+0x68>
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	91 05       	cpc	r25, r1
    1738:	81 f0       	breq	.+32     	; 0x175a <GPIO_writePort+0x72>
    173a:	13 c0       	rjmp	.+38     	; 0x1762 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    173c:	eb e3       	ldi	r30, 0x3B	; 59
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	80 83       	st	Z, r24
    1744:	0e c0       	rjmp	.+28     	; 0x1762 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1746:	e8 e3       	ldi	r30, 0x38	; 56
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	8a 81       	ldd	r24, Y+2	; 0x02
    174c:	80 83       	st	Z, r24
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1750:	e5 e3       	ldi	r30, 0x35	; 53
    1752:	f0 e0       	ldi	r31, 0x00	; 0
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	80 83       	st	Z, r24
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    175a:	e2 e3       	ldi	r30, 0x32	; 50
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	80 83       	st	Z, r24
			break;
		}
	}
}
    1762:	0f 90       	pop	r0
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <GPIO_readPort>:
/*
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	00 d0       	rcall	.+0      	; 0x1776 <GPIO_readPort+0x6>
    1776:	00 d0       	rcall	.+0      	; 0x1778 <GPIO_readPort+0x8>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	89 83       	std	Y+1, r24	; 0x01
	if(port_num < NUM_OF_PORTS)
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	84 30       	cpi	r24, 0x04	; 4
    1782:	98 f5       	brcc	.+102    	; 0x17ea <GPIO_readPort+0x7a>
	{
		/* Return the value of the desired port as required */
		switch(port_num)
    1784:	89 81       	ldd	r24, Y+1	; 0x01
    1786:	28 2f       	mov	r18, r24
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	3c 83       	std	Y+4, r19	; 0x04
    178c:	2b 83       	std	Y+3, r18	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	91 05       	cpc	r25, r1
    1796:	d1 f0       	breq	.+52     	; 0x17cc <GPIO_readPort+0x5c>
    1798:	2b 81       	ldd	r18, Y+3	; 0x03
    179a:	3c 81       	ldd	r19, Y+4	; 0x04
    179c:	22 30       	cpi	r18, 0x02	; 2
    179e:	31 05       	cpc	r19, r1
    17a0:	2c f4       	brge	.+10     	; 0x17ac <GPIO_readPort+0x3c>
    17a2:	8b 81       	ldd	r24, Y+3	; 0x03
    17a4:	9c 81       	ldd	r25, Y+4	; 0x04
    17a6:	00 97       	sbiw	r24, 0x00	; 0
    17a8:	61 f0       	breq	.+24     	; 0x17c2 <GPIO_readPort+0x52>
    17aa:	1f c0       	rjmp	.+62     	; 0x17ea <GPIO_readPort+0x7a>
    17ac:	2b 81       	ldd	r18, Y+3	; 0x03
    17ae:	3c 81       	ldd	r19, Y+4	; 0x04
    17b0:	22 30       	cpi	r18, 0x02	; 2
    17b2:	31 05       	cpc	r19, r1
    17b4:	81 f0       	breq	.+32     	; 0x17d6 <GPIO_readPort+0x66>
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	81 f0       	breq	.+32     	; 0x17e0 <GPIO_readPort+0x70>
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    17c2:	e9 e3       	ldi	r30, 0x39	; 57
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	90 81       	ld	r25, Z
    17c8:	9a 83       	std	Y+2, r25	; 0x02
    17ca:	10 c0       	rjmp	.+32     	; 0x17ec <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    17cc:	e6 e3       	ldi	r30, 0x36	; 54
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	20 81       	ld	r18, Z
    17d2:	2a 83       	std	Y+2, r18	; 0x02
    17d4:	0b c0       	rjmp	.+22     	; 0x17ec <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    17d6:	e3 e3       	ldi	r30, 0x33	; 51
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	30 81       	ld	r19, Z
    17dc:	3a 83       	std	Y+2, r19	; 0x02
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    17e0:	e0 e3       	ldi	r30, 0x30	; 48
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	8a 83       	std	Y+2, r24	; 0x02
    17e8:	01 c0       	rjmp	.+2      	; 0x17ec <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    17ea:	1a 82       	std	Y+2, r1	; 0x02
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	60 97       	sbiw	r28, 0x10	; 16
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	de bf       	out	0x3e, r29	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1810:	83 e0       	ldi	r24, 0x03	; 3
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	61 e0       	ldi	r22, 0x01	; 1
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1824:	83 e0       	ldi	r24, 0x03	; 3
    1826:	62 e0       	ldi	r22, 0x02	; 2
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    182e:	83 e0       	ldi	r24, 0x03	; 3
    1830:	63 e0       	ldi	r22, 0x03	; 3
    1832:	40 e0       	ldi	r20, 0x00	; 0
    1834:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1838:	83 e0       	ldi	r24, 0x03	; 3
    183a:	64 e0       	ldi	r22, 0x04	; 4
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1842:	83 e0       	ldi	r24, 0x03	; 3
    1844:	65 e0       	ldi	r22, 0x05	; 5
    1846:	40 e0       	ldi	r20, 0x00	; 0
    1848:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	66 e0       	ldi	r22, 0x06	; 6
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1856:	83 e0       	ldi	r24, 0x03	; 3
    1858:	67 e0       	ldi	r22, 0x07	; 7
    185a:	40 e0       	ldi	r20, 0x00	; 0
    185c:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1860:	1f 86       	std	Y+15, r1	; 0x0f
    1862:	ab c0       	rjmp	.+342    	; 0x19ba <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1864:	83 e0       	ldi	r24, 0x03	; 3
    1866:	6f 85       	ldd	r22, Y+15	; 0x0f
    1868:	41 e0       	ldi	r20, 0x01	; 1
    186a:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    186e:	83 e0       	ldi	r24, 0x03	; 3
    1870:	6f 85       	ldd	r22, Y+15	; 0x0f
    1872:	40 e0       	ldi	r20, 0x00	; 0
    1874:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1878:	18 8a       	std	Y+16, r1	; 0x10
    187a:	22 c0       	rjmp	.+68     	; 0x18c0 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    187c:	88 89       	ldd	r24, Y+16	; 0x10
    187e:	98 2f       	mov	r25, r24
    1880:	9c 5f       	subi	r25, 0xFC	; 252
    1882:	83 e0       	ldi	r24, 0x03	; 3
    1884:	69 2f       	mov	r22, r25
    1886:	0e 94 88 0a 	call	0x1510	; 0x1510 <GPIO_readPin>
    188a:	88 23       	and	r24, r24
    188c:	b1 f4       	brne	.+44     	; 0x18ba <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    188e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	88 0f       	add	r24, r24
    1896:	99 1f       	adc	r25, r25
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	98 2f       	mov	r25, r24
    189e:	88 89       	ldd	r24, Y+16	; 0x10
    18a0:	89 0f       	add	r24, r25
    18a2:	8f 5f       	subi	r24, 0xFF	; 255
    18a4:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    18a8:	60 96       	adiw	r28, 0x10	; 16
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    18ba:	88 89       	ldd	r24, Y+16	; 0x10
    18bc:	8f 5f       	subi	r24, 0xFF	; 255
    18be:	88 8b       	std	Y+16, r24	; 0x10
    18c0:	88 89       	ldd	r24, Y+16	; 0x10
    18c2:	84 30       	cpi	r24, 0x04	; 4
    18c4:	d8 f2       	brcs	.-74     	; 0x187c <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    18c6:	83 e0       	ldi	r24, 0x03	; 3
    18c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    18ca:	40 e0       	ldi	r20, 0x00	; 0
    18cc:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 ea       	ldi	r26, 0xA0	; 160
    18d6:	b0 e4       	ldi	r27, 0x40	; 64
    18d8:	8b 87       	std	Y+11, r24	; 0x0b
    18da:	9c 87       	std	Y+12, r25	; 0x0c
    18dc:	ad 87       	std	Y+13, r26	; 0x0d
    18de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    18e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    18e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    18e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	4a e7       	ldi	r20, 0x7A	; 122
    18ee:	53 e4       	ldi	r21, 0x43	; 67
    18f0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    18f4:	dc 01       	movw	r26, r24
    18f6:	cb 01       	movw	r24, r22
    18f8:	8f 83       	std	Y+7, r24	; 0x07
    18fa:	98 87       	std	Y+8, r25	; 0x08
    18fc:	a9 87       	std	Y+9, r26	; 0x09
    18fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1900:	6f 81       	ldd	r22, Y+7	; 0x07
    1902:	78 85       	ldd	r23, Y+8	; 0x08
    1904:	89 85       	ldd	r24, Y+9	; 0x09
    1906:	9a 85       	ldd	r25, Y+10	; 0x0a
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	40 e8       	ldi	r20, 0x80	; 128
    190e:	5f e3       	ldi	r21, 0x3F	; 63
    1910:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    1914:	88 23       	and	r24, r24
    1916:	2c f4       	brge	.+10     	; 0x1922 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1918:	81 e0       	ldi	r24, 0x01	; 1
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	3f c0       	rjmp	.+126    	; 0x19a0 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1922:	6f 81       	ldd	r22, Y+7	; 0x07
    1924:	78 85       	ldd	r23, Y+8	; 0x08
    1926:	89 85       	ldd	r24, Y+9	; 0x09
    1928:	9a 85       	ldd	r25, Y+10	; 0x0a
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	3f ef       	ldi	r19, 0xFF	; 255
    192e:	4f e7       	ldi	r20, 0x7F	; 127
    1930:	57 e4       	ldi	r21, 0x47	; 71
    1932:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    1936:	18 16       	cp	r1, r24
    1938:	4c f5       	brge	.+82     	; 0x198c <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    193a:	6b 85       	ldd	r22, Y+11	; 0x0b
    193c:	7c 85       	ldd	r23, Y+12	; 0x0c
    193e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1940:	9e 85       	ldd	r25, Y+14	; 0x0e
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	40 e2       	ldi	r20, 0x20	; 32
    1948:	51 e4       	ldi	r21, 0x41	; 65
    194a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	bc 01       	movw	r22, r24
    1954:	cd 01       	movw	r24, r26
    1956:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    195a:	dc 01       	movw	r26, r24
    195c:	cb 01       	movw	r24, r22
    195e:	9e 83       	std	Y+6, r25	; 0x06
    1960:	8d 83       	std	Y+5, r24	; 0x05
    1962:	0f c0       	rjmp	.+30     	; 0x1982 <KEYPAD_getPressedKey+0x186>
    1964:	89 e1       	ldi	r24, 0x19	; 25
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	9c 83       	std	Y+4, r25	; 0x04
    196a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	9c 81       	ldd	r25, Y+4	; 0x04
    1970:	01 97       	sbiw	r24, 0x01	; 1
    1972:	f1 f7       	brne	.-4      	; 0x1970 <KEYPAD_getPressedKey+0x174>
    1974:	9c 83       	std	Y+4, r25	; 0x04
    1976:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	9e 83       	std	Y+6, r25	; 0x06
    1980:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1982:	8d 81       	ldd	r24, Y+5	; 0x05
    1984:	9e 81       	ldd	r25, Y+6	; 0x06
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <KEYPAD_getPressedKey+0x168>
    198a:	14 c0       	rjmp	.+40     	; 0x19b4 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    198c:	6f 81       	ldd	r22, Y+7	; 0x07
    198e:	78 85       	ldd	r23, Y+8	; 0x08
    1990:	89 85       	ldd	r24, Y+9	; 0x09
    1992:	9a 85       	ldd	r25, Y+10	; 0x0a
    1994:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	9e 83       	std	Y+6, r25	; 0x06
    199e:	8d 83       	std	Y+5, r24	; 0x05
    19a0:	8d 81       	ldd	r24, Y+5	; 0x05
    19a2:	9e 81       	ldd	r25, Y+6	; 0x06
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	9a 81       	ldd	r25, Y+2	; 0x02
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <KEYPAD_getPressedKey+0x1b0>
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	8f 87       	std	Y+15, r24	; 0x0f
    19ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    19bc:	84 30       	cpi	r24, 0x04	; 4
    19be:	08 f4       	brcc	.+2      	; 0x19c2 <KEYPAD_getPressedKey+0x1c6>
    19c0:	51 cf       	rjmp	.-350    	; 0x1864 <KEYPAD_getPressedKey+0x68>
    19c2:	4e cf       	rjmp	.-356    	; 0x1860 <KEYPAD_getPressedKey+0x64>

000019c4 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	00 d0       	rcall	.+0      	; 0x19ca <KEYPAD_4x4_adjustKeyNumber+0x6>
    19ca:	00 d0       	rcall	.+0      	; 0x19cc <KEYPAD_4x4_adjustKeyNumber+0x8>
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    19d2:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	3c 83       	std	Y+4, r19	; 0x04
    19dc:	2b 83       	std	Y+3, r18	; 0x03
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	88 30       	cpi	r24, 0x08	; 8
    19e4:	91 05       	cpc	r25, r1
    19e6:	09 f4       	brne	.+2      	; 0x19ea <KEYPAD_4x4_adjustKeyNumber+0x26>
    19e8:	70 c0       	rjmp	.+224    	; 0x1aca <KEYPAD_4x4_adjustKeyNumber+0x106>
    19ea:	2b 81       	ldd	r18, Y+3	; 0x03
    19ec:	3c 81       	ldd	r19, Y+4	; 0x04
    19ee:	29 30       	cpi	r18, 0x09	; 9
    19f0:	31 05       	cpc	r19, r1
    19f2:	5c f5       	brge	.+86     	; 0x1a4a <KEYPAD_4x4_adjustKeyNumber+0x86>
    19f4:	8b 81       	ldd	r24, Y+3	; 0x03
    19f6:	9c 81       	ldd	r25, Y+4	; 0x04
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	91 05       	cpc	r25, r1
    19fc:	09 f4       	brne	.+2      	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    19fe:	59 c0       	rjmp	.+178    	; 0x1ab2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a00:	2b 81       	ldd	r18, Y+3	; 0x03
    1a02:	3c 81       	ldd	r19, Y+4	; 0x04
    1a04:	25 30       	cpi	r18, 0x05	; 5
    1a06:	31 05       	cpc	r19, r1
    1a08:	9c f4       	brge	.+38     	; 0x1a30 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	91 05       	cpc	r25, r1
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a14:	48 c0       	rjmp	.+144    	; 0x1aa6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a16:	2b 81       	ldd	r18, Y+3	; 0x03
    1a18:	3c 81       	ldd	r19, Y+4	; 0x04
    1a1a:	23 30       	cpi	r18, 0x03	; 3
    1a1c:	31 05       	cpc	r19, r1
    1a1e:	0c f0       	brlt	.+2      	; 0x1a22 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a20:	45 c0       	rjmp	.+138    	; 0x1aac <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a22:	8b 81       	ldd	r24, Y+3	; 0x03
    1a24:	9c 81       	ldd	r25, Y+4	; 0x04
    1a26:	81 30       	cpi	r24, 0x01	; 1
    1a28:	91 05       	cpc	r25, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1a2c:	39 c0       	rjmp	.+114    	; 0x1aa0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1a2e:	67 c0       	rjmp	.+206    	; 0x1afe <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1a30:	2b 81       	ldd	r18, Y+3	; 0x03
    1a32:	3c 81       	ldd	r19, Y+4	; 0x04
    1a34:	26 30       	cpi	r18, 0x06	; 6
    1a36:	31 05       	cpc	r19, r1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1a3a:	41 c0       	rjmp	.+130    	; 0x1abe <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1a3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a40:	87 30       	cpi	r24, 0x07	; 7
    1a42:	91 05       	cpc	r25, r1
    1a44:	0c f0       	brlt	.+2      	; 0x1a48 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a46:	3e c0       	rjmp	.+124    	; 0x1ac4 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1a48:	37 c0       	rjmp	.+110    	; 0x1ab8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1a4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a4e:	2c 30       	cpi	r18, 0x0C	; 12
    1a50:	31 05       	cpc	r19, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1a54:	46 c0       	rjmp	.+140    	; 0x1ae2 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	8d 30       	cpi	r24, 0x0D	; 13
    1a5c:	91 05       	cpc	r25, r1
    1a5e:	5c f4       	brge	.+22     	; 0x1a76 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1a60:	2b 81       	ldd	r18, Y+3	; 0x03
    1a62:	3c 81       	ldd	r19, Y+4	; 0x04
    1a64:	2a 30       	cpi	r18, 0x0A	; 10
    1a66:	31 05       	cpc	r19, r1
    1a68:	b1 f1       	breq	.+108    	; 0x1ad6 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1a6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a6e:	8b 30       	cpi	r24, 0x0B	; 11
    1a70:	91 05       	cpc	r25, r1
    1a72:	a4 f5       	brge	.+104    	; 0x1adc <KEYPAD_4x4_adjustKeyNumber+0x118>
    1a74:	2d c0       	rjmp	.+90     	; 0x1ad0 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1a76:	2b 81       	ldd	r18, Y+3	; 0x03
    1a78:	3c 81       	ldd	r19, Y+4	; 0x04
    1a7a:	2e 30       	cpi	r18, 0x0E	; 14
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	b9 f1       	breq	.+110    	; 0x1aee <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1a80:	8b 81       	ldd	r24, Y+3	; 0x03
    1a82:	9c 81       	ldd	r25, Y+4	; 0x04
    1a84:	8e 30       	cpi	r24, 0x0E	; 14
    1a86:	91 05       	cpc	r25, r1
    1a88:	7c f1       	brlt	.+94     	; 0x1ae8 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1a8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a8e:	2f 30       	cpi	r18, 0x0F	; 15
    1a90:	31 05       	cpc	r19, r1
    1a92:	79 f1       	breq	.+94     	; 0x1af2 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1a94:	8b 81       	ldd	r24, Y+3	; 0x03
    1a96:	9c 81       	ldd	r25, Y+4	; 0x04
    1a98:	80 31       	cpi	r24, 0x10	; 16
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	69 f1       	breq	.+90     	; 0x1af8 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1a9e:	2f c0       	rjmp	.+94     	; 0x1afe <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1aa0:	87 e0       	ldi	r24, 0x07	; 7
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	2e c0       	rjmp	.+92     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1aa6:	88 e0       	ldi	r24, 0x08	; 8
    1aa8:	89 83       	std	Y+1, r24	; 0x01
    1aaa:	2b c0       	rjmp	.+86     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1aac:	89 e0       	ldi	r24, 0x09	; 9
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	28 c0       	rjmp	.+80     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ab2:	85 e2       	ldi	r24, 0x25	; 37
    1ab4:	89 83       	std	Y+1, r24	; 0x01
    1ab6:	25 c0       	rjmp	.+74     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ab8:	84 e0       	ldi	r24, 0x04	; 4
    1aba:	89 83       	std	Y+1, r24	; 0x01
    1abc:	22 c0       	rjmp	.+68     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1abe:	85 e0       	ldi	r24, 0x05	; 5
    1ac0:	89 83       	std	Y+1, r24	; 0x01
    1ac2:	1f c0       	rjmp	.+62     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ac4:	86 e0       	ldi	r24, 0x06	; 6
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	1c c0       	rjmp	.+56     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1aca:	8a e2       	ldi	r24, 0x2A	; 42
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	19 c0       	rjmp	.+50     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	16 c0       	rjmp	.+44     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	13 c0       	rjmp	.+38     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	89 83       	std	Y+1, r24	; 0x01
    1ae0:	10 c0       	rjmp	.+32     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ae2:	8d e2       	ldi	r24, 0x2D	; 45
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	0d c0       	rjmp	.+26     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ae8:	8d e0       	ldi	r24, 0x0D	; 13
    1aea:	89 83       	std	Y+1, r24	; 0x01
    1aec:	0a c0       	rjmp	.+20     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1aee:	19 82       	std	Y+1, r1	; 0x01
    1af0:	08 c0       	rjmp	.+16     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1af2:	8d e3       	ldi	r24, 0x3D	; 61
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	05 c0       	rjmp	.+10     	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1af8:	8b e2       	ldi	r24, 0x2B	; 43
    1afa:	89 83       	std	Y+1, r24	; 0x01
    1afc:	02 c0       	rjmp	.+4      	; 0x1b02 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	61 e0       	ldi	r22, 0x01	; 1
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	a0 ea       	ldi	r26, 0xA0	; 160
    1b40:	b1 e4       	ldi	r27, 0x41	; 65
    1b42:	8b 87       	std	Y+11, r24	; 0x0b
    1b44:	9c 87       	std	Y+12, r25	; 0x0c
    1b46:	ad 87       	std	Y+13, r26	; 0x0d
    1b48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	4a e7       	ldi	r20, 0x7A	; 122
    1b58:	53 e4       	ldi	r21, 0x43	; 67
    1b5a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	8f 83       	std	Y+7, r24	; 0x07
    1b64:	98 87       	std	Y+8, r25	; 0x08
    1b66:	a9 87       	std	Y+9, r26	; 0x09
    1b68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6c:	78 85       	ldd	r23, Y+8	; 0x08
    1b6e:	89 85       	ldd	r24, Y+9	; 0x09
    1b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	40 e8       	ldi	r20, 0x80	; 128
    1b78:	5f e3       	ldi	r21, 0x3F	; 63
    1b7a:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    1b7e:	88 23       	and	r24, r24
    1b80:	2c f4       	brge	.+10     	; 0x1b8c <LCD_init+0x7a>
		__ticks = 1;
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	90 e0       	ldi	r25, 0x00	; 0
    1b86:	9e 83       	std	Y+6, r25	; 0x06
    1b88:	8d 83       	std	Y+5, r24	; 0x05
    1b8a:	3f c0       	rjmp	.+126    	; 0x1c0a <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b8e:	78 85       	ldd	r23, Y+8	; 0x08
    1b90:	89 85       	ldd	r24, Y+9	; 0x09
    1b92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	3f ef       	ldi	r19, 0xFF	; 255
    1b98:	4f e7       	ldi	r20, 0x7F	; 127
    1b9a:	57 e4       	ldi	r21, 0x47	; 71
    1b9c:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    1ba0:	18 16       	cp	r1, r24
    1ba2:	4c f5       	brge	.+82     	; 0x1bf6 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ba8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1baa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e2       	ldi	r20, 0x20	; 32
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	bc 01       	movw	r22, r24
    1bbe:	cd 01       	movw	r24, r26
    1bc0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
    1bcc:	0f c0       	rjmp	.+30     	; 0x1bec <LCD_init+0xda>
    1bce:	89 e1       	ldi	r24, 0x19	; 25
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9c 83       	std	Y+4, r25	; 0x04
    1bd4:	8b 83       	std	Y+3, r24	; 0x03
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	01 97       	sbiw	r24, 0x01	; 1
    1bdc:	f1 f7       	brne	.-4      	; 0x1bda <LCD_init+0xc8>
    1bde:	9c 83       	std	Y+4, r25	; 0x04
    1be0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be2:	8d 81       	ldd	r24, Y+5	; 0x05
    1be4:	9e 81       	ldd	r25, Y+6	; 0x06
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f7       	brne	.-38     	; 0x1bce <LCD_init+0xbc>
    1bf4:	14 c0       	rjmp	.+40     	; 0x1c1e <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf8:	78 85       	ldd	r23, Y+8	; 0x08
    1bfa:	89 85       	ldd	r24, Y+9	; 0x09
    1bfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	9e 83       	std	Y+6, r25	; 0x06
    1c08:	8d 83       	std	Y+5, r24	; 0x05
    1c0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0e:	9a 83       	std	Y+2, r25	; 0x02
    1c10:	89 83       	std	Y+1, r24	; 0x01
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	9a 81       	ldd	r25, Y+2	; 0x02
    1c16:	01 97       	sbiw	r24, 0x01	; 1
    1c18:	f1 f7       	brne	.-4      	; 0x1c16 <LCD_init+0x104>
    1c1a:	9a 83       	std	Y+2, r25	; 0x02
    1c1c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1c1e:	82 e0       	ldi	r24, 0x02	; 2
    1c20:	64 e0       	ldi	r22, 0x04	; 4
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	65 e0       	ldi	r22, 0x05	; 5
    1c2c:	41 e0       	ldi	r20, 0x01	; 1
    1c2e:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1c32:	82 e0       	ldi	r24, 0x02	; 2
    1c34:	66 e0       	ldi	r22, 0x06	; 6
    1c36:	41 e0       	ldi	r20, 0x01	; 1
    1c38:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1c3c:	82 e0       	ldi	r24, 0x02	; 2
    1c3e:	67 e0       	ldi	r22, 0x07	; 7
    1c40:	41 e0       	ldi	r20, 0x01	; 1
    1c42:	0e 94 a3 08 	call	0x1146	; 0x1146 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c46:	83 e3       	ldi	r24, 0x33	; 51
    1c48:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c4c:	82 e3       	ldi	r24, 0x32	; 50
    1c4e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c52:	88 e2       	ldi	r24, 0x28	; 40
    1c54:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c58:	8c e0       	ldi	r24, 0x0C	; 12
    1c5a:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
}
    1c64:	2e 96       	adiw	r28, 0x0e	; 14
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	cf 91       	pop	r28
    1c72:	df 91       	pop	r29
    1c74:	08 95       	ret

00001c76 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c76:	0f 93       	push	r16
    1c78:	1f 93       	push	r17
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	cd b7       	in	r28, 0x3d	; 61
    1c80:	de b7       	in	r29, 0x3e	; 62
    1c82:	c3 56       	subi	r28, 0x63	; 99
    1c84:	d0 40       	sbci	r29, 0x00	; 0
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	de bf       	out	0x3e, r29	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	cd bf       	out	0x3d, r28	; 61
    1c90:	fe 01       	movw	r30, r28
    1c92:	ed 59       	subi	r30, 0x9D	; 157
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	60 e0       	ldi	r22, 0x00	; 0
    1c9c:	40 e0       	ldi	r20, 0x00	; 0
    1c9e:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e1 5a       	subi	r30, 0xA1	; 161
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	a0 e8       	ldi	r26, 0x80	; 128
    1cae:	bf e3       	ldi	r27, 0x3F	; 63
    1cb0:	80 83       	st	Z, r24
    1cb2:	91 83       	std	Z+1, r25	; 0x01
    1cb4:	a2 83       	std	Z+2, r26	; 0x02
    1cb6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb8:	8e 01       	movw	r16, r28
    1cba:	05 5a       	subi	r16, 0xA5	; 165
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e1 5a       	subi	r30, 0xA1	; 161
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	20 e0       	ldi	r18, 0x00	; 0
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	4a e7       	ldi	r20, 0x7A	; 122
    1cd2:	53 e4       	ldi	r21, 0x43	; 67
    1cd4:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	f8 01       	movw	r30, r16
    1cde:	80 83       	st	Z, r24
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	a2 83       	std	Z+2, r26	; 0x02
    1ce4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce6:	fe 01       	movw	r30, r28
    1ce8:	e5 5a       	subi	r30, 0xA5	; 165
    1cea:	ff 4f       	sbci	r31, 0xFF	; 255
    1cec:	60 81       	ld	r22, Z
    1cee:	71 81       	ldd	r23, Z+1	; 0x01
    1cf0:	82 81       	ldd	r24, Z+2	; 0x02
    1cf2:	93 81       	ldd	r25, Z+3	; 0x03
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e8       	ldi	r20, 0x80	; 128
    1cfa:	5f e3       	ldi	r21, 0x3F	; 63
    1cfc:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    1d00:	88 23       	and	r24, r24
    1d02:	44 f4       	brge	.+16     	; 0x1d14 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1d04:	fe 01       	movw	r30, r28
    1d06:	e7 5a       	subi	r30, 0xA7	; 167
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	80 83       	st	Z, r24
    1d12:	64 c0       	rjmp	.+200    	; 0x1ddc <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d14:	fe 01       	movw	r30, r28
    1d16:	e5 5a       	subi	r30, 0xA5	; 165
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	3f ef       	ldi	r19, 0xFF	; 255
    1d26:	4f e7       	ldi	r20, 0x7F	; 127
    1d28:	57 e4       	ldi	r21, 0x47	; 71
    1d2a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	0c f0       	brlt	.+2      	; 0x1d34 <LCD_sendCommand+0xbe>
    1d32:	43 c0       	rjmp	.+134    	; 0x1dba <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	fe 01       	movw	r30, r28
    1d36:	e1 5a       	subi	r30, 0xA1	; 161
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	30 e0       	ldi	r19, 0x00	; 0
    1d46:	40 e2       	ldi	r20, 0x20	; 32
    1d48:	51 e4       	ldi	r21, 0x41	; 65
    1d4a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	8e 01       	movw	r16, r28
    1d54:	07 5a       	subi	r16, 0xA7	; 167
    1d56:	1f 4f       	sbci	r17, 0xFF	; 255
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	f8 01       	movw	r30, r16
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	1f c0       	rjmp	.+62     	; 0x1daa <LCD_sendCommand+0x134>
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e9 5a       	subi	r30, 0xA9	; 169
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	89 e1       	ldi	r24, 0x19	; 25
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	91 83       	std	Z+1, r25	; 0x01
    1d78:	80 83       	st	Z, r24
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e9 5a       	subi	r30, 0xA9	; 169
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	80 81       	ld	r24, Z
    1d82:	91 81       	ldd	r25, Z+1	; 0x01
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <LCD_sendCommand+0x10e>
    1d88:	fe 01       	movw	r30, r28
    1d8a:	e9 5a       	subi	r30, 0xA9	; 169
    1d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d92:	de 01       	movw	r26, r28
    1d94:	a7 5a       	subi	r26, 0xA7	; 167
    1d96:	bf 4f       	sbci	r27, 0xFF	; 255
    1d98:	fe 01       	movw	r30, r28
    1d9a:	e7 5a       	subi	r30, 0xA7	; 167
    1d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	11 96       	adiw	r26, 0x01	; 1
    1da6:	9c 93       	st	X, r25
    1da8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1daa:	fe 01       	movw	r30, r28
    1dac:	e7 5a       	subi	r30, 0xA7	; 167
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	00 97       	sbiw	r24, 0x00	; 0
    1db6:	d1 f6       	brne	.-76     	; 0x1d6c <LCD_sendCommand+0xf6>
    1db8:	27 c0       	rjmp	.+78     	; 0x1e08 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dba:	8e 01       	movw	r16, r28
    1dbc:	07 5a       	subi	r16, 0xA7	; 167
    1dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e5 5a       	subi	r30, 0xA5	; 165
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	60 81       	ld	r22, Z
    1dc8:	71 81       	ldd	r23, Z+1	; 0x01
    1dca:	82 81       	ldd	r24, Z+2	; 0x02
    1dcc:	93 81       	ldd	r25, Z+3	; 0x03
    1dce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	f8 01       	movw	r30, r16
    1dd8:	91 83       	std	Z+1, r25	; 0x01
    1dda:	80 83       	st	Z, r24
    1ddc:	de 01       	movw	r26, r28
    1dde:	ab 5a       	subi	r26, 0xAB	; 171
    1de0:	bf 4f       	sbci	r27, 0xFF	; 255
    1de2:	fe 01       	movw	r30, r28
    1de4:	e7 5a       	subi	r30, 0xA7	; 167
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	8d 93       	st	X+, r24
    1dee:	9c 93       	st	X, r25
    1df0:	fe 01       	movw	r30, r28
    1df2:	eb 5a       	subi	r30, 0xAB	; 171
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	01 97       	sbiw	r24, 0x01	; 1
    1dfc:	f1 f7       	brne	.-4      	; 0x1dfa <LCD_sendCommand+0x184>
    1dfe:	fe 01       	movw	r30, r28
    1e00:	eb 5a       	subi	r30, 0xAB	; 171
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1e08:	82 e0       	ldi	r24, 0x02	; 2
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	41 e0       	ldi	r20, 0x01	; 1
    1e0e:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    1e12:	fe 01       	movw	r30, r28
    1e14:	ef 5a       	subi	r30, 0xAF	; 175
    1e16:	ff 4f       	sbci	r31, 0xFF	; 255
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	a0 e8       	ldi	r26, 0x80	; 128
    1e1e:	bf e3       	ldi	r27, 0x3F	; 63
    1e20:	80 83       	st	Z, r24
    1e22:	91 83       	std	Z+1, r25	; 0x01
    1e24:	a2 83       	std	Z+2, r26	; 0x02
    1e26:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e28:	8e 01       	movw	r16, r28
    1e2a:	03 5b       	subi	r16, 0xB3	; 179
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	fe 01       	movw	r30, r28
    1e30:	ef 5a       	subi	r30, 0xAF	; 175
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	20 e0       	ldi	r18, 0x00	; 0
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	4a e7       	ldi	r20, 0x7A	; 122
    1e42:	53 e4       	ldi	r21, 0x43	; 67
    1e44:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	f8 01       	movw	r30, r16
    1e4e:	80 83       	st	Z, r24
    1e50:	91 83       	std	Z+1, r25	; 0x01
    1e52:	a2 83       	std	Z+2, r26	; 0x02
    1e54:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e56:	fe 01       	movw	r30, r28
    1e58:	e3 5b       	subi	r30, 0xB3	; 179
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	60 81       	ld	r22, Z
    1e5e:	71 81       	ldd	r23, Z+1	; 0x01
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	93 81       	ldd	r25, Z+3	; 0x03
    1e64:	20 e0       	ldi	r18, 0x00	; 0
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	40 e8       	ldi	r20, 0x80	; 128
    1e6a:	5f e3       	ldi	r21, 0x3F	; 63
    1e6c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    1e70:	88 23       	and	r24, r24
    1e72:	44 f4       	brge	.+16     	; 0x1e84 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1e74:	fe 01       	movw	r30, r28
    1e76:	e5 5b       	subi	r30, 0xB5	; 181
    1e78:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	91 83       	std	Z+1, r25	; 0x01
    1e80:	80 83       	st	Z, r24
    1e82:	64 c0       	rjmp	.+200    	; 0x1f4c <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e84:	fe 01       	movw	r30, r28
    1e86:	e3 5b       	subi	r30, 0xB3	; 179
    1e88:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8a:	60 81       	ld	r22, Z
    1e8c:	71 81       	ldd	r23, Z+1	; 0x01
    1e8e:	82 81       	ldd	r24, Z+2	; 0x02
    1e90:	93 81       	ldd	r25, Z+3	; 0x03
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	0c f0       	brlt	.+2      	; 0x1ea4 <LCD_sendCommand+0x22e>
    1ea2:	43 c0       	rjmp	.+134    	; 0x1f2a <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ef 5a       	subi	r30, 0xAF	; 175
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	8e 01       	movw	r16, r28
    1ec4:	05 5b       	subi	r16, 0xB5	; 181
    1ec6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ec8:	bc 01       	movw	r22, r24
    1eca:	cd 01       	movw	r24, r26
    1ecc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	f8 01       	movw	r30, r16
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	80 83       	st	Z, r24
    1eda:	1f c0       	rjmp	.+62     	; 0x1f1a <LCD_sendCommand+0x2a4>
    1edc:	fe 01       	movw	r30, r28
    1ede:	e7 5b       	subi	r30, 0xB7	; 183
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	89 e1       	ldi	r24, 0x19	; 25
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	fe 01       	movw	r30, r28
    1eec:	e7 5b       	subi	r30, 0xB7	; 183
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	80 81       	ld	r24, Z
    1ef2:	91 81       	ldd	r25, Z+1	; 0x01
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_sendCommand+0x27e>
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e7 5b       	subi	r30, 0xB7	; 183
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	91 83       	std	Z+1, r25	; 0x01
    1f00:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f02:	de 01       	movw	r26, r28
    1f04:	a5 5b       	subi	r26, 0xB5	; 181
    1f06:	bf 4f       	sbci	r27, 0xFF	; 255
    1f08:	fe 01       	movw	r30, r28
    1f0a:	e5 5b       	subi	r30, 0xB5	; 181
    1f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0e:	80 81       	ld	r24, Z
    1f10:	91 81       	ldd	r25, Z+1	; 0x01
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	11 96       	adiw	r26, 0x01	; 1
    1f16:	9c 93       	st	X, r25
    1f18:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f1a:	fe 01       	movw	r30, r28
    1f1c:	e5 5b       	subi	r30, 0xB5	; 181
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	80 81       	ld	r24, Z
    1f22:	91 81       	ldd	r25, Z+1	; 0x01
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	d1 f6       	brne	.-76     	; 0x1edc <LCD_sendCommand+0x266>
    1f28:	27 c0       	rjmp	.+78     	; 0x1f78 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	8e 01       	movw	r16, r28
    1f2c:	05 5b       	subi	r16, 0xB5	; 181
    1f2e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f30:	fe 01       	movw	r30, r28
    1f32:	e3 5b       	subi	r30, 0xB3	; 179
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	60 81       	ld	r22, Z
    1f38:	71 81       	ldd	r23, Z+1	; 0x01
    1f3a:	82 81       	ldd	r24, Z+2	; 0x02
    1f3c:	93 81       	ldd	r25, Z+3	; 0x03
    1f3e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	f8 01       	movw	r30, r16
    1f48:	91 83       	std	Z+1, r25	; 0x01
    1f4a:	80 83       	st	Z, r24
    1f4c:	de 01       	movw	r26, r28
    1f4e:	a9 5b       	subi	r26, 0xB9	; 185
    1f50:	bf 4f       	sbci	r27, 0xFF	; 255
    1f52:	fe 01       	movw	r30, r28
    1f54:	e5 5b       	subi	r30, 0xB5	; 181
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	8d 93       	st	X+, r24
    1f5e:	9c 93       	st	X, r25
    1f60:	fe 01       	movw	r30, r28
    1f62:	e9 5b       	subi	r30, 0xB9	; 185
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	80 81       	ld	r24, Z
    1f68:	91 81       	ldd	r25, Z+1	; 0x01
    1f6a:	01 97       	sbiw	r24, 0x01	; 1
    1f6c:	f1 f7       	brne	.-4      	; 0x1f6a <LCD_sendCommand+0x2f4>
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e9 5b       	subi	r30, 0xB9	; 185
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	91 83       	std	Z+1, r25	; 0x01
    1f76:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1f78:	fe 01       	movw	r30, r28
    1f7a:	ed 59       	subi	r30, 0x9D	; 157
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	88 2f       	mov	r24, r24
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	80 71       	andi	r24, 0x10	; 16
    1f86:	90 70       	andi	r25, 0x00	; 0
    1f88:	95 95       	asr	r25
    1f8a:	87 95       	ror	r24
    1f8c:	95 95       	asr	r25
    1f8e:	87 95       	ror	r24
    1f90:	95 95       	asr	r25
    1f92:	87 95       	ror	r24
    1f94:	95 95       	asr	r25
    1f96:	87 95       	ror	r24
    1f98:	98 2f       	mov	r25, r24
    1f9a:	82 e0       	ldi	r24, 0x02	; 2
    1f9c:	64 e0       	ldi	r22, 0x04	; 4
    1f9e:	49 2f       	mov	r20, r25
    1fa0:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	ed 59       	subi	r30, 0x9D	; 157
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	88 2f       	mov	r24, r24
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	80 72       	andi	r24, 0x20	; 32
    1fb2:	90 70       	andi	r25, 0x00	; 0
    1fb4:	95 95       	asr	r25
    1fb6:	87 95       	ror	r24
    1fb8:	95 95       	asr	r25
    1fba:	87 95       	ror	r24
    1fbc:	95 95       	asr	r25
    1fbe:	87 95       	ror	r24
    1fc0:	95 95       	asr	r25
    1fc2:	87 95       	ror	r24
    1fc4:	95 95       	asr	r25
    1fc6:	87 95       	ror	r24
    1fc8:	98 2f       	mov	r25, r24
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	65 e0       	ldi	r22, 0x05	; 5
    1fce:	49 2f       	mov	r20, r25
    1fd0:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	ed 59       	subi	r30, 0x9D	; 157
    1fd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fda:	80 81       	ld	r24, Z
    1fdc:	88 2f       	mov	r24, r24
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	80 74       	andi	r24, 0x40	; 64
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	08 2e       	mov	r0, r24
    1fe6:	89 2f       	mov	r24, r25
    1fe8:	00 0c       	add	r0, r0
    1fea:	88 1f       	adc	r24, r24
    1fec:	99 0b       	sbc	r25, r25
    1fee:	00 0c       	add	r0, r0
    1ff0:	88 1f       	adc	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	98 2f       	mov	r25, r24
    1ff6:	82 e0       	ldi	r24, 0x02	; 2
    1ff8:	66 e0       	ldi	r22, 0x06	; 6
    1ffa:	49 2f       	mov	r20, r25
    1ffc:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2000:	fe 01       	movw	r30, r28
    2002:	ed 59       	subi	r30, 0x9D	; 157
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	98 2f       	mov	r25, r24
    200a:	99 1f       	adc	r25, r25
    200c:	99 27       	eor	r25, r25
    200e:	99 1f       	adc	r25, r25
    2010:	82 e0       	ldi	r24, 0x02	; 2
    2012:	67 e0       	ldi	r22, 0x07	; 7
    2014:	49 2f       	mov	r20, r25
    2016:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    201a:	fe 01       	movw	r30, r28
    201c:	ed 5b       	subi	r30, 0xBD	; 189
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e8       	ldi	r26, 0x80	; 128
    2026:	bf e3       	ldi	r27, 0x3F	; 63
    2028:	80 83       	st	Z, r24
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	a2 83       	std	Z+2, r26	; 0x02
    202e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	8e 01       	movw	r16, r28
    2032:	01 5c       	subi	r16, 0xC1	; 193
    2034:	1f 4f       	sbci	r17, 0xFF	; 255
    2036:	fe 01       	movw	r30, r28
    2038:	ed 5b       	subi	r30, 0xBD	; 189
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	60 81       	ld	r22, Z
    203e:	71 81       	ldd	r23, Z+1	; 0x01
    2040:	82 81       	ldd	r24, Z+2	; 0x02
    2042:	93 81       	ldd	r25, Z+3	; 0x03
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a e7       	ldi	r20, 0x7A	; 122
    204a:	53 e4       	ldi	r21, 0x43	; 67
    204c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	f8 01       	movw	r30, r16
    2056:	80 83       	st	Z, r24
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	a2 83       	std	Z+2, r26	; 0x02
    205c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    205e:	fe 01       	movw	r30, r28
    2060:	ff 96       	adiw	r30, 0x3f	; 63
    2062:	60 81       	ld	r22, Z
    2064:	71 81       	ldd	r23, Z+1	; 0x01
    2066:	82 81       	ldd	r24, Z+2	; 0x02
    2068:	93 81       	ldd	r25, Z+3	; 0x03
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	2c f4       	brge	.+10     	; 0x2084 <LCD_sendCommand+0x40e>
		__ticks = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9e af       	std	Y+62, r25	; 0x3e
    2080:	8d af       	std	Y+61, r24	; 0x3d
    2082:	46 c0       	rjmp	.+140    	; 0x2110 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2084:	fe 01       	movw	r30, r28
    2086:	ff 96       	adiw	r30, 0x3f	; 63
    2088:	60 81       	ld	r22, Z
    208a:	71 81       	ldd	r23, Z+1	; 0x01
    208c:	82 81       	ldd	r24, Z+2	; 0x02
    208e:	93 81       	ldd	r25, Z+3	; 0x03
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	3f ef       	ldi	r19, 0xFF	; 255
    2094:	4f e7       	ldi	r20, 0x7F	; 127
    2096:	57 e4       	ldi	r21, 0x47	; 71
    2098:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    209c:	18 16       	cp	r1, r24
    209e:	64 f5       	brge	.+88     	; 0x20f8 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20a0:	fe 01       	movw	r30, r28
    20a2:	ed 5b       	subi	r30, 0xBD	; 189
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e2       	ldi	r20, 0x20	; 32
    20b4:	51 e4       	ldi	r21, 0x41	; 65
    20b6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    20ba:	dc 01       	movw	r26, r24
    20bc:	cb 01       	movw	r24, r22
    20be:	bc 01       	movw	r22, r24
    20c0:	cd 01       	movw	r24, r26
    20c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	9e af       	std	Y+62, r25	; 0x3e
    20cc:	8d af       	std	Y+61, r24	; 0x3d
    20ce:	0f c0       	rjmp	.+30     	; 0x20ee <LCD_sendCommand+0x478>
    20d0:	89 e1       	ldi	r24, 0x19	; 25
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c af       	std	Y+60, r25	; 0x3c
    20d6:	8b af       	std	Y+59, r24	; 0x3b
    20d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    20da:	9c ad       	ldd	r25, Y+60	; 0x3c
    20dc:	01 97       	sbiw	r24, 0x01	; 1
    20de:	f1 f7       	brne	.-4      	; 0x20dc <LCD_sendCommand+0x466>
    20e0:	9c af       	std	Y+60, r25	; 0x3c
    20e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	9e af       	std	Y+62, r25	; 0x3e
    20ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    20f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    20f2:	00 97       	sbiw	r24, 0x00	; 0
    20f4:	69 f7       	brne	.-38     	; 0x20d0 <LCD_sendCommand+0x45a>
    20f6:	16 c0       	rjmp	.+44     	; 0x2124 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f8:	fe 01       	movw	r30, r28
    20fa:	ff 96       	adiw	r30, 0x3f	; 63
    20fc:	60 81       	ld	r22, Z
    20fe:	71 81       	ldd	r23, Z+1	; 0x01
    2100:	82 81       	ldd	r24, Z+2	; 0x02
    2102:	93 81       	ldd	r25, Z+3	; 0x03
    2104:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	9e af       	std	Y+62, r25	; 0x3e
    210e:	8d af       	std	Y+61, r24	; 0x3d
    2110:	8d ad       	ldd	r24, Y+61	; 0x3d
    2112:	9e ad       	ldd	r25, Y+62	; 0x3e
    2114:	9a af       	std	Y+58, r25	; 0x3a
    2116:	89 af       	std	Y+57, r24	; 0x39
    2118:	89 ad       	ldd	r24, Y+57	; 0x39
    211a:	9a ad       	ldd	r25, Y+58	; 0x3a
    211c:	01 97       	sbiw	r24, 0x01	; 1
    211e:	f1 f7       	brne	.-4      	; 0x211c <LCD_sendCommand+0x4a6>
    2120:	9a af       	std	Y+58, r25	; 0x3a
    2122:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2124:	82 e0       	ldi	r24, 0x02	; 2
    2126:	61 e0       	ldi	r22, 0x01	; 1
    2128:	40 e0       	ldi	r20, 0x00	; 0
    212a:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	a0 e8       	ldi	r26, 0x80	; 128
    2134:	bf e3       	ldi	r27, 0x3F	; 63
    2136:	8d ab       	std	Y+53, r24	; 0x35
    2138:	9e ab       	std	Y+54, r25	; 0x36
    213a:	af ab       	std	Y+55, r26	; 0x37
    213c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    213e:	6d a9       	ldd	r22, Y+53	; 0x35
    2140:	7e a9       	ldd	r23, Y+54	; 0x36
    2142:	8f a9       	ldd	r24, Y+55	; 0x37
    2144:	98 ad       	ldd	r25, Y+56	; 0x38
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	4a e7       	ldi	r20, 0x7A	; 122
    214c:	53 e4       	ldi	r21, 0x43	; 67
    214e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	89 ab       	std	Y+49, r24	; 0x31
    2158:	9a ab       	std	Y+50, r25	; 0x32
    215a:	ab ab       	std	Y+51, r26	; 0x33
    215c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    215e:	69 a9       	ldd	r22, Y+49	; 0x31
    2160:	7a a9       	ldd	r23, Y+50	; 0x32
    2162:	8b a9       	ldd	r24, Y+51	; 0x33
    2164:	9c a9       	ldd	r25, Y+52	; 0x34
    2166:	20 e0       	ldi	r18, 0x00	; 0
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	40 e8       	ldi	r20, 0x80	; 128
    216c:	5f e3       	ldi	r21, 0x3F	; 63
    216e:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2172:	88 23       	and	r24, r24
    2174:	2c f4       	brge	.+10     	; 0x2180 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	90 e0       	ldi	r25, 0x00	; 0
    217a:	98 ab       	std	Y+48, r25	; 0x30
    217c:	8f a7       	std	Y+47, r24	; 0x2f
    217e:	3f c0       	rjmp	.+126    	; 0x21fe <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2180:	69 a9       	ldd	r22, Y+49	; 0x31
    2182:	7a a9       	ldd	r23, Y+50	; 0x32
    2184:	8b a9       	ldd	r24, Y+51	; 0x33
    2186:	9c a9       	ldd	r25, Y+52	; 0x34
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	3f ef       	ldi	r19, 0xFF	; 255
    218c:	4f e7       	ldi	r20, 0x7F	; 127
    218e:	57 e4       	ldi	r21, 0x47	; 71
    2190:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2194:	18 16       	cp	r1, r24
    2196:	4c f5       	brge	.+82     	; 0x21ea <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	6d a9       	ldd	r22, Y+53	; 0x35
    219a:	7e a9       	ldd	r23, Y+54	; 0x36
    219c:	8f a9       	ldd	r24, Y+55	; 0x37
    219e:	98 ad       	ldd	r25, Y+56	; 0x38
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e2       	ldi	r20, 0x20	; 32
    21a6:	51 e4       	ldi	r21, 0x41	; 65
    21a8:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	bc 01       	movw	r22, r24
    21b2:	cd 01       	movw	r24, r26
    21b4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    21b8:	dc 01       	movw	r26, r24
    21ba:	cb 01       	movw	r24, r22
    21bc:	98 ab       	std	Y+48, r25	; 0x30
    21be:	8f a7       	std	Y+47, r24	; 0x2f
    21c0:	0f c0       	rjmp	.+30     	; 0x21e0 <LCD_sendCommand+0x56a>
    21c2:	89 e1       	ldi	r24, 0x19	; 25
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	9e a7       	std	Y+46, r25	; 0x2e
    21c8:	8d a7       	std	Y+45, r24	; 0x2d
    21ca:	8d a5       	ldd	r24, Y+45	; 0x2d
    21cc:	9e a5       	ldd	r25, Y+46	; 0x2e
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <LCD_sendCommand+0x558>
    21d2:	9e a7       	std	Y+46, r25	; 0x2e
    21d4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21d6:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d8:	98 a9       	ldd	r25, Y+48	; 0x30
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	98 ab       	std	Y+48, r25	; 0x30
    21de:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21e2:	98 a9       	ldd	r25, Y+48	; 0x30
    21e4:	00 97       	sbiw	r24, 0x00	; 0
    21e6:	69 f7       	brne	.-38     	; 0x21c2 <LCD_sendCommand+0x54c>
    21e8:	14 c0       	rjmp	.+40     	; 0x2212 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ea:	69 a9       	ldd	r22, Y+49	; 0x31
    21ec:	7a a9       	ldd	r23, Y+50	; 0x32
    21ee:	8b a9       	ldd	r24, Y+51	; 0x33
    21f0:	9c a9       	ldd	r25, Y+52	; 0x34
    21f2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    21f6:	dc 01       	movw	r26, r24
    21f8:	cb 01       	movw	r24, r22
    21fa:	98 ab       	std	Y+48, r25	; 0x30
    21fc:	8f a7       	std	Y+47, r24	; 0x2f
    21fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2200:	98 a9       	ldd	r25, Y+48	; 0x30
    2202:	9c a7       	std	Y+44, r25	; 0x2c
    2204:	8b a7       	std	Y+43, r24	; 0x2b
    2206:	8b a5       	ldd	r24, Y+43	; 0x2b
    2208:	9c a5       	ldd	r25, Y+44	; 0x2c
    220a:	01 97       	sbiw	r24, 0x01	; 1
    220c:	f1 f7       	brne	.-4      	; 0x220a <LCD_sendCommand+0x594>
    220e:	9c a7       	std	Y+44, r25	; 0x2c
    2210:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2212:	82 e0       	ldi	r24, 0x02	; 2
    2214:	61 e0       	ldi	r22, 0x01	; 1
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	a0 e8       	ldi	r26, 0x80	; 128
    2222:	bf e3       	ldi	r27, 0x3F	; 63
    2224:	8f a3       	std	Y+39, r24	; 0x27
    2226:	98 a7       	std	Y+40, r25	; 0x28
    2228:	a9 a7       	std	Y+41, r26	; 0x29
    222a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    222c:	6f a1       	ldd	r22, Y+39	; 0x27
    222e:	78 a5       	ldd	r23, Y+40	; 0x28
    2230:	89 a5       	ldd	r24, Y+41	; 0x29
    2232:	9a a5       	ldd	r25, Y+42	; 0x2a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	4a e7       	ldi	r20, 0x7A	; 122
    223a:	53 e4       	ldi	r21, 0x43	; 67
    223c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2240:	dc 01       	movw	r26, r24
    2242:	cb 01       	movw	r24, r22
    2244:	8b a3       	std	Y+35, r24	; 0x23
    2246:	9c a3       	std	Y+36, r25	; 0x24
    2248:	ad a3       	std	Y+37, r26	; 0x25
    224a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    224c:	6b a1       	ldd	r22, Y+35	; 0x23
    224e:	7c a1       	ldd	r23, Y+36	; 0x24
    2250:	8d a1       	ldd	r24, Y+37	; 0x25
    2252:	9e a1       	ldd	r25, Y+38	; 0x26
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e8       	ldi	r20, 0x80	; 128
    225a:	5f e3       	ldi	r21, 0x3F	; 63
    225c:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2260:	88 23       	and	r24, r24
    2262:	2c f4       	brge	.+10     	; 0x226e <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	9a a3       	std	Y+34, r25	; 0x22
    226a:	89 a3       	std	Y+33, r24	; 0x21
    226c:	3f c0       	rjmp	.+126    	; 0x22ec <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    226e:	6b a1       	ldd	r22, Y+35	; 0x23
    2270:	7c a1       	ldd	r23, Y+36	; 0x24
    2272:	8d a1       	ldd	r24, Y+37	; 0x25
    2274:	9e a1       	ldd	r25, Y+38	; 0x26
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	3f ef       	ldi	r19, 0xFF	; 255
    227a:	4f e7       	ldi	r20, 0x7F	; 127
    227c:	57 e4       	ldi	r21, 0x47	; 71
    227e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2282:	18 16       	cp	r1, r24
    2284:	4c f5       	brge	.+82     	; 0x22d8 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2286:	6f a1       	ldd	r22, Y+39	; 0x27
    2288:	78 a5       	ldd	r23, Y+40	; 0x28
    228a:	89 a5       	ldd	r24, Y+41	; 0x29
    228c:	9a a5       	ldd	r25, Y+42	; 0x2a
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	40 e2       	ldi	r20, 0x20	; 32
    2294:	51 e4       	ldi	r21, 0x41	; 65
    2296:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	bc 01       	movw	r22, r24
    22a0:	cd 01       	movw	r24, r26
    22a2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9a a3       	std	Y+34, r25	; 0x22
    22ac:	89 a3       	std	Y+33, r24	; 0x21
    22ae:	0f c0       	rjmp	.+30     	; 0x22ce <LCD_sendCommand+0x658>
    22b0:	89 e1       	ldi	r24, 0x19	; 25
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	98 a3       	std	Y+32, r25	; 0x20
    22b6:	8f 8f       	std	Y+31, r24	; 0x1f
    22b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ba:	98 a1       	ldd	r25, Y+32	; 0x20
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_sendCommand+0x646>
    22c0:	98 a3       	std	Y+32, r25	; 0x20
    22c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	89 a1       	ldd	r24, Y+33	; 0x21
    22c6:	9a a1       	ldd	r25, Y+34	; 0x22
    22c8:	01 97       	sbiw	r24, 0x01	; 1
    22ca:	9a a3       	std	Y+34, r25	; 0x22
    22cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ce:	89 a1       	ldd	r24, Y+33	; 0x21
    22d0:	9a a1       	ldd	r25, Y+34	; 0x22
    22d2:	00 97       	sbiw	r24, 0x00	; 0
    22d4:	69 f7       	brne	.-38     	; 0x22b0 <LCD_sendCommand+0x63a>
    22d6:	14 c0       	rjmp	.+40     	; 0x2300 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22d8:	6b a1       	ldd	r22, Y+35	; 0x23
    22da:	7c a1       	ldd	r23, Y+36	; 0x24
    22dc:	8d a1       	ldd	r24, Y+37	; 0x25
    22de:	9e a1       	ldd	r25, Y+38	; 0x26
    22e0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    22e4:	dc 01       	movw	r26, r24
    22e6:	cb 01       	movw	r24, r22
    22e8:	9a a3       	std	Y+34, r25	; 0x22
    22ea:	89 a3       	std	Y+33, r24	; 0x21
    22ec:	89 a1       	ldd	r24, Y+33	; 0x21
    22ee:	9a a1       	ldd	r25, Y+34	; 0x22
    22f0:	9e 8f       	std	Y+30, r25	; 0x1e
    22f2:	8d 8f       	std	Y+29, r24	; 0x1d
    22f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <LCD_sendCommand+0x682>
    22fc:	9e 8f       	std	Y+30, r25	; 0x1e
    22fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2300:	fe 01       	movw	r30, r28
    2302:	ed 59       	subi	r30, 0x9D	; 157
    2304:	ff 4f       	sbci	r31, 0xFF	; 255
    2306:	80 81       	ld	r24, Z
    2308:	98 2f       	mov	r25, r24
    230a:	91 70       	andi	r25, 0x01	; 1
    230c:	82 e0       	ldi	r24, 0x02	; 2
    230e:	64 e0       	ldi	r22, 0x04	; 4
    2310:	49 2f       	mov	r20, r25
    2312:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2316:	fe 01       	movw	r30, r28
    2318:	ed 59       	subi	r30, 0x9D	; 157
    231a:	ff 4f       	sbci	r31, 0xFF	; 255
    231c:	80 81       	ld	r24, Z
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	82 70       	andi	r24, 0x02	; 2
    2324:	90 70       	andi	r25, 0x00	; 0
    2326:	95 95       	asr	r25
    2328:	87 95       	ror	r24
    232a:	98 2f       	mov	r25, r24
    232c:	82 e0       	ldi	r24, 0x02	; 2
    232e:	65 e0       	ldi	r22, 0x05	; 5
    2330:	49 2f       	mov	r20, r25
    2332:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2336:	fe 01       	movw	r30, r28
    2338:	ed 59       	subi	r30, 0x9D	; 157
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	88 2f       	mov	r24, r24
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	84 70       	andi	r24, 0x04	; 4
    2344:	90 70       	andi	r25, 0x00	; 0
    2346:	95 95       	asr	r25
    2348:	87 95       	ror	r24
    234a:	95 95       	asr	r25
    234c:	87 95       	ror	r24
    234e:	98 2f       	mov	r25, r24
    2350:	82 e0       	ldi	r24, 0x02	; 2
    2352:	66 e0       	ldi	r22, 0x06	; 6
    2354:	49 2f       	mov	r20, r25
    2356:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    235a:	fe 01       	movw	r30, r28
    235c:	ed 59       	subi	r30, 0x9D	; 157
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	80 81       	ld	r24, Z
    2362:	88 2f       	mov	r24, r24
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	88 70       	andi	r24, 0x08	; 8
    2368:	90 70       	andi	r25, 0x00	; 0
    236a:	95 95       	asr	r25
    236c:	87 95       	ror	r24
    236e:	95 95       	asr	r25
    2370:	87 95       	ror	r24
    2372:	95 95       	asr	r25
    2374:	87 95       	ror	r24
    2376:	98 2f       	mov	r25, r24
    2378:	82 e0       	ldi	r24, 0x02	; 2
    237a:	67 e0       	ldi	r22, 0x07	; 7
    237c:	49 2f       	mov	r20, r25
    237e:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e8       	ldi	r26, 0x80	; 128
    2388:	bf e3       	ldi	r27, 0x3F	; 63
    238a:	89 8f       	std	Y+25, r24	; 0x19
    238c:	9a 8f       	std	Y+26, r25	; 0x1a
    238e:	ab 8f       	std	Y+27, r26	; 0x1b
    2390:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2392:	69 8d       	ldd	r22, Y+25	; 0x19
    2394:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2396:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2398:	9c 8d       	ldd	r25, Y+28	; 0x1c
    239a:	20 e0       	ldi	r18, 0x00	; 0
    239c:	30 e0       	ldi	r19, 0x00	; 0
    239e:	4a e7       	ldi	r20, 0x7A	; 122
    23a0:	53 e4       	ldi	r21, 0x43	; 67
    23a2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	8d 8b       	std	Y+21, r24	; 0x15
    23ac:	9e 8b       	std	Y+22, r25	; 0x16
    23ae:	af 8b       	std	Y+23, r26	; 0x17
    23b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23b2:	6d 89       	ldd	r22, Y+21	; 0x15
    23b4:	7e 89       	ldd	r23, Y+22	; 0x16
    23b6:	8f 89       	ldd	r24, Y+23	; 0x17
    23b8:	98 8d       	ldd	r25, Y+24	; 0x18
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	40 e8       	ldi	r20, 0x80	; 128
    23c0:	5f e3       	ldi	r21, 0x3F	; 63
    23c2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    23c6:	88 23       	and	r24, r24
    23c8:	2c f4       	brge	.+10     	; 0x23d4 <LCD_sendCommand+0x75e>
		__ticks = 1;
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	9c 8b       	std	Y+20, r25	; 0x14
    23d0:	8b 8b       	std	Y+19, r24	; 0x13
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	3f ef       	ldi	r19, 0xFF	; 255
    23e0:	4f e7       	ldi	r20, 0x7F	; 127
    23e2:	57 e4       	ldi	r21, 0x47	; 71
    23e4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    23e8:	18 16       	cp	r1, r24
    23ea:	4c f5       	brge	.+82     	; 0x243e <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ec:	69 8d       	ldd	r22, Y+25	; 0x19
    23ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	40 e2       	ldi	r20, 0x20	; 32
    23fa:	51 e4       	ldi	r21, 0x41	; 65
    23fc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	bc 01       	movw	r22, r24
    2406:	cd 01       	movw	r24, r26
    2408:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	9c 8b       	std	Y+20, r25	; 0x14
    2412:	8b 8b       	std	Y+19, r24	; 0x13
    2414:	0f c0       	rjmp	.+30     	; 0x2434 <LCD_sendCommand+0x7be>
    2416:	89 e1       	ldi	r24, 0x19	; 25
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	9a 8b       	std	Y+18, r25	; 0x12
    241c:	89 8b       	std	Y+17, r24	; 0x11
    241e:	89 89       	ldd	r24, Y+17	; 0x11
    2420:	9a 89       	ldd	r25, Y+18	; 0x12
    2422:	01 97       	sbiw	r24, 0x01	; 1
    2424:	f1 f7       	brne	.-4      	; 0x2422 <LCD_sendCommand+0x7ac>
    2426:	9a 8b       	std	Y+18, r25	; 0x12
    2428:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    242a:	8b 89       	ldd	r24, Y+19	; 0x13
    242c:	9c 89       	ldd	r25, Y+20	; 0x14
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	9c 8b       	std	Y+20, r25	; 0x14
    2432:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	00 97       	sbiw	r24, 0x00	; 0
    243a:	69 f7       	brne	.-38     	; 0x2416 <LCD_sendCommand+0x7a0>
    243c:	14 c0       	rjmp	.+40     	; 0x2466 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243e:	6d 89       	ldd	r22, Y+21	; 0x15
    2440:	7e 89       	ldd	r23, Y+22	; 0x16
    2442:	8f 89       	ldd	r24, Y+23	; 0x17
    2444:	98 8d       	ldd	r25, Y+24	; 0x18
    2446:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    244a:	dc 01       	movw	r26, r24
    244c:	cb 01       	movw	r24, r22
    244e:	9c 8b       	std	Y+20, r25	; 0x14
    2450:	8b 8b       	std	Y+19, r24	; 0x13
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	98 8b       	std	Y+16, r25	; 0x10
    2458:	8f 87       	std	Y+15, r24	; 0x0f
    245a:	8f 85       	ldd	r24, Y+15	; 0x0f
    245c:	98 89       	ldd	r25, Y+16	; 0x10
    245e:	01 97       	sbiw	r24, 0x01	; 1
    2460:	f1 f7       	brne	.-4      	; 0x245e <LCD_sendCommand+0x7e8>
    2462:	98 8b       	std	Y+16, r25	; 0x10
    2464:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2466:	82 e0       	ldi	r24, 0x02	; 2
    2468:	61 e0       	ldi	r22, 0x01	; 1
    246a:	40 e0       	ldi	r20, 0x00	; 0
    246c:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	a0 e8       	ldi	r26, 0x80	; 128
    2476:	bf e3       	ldi	r27, 0x3F	; 63
    2478:	8b 87       	std	Y+11, r24	; 0x0b
    247a:	9c 87       	std	Y+12, r25	; 0x0c
    247c:	ad 87       	std	Y+13, r26	; 0x0d
    247e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2480:	6b 85       	ldd	r22, Y+11	; 0x0b
    2482:	7c 85       	ldd	r23, Y+12	; 0x0c
    2484:	8d 85       	ldd	r24, Y+13	; 0x0d
    2486:	9e 85       	ldd	r25, Y+14	; 0x0e
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	30 e0       	ldi	r19, 0x00	; 0
    248c:	4a e7       	ldi	r20, 0x7A	; 122
    248e:	53 e4       	ldi	r21, 0x43	; 67
    2490:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2494:	dc 01       	movw	r26, r24
    2496:	cb 01       	movw	r24, r22
    2498:	8f 83       	std	Y+7, r24	; 0x07
    249a:	98 87       	std	Y+8, r25	; 0x08
    249c:	a9 87       	std	Y+9, r26	; 0x09
    249e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24a0:	6f 81       	ldd	r22, Y+7	; 0x07
    24a2:	78 85       	ldd	r23, Y+8	; 0x08
    24a4:	89 85       	ldd	r24, Y+9	; 0x09
    24a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e8       	ldi	r20, 0x80	; 128
    24ae:	5f e3       	ldi	r21, 0x3F	; 63
    24b0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    24b4:	88 23       	and	r24, r24
    24b6:	2c f4       	brge	.+10     	; 0x24c2 <LCD_sendCommand+0x84c>
		__ticks = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	9e 83       	std	Y+6, r25	; 0x06
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	3f c0       	rjmp	.+126    	; 0x2540 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	20 e0       	ldi	r18, 0x00	; 0
    24cc:	3f ef       	ldi	r19, 0xFF	; 255
    24ce:	4f e7       	ldi	r20, 0x7F	; 127
    24d0:	57 e4       	ldi	r21, 0x47	; 71
    24d2:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    24d6:	18 16       	cp	r1, r24
    24d8:	4c f5       	brge	.+82     	; 0x252c <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24da:	6b 85       	ldd	r22, Y+11	; 0x0b
    24dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    24de:	8d 85       	ldd	r24, Y+13	; 0x0d
    24e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	40 e2       	ldi	r20, 0x20	; 32
    24e8:	51 e4       	ldi	r21, 0x41	; 65
    24ea:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	bc 01       	movw	r22, r24
    24f4:	cd 01       	movw	r24, r26
    24f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	9e 83       	std	Y+6, r25	; 0x06
    2500:	8d 83       	std	Y+5, r24	; 0x05
    2502:	0f c0       	rjmp	.+30     	; 0x2522 <LCD_sendCommand+0x8ac>
    2504:	89 e1       	ldi	r24, 0x19	; 25
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	8b 83       	std	Y+3, r24	; 0x03
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <LCD_sendCommand+0x89a>
    2514:	9c 83       	std	Y+4, r25	; 0x04
    2516:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2518:	8d 81       	ldd	r24, Y+5	; 0x05
    251a:	9e 81       	ldd	r25, Y+6	; 0x06
    251c:	01 97       	sbiw	r24, 0x01	; 1
    251e:	9e 83       	std	Y+6, r25	; 0x06
    2520:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2522:	8d 81       	ldd	r24, Y+5	; 0x05
    2524:	9e 81       	ldd	r25, Y+6	; 0x06
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	69 f7       	brne	.-38     	; 0x2504 <LCD_sendCommand+0x88e>
    252a:	14 c0       	rjmp	.+40     	; 0x2554 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    252c:	6f 81       	ldd	r22, Y+7	; 0x07
    252e:	78 85       	ldd	r23, Y+8	; 0x08
    2530:	89 85       	ldd	r24, Y+9	; 0x09
    2532:	9a 85       	ldd	r25, Y+10	; 0x0a
    2534:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	9e 83       	std	Y+6, r25	; 0x06
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	8d 81       	ldd	r24, Y+5	; 0x05
    2542:	9e 81       	ldd	r25, Y+6	; 0x06
    2544:	9a 83       	std	Y+2, r25	; 0x02
    2546:	89 83       	std	Y+1, r24	; 0x01
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	01 97       	sbiw	r24, 0x01	; 1
    254e:	f1 f7       	brne	.-4      	; 0x254c <LCD_sendCommand+0x8d6>
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2554:	cd 59       	subi	r28, 0x9D	; 157
    2556:	df 4f       	sbci	r29, 0xFF	; 255
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	08 95       	ret

0000256c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    256c:	0f 93       	push	r16
    256e:	1f 93       	push	r17
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
    2578:	c3 56       	subi	r28, 0x63	; 99
    257a:	d0 40       	sbci	r29, 0x00	; 0
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	fe 01       	movw	r30, r28
    2588:	ed 59       	subi	r30, 0x9D	; 157
    258a:	ff 4f       	sbci	r31, 0xFF	; 255
    258c:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    258e:	82 e0       	ldi	r24, 0x02	; 2
    2590:	60 e0       	ldi	r22, 0x00	; 0
    2592:	41 e0       	ldi	r20, 0x01	; 1
    2594:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2598:	fe 01       	movw	r30, r28
    259a:	e1 5a       	subi	r30, 0xA1	; 161
    259c:	ff 4f       	sbci	r31, 0xFF	; 255
    259e:	80 e0       	ldi	r24, 0x00	; 0
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	a0 e8       	ldi	r26, 0x80	; 128
    25a4:	bf e3       	ldi	r27, 0x3F	; 63
    25a6:	80 83       	st	Z, r24
    25a8:	91 83       	std	Z+1, r25	; 0x01
    25aa:	a2 83       	std	Z+2, r26	; 0x02
    25ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ae:	8e 01       	movw	r16, r28
    25b0:	05 5a       	subi	r16, 0xA5	; 165
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e1 5a       	subi	r30, 0xA1	; 161
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	4a e7       	ldi	r20, 0x7A	; 122
    25c8:	53 e4       	ldi	r21, 0x43	; 67
    25ca:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	f8 01       	movw	r30, r16
    25d4:	80 83       	st	Z, r24
    25d6:	91 83       	std	Z+1, r25	; 0x01
    25d8:	a2 83       	std	Z+2, r26	; 0x02
    25da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25dc:	fe 01       	movw	r30, r28
    25de:	e5 5a       	subi	r30, 0xA5	; 165
    25e0:	ff 4f       	sbci	r31, 0xFF	; 255
    25e2:	60 81       	ld	r22, Z
    25e4:	71 81       	ldd	r23, Z+1	; 0x01
    25e6:	82 81       	ldd	r24, Z+2	; 0x02
    25e8:	93 81       	ldd	r25, Z+3	; 0x03
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	40 e8       	ldi	r20, 0x80	; 128
    25f0:	5f e3       	ldi	r21, 0x3F	; 63
    25f2:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    25f6:	88 23       	and	r24, r24
    25f8:	44 f4       	brge	.+16     	; 0x260a <LCD_displayCharacter+0x9e>
		__ticks = 1;
    25fa:	fe 01       	movw	r30, r28
    25fc:	e7 5a       	subi	r30, 0xA7	; 167
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	91 83       	std	Z+1, r25	; 0x01
    2606:	80 83       	st	Z, r24
    2608:	64 c0       	rjmp	.+200    	; 0x26d2 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    260a:	fe 01       	movw	r30, r28
    260c:	e5 5a       	subi	r30, 0xA5	; 165
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	60 81       	ld	r22, Z
    2612:	71 81       	ldd	r23, Z+1	; 0x01
    2614:	82 81       	ldd	r24, Z+2	; 0x02
    2616:	93 81       	ldd	r25, Z+3	; 0x03
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	3f ef       	ldi	r19, 0xFF	; 255
    261c:	4f e7       	ldi	r20, 0x7F	; 127
    261e:	57 e4       	ldi	r21, 0x47	; 71
    2620:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2624:	18 16       	cp	r1, r24
    2626:	0c f0       	brlt	.+2      	; 0x262a <LCD_displayCharacter+0xbe>
    2628:	43 c0       	rjmp	.+134    	; 0x26b0 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    262a:	fe 01       	movw	r30, r28
    262c:	e1 5a       	subi	r30, 0xA1	; 161
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e2       	ldi	r20, 0x20	; 32
    263e:	51 e4       	ldi	r21, 0x41	; 65
    2640:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2644:	dc 01       	movw	r26, r24
    2646:	cb 01       	movw	r24, r22
    2648:	8e 01       	movw	r16, r28
    264a:	07 5a       	subi	r16, 0xA7	; 167
    264c:	1f 4f       	sbci	r17, 0xFF	; 255
    264e:	bc 01       	movw	r22, r24
    2650:	cd 01       	movw	r24, r26
    2652:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	f8 01       	movw	r30, r16
    265c:	91 83       	std	Z+1, r25	; 0x01
    265e:	80 83       	st	Z, r24
    2660:	1f c0       	rjmp	.+62     	; 0x26a0 <LCD_displayCharacter+0x134>
    2662:	fe 01       	movw	r30, r28
    2664:	e9 5a       	subi	r30, 0xA9	; 169
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	89 e1       	ldi	r24, 0x19	; 25
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	fe 01       	movw	r30, r28
    2672:	e9 5a       	subi	r30, 0xA9	; 169
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	80 81       	ld	r24, Z
    2678:	91 81       	ldd	r25, Z+1	; 0x01
    267a:	01 97       	sbiw	r24, 0x01	; 1
    267c:	f1 f7       	brne	.-4      	; 0x267a <LCD_displayCharacter+0x10e>
    267e:	fe 01       	movw	r30, r28
    2680:	e9 5a       	subi	r30, 0xA9	; 169
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2688:	de 01       	movw	r26, r28
    268a:	a7 5a       	subi	r26, 0xA7	; 167
    268c:	bf 4f       	sbci	r27, 0xFF	; 255
    268e:	fe 01       	movw	r30, r28
    2690:	e7 5a       	subi	r30, 0xA7	; 167
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	91 81       	ldd	r25, Z+1	; 0x01
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	11 96       	adiw	r26, 0x01	; 1
    269c:	9c 93       	st	X, r25
    269e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26a0:	fe 01       	movw	r30, r28
    26a2:	e7 5a       	subi	r30, 0xA7	; 167
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	91 81       	ldd	r25, Z+1	; 0x01
    26aa:	00 97       	sbiw	r24, 0x00	; 0
    26ac:	d1 f6       	brne	.-76     	; 0x2662 <LCD_displayCharacter+0xf6>
    26ae:	27 c0       	rjmp	.+78     	; 0x26fe <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b0:	8e 01       	movw	r16, r28
    26b2:	07 5a       	subi	r16, 0xA7	; 167
    26b4:	1f 4f       	sbci	r17, 0xFF	; 255
    26b6:	fe 01       	movw	r30, r28
    26b8:	e5 5a       	subi	r30, 0xA5	; 165
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	f8 01       	movw	r30, r16
    26ce:	91 83       	std	Z+1, r25	; 0x01
    26d0:	80 83       	st	Z, r24
    26d2:	de 01       	movw	r26, r28
    26d4:	ab 5a       	subi	r26, 0xAB	; 171
    26d6:	bf 4f       	sbci	r27, 0xFF	; 255
    26d8:	fe 01       	movw	r30, r28
    26da:	e7 5a       	subi	r30, 0xA7	; 167
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	8d 93       	st	X+, r24
    26e4:	9c 93       	st	X, r25
    26e6:	fe 01       	movw	r30, r28
    26e8:	eb 5a       	subi	r30, 0xAB	; 171
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	80 81       	ld	r24, Z
    26ee:	91 81       	ldd	r25, Z+1	; 0x01
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <LCD_displayCharacter+0x184>
    26f4:	fe 01       	movw	r30, r28
    26f6:	eb 5a       	subi	r30, 0xAB	; 171
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	91 83       	std	Z+1, r25	; 0x01
    26fc:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	61 e0       	ldi	r22, 0x01	; 1
    2702:	41 e0       	ldi	r20, 0x01	; 1
    2704:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2708:	fe 01       	movw	r30, r28
    270a:	ef 5a       	subi	r30, 0xAF	; 175
    270c:	ff 4f       	sbci	r31, 0xFF	; 255
    270e:	80 e0       	ldi	r24, 0x00	; 0
    2710:	90 e0       	ldi	r25, 0x00	; 0
    2712:	a0 e8       	ldi	r26, 0x80	; 128
    2714:	bf e3       	ldi	r27, 0x3F	; 63
    2716:	80 83       	st	Z, r24
    2718:	91 83       	std	Z+1, r25	; 0x01
    271a:	a2 83       	std	Z+2, r26	; 0x02
    271c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    271e:	8e 01       	movw	r16, r28
    2720:	03 5b       	subi	r16, 0xB3	; 179
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	ef 5a       	subi	r30, 0xAF	; 175
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	4a e7       	ldi	r20, 0x7A	; 122
    2738:	53 e4       	ldi	r21, 0x43	; 67
    273a:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	f8 01       	movw	r30, r16
    2744:	80 83       	st	Z, r24
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	a2 83       	std	Z+2, r26	; 0x02
    274a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    274c:	fe 01       	movw	r30, r28
    274e:	e3 5b       	subi	r30, 0xB3	; 179
    2750:	ff 4f       	sbci	r31, 0xFF	; 255
    2752:	60 81       	ld	r22, Z
    2754:	71 81       	ldd	r23, Z+1	; 0x01
    2756:	82 81       	ldd	r24, Z+2	; 0x02
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e8       	ldi	r20, 0x80	; 128
    2760:	5f e3       	ldi	r21, 0x3F	; 63
    2762:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2766:	88 23       	and	r24, r24
    2768:	44 f4       	brge	.+16     	; 0x277a <LCD_displayCharacter+0x20e>
		__ticks = 1;
    276a:	fe 01       	movw	r30, r28
    276c:	e5 5b       	subi	r30, 0xB5	; 181
    276e:	ff 4f       	sbci	r31, 0xFF	; 255
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	90 e0       	ldi	r25, 0x00	; 0
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	80 83       	st	Z, r24
    2778:	64 c0       	rjmp	.+200    	; 0x2842 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    277a:	fe 01       	movw	r30, r28
    277c:	e3 5b       	subi	r30, 0xB3	; 179
    277e:	ff 4f       	sbci	r31, 0xFF	; 255
    2780:	60 81       	ld	r22, Z
    2782:	71 81       	ldd	r23, Z+1	; 0x01
    2784:	82 81       	ldd	r24, Z+2	; 0x02
    2786:	93 81       	ldd	r25, Z+3	; 0x03
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	3f ef       	ldi	r19, 0xFF	; 255
    278c:	4f e7       	ldi	r20, 0x7F	; 127
    278e:	57 e4       	ldi	r21, 0x47	; 71
    2790:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2794:	18 16       	cp	r1, r24
    2796:	0c f0       	brlt	.+2      	; 0x279a <LCD_displayCharacter+0x22e>
    2798:	43 c0       	rjmp	.+134    	; 0x2820 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279a:	fe 01       	movw	r30, r28
    279c:	ef 5a       	subi	r30, 0xAF	; 175
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	8e 01       	movw	r16, r28
    27ba:	05 5b       	subi	r16, 0xB5	; 181
    27bc:	1f 4f       	sbci	r17, 0xFF	; 255
    27be:	bc 01       	movw	r22, r24
    27c0:	cd 01       	movw	r24, r26
    27c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    27c6:	dc 01       	movw	r26, r24
    27c8:	cb 01       	movw	r24, r22
    27ca:	f8 01       	movw	r30, r16
    27cc:	91 83       	std	Z+1, r25	; 0x01
    27ce:	80 83       	st	Z, r24
    27d0:	1f c0       	rjmp	.+62     	; 0x2810 <LCD_displayCharacter+0x2a4>
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5b       	subi	r30, 0xB7	; 183
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	89 e1       	ldi	r24, 0x19	; 25
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 5b       	subi	r30, 0xB7	; 183
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	80 81       	ld	r24, Z
    27e8:	91 81       	ldd	r25, Z+1	; 0x01
    27ea:	01 97       	sbiw	r24, 0x01	; 1
    27ec:	f1 f7       	brne	.-4      	; 0x27ea <LCD_displayCharacter+0x27e>
    27ee:	fe 01       	movw	r30, r28
    27f0:	e7 5b       	subi	r30, 0xB7	; 183
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	91 83       	std	Z+1, r25	; 0x01
    27f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f8:	de 01       	movw	r26, r28
    27fa:	a5 5b       	subi	r26, 0xB5	; 181
    27fc:	bf 4f       	sbci	r27, 0xFF	; 255
    27fe:	fe 01       	movw	r30, r28
    2800:	e5 5b       	subi	r30, 0xB5	; 181
    2802:	ff 4f       	sbci	r31, 0xFF	; 255
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	11 96       	adiw	r26, 0x01	; 1
    280c:	9c 93       	st	X, r25
    280e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2810:	fe 01       	movw	r30, r28
    2812:	e5 5b       	subi	r30, 0xB5	; 181
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	80 81       	ld	r24, Z
    2818:	91 81       	ldd	r25, Z+1	; 0x01
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	d1 f6       	brne	.-76     	; 0x27d2 <LCD_displayCharacter+0x266>
    281e:	27 c0       	rjmp	.+78     	; 0x286e <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	8e 01       	movw	r16, r28
    2822:	05 5b       	subi	r16, 0xB5	; 181
    2824:	1f 4f       	sbci	r17, 0xFF	; 255
    2826:	fe 01       	movw	r30, r28
    2828:	e3 5b       	subi	r30, 0xB3	; 179
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	60 81       	ld	r22, Z
    282e:	71 81       	ldd	r23, Z+1	; 0x01
    2830:	82 81       	ldd	r24, Z+2	; 0x02
    2832:	93 81       	ldd	r25, Z+3	; 0x03
    2834:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2838:	dc 01       	movw	r26, r24
    283a:	cb 01       	movw	r24, r22
    283c:	f8 01       	movw	r30, r16
    283e:	91 83       	std	Z+1, r25	; 0x01
    2840:	80 83       	st	Z, r24
    2842:	de 01       	movw	r26, r28
    2844:	a9 5b       	subi	r26, 0xB9	; 185
    2846:	bf 4f       	sbci	r27, 0xFF	; 255
    2848:	fe 01       	movw	r30, r28
    284a:	e5 5b       	subi	r30, 0xB5	; 181
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	8d 93       	st	X+, r24
    2854:	9c 93       	st	X, r25
    2856:	fe 01       	movw	r30, r28
    2858:	e9 5b       	subi	r30, 0xB9	; 185
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	80 81       	ld	r24, Z
    285e:	91 81       	ldd	r25, Z+1	; 0x01
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_displayCharacter+0x2f4>
    2864:	fe 01       	movw	r30, r28
    2866:	e9 5b       	subi	r30, 0xB9	; 185
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	91 83       	std	Z+1, r25	; 0x01
    286c:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    286e:	fe 01       	movw	r30, r28
    2870:	ed 59       	subi	r30, 0x9D	; 157
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	80 81       	ld	r24, Z
    2876:	88 2f       	mov	r24, r24
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	80 71       	andi	r24, 0x10	; 16
    287c:	90 70       	andi	r25, 0x00	; 0
    287e:	95 95       	asr	r25
    2880:	87 95       	ror	r24
    2882:	95 95       	asr	r25
    2884:	87 95       	ror	r24
    2886:	95 95       	asr	r25
    2888:	87 95       	ror	r24
    288a:	95 95       	asr	r25
    288c:	87 95       	ror	r24
    288e:	98 2f       	mov	r25, r24
    2890:	82 e0       	ldi	r24, 0x02	; 2
    2892:	64 e0       	ldi	r22, 0x04	; 4
    2894:	49 2f       	mov	r20, r25
    2896:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    289a:	fe 01       	movw	r30, r28
    289c:	ed 59       	subi	r30, 0x9D	; 157
    289e:	ff 4f       	sbci	r31, 0xFF	; 255
    28a0:	80 81       	ld	r24, Z
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	80 72       	andi	r24, 0x20	; 32
    28a8:	90 70       	andi	r25, 0x00	; 0
    28aa:	95 95       	asr	r25
    28ac:	87 95       	ror	r24
    28ae:	95 95       	asr	r25
    28b0:	87 95       	ror	r24
    28b2:	95 95       	asr	r25
    28b4:	87 95       	ror	r24
    28b6:	95 95       	asr	r25
    28b8:	87 95       	ror	r24
    28ba:	95 95       	asr	r25
    28bc:	87 95       	ror	r24
    28be:	98 2f       	mov	r25, r24
    28c0:	82 e0       	ldi	r24, 0x02	; 2
    28c2:	65 e0       	ldi	r22, 0x05	; 5
    28c4:	49 2f       	mov	r20, r25
    28c6:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    28ca:	fe 01       	movw	r30, r28
    28cc:	ed 59       	subi	r30, 0x9D	; 157
    28ce:	ff 4f       	sbci	r31, 0xFF	; 255
    28d0:	80 81       	ld	r24, Z
    28d2:	88 2f       	mov	r24, r24
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	80 74       	andi	r24, 0x40	; 64
    28d8:	90 70       	andi	r25, 0x00	; 0
    28da:	08 2e       	mov	r0, r24
    28dc:	89 2f       	mov	r24, r25
    28de:	00 0c       	add	r0, r0
    28e0:	88 1f       	adc	r24, r24
    28e2:	99 0b       	sbc	r25, r25
    28e4:	00 0c       	add	r0, r0
    28e6:	88 1f       	adc	r24, r24
    28e8:	99 1f       	adc	r25, r25
    28ea:	98 2f       	mov	r25, r24
    28ec:	82 e0       	ldi	r24, 0x02	; 2
    28ee:	66 e0       	ldi	r22, 0x06	; 6
    28f0:	49 2f       	mov	r20, r25
    28f2:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    28f6:	fe 01       	movw	r30, r28
    28f8:	ed 59       	subi	r30, 0x9D	; 157
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	80 81       	ld	r24, Z
    28fe:	98 2f       	mov	r25, r24
    2900:	99 1f       	adc	r25, r25
    2902:	99 27       	eor	r25, r25
    2904:	99 1f       	adc	r25, r25
    2906:	82 e0       	ldi	r24, 0x02	; 2
    2908:	67 e0       	ldi	r22, 0x07	; 7
    290a:	49 2f       	mov	r20, r25
    290c:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2910:	fe 01       	movw	r30, r28
    2912:	ed 5b       	subi	r30, 0xBD	; 189
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a0 e8       	ldi	r26, 0x80	; 128
    291c:	bf e3       	ldi	r27, 0x3F	; 63
    291e:	80 83       	st	Z, r24
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	a2 83       	std	Z+2, r26	; 0x02
    2924:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	8e 01       	movw	r16, r28
    2928:	01 5c       	subi	r16, 0xC1	; 193
    292a:	1f 4f       	sbci	r17, 0xFF	; 255
    292c:	fe 01       	movw	r30, r28
    292e:	ed 5b       	subi	r30, 0xBD	; 189
    2930:	ff 4f       	sbci	r31, 0xFF	; 255
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a e7       	ldi	r20, 0x7A	; 122
    2940:	53 e4       	ldi	r21, 0x43	; 67
    2942:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	f8 01       	movw	r30, r16
    294c:	80 83       	st	Z, r24
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	a2 83       	std	Z+2, r26	; 0x02
    2952:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2954:	fe 01       	movw	r30, r28
    2956:	ff 96       	adiw	r30, 0x3f	; 63
    2958:	60 81       	ld	r22, Z
    295a:	71 81       	ldd	r23, Z+1	; 0x01
    295c:	82 81       	ldd	r24, Z+2	; 0x02
    295e:	93 81       	ldd	r25, Z+3	; 0x03
    2960:	20 e0       	ldi	r18, 0x00	; 0
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	40 e8       	ldi	r20, 0x80	; 128
    2966:	5f e3       	ldi	r21, 0x3F	; 63
    2968:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    296c:	88 23       	and	r24, r24
    296e:	2c f4       	brge	.+10     	; 0x297a <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	9e af       	std	Y+62, r25	; 0x3e
    2976:	8d af       	std	Y+61, r24	; 0x3d
    2978:	46 c0       	rjmp	.+140    	; 0x2a06 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    297a:	fe 01       	movw	r30, r28
    297c:	ff 96       	adiw	r30, 0x3f	; 63
    297e:	60 81       	ld	r22, Z
    2980:	71 81       	ldd	r23, Z+1	; 0x01
    2982:	82 81       	ldd	r24, Z+2	; 0x02
    2984:	93 81       	ldd	r25, Z+3	; 0x03
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	3f ef       	ldi	r19, 0xFF	; 255
    298a:	4f e7       	ldi	r20, 0x7F	; 127
    298c:	57 e4       	ldi	r21, 0x47	; 71
    298e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2992:	18 16       	cp	r1, r24
    2994:	64 f5       	brge	.+88     	; 0x29ee <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2996:	fe 01       	movw	r30, r28
    2998:	ed 5b       	subi	r30, 0xBD	; 189
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	60 81       	ld	r22, Z
    299e:	71 81       	ldd	r23, Z+1	; 0x01
    29a0:	82 81       	ldd	r24, Z+2	; 0x02
    29a2:	93 81       	ldd	r25, Z+3	; 0x03
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e af       	std	Y+62, r25	; 0x3e
    29c2:	8d af       	std	Y+61, r24	; 0x3d
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <LCD_displayCharacter+0x478>
    29c6:	89 e1       	ldi	r24, 0x19	; 25
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9c af       	std	Y+60, r25	; 0x3c
    29cc:	8b af       	std	Y+59, r24	; 0x3b
    29ce:	8b ad       	ldd	r24, Y+59	; 0x3b
    29d0:	9c ad       	ldd	r25, Y+60	; 0x3c
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_displayCharacter+0x466>
    29d6:	9c af       	std	Y+60, r25	; 0x3c
    29d8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	8d ad       	ldd	r24, Y+61	; 0x3d
    29dc:	9e ad       	ldd	r25, Y+62	; 0x3e
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9e af       	std	Y+62, r25	; 0x3e
    29e2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    29e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <LCD_displayCharacter+0x45a>
    29ec:	16 c0       	rjmp	.+44     	; 0x2a1a <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	fe 01       	movw	r30, r28
    29f0:	ff 96       	adiw	r30, 0x3f	; 63
    29f2:	60 81       	ld	r22, Z
    29f4:	71 81       	ldd	r23, Z+1	; 0x01
    29f6:	82 81       	ldd	r24, Z+2	; 0x02
    29f8:	93 81       	ldd	r25, Z+3	; 0x03
    29fa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    29fe:	dc 01       	movw	r26, r24
    2a00:	cb 01       	movw	r24, r22
    2a02:	9e af       	std	Y+62, r25	; 0x3e
    2a04:	8d af       	std	Y+61, r24	; 0x3d
    2a06:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a08:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a0a:	9a af       	std	Y+58, r25	; 0x3a
    2a0c:	89 af       	std	Y+57, r24	; 0x39
    2a0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a10:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <LCD_displayCharacter+0x4a6>
    2a16:	9a af       	std	Y+58, r25	; 0x3a
    2a18:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a1a:	82 e0       	ldi	r24, 0x02	; 2
    2a1c:	61 e0       	ldi	r22, 0x01	; 1
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a0 e8       	ldi	r26, 0x80	; 128
    2a2a:	bf e3       	ldi	r27, 0x3F	; 63
    2a2c:	8d ab       	std	Y+53, r24	; 0x35
    2a2e:	9e ab       	std	Y+54, r25	; 0x36
    2a30:	af ab       	std	Y+55, r26	; 0x37
    2a32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a34:	6d a9       	ldd	r22, Y+53	; 0x35
    2a36:	7e a9       	ldd	r23, Y+54	; 0x36
    2a38:	8f a9       	ldd	r24, Y+55	; 0x37
    2a3a:	98 ad       	ldd	r25, Y+56	; 0x38
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	4a e7       	ldi	r20, 0x7A	; 122
    2a42:	53 e4       	ldi	r21, 0x43	; 67
    2a44:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2a48:	dc 01       	movw	r26, r24
    2a4a:	cb 01       	movw	r24, r22
    2a4c:	89 ab       	std	Y+49, r24	; 0x31
    2a4e:	9a ab       	std	Y+50, r25	; 0x32
    2a50:	ab ab       	std	Y+51, r26	; 0x33
    2a52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a54:	69 a9       	ldd	r22, Y+49	; 0x31
    2a56:	7a a9       	ldd	r23, Y+50	; 0x32
    2a58:	8b a9       	ldd	r24, Y+51	; 0x33
    2a5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2a5c:	20 e0       	ldi	r18, 0x00	; 0
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	40 e8       	ldi	r20, 0x80	; 128
    2a62:	5f e3       	ldi	r21, 0x3F	; 63
    2a64:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2a68:	88 23       	and	r24, r24
    2a6a:	2c f4       	brge	.+10     	; 0x2a76 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	98 ab       	std	Y+48, r25	; 0x30
    2a72:	8f a7       	std	Y+47, r24	; 0x2f
    2a74:	3f c0       	rjmp	.+126    	; 0x2af4 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2a76:	69 a9       	ldd	r22, Y+49	; 0x31
    2a78:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a7c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	57 e4       	ldi	r21, 0x47	; 71
    2a86:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2a8a:	18 16       	cp	r1, r24
    2a8c:	4c f5       	brge	.+82     	; 0x2ae0 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a8e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a90:	7e a9       	ldd	r23, Y+54	; 0x36
    2a92:	8f a9       	ldd	r24, Y+55	; 0x37
    2a94:	98 ad       	ldd	r25, Y+56	; 0x38
    2a96:	20 e0       	ldi	r18, 0x00	; 0
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	40 e2       	ldi	r20, 0x20	; 32
    2a9c:	51 e4       	ldi	r21, 0x41	; 65
    2a9e:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	bc 01       	movw	r22, r24
    2aa8:	cd 01       	movw	r24, r26
    2aaa:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2aae:	dc 01       	movw	r26, r24
    2ab0:	cb 01       	movw	r24, r22
    2ab2:	98 ab       	std	Y+48, r25	; 0x30
    2ab4:	8f a7       	std	Y+47, r24	; 0x2f
    2ab6:	0f c0       	rjmp	.+30     	; 0x2ad6 <LCD_displayCharacter+0x56a>
    2ab8:	89 e1       	ldi	r24, 0x19	; 25
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	9e a7       	std	Y+46, r25	; 0x2e
    2abe:	8d a7       	std	Y+45, r24	; 0x2d
    2ac0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ac2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	f1 f7       	brne	.-4      	; 0x2ac4 <LCD_displayCharacter+0x558>
    2ac8:	9e a7       	std	Y+46, r25	; 0x2e
    2aca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2acc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ace:	98 a9       	ldd	r25, Y+48	; 0x30
    2ad0:	01 97       	sbiw	r24, 0x01	; 1
    2ad2:	98 ab       	std	Y+48, r25	; 0x30
    2ad4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ad6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ad8:	98 a9       	ldd	r25, Y+48	; 0x30
    2ada:	00 97       	sbiw	r24, 0x00	; 0
    2adc:	69 f7       	brne	.-38     	; 0x2ab8 <LCD_displayCharacter+0x54c>
    2ade:	14 c0       	rjmp	.+40     	; 0x2b08 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ae0:	69 a9       	ldd	r22, Y+49	; 0x31
    2ae2:	7a a9       	ldd	r23, Y+50	; 0x32
    2ae4:	8b a9       	ldd	r24, Y+51	; 0x33
    2ae6:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2aec:	dc 01       	movw	r26, r24
    2aee:	cb 01       	movw	r24, r22
    2af0:	98 ab       	std	Y+48, r25	; 0x30
    2af2:	8f a7       	std	Y+47, r24	; 0x2f
    2af4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af6:	98 a9       	ldd	r25, Y+48	; 0x30
    2af8:	9c a7       	std	Y+44, r25	; 0x2c
    2afa:	8b a7       	std	Y+43, r24	; 0x2b
    2afc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2afe:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b00:	01 97       	sbiw	r24, 0x01	; 1
    2b02:	f1 f7       	brne	.-4      	; 0x2b00 <LCD_displayCharacter+0x594>
    2b04:	9c a7       	std	Y+44, r25	; 0x2c
    2b06:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	61 e0       	ldi	r22, 0x01	; 1
    2b0c:	41 e0       	ldi	r20, 0x01	; 1
    2b0e:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	a0 e8       	ldi	r26, 0x80	; 128
    2b18:	bf e3       	ldi	r27, 0x3F	; 63
    2b1a:	8f a3       	std	Y+39, r24	; 0x27
    2b1c:	98 a7       	std	Y+40, r25	; 0x28
    2b1e:	a9 a7       	std	Y+41, r26	; 0x29
    2b20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b22:	6f a1       	ldd	r22, Y+39	; 0x27
    2b24:	78 a5       	ldd	r23, Y+40	; 0x28
    2b26:	89 a5       	ldd	r24, Y+41	; 0x29
    2b28:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	4a e7       	ldi	r20, 0x7A	; 122
    2b30:	53 e4       	ldi	r21, 0x43	; 67
    2b32:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2b36:	dc 01       	movw	r26, r24
    2b38:	cb 01       	movw	r24, r22
    2b3a:	8b a3       	std	Y+35, r24	; 0x23
    2b3c:	9c a3       	std	Y+36, r25	; 0x24
    2b3e:	ad a3       	std	Y+37, r26	; 0x25
    2b40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b42:	6b a1       	ldd	r22, Y+35	; 0x23
    2b44:	7c a1       	ldd	r23, Y+36	; 0x24
    2b46:	8d a1       	ldd	r24, Y+37	; 0x25
    2b48:	9e a1       	ldd	r25, Y+38	; 0x26
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	40 e8       	ldi	r20, 0x80	; 128
    2b50:	5f e3       	ldi	r21, 0x3F	; 63
    2b52:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2b56:	88 23       	and	r24, r24
    2b58:	2c f4       	brge	.+10     	; 0x2b64 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	9a a3       	std	Y+34, r25	; 0x22
    2b60:	89 a3       	std	Y+33, r24	; 0x21
    2b62:	3f c0       	rjmp	.+126    	; 0x2be2 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2b64:	6b a1       	ldd	r22, Y+35	; 0x23
    2b66:	7c a1       	ldd	r23, Y+36	; 0x24
    2b68:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	3f ef       	ldi	r19, 0xFF	; 255
    2b70:	4f e7       	ldi	r20, 0x7F	; 127
    2b72:	57 e4       	ldi	r21, 0x47	; 71
    2b74:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2b78:	18 16       	cp	r1, r24
    2b7a:	4c f5       	brge	.+82     	; 0x2bce <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b7c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b7e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b80:	89 a5       	ldd	r24, Y+41	; 0x29
    2b82:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b84:	20 e0       	ldi	r18, 0x00	; 0
    2b86:	30 e0       	ldi	r19, 0x00	; 0
    2b88:	40 e2       	ldi	r20, 0x20	; 32
    2b8a:	51 e4       	ldi	r21, 0x41	; 65
    2b8c:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	bc 01       	movw	r22, r24
    2b96:	cd 01       	movw	r24, r26
    2b98:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2b9c:	dc 01       	movw	r26, r24
    2b9e:	cb 01       	movw	r24, r22
    2ba0:	9a a3       	std	Y+34, r25	; 0x22
    2ba2:	89 a3       	std	Y+33, r24	; 0x21
    2ba4:	0f c0       	rjmp	.+30     	; 0x2bc4 <LCD_displayCharacter+0x658>
    2ba6:	89 e1       	ldi	r24, 0x19	; 25
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	98 a3       	std	Y+32, r25	; 0x20
    2bac:	8f 8f       	std	Y+31, r24	; 0x1f
    2bae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bb0:	98 a1       	ldd	r25, Y+32	; 0x20
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	f1 f7       	brne	.-4      	; 0x2bb2 <LCD_displayCharacter+0x646>
    2bb6:	98 a3       	std	Y+32, r25	; 0x20
    2bb8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	89 a1       	ldd	r24, Y+33	; 0x21
    2bbc:	9a a1       	ldd	r25, Y+34	; 0x22
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	9a a3       	std	Y+34, r25	; 0x22
    2bc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bc8:	00 97       	sbiw	r24, 0x00	; 0
    2bca:	69 f7       	brne	.-38     	; 0x2ba6 <LCD_displayCharacter+0x63a>
    2bcc:	14 c0       	rjmp	.+40     	; 0x2bf6 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bce:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2bda:	dc 01       	movw	r26, r24
    2bdc:	cb 01       	movw	r24, r22
    2bde:	9a a3       	std	Y+34, r25	; 0x22
    2be0:	89 a3       	std	Y+33, r24	; 0x21
    2be2:	89 a1       	ldd	r24, Y+33	; 0x21
    2be4:	9a a1       	ldd	r25, Y+34	; 0x22
    2be6:	9e 8f       	std	Y+30, r25	; 0x1e
    2be8:	8d 8f       	std	Y+29, r24	; 0x1d
    2bea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bee:	01 97       	sbiw	r24, 0x01	; 1
    2bf0:	f1 f7       	brne	.-4      	; 0x2bee <LCD_displayCharacter+0x682>
    2bf2:	9e 8f       	std	Y+30, r25	; 0x1e
    2bf4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2bf6:	fe 01       	movw	r30, r28
    2bf8:	ed 59       	subi	r30, 0x9D	; 157
    2bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfc:	80 81       	ld	r24, Z
    2bfe:	98 2f       	mov	r25, r24
    2c00:	91 70       	andi	r25, 0x01	; 1
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	64 e0       	ldi	r22, 0x04	; 4
    2c06:	49 2f       	mov	r20, r25
    2c08:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2c0c:	fe 01       	movw	r30, r28
    2c0e:	ed 59       	subi	r30, 0x9D	; 157
    2c10:	ff 4f       	sbci	r31, 0xFF	; 255
    2c12:	80 81       	ld	r24, Z
    2c14:	88 2f       	mov	r24, r24
    2c16:	90 e0       	ldi	r25, 0x00	; 0
    2c18:	82 70       	andi	r24, 0x02	; 2
    2c1a:	90 70       	andi	r25, 0x00	; 0
    2c1c:	95 95       	asr	r25
    2c1e:	87 95       	ror	r24
    2c20:	98 2f       	mov	r25, r24
    2c22:	82 e0       	ldi	r24, 0x02	; 2
    2c24:	65 e0       	ldi	r22, 0x05	; 5
    2c26:	49 2f       	mov	r20, r25
    2c28:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ed 59       	subi	r30, 0x9D	; 157
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	84 70       	andi	r24, 0x04	; 4
    2c3a:	90 70       	andi	r25, 0x00	; 0
    2c3c:	95 95       	asr	r25
    2c3e:	87 95       	ror	r24
    2c40:	95 95       	asr	r25
    2c42:	87 95       	ror	r24
    2c44:	98 2f       	mov	r25, r24
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	66 e0       	ldi	r22, 0x06	; 6
    2c4a:	49 2f       	mov	r20, r25
    2c4c:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2c50:	fe 01       	movw	r30, r28
    2c52:	ed 59       	subi	r30, 0x9D	; 157
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 81       	ld	r24, Z
    2c58:	88 2f       	mov	r24, r24
    2c5a:	90 e0       	ldi	r25, 0x00	; 0
    2c5c:	88 70       	andi	r24, 0x08	; 8
    2c5e:	90 70       	andi	r25, 0x00	; 0
    2c60:	95 95       	asr	r25
    2c62:	87 95       	ror	r24
    2c64:	95 95       	asr	r25
    2c66:	87 95       	ror	r24
    2c68:	95 95       	asr	r25
    2c6a:	87 95       	ror	r24
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	82 e0       	ldi	r24, 0x02	; 2
    2c70:	67 e0       	ldi	r22, 0x07	; 7
    2c72:	49 2f       	mov	r20, r25
    2c74:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	a0 e8       	ldi	r26, 0x80	; 128
    2c7e:	bf e3       	ldi	r27, 0x3F	; 63
    2c80:	89 8f       	std	Y+25, r24	; 0x19
    2c82:	9a 8f       	std	Y+26, r25	; 0x1a
    2c84:	ab 8f       	std	Y+27, r26	; 0x1b
    2c86:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c88:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e0       	ldi	r19, 0x00	; 0
    2c94:	4a e7       	ldi	r20, 0x7A	; 122
    2c96:	53 e4       	ldi	r21, 0x43	; 67
    2c98:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2c9c:	dc 01       	movw	r26, r24
    2c9e:	cb 01       	movw	r24, r22
    2ca0:	8d 8b       	std	Y+21, r24	; 0x15
    2ca2:	9e 8b       	std	Y+22, r25	; 0x16
    2ca4:	af 8b       	std	Y+23, r26	; 0x17
    2ca6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ca8:	6d 89       	ldd	r22, Y+21	; 0x15
    2caa:	7e 89       	ldd	r23, Y+22	; 0x16
    2cac:	8f 89       	ldd	r24, Y+23	; 0x17
    2cae:	98 8d       	ldd	r25, Y+24	; 0x18
    2cb0:	20 e0       	ldi	r18, 0x00	; 0
    2cb2:	30 e0       	ldi	r19, 0x00	; 0
    2cb4:	40 e8       	ldi	r20, 0x80	; 128
    2cb6:	5f e3       	ldi	r21, 0x3F	; 63
    2cb8:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2cbc:	88 23       	and	r24, r24
    2cbe:	2c f4       	brge	.+10     	; 0x2cca <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9c 8b       	std	Y+20, r25	; 0x14
    2cc6:	8b 8b       	std	Y+19, r24	; 0x13
    2cc8:	3f c0       	rjmp	.+126    	; 0x2d48 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2cca:	6d 89       	ldd	r22, Y+21	; 0x15
    2ccc:	7e 89       	ldd	r23, Y+22	; 0x16
    2cce:	8f 89       	ldd	r24, Y+23	; 0x17
    2cd0:	98 8d       	ldd	r25, Y+24	; 0x18
    2cd2:	20 e0       	ldi	r18, 0x00	; 0
    2cd4:	3f ef       	ldi	r19, 0xFF	; 255
    2cd6:	4f e7       	ldi	r20, 0x7F	; 127
    2cd8:	57 e4       	ldi	r21, 0x47	; 71
    2cda:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2cde:	18 16       	cp	r1, r24
    2ce0:	4c f5       	brge	.+82     	; 0x2d34 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ce4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cea:	20 e0       	ldi	r18, 0x00	; 0
    2cec:	30 e0       	ldi	r19, 0x00	; 0
    2cee:	40 e2       	ldi	r20, 0x20	; 32
    2cf0:	51 e4       	ldi	r21, 0x41	; 65
    2cf2:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2cf6:	dc 01       	movw	r26, r24
    2cf8:	cb 01       	movw	r24, r22
    2cfa:	bc 01       	movw	r22, r24
    2cfc:	cd 01       	movw	r24, r26
    2cfe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d02:	dc 01       	movw	r26, r24
    2d04:	cb 01       	movw	r24, r22
    2d06:	9c 8b       	std	Y+20, r25	; 0x14
    2d08:	8b 8b       	std	Y+19, r24	; 0x13
    2d0a:	0f c0       	rjmp	.+30     	; 0x2d2a <LCD_displayCharacter+0x7be>
    2d0c:	89 e1       	ldi	r24, 0x19	; 25
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9a 8b       	std	Y+18, r25	; 0x12
    2d12:	89 8b       	std	Y+17, r24	; 0x11
    2d14:	89 89       	ldd	r24, Y+17	; 0x11
    2d16:	9a 89       	ldd	r25, Y+18	; 0x12
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <LCD_displayCharacter+0x7ac>
    2d1c:	9a 8b       	std	Y+18, r25	; 0x12
    2d1e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d20:	8b 89       	ldd	r24, Y+19	; 0x13
    2d22:	9c 89       	ldd	r25, Y+20	; 0x14
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	9c 8b       	std	Y+20, r25	; 0x14
    2d28:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d2e:	00 97       	sbiw	r24, 0x00	; 0
    2d30:	69 f7       	brne	.-38     	; 0x2d0c <LCD_displayCharacter+0x7a0>
    2d32:	14 c0       	rjmp	.+40     	; 0x2d5c <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d34:	6d 89       	ldd	r22, Y+21	; 0x15
    2d36:	7e 89       	ldd	r23, Y+22	; 0x16
    2d38:	8f 89       	ldd	r24, Y+23	; 0x17
    2d3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2d3c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2d40:	dc 01       	movw	r26, r24
    2d42:	cb 01       	movw	r24, r22
    2d44:	9c 8b       	std	Y+20, r25	; 0x14
    2d46:	8b 8b       	std	Y+19, r24	; 0x13
    2d48:	8b 89       	ldd	r24, Y+19	; 0x13
    2d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    2d4c:	98 8b       	std	Y+16, r25	; 0x10
    2d4e:	8f 87       	std	Y+15, r24	; 0x0f
    2d50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d52:	98 89       	ldd	r25, Y+16	; 0x10
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_displayCharacter+0x7e8>
    2d58:	98 8b       	std	Y+16, r25	; 0x10
    2d5a:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d5c:	82 e0       	ldi	r24, 0x02	; 2
    2d5e:	61 e0       	ldi	r22, 0x01	; 1
    2d60:	40 e0       	ldi	r20, 0x00	; 0
    2d62:	0e 94 8e 09 	call	0x131c	; 0x131c <GPIO_writePin>
    2d66:	80 e0       	ldi	r24, 0x00	; 0
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	a0 e8       	ldi	r26, 0x80	; 128
    2d6c:	bf e3       	ldi	r27, 0x3F	; 63
    2d6e:	8b 87       	std	Y+11, r24	; 0x0b
    2d70:	9c 87       	std	Y+12, r25	; 0x0c
    2d72:	ad 87       	std	Y+13, r26	; 0x0d
    2d74:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4a e7       	ldi	r20, 0x7A	; 122
    2d84:	53 e4       	ldi	r21, 0x43	; 67
    2d86:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	8f 83       	std	Y+7, r24	; 0x07
    2d90:	98 87       	std	Y+8, r25	; 0x08
    2d92:	a9 87       	std	Y+9, r26	; 0x09
    2d94:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d96:	6f 81       	ldd	r22, Y+7	; 0x07
    2d98:	78 85       	ldd	r23, Y+8	; 0x08
    2d9a:	89 85       	ldd	r24, Y+9	; 0x09
    2d9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	40 e8       	ldi	r20, 0x80	; 128
    2da4:	5f e3       	ldi	r21, 0x3F	; 63
    2da6:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    2daa:	88 23       	and	r24, r24
    2dac:	2c f4       	brge	.+10     	; 0x2db8 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	9e 83       	std	Y+6, r25	; 0x06
    2db4:	8d 83       	std	Y+5, r24	; 0x05
    2db6:	3f c0       	rjmp	.+126    	; 0x2e36 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2db8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dba:	78 85       	ldd	r23, Y+8	; 0x08
    2dbc:	89 85       	ldd	r24, Y+9	; 0x09
    2dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dc0:	20 e0       	ldi	r18, 0x00	; 0
    2dc2:	3f ef       	ldi	r19, 0xFF	; 255
    2dc4:	4f e7       	ldi	r20, 0x7F	; 127
    2dc6:	57 e4       	ldi	r21, 0x47	; 71
    2dc8:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    2dcc:	18 16       	cp	r1, r24
    2dce:	4c f5       	brge	.+82     	; 0x2e22 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	bc 01       	movw	r22, r24
    2dea:	cd 01       	movw	r24, r26
    2dec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2df0:	dc 01       	movw	r26, r24
    2df2:	cb 01       	movw	r24, r22
    2df4:	9e 83       	std	Y+6, r25	; 0x06
    2df6:	8d 83       	std	Y+5, r24	; 0x05
    2df8:	0f c0       	rjmp	.+30     	; 0x2e18 <LCD_displayCharacter+0x8ac>
    2dfa:	89 e1       	ldi	r24, 0x19	; 25
    2dfc:	90 e0       	ldi	r25, 0x00	; 0
    2dfe:	9c 83       	std	Y+4, r25	; 0x04
    2e00:	8b 83       	std	Y+3, r24	; 0x03
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	9c 81       	ldd	r25, Y+4	; 0x04
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	f1 f7       	brne	.-4      	; 0x2e06 <LCD_displayCharacter+0x89a>
    2e0a:	9c 83       	std	Y+4, r25	; 0x04
    2e0c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    2e10:	9e 81       	ldd	r25, Y+6	; 0x06
    2e12:	01 97       	sbiw	r24, 0x01	; 1
    2e14:	9e 83       	std	Y+6, r25	; 0x06
    2e16:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e18:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1c:	00 97       	sbiw	r24, 0x00	; 0
    2e1e:	69 f7       	brne	.-38     	; 0x2dfa <LCD_displayCharacter+0x88e>
    2e20:	14 c0       	rjmp	.+40     	; 0x2e4a <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	9a 83       	std	Y+2, r25	; 0x02
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_displayCharacter+0x8d6>
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e4a:	cd 59       	subi	r28, 0x9D	; 157
    2e4c:	df 4f       	sbci	r29, 0xFF	; 255
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	f8 94       	cli
    2e52:	de bf       	out	0x3e, r29	; 62
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	cd bf       	out	0x3d, r28	; 61
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	08 95       	ret

00002e62 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e62:	df 93       	push	r29
    2e64:	cf 93       	push	r28
    2e66:	00 d0       	rcall	.+0      	; 0x2e68 <LCD_displayString+0x6>
    2e68:	0f 92       	push	r0
    2e6a:	cd b7       	in	r28, 0x3d	; 61
    2e6c:	de b7       	in	r29, 0x3e	; 62
    2e6e:	9b 83       	std	Y+3, r25	; 0x03
    2e70:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e72:	19 82       	std	Y+1, r1	; 0x01
    2e74:	0e c0       	rjmp	.+28     	; 0x2e92 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	28 2f       	mov	r18, r24
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e80:	fc 01       	movw	r30, r24
    2e82:	e2 0f       	add	r30, r18
    2e84:	f3 1f       	adc	r31, r19
    2e86:	80 81       	ld	r24, Z
    2e88:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_displayCharacter>
		i++;
    2e8c:	89 81       	ldd	r24, Y+1	; 0x01
    2e8e:	8f 5f       	subi	r24, 0xFF	; 255
    2e90:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	e2 0f       	add	r30, r18
    2ea0:	f3 1f       	adc	r31, r19
    2ea2:	80 81       	ld	r24, Z
    2ea4:	88 23       	and	r24, r24
    2ea6:	39 f7       	brne	.-50     	; 0x2e76 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2ea8:	0f 90       	pop	r0
    2eaa:	0f 90       	pop	r0
    2eac:	0f 90       	pop	r0
    2eae:	cf 91       	pop	r28
    2eb0:	df 91       	pop	r29
    2eb2:	08 95       	ret

00002eb4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2eb4:	df 93       	push	r29
    2eb6:	cf 93       	push	r28
    2eb8:	00 d0       	rcall	.+0      	; 0x2eba <LCD_moveCursor+0x6>
    2eba:	00 d0       	rcall	.+0      	; 0x2ebc <LCD_moveCursor+0x8>
    2ebc:	0f 92       	push	r0
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	8a 83       	std	Y+2, r24	; 0x02
    2ec4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	28 2f       	mov	r18, r24
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	3d 83       	std	Y+5, r19	; 0x05
    2ece:	2c 83       	std	Y+4, r18	; 0x04
    2ed0:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed2:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	91 05       	cpc	r25, r1
    2ed8:	c1 f0       	breq	.+48     	; 0x2f0a <LCD_moveCursor+0x56>
    2eda:	2c 81       	ldd	r18, Y+4	; 0x04
    2edc:	3d 81       	ldd	r19, Y+5	; 0x05
    2ede:	22 30       	cpi	r18, 0x02	; 2
    2ee0:	31 05       	cpc	r19, r1
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <LCD_moveCursor+0x3a>
    2ee4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ee6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ee8:	00 97       	sbiw	r24, 0x00	; 0
    2eea:	61 f0       	breq	.+24     	; 0x2f04 <LCD_moveCursor+0x50>
    2eec:	19 c0       	rjmp	.+50     	; 0x2f20 <LCD_moveCursor+0x6c>
    2eee:	2c 81       	ldd	r18, Y+4	; 0x04
    2ef0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ef2:	22 30       	cpi	r18, 0x02	; 2
    2ef4:	31 05       	cpc	r19, r1
    2ef6:	69 f0       	breq	.+26     	; 0x2f12 <LCD_moveCursor+0x5e>
    2ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    2efa:	9d 81       	ldd	r25, Y+5	; 0x05
    2efc:	83 30       	cpi	r24, 0x03	; 3
    2efe:	91 05       	cpc	r25, r1
    2f00:	61 f0       	breq	.+24     	; 0x2f1a <LCD_moveCursor+0x66>
    2f02:	0e c0       	rjmp	.+28     	; 0x2f20 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	89 83       	std	Y+1, r24	; 0x01
    2f08:	0b c0       	rjmp	.+22     	; 0x2f20 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0c:	80 5c       	subi	r24, 0xC0	; 192
    2f0e:	89 83       	std	Y+1, r24	; 0x01
    2f10:	07 c0       	rjmp	.+14     	; 0x2f20 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f12:	8b 81       	ldd	r24, Y+3	; 0x03
    2f14:	80 5f       	subi	r24, 0xF0	; 240
    2f16:	89 83       	std	Y+1, r24	; 0x01
    2f18:	03 c0       	rjmp	.+6      	; 0x2f20 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1c:	80 5b       	subi	r24, 0xB0	; 176
    2f1e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	80 68       	ori	r24, 0x80	; 128
    2f24:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
}
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
    2f30:	0f 90       	pop	r0
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	00 d0       	rcall	.+0      	; 0x2f3e <LCD_displayStringRowColumn+0x6>
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <LCD_displayStringRowColumn+0x8>
    2f40:	cd b7       	in	r28, 0x3d	; 61
    2f42:	de b7       	in	r29, 0x3e	; 62
    2f44:	89 83       	std	Y+1, r24	; 0x01
    2f46:	6a 83       	std	Y+2, r22	; 0x02
    2f48:	5c 83       	std	Y+4, r21	; 0x04
    2f4a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	6a 81       	ldd	r22, Y+2	; 0x02
    2f50:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f54:	8b 81       	ldd	r24, Y+3	; 0x03
    2f56:	9c 81       	ldd	r25, Y+4	; 0x04
    2f58:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayString>
}
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	62 97       	sbiw	r28, 0x12	; 18
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	9a 8b       	std	Y+18, r25	; 0x12
    2f80:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f82:	89 89       	ldd	r24, Y+17	; 0x11
    2f84:	9a 89       	ldd	r25, Y+18	; 0x12
    2f86:	9e 01       	movw	r18, r28
    2f88:	2f 5f       	subi	r18, 0xFF	; 255
    2f8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f8c:	b9 01       	movw	r22, r18
    2f8e:	4a e0       	ldi	r20, 0x0A	; 10
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <itoa>
   LCD_displayString(buff); /* Display the string */
    2f96:	ce 01       	movw	r24, r28
    2f98:	01 96       	adiw	r24, 0x01	; 1
    2f9a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayString>
}
    2f9e:	62 96       	adiw	r28, 0x12	; 18
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	cf 91       	pop	r28
    2fac:	df 91       	pop	r29
    2fae:	08 95       	ret

00002fb0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <LCD_sendCommand>
}
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <numConcat>:
 *                                Function Definitions                         *
 *******************************************************************************/

/* Concatenates Characters To Become a Full Number */
uint64 numConcat(uint8 array[], uint8 size)
{
    2fc4:	af 92       	push	r10
    2fc6:	bf 92       	push	r11
    2fc8:	cf 92       	push	r12
    2fca:	df 92       	push	r13
    2fcc:	ef 92       	push	r14
    2fce:	ff 92       	push	r15
    2fd0:	0f 93       	push	r16
    2fd2:	1f 93       	push	r17
    2fd4:	df 93       	push	r29
    2fd6:	cf 93       	push	r28
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	c2 56       	subi	r28, 0x62	; 98
    2fde:	d0 40       	sbci	r29, 0x00	; 0
    2fe0:	0f b6       	in	r0, 0x3f	; 63
    2fe2:	f8 94       	cli
    2fe4:	de bf       	out	0x3e, r29	; 62
    2fe6:	0f be       	out	0x3f, r0	; 63
    2fe8:	cd bf       	out	0x3d, r28	; 61
    2fea:	9b 87       	std	Y+11, r25	; 0x0b
    2fec:	8a 87       	std	Y+10, r24	; 0x0a
    2fee:	6c 87       	std	Y+12, r22	; 0x0c
	uint64 num = 0;
    2ff0:	1a 82       	std	Y+2, r1	; 0x02
    2ff2:	1b 82       	std	Y+3, r1	; 0x03
    2ff4:	1c 82       	std	Y+4, r1	; 0x04
    2ff6:	1d 82       	std	Y+5, r1	; 0x05
    2ff8:	1e 82       	std	Y+6, r1	; 0x06
    2ffa:	1f 82       	std	Y+7, r1	; 0x07
    2ffc:	18 86       	std	Y+8, r1	; 0x08
    2ffe:	19 86       	std	Y+9, r1	; 0x09
	uint8 i;
	for (i = 0; i < size; i++)
    3000:	19 82       	std	Y+1, r1	; 0x01
    3002:	06 c3       	rjmp	.+1548   	; 0x3610 <numConcat+0x64c>
	{
		num *= 10;
    3004:	2a 81       	ldd	r18, Y+2	; 0x02
    3006:	3b 81       	ldd	r19, Y+3	; 0x03
    3008:	4c 81       	ldd	r20, Y+4	; 0x04
    300a:	5d 81       	ldd	r21, Y+5	; 0x05
    300c:	6e 81       	ldd	r22, Y+6	; 0x06
    300e:	7f 81       	ldd	r23, Y+7	; 0x07
    3010:	88 85       	ldd	r24, Y+8	; 0x08
    3012:	99 85       	ldd	r25, Y+9	; 0x09
    3014:	a2 2e       	mov	r10, r18
    3016:	b3 2e       	mov	r11, r19
    3018:	c4 2e       	mov	r12, r20
    301a:	d5 2e       	mov	r13, r21
    301c:	e6 2e       	mov	r14, r22
    301e:	f7 2e       	mov	r15, r23
    3020:	08 2f       	mov	r16, r24
    3022:	19 2f       	mov	r17, r25
    3024:	2a 2d       	mov	r18, r10
    3026:	3b 2d       	mov	r19, r11
    3028:	4c 2d       	mov	r20, r12
    302a:	5d 2d       	mov	r21, r13
    302c:	6e 2d       	mov	r22, r14
    302e:	7f 2d       	mov	r23, r15
    3030:	80 2f       	mov	r24, r16
    3032:	91 2f       	mov	r25, r17
    3034:	01 e0       	ldi	r16, 0x01	; 1
    3036:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    303a:	2d 8b       	std	Y+21, r18	; 0x15
    303c:	3e 8b       	std	Y+22, r19	; 0x16
    303e:	4f 8b       	std	Y+23, r20	; 0x17
    3040:	58 8f       	std	Y+24, r21	; 0x18
    3042:	69 8f       	std	Y+25, r22	; 0x19
    3044:	7a 8f       	std	Y+26, r23	; 0x1a
    3046:	8b 8f       	std	Y+27, r24	; 0x1b
    3048:	9c 8f       	std	Y+28, r25	; 0x1c
    304a:	2d 89       	ldd	r18, Y+21	; 0x15
    304c:	3e 89       	ldd	r19, Y+22	; 0x16
    304e:	4f 89       	ldd	r20, Y+23	; 0x17
    3050:	58 8d       	ldd	r21, Y+24	; 0x18
    3052:	69 8d       	ldd	r22, Y+25	; 0x19
    3054:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3056:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3058:	9c 8d       	ldd	r25, Y+28	; 0x1c
    305a:	02 e0       	ldi	r16, 0x02	; 2
    305c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3060:	2d 8f       	std	Y+29, r18	; 0x1d
    3062:	3e 8f       	std	Y+30, r19	; 0x1e
    3064:	4f 8f       	std	Y+31, r20	; 0x1f
    3066:	58 a3       	std	Y+32, r21	; 0x20
    3068:	69 a3       	std	Y+33, r22	; 0x21
    306a:	7a a3       	std	Y+34, r23	; 0x22
    306c:	8b a3       	std	Y+35, r24	; 0x23
    306e:	9c a3       	std	Y+36, r25	; 0x24
    3070:	0d 89       	ldd	r16, Y+21	; 0x15
    3072:	1d 8d       	ldd	r17, Y+29	; 0x1d
    3074:	01 0f       	add	r16, r17
    3076:	0d a3       	std	Y+37, r16	; 0x25
    3078:	21 e0       	ldi	r18, 0x01	; 1
    307a:	2d a7       	std	Y+45, r18	; 0x2d
    307c:	3d a1       	ldd	r19, Y+37	; 0x25
    307e:	4d 89       	ldd	r20, Y+21	; 0x15
    3080:	34 17       	cp	r19, r20
    3082:	08 f0       	brcs	.+2      	; 0x3086 <numConcat+0xc2>
    3084:	1d a6       	std	Y+45, r1	; 0x2d
    3086:	5e 89       	ldd	r21, Y+22	; 0x16
    3088:	6e 8d       	ldd	r22, Y+30	; 0x1e
    308a:	56 0f       	add	r21, r22
    308c:	5e a3       	std	Y+38, r21	; 0x26
    308e:	71 e0       	ldi	r23, 0x01	; 1
    3090:	7e a7       	std	Y+46, r23	; 0x2e
    3092:	8e a1       	ldd	r24, Y+38	; 0x26
    3094:	9e 89       	ldd	r25, Y+22	; 0x16
    3096:	89 17       	cp	r24, r25
    3098:	08 f0       	brcs	.+2      	; 0x309c <numConcat+0xd8>
    309a:	1e a6       	std	Y+46, r1	; 0x2e
    309c:	0d a5       	ldd	r16, Y+45	; 0x2d
    309e:	1e a1       	ldd	r17, Y+38	; 0x26
    30a0:	01 0f       	add	r16, r17
    30a2:	0f a7       	std	Y+47, r16	; 0x2f
    30a4:	21 e0       	ldi	r18, 0x01	; 1
    30a6:	28 ab       	std	Y+48, r18	; 0x30
    30a8:	3f a5       	ldd	r19, Y+47	; 0x2f
    30aa:	4e a1       	ldd	r20, Y+38	; 0x26
    30ac:	34 17       	cp	r19, r20
    30ae:	08 f0       	brcs	.+2      	; 0x30b2 <numConcat+0xee>
    30b0:	18 aa       	std	Y+48, r1	; 0x30
    30b2:	5e a5       	ldd	r21, Y+46	; 0x2e
    30b4:	68 a9       	ldd	r22, Y+48	; 0x30
    30b6:	56 2b       	or	r21, r22
    30b8:	5e a7       	std	Y+46, r21	; 0x2e
    30ba:	7f a5       	ldd	r23, Y+47	; 0x2f
    30bc:	7e a3       	std	Y+38, r23	; 0x26
    30be:	8f 89       	ldd	r24, Y+23	; 0x17
    30c0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    30c2:	89 0f       	add	r24, r25
    30c4:	8f a3       	std	Y+39, r24	; 0x27
    30c6:	01 e0       	ldi	r16, 0x01	; 1
    30c8:	09 ab       	std	Y+49, r16	; 0x31
    30ca:	1f a1       	ldd	r17, Y+39	; 0x27
    30cc:	2f 89       	ldd	r18, Y+23	; 0x17
    30ce:	12 17       	cp	r17, r18
    30d0:	08 f0       	brcs	.+2      	; 0x30d4 <numConcat+0x110>
    30d2:	19 aa       	std	Y+49, r1	; 0x31
    30d4:	3e a5       	ldd	r19, Y+46	; 0x2e
    30d6:	4f a1       	ldd	r20, Y+39	; 0x27
    30d8:	34 0f       	add	r19, r20
    30da:	3a ab       	std	Y+50, r19	; 0x32
    30dc:	51 e0       	ldi	r21, 0x01	; 1
    30de:	5b ab       	std	Y+51, r21	; 0x33
    30e0:	6a a9       	ldd	r22, Y+50	; 0x32
    30e2:	7f a1       	ldd	r23, Y+39	; 0x27
    30e4:	67 17       	cp	r22, r23
    30e6:	08 f0       	brcs	.+2      	; 0x30ea <numConcat+0x126>
    30e8:	1b aa       	std	Y+51, r1	; 0x33
    30ea:	89 a9       	ldd	r24, Y+49	; 0x31
    30ec:	9b a9       	ldd	r25, Y+51	; 0x33
    30ee:	89 2b       	or	r24, r25
    30f0:	89 ab       	std	Y+49, r24	; 0x31
    30f2:	0a a9       	ldd	r16, Y+50	; 0x32
    30f4:	0f a3       	std	Y+39, r16	; 0x27
    30f6:	18 8d       	ldd	r17, Y+24	; 0x18
    30f8:	28 a1       	ldd	r18, Y+32	; 0x20
    30fa:	12 0f       	add	r17, r18
    30fc:	18 a7       	std	Y+40, r17	; 0x28
    30fe:	31 e0       	ldi	r19, 0x01	; 1
    3100:	3c ab       	std	Y+52, r19	; 0x34
    3102:	48 a5       	ldd	r20, Y+40	; 0x28
    3104:	58 8d       	ldd	r21, Y+24	; 0x18
    3106:	45 17       	cp	r20, r21
    3108:	08 f0       	brcs	.+2      	; 0x310c <numConcat+0x148>
    310a:	1c aa       	std	Y+52, r1	; 0x34
    310c:	69 a9       	ldd	r22, Y+49	; 0x31
    310e:	78 a5       	ldd	r23, Y+40	; 0x28
    3110:	67 0f       	add	r22, r23
    3112:	6d ab       	std	Y+53, r22	; 0x35
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	8e ab       	std	Y+54, r24	; 0x36
    3118:	9d a9       	ldd	r25, Y+53	; 0x35
    311a:	08 a5       	ldd	r16, Y+40	; 0x28
    311c:	90 17       	cp	r25, r16
    311e:	08 f0       	brcs	.+2      	; 0x3122 <numConcat+0x15e>
    3120:	1e aa       	std	Y+54, r1	; 0x36
    3122:	1c a9       	ldd	r17, Y+52	; 0x34
    3124:	2e a9       	ldd	r18, Y+54	; 0x36
    3126:	12 2b       	or	r17, r18
    3128:	1c ab       	std	Y+52, r17	; 0x34
    312a:	3d a9       	ldd	r19, Y+53	; 0x35
    312c:	38 a7       	std	Y+40, r19	; 0x28
    312e:	49 8d       	ldd	r20, Y+25	; 0x19
    3130:	59 a1       	ldd	r21, Y+33	; 0x21
    3132:	45 0f       	add	r20, r21
    3134:	49 a7       	std	Y+41, r20	; 0x29
    3136:	61 e0       	ldi	r22, 0x01	; 1
    3138:	6f ab       	std	Y+55, r22	; 0x37
    313a:	79 a5       	ldd	r23, Y+41	; 0x29
    313c:	89 8d       	ldd	r24, Y+25	; 0x19
    313e:	78 17       	cp	r23, r24
    3140:	08 f0       	brcs	.+2      	; 0x3144 <numConcat+0x180>
    3142:	1f aa       	std	Y+55, r1	; 0x37
    3144:	9c a9       	ldd	r25, Y+52	; 0x34
    3146:	09 a5       	ldd	r16, Y+41	; 0x29
    3148:	90 0f       	add	r25, r16
    314a:	98 af       	std	Y+56, r25	; 0x38
    314c:	11 e0       	ldi	r17, 0x01	; 1
    314e:	19 af       	std	Y+57, r17	; 0x39
    3150:	28 ad       	ldd	r18, Y+56	; 0x38
    3152:	39 a5       	ldd	r19, Y+41	; 0x29
    3154:	23 17       	cp	r18, r19
    3156:	08 f0       	brcs	.+2      	; 0x315a <numConcat+0x196>
    3158:	19 ae       	std	Y+57, r1	; 0x39
    315a:	4f a9       	ldd	r20, Y+55	; 0x37
    315c:	59 ad       	ldd	r21, Y+57	; 0x39
    315e:	45 2b       	or	r20, r21
    3160:	4f ab       	std	Y+55, r20	; 0x37
    3162:	68 ad       	ldd	r22, Y+56	; 0x38
    3164:	69 a7       	std	Y+41, r22	; 0x29
    3166:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3168:	8a a1       	ldd	r24, Y+34	; 0x22
    316a:	78 0f       	add	r23, r24
    316c:	7a a7       	std	Y+42, r23	; 0x2a
    316e:	91 e0       	ldi	r25, 0x01	; 1
    3170:	9a af       	std	Y+58, r25	; 0x3a
    3172:	0a a5       	ldd	r16, Y+42	; 0x2a
    3174:	1a 8d       	ldd	r17, Y+26	; 0x1a
    3176:	01 17       	cp	r16, r17
    3178:	08 f0       	brcs	.+2      	; 0x317c <numConcat+0x1b8>
    317a:	1a ae       	std	Y+58, r1	; 0x3a
    317c:	2f a9       	ldd	r18, Y+55	; 0x37
    317e:	3a a5       	ldd	r19, Y+42	; 0x2a
    3180:	23 0f       	add	r18, r19
    3182:	2b af       	std	Y+59, r18	; 0x3b
    3184:	41 e0       	ldi	r20, 0x01	; 1
    3186:	4c af       	std	Y+60, r20	; 0x3c
    3188:	5b ad       	ldd	r21, Y+59	; 0x3b
    318a:	6a a5       	ldd	r22, Y+42	; 0x2a
    318c:	56 17       	cp	r21, r22
    318e:	08 f0       	brcs	.+2      	; 0x3192 <numConcat+0x1ce>
    3190:	1c ae       	std	Y+60, r1	; 0x3c
    3192:	7a ad       	ldd	r23, Y+58	; 0x3a
    3194:	8c ad       	ldd	r24, Y+60	; 0x3c
    3196:	78 2b       	or	r23, r24
    3198:	7a af       	std	Y+58, r23	; 0x3a
    319a:	9b ad       	ldd	r25, Y+59	; 0x3b
    319c:	9a a7       	std	Y+42, r25	; 0x2a
    319e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    31a0:	1b a1       	ldd	r17, Y+35	; 0x23
    31a2:	01 0f       	add	r16, r17
    31a4:	0b a7       	std	Y+43, r16	; 0x2b
    31a6:	21 e0       	ldi	r18, 0x01	; 1
    31a8:	2d af       	std	Y+61, r18	; 0x3d
    31aa:	3b a5       	ldd	r19, Y+43	; 0x2b
    31ac:	4b 8d       	ldd	r20, Y+27	; 0x1b
    31ae:	34 17       	cp	r19, r20
    31b0:	08 f0       	brcs	.+2      	; 0x31b4 <numConcat+0x1f0>
    31b2:	1d ae       	std	Y+61, r1	; 0x3d
    31b4:	5a ad       	ldd	r21, Y+58	; 0x3a
    31b6:	6b a5       	ldd	r22, Y+43	; 0x2b
    31b8:	56 0f       	add	r21, r22
    31ba:	5e af       	std	Y+62, r21	; 0x3e
    31bc:	71 e0       	ldi	r23, 0x01	; 1
    31be:	7f af       	std	Y+63, r23	; 0x3f
    31c0:	8e ad       	ldd	r24, Y+62	; 0x3e
    31c2:	9b a5       	ldd	r25, Y+43	; 0x2b
    31c4:	89 17       	cp	r24, r25
    31c6:	08 f0       	brcs	.+2      	; 0x31ca <numConcat+0x206>
    31c8:	1f ae       	std	Y+63, r1	; 0x3f
    31ca:	0d ad       	ldd	r16, Y+61	; 0x3d
    31cc:	1f ad       	ldd	r17, Y+63	; 0x3f
    31ce:	01 2b       	or	r16, r17
    31d0:	0d af       	std	Y+61, r16	; 0x3d
    31d2:	2e ad       	ldd	r18, Y+62	; 0x3e
    31d4:	2b a7       	std	Y+43, r18	; 0x2b
    31d6:	3c 8d       	ldd	r19, Y+28	; 0x1c
    31d8:	4c a1       	ldd	r20, Y+36	; 0x24
    31da:	34 0f       	add	r19, r20
    31dc:	3c a7       	std	Y+44, r19	; 0x2c
    31de:	8d ad       	ldd	r24, Y+61	; 0x3d
    31e0:	5c a5       	ldd	r21, Y+44	; 0x2c
    31e2:	85 0f       	add	r24, r21
    31e4:	8c a7       	std	Y+44, r24	; 0x2c
    31e6:	6d a1       	ldd	r22, Y+37	; 0x25
    31e8:	6a 83       	std	Y+2, r22	; 0x02
    31ea:	7e a1       	ldd	r23, Y+38	; 0x26
    31ec:	7b 83       	std	Y+3, r23	; 0x03
    31ee:	8f a1       	ldd	r24, Y+39	; 0x27
    31f0:	8c 83       	std	Y+4, r24	; 0x04
    31f2:	98 a5       	ldd	r25, Y+40	; 0x28
    31f4:	9d 83       	std	Y+5, r25	; 0x05
    31f6:	09 a5       	ldd	r16, Y+41	; 0x29
    31f8:	0e 83       	std	Y+6, r16	; 0x06
    31fa:	1a a5       	ldd	r17, Y+42	; 0x2a
    31fc:	1f 83       	std	Y+7, r17	; 0x07
    31fe:	2b a5       	ldd	r18, Y+43	; 0x2b
    3200:	28 87       	std	Y+8, r18	; 0x08
    3202:	3c a5       	ldd	r19, Y+44	; 0x2c
    3204:	39 87       	std	Y+9, r19	; 0x09
		num += array[i];
    3206:	89 81       	ldd	r24, Y+1	; 0x01
    3208:	28 2f       	mov	r18, r24
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	8a 85       	ldd	r24, Y+10	; 0x0a
    320e:	9b 85       	ldd	r25, Y+11	; 0x0b
    3210:	fc 01       	movw	r30, r24
    3212:	e2 0f       	add	r30, r18
    3214:	f3 1f       	adc	r31, r19
    3216:	80 81       	ld	r24, Z
    3218:	08 2f       	mov	r16, r24
    321a:	10 e0       	ldi	r17, 0x00	; 0
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e0       	ldi	r20, 0x00	; 0
    3222:	50 e0       	ldi	r21, 0x00	; 0
    3224:	60 e0       	ldi	r22, 0x00	; 0
    3226:	70 e0       	ldi	r23, 0x00	; 0
    3228:	0d 87       	std	Y+13, r16	; 0x0d
    322a:	1e 87       	std	Y+14, r17	; 0x0e
    322c:	2f 87       	std	Y+15, r18	; 0x0f
    322e:	38 8b       	std	Y+16, r19	; 0x10
    3230:	49 8b       	std	Y+17, r20	; 0x11
    3232:	5a 8b       	std	Y+18, r21	; 0x12
    3234:	6b 8b       	std	Y+19, r22	; 0x13
    3236:	7c 8b       	std	Y+20, r23	; 0x14
    3238:	1a 81       	ldd	r17, Y+2	; 0x02
    323a:	21 96       	adiw	r28, 0x01	; 1
    323c:	1f af       	std	Y+63, r17	; 0x3f
    323e:	21 97       	sbiw	r28, 0x01	; 1
    3240:	2b 81       	ldd	r18, Y+3	; 0x03
    3242:	22 96       	adiw	r28, 0x02	; 2
    3244:	2f af       	std	Y+63, r18	; 0x3f
    3246:	22 97       	sbiw	r28, 0x02	; 2
    3248:	3c 81       	ldd	r19, Y+4	; 0x04
    324a:	23 96       	adiw	r28, 0x03	; 3
    324c:	3f af       	std	Y+63, r19	; 0x3f
    324e:	23 97       	sbiw	r28, 0x03	; 3
    3250:	4d 81       	ldd	r20, Y+5	; 0x05
    3252:	24 96       	adiw	r28, 0x04	; 4
    3254:	4f af       	std	Y+63, r20	; 0x3f
    3256:	24 97       	sbiw	r28, 0x04	; 4
    3258:	5e 81       	ldd	r21, Y+6	; 0x06
    325a:	25 96       	adiw	r28, 0x05	; 5
    325c:	5f af       	std	Y+63, r21	; 0x3f
    325e:	25 97       	sbiw	r28, 0x05	; 5
    3260:	6f 81       	ldd	r22, Y+7	; 0x07
    3262:	26 96       	adiw	r28, 0x06	; 6
    3264:	6f af       	std	Y+63, r22	; 0x3f
    3266:	26 97       	sbiw	r28, 0x06	; 6
    3268:	78 85       	ldd	r23, Y+8	; 0x08
    326a:	27 96       	adiw	r28, 0x07	; 7
    326c:	7f af       	std	Y+63, r23	; 0x3f
    326e:	27 97       	sbiw	r28, 0x07	; 7
    3270:	89 85       	ldd	r24, Y+9	; 0x09
    3272:	28 96       	adiw	r28, 0x08	; 8
    3274:	8f af       	std	Y+63, r24	; 0x3f
    3276:	28 97       	sbiw	r28, 0x08	; 8
    3278:	21 96       	adiw	r28, 0x01	; 1
    327a:	9f ad       	ldd	r25, Y+63	; 0x3f
    327c:	21 97       	sbiw	r28, 0x01	; 1
    327e:	0d 85       	ldd	r16, Y+13	; 0x0d
    3280:	90 0f       	add	r25, r16
    3282:	29 96       	adiw	r28, 0x09	; 9
    3284:	9f af       	std	Y+63, r25	; 0x3f
    3286:	29 97       	sbiw	r28, 0x09	; 9
    3288:	11 e0       	ldi	r17, 0x01	; 1
    328a:	61 96       	adiw	r28, 0x11	; 17
    328c:	1f af       	std	Y+63, r17	; 0x3f
    328e:	61 97       	sbiw	r28, 0x11	; 17
    3290:	29 96       	adiw	r28, 0x09	; 9
    3292:	2f ad       	ldd	r18, Y+63	; 0x3f
    3294:	29 97       	sbiw	r28, 0x09	; 9
    3296:	21 96       	adiw	r28, 0x01	; 1
    3298:	3f ad       	ldd	r19, Y+63	; 0x3f
    329a:	21 97       	sbiw	r28, 0x01	; 1
    329c:	23 17       	cp	r18, r19
    329e:	18 f0       	brcs	.+6      	; 0x32a6 <numConcat+0x2e2>
    32a0:	61 96       	adiw	r28, 0x11	; 17
    32a2:	1f ae       	std	Y+63, r1	; 0x3f
    32a4:	61 97       	sbiw	r28, 0x11	; 17
    32a6:	22 96       	adiw	r28, 0x02	; 2
    32a8:	4f ad       	ldd	r20, Y+63	; 0x3f
    32aa:	22 97       	sbiw	r28, 0x02	; 2
    32ac:	5e 85       	ldd	r21, Y+14	; 0x0e
    32ae:	45 0f       	add	r20, r21
    32b0:	2a 96       	adiw	r28, 0x0a	; 10
    32b2:	4f af       	std	Y+63, r20	; 0x3f
    32b4:	2a 97       	sbiw	r28, 0x0a	; 10
    32b6:	61 e0       	ldi	r22, 0x01	; 1
    32b8:	62 96       	adiw	r28, 0x12	; 18
    32ba:	6f af       	std	Y+63, r22	; 0x3f
    32bc:	62 97       	sbiw	r28, 0x12	; 18
    32be:	2a 96       	adiw	r28, 0x0a	; 10
    32c0:	7f ad       	ldd	r23, Y+63	; 0x3f
    32c2:	2a 97       	sbiw	r28, 0x0a	; 10
    32c4:	22 96       	adiw	r28, 0x02	; 2
    32c6:	8f ad       	ldd	r24, Y+63	; 0x3f
    32c8:	22 97       	sbiw	r28, 0x02	; 2
    32ca:	78 17       	cp	r23, r24
    32cc:	18 f0       	brcs	.+6      	; 0x32d4 <numConcat+0x310>
    32ce:	62 96       	adiw	r28, 0x12	; 18
    32d0:	1f ae       	std	Y+63, r1	; 0x3f
    32d2:	62 97       	sbiw	r28, 0x12	; 18
    32d4:	61 96       	adiw	r28, 0x11	; 17
    32d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    32d8:	61 97       	sbiw	r28, 0x11	; 17
    32da:	2a 96       	adiw	r28, 0x0a	; 10
    32dc:	0f ad       	ldd	r16, Y+63	; 0x3f
    32de:	2a 97       	sbiw	r28, 0x0a	; 10
    32e0:	90 0f       	add	r25, r16
    32e2:	63 96       	adiw	r28, 0x13	; 19
    32e4:	9f af       	std	Y+63, r25	; 0x3f
    32e6:	63 97       	sbiw	r28, 0x13	; 19
    32e8:	11 e0       	ldi	r17, 0x01	; 1
    32ea:	64 96       	adiw	r28, 0x14	; 20
    32ec:	1f af       	std	Y+63, r17	; 0x3f
    32ee:	64 97       	sbiw	r28, 0x14	; 20
    32f0:	63 96       	adiw	r28, 0x13	; 19
    32f2:	2f ad       	ldd	r18, Y+63	; 0x3f
    32f4:	63 97       	sbiw	r28, 0x13	; 19
    32f6:	2a 96       	adiw	r28, 0x0a	; 10
    32f8:	3f ad       	ldd	r19, Y+63	; 0x3f
    32fa:	2a 97       	sbiw	r28, 0x0a	; 10
    32fc:	23 17       	cp	r18, r19
    32fe:	18 f0       	brcs	.+6      	; 0x3306 <numConcat+0x342>
    3300:	64 96       	adiw	r28, 0x14	; 20
    3302:	1f ae       	std	Y+63, r1	; 0x3f
    3304:	64 97       	sbiw	r28, 0x14	; 20
    3306:	62 96       	adiw	r28, 0x12	; 18
    3308:	4f ad       	ldd	r20, Y+63	; 0x3f
    330a:	62 97       	sbiw	r28, 0x12	; 18
    330c:	64 96       	adiw	r28, 0x14	; 20
    330e:	5f ad       	ldd	r21, Y+63	; 0x3f
    3310:	64 97       	sbiw	r28, 0x14	; 20
    3312:	45 2b       	or	r20, r21
    3314:	62 96       	adiw	r28, 0x12	; 18
    3316:	4f af       	std	Y+63, r20	; 0x3f
    3318:	62 97       	sbiw	r28, 0x12	; 18
    331a:	63 96       	adiw	r28, 0x13	; 19
    331c:	6f ad       	ldd	r22, Y+63	; 0x3f
    331e:	63 97       	sbiw	r28, 0x13	; 19
    3320:	2a 96       	adiw	r28, 0x0a	; 10
    3322:	6f af       	std	Y+63, r22	; 0x3f
    3324:	2a 97       	sbiw	r28, 0x0a	; 10
    3326:	23 96       	adiw	r28, 0x03	; 3
    3328:	7f ad       	ldd	r23, Y+63	; 0x3f
    332a:	23 97       	sbiw	r28, 0x03	; 3
    332c:	8f 85       	ldd	r24, Y+15	; 0x0f
    332e:	78 0f       	add	r23, r24
    3330:	2b 96       	adiw	r28, 0x0b	; 11
    3332:	7f af       	std	Y+63, r23	; 0x3f
    3334:	2b 97       	sbiw	r28, 0x0b	; 11
    3336:	91 e0       	ldi	r25, 0x01	; 1
    3338:	65 96       	adiw	r28, 0x15	; 21
    333a:	9f af       	std	Y+63, r25	; 0x3f
    333c:	65 97       	sbiw	r28, 0x15	; 21
    333e:	2b 96       	adiw	r28, 0x0b	; 11
    3340:	0f ad       	ldd	r16, Y+63	; 0x3f
    3342:	2b 97       	sbiw	r28, 0x0b	; 11
    3344:	23 96       	adiw	r28, 0x03	; 3
    3346:	1f ad       	ldd	r17, Y+63	; 0x3f
    3348:	23 97       	sbiw	r28, 0x03	; 3
    334a:	01 17       	cp	r16, r17
    334c:	18 f0       	brcs	.+6      	; 0x3354 <numConcat+0x390>
    334e:	65 96       	adiw	r28, 0x15	; 21
    3350:	1f ae       	std	Y+63, r1	; 0x3f
    3352:	65 97       	sbiw	r28, 0x15	; 21
    3354:	62 96       	adiw	r28, 0x12	; 18
    3356:	2f ad       	ldd	r18, Y+63	; 0x3f
    3358:	62 97       	sbiw	r28, 0x12	; 18
    335a:	2b 96       	adiw	r28, 0x0b	; 11
    335c:	3f ad       	ldd	r19, Y+63	; 0x3f
    335e:	2b 97       	sbiw	r28, 0x0b	; 11
    3360:	23 0f       	add	r18, r19
    3362:	66 96       	adiw	r28, 0x16	; 22
    3364:	2f af       	std	Y+63, r18	; 0x3f
    3366:	66 97       	sbiw	r28, 0x16	; 22
    3368:	41 e0       	ldi	r20, 0x01	; 1
    336a:	67 96       	adiw	r28, 0x17	; 23
    336c:	4f af       	std	Y+63, r20	; 0x3f
    336e:	67 97       	sbiw	r28, 0x17	; 23
    3370:	66 96       	adiw	r28, 0x16	; 22
    3372:	5f ad       	ldd	r21, Y+63	; 0x3f
    3374:	66 97       	sbiw	r28, 0x16	; 22
    3376:	2b 96       	adiw	r28, 0x0b	; 11
    3378:	6f ad       	ldd	r22, Y+63	; 0x3f
    337a:	2b 97       	sbiw	r28, 0x0b	; 11
    337c:	56 17       	cp	r21, r22
    337e:	18 f0       	brcs	.+6      	; 0x3386 <numConcat+0x3c2>
    3380:	67 96       	adiw	r28, 0x17	; 23
    3382:	1f ae       	std	Y+63, r1	; 0x3f
    3384:	67 97       	sbiw	r28, 0x17	; 23
    3386:	65 96       	adiw	r28, 0x15	; 21
    3388:	7f ad       	ldd	r23, Y+63	; 0x3f
    338a:	65 97       	sbiw	r28, 0x15	; 21
    338c:	67 96       	adiw	r28, 0x17	; 23
    338e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3390:	67 97       	sbiw	r28, 0x17	; 23
    3392:	78 2b       	or	r23, r24
    3394:	65 96       	adiw	r28, 0x15	; 21
    3396:	7f af       	std	Y+63, r23	; 0x3f
    3398:	65 97       	sbiw	r28, 0x15	; 21
    339a:	66 96       	adiw	r28, 0x16	; 22
    339c:	9f ad       	ldd	r25, Y+63	; 0x3f
    339e:	66 97       	sbiw	r28, 0x16	; 22
    33a0:	2b 96       	adiw	r28, 0x0b	; 11
    33a2:	9f af       	std	Y+63, r25	; 0x3f
    33a4:	2b 97       	sbiw	r28, 0x0b	; 11
    33a6:	24 96       	adiw	r28, 0x04	; 4
    33a8:	0f ad       	ldd	r16, Y+63	; 0x3f
    33aa:	24 97       	sbiw	r28, 0x04	; 4
    33ac:	18 89       	ldd	r17, Y+16	; 0x10
    33ae:	01 0f       	add	r16, r17
    33b0:	2c 96       	adiw	r28, 0x0c	; 12
    33b2:	0f af       	std	Y+63, r16	; 0x3f
    33b4:	2c 97       	sbiw	r28, 0x0c	; 12
    33b6:	21 e0       	ldi	r18, 0x01	; 1
    33b8:	68 96       	adiw	r28, 0x18	; 24
    33ba:	2f af       	std	Y+63, r18	; 0x3f
    33bc:	68 97       	sbiw	r28, 0x18	; 24
    33be:	2c 96       	adiw	r28, 0x0c	; 12
    33c0:	3f ad       	ldd	r19, Y+63	; 0x3f
    33c2:	2c 97       	sbiw	r28, 0x0c	; 12
    33c4:	24 96       	adiw	r28, 0x04	; 4
    33c6:	4f ad       	ldd	r20, Y+63	; 0x3f
    33c8:	24 97       	sbiw	r28, 0x04	; 4
    33ca:	34 17       	cp	r19, r20
    33cc:	18 f0       	brcs	.+6      	; 0x33d4 <numConcat+0x410>
    33ce:	68 96       	adiw	r28, 0x18	; 24
    33d0:	1f ae       	std	Y+63, r1	; 0x3f
    33d2:	68 97       	sbiw	r28, 0x18	; 24
    33d4:	65 96       	adiw	r28, 0x15	; 21
    33d6:	5f ad       	ldd	r21, Y+63	; 0x3f
    33d8:	65 97       	sbiw	r28, 0x15	; 21
    33da:	2c 96       	adiw	r28, 0x0c	; 12
    33dc:	6f ad       	ldd	r22, Y+63	; 0x3f
    33de:	2c 97       	sbiw	r28, 0x0c	; 12
    33e0:	56 0f       	add	r21, r22
    33e2:	69 96       	adiw	r28, 0x19	; 25
    33e4:	5f af       	std	Y+63, r21	; 0x3f
    33e6:	69 97       	sbiw	r28, 0x19	; 25
    33e8:	71 e0       	ldi	r23, 0x01	; 1
    33ea:	6a 96       	adiw	r28, 0x1a	; 26
    33ec:	7f af       	std	Y+63, r23	; 0x3f
    33ee:	6a 97       	sbiw	r28, 0x1a	; 26
    33f0:	69 96       	adiw	r28, 0x19	; 25
    33f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    33f4:	69 97       	sbiw	r28, 0x19	; 25
    33f6:	2c 96       	adiw	r28, 0x0c	; 12
    33f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    33fa:	2c 97       	sbiw	r28, 0x0c	; 12
    33fc:	89 17       	cp	r24, r25
    33fe:	18 f0       	brcs	.+6      	; 0x3406 <numConcat+0x442>
    3400:	6a 96       	adiw	r28, 0x1a	; 26
    3402:	1f ae       	std	Y+63, r1	; 0x3f
    3404:	6a 97       	sbiw	r28, 0x1a	; 26
    3406:	68 96       	adiw	r28, 0x18	; 24
    3408:	0f ad       	ldd	r16, Y+63	; 0x3f
    340a:	68 97       	sbiw	r28, 0x18	; 24
    340c:	6a 96       	adiw	r28, 0x1a	; 26
    340e:	1f ad       	ldd	r17, Y+63	; 0x3f
    3410:	6a 97       	sbiw	r28, 0x1a	; 26
    3412:	01 2b       	or	r16, r17
    3414:	68 96       	adiw	r28, 0x18	; 24
    3416:	0f af       	std	Y+63, r16	; 0x3f
    3418:	68 97       	sbiw	r28, 0x18	; 24
    341a:	69 96       	adiw	r28, 0x19	; 25
    341c:	2f ad       	ldd	r18, Y+63	; 0x3f
    341e:	69 97       	sbiw	r28, 0x19	; 25
    3420:	2c 96       	adiw	r28, 0x0c	; 12
    3422:	2f af       	std	Y+63, r18	; 0x3f
    3424:	2c 97       	sbiw	r28, 0x0c	; 12
    3426:	25 96       	adiw	r28, 0x05	; 5
    3428:	3f ad       	ldd	r19, Y+63	; 0x3f
    342a:	25 97       	sbiw	r28, 0x05	; 5
    342c:	49 89       	ldd	r20, Y+17	; 0x11
    342e:	34 0f       	add	r19, r20
    3430:	2d 96       	adiw	r28, 0x0d	; 13
    3432:	3f af       	std	Y+63, r19	; 0x3f
    3434:	2d 97       	sbiw	r28, 0x0d	; 13
    3436:	51 e0       	ldi	r21, 0x01	; 1
    3438:	6b 96       	adiw	r28, 0x1b	; 27
    343a:	5f af       	std	Y+63, r21	; 0x3f
    343c:	6b 97       	sbiw	r28, 0x1b	; 27
    343e:	2d 96       	adiw	r28, 0x0d	; 13
    3440:	6f ad       	ldd	r22, Y+63	; 0x3f
    3442:	2d 97       	sbiw	r28, 0x0d	; 13
    3444:	25 96       	adiw	r28, 0x05	; 5
    3446:	7f ad       	ldd	r23, Y+63	; 0x3f
    3448:	25 97       	sbiw	r28, 0x05	; 5
    344a:	67 17       	cp	r22, r23
    344c:	18 f0       	brcs	.+6      	; 0x3454 <numConcat+0x490>
    344e:	6b 96       	adiw	r28, 0x1b	; 27
    3450:	1f ae       	std	Y+63, r1	; 0x3f
    3452:	6b 97       	sbiw	r28, 0x1b	; 27
    3454:	68 96       	adiw	r28, 0x18	; 24
    3456:	8f ad       	ldd	r24, Y+63	; 0x3f
    3458:	68 97       	sbiw	r28, 0x18	; 24
    345a:	2d 96       	adiw	r28, 0x0d	; 13
    345c:	9f ad       	ldd	r25, Y+63	; 0x3f
    345e:	2d 97       	sbiw	r28, 0x0d	; 13
    3460:	89 0f       	add	r24, r25
    3462:	6c 96       	adiw	r28, 0x1c	; 28
    3464:	8f af       	std	Y+63, r24	; 0x3f
    3466:	6c 97       	sbiw	r28, 0x1c	; 28
    3468:	01 e0       	ldi	r16, 0x01	; 1
    346a:	6d 96       	adiw	r28, 0x1d	; 29
    346c:	0f af       	std	Y+63, r16	; 0x3f
    346e:	6d 97       	sbiw	r28, 0x1d	; 29
    3470:	6c 96       	adiw	r28, 0x1c	; 28
    3472:	1f ad       	ldd	r17, Y+63	; 0x3f
    3474:	6c 97       	sbiw	r28, 0x1c	; 28
    3476:	2d 96       	adiw	r28, 0x0d	; 13
    3478:	2f ad       	ldd	r18, Y+63	; 0x3f
    347a:	2d 97       	sbiw	r28, 0x0d	; 13
    347c:	12 17       	cp	r17, r18
    347e:	18 f0       	brcs	.+6      	; 0x3486 <numConcat+0x4c2>
    3480:	6d 96       	adiw	r28, 0x1d	; 29
    3482:	1f ae       	std	Y+63, r1	; 0x3f
    3484:	6d 97       	sbiw	r28, 0x1d	; 29
    3486:	6b 96       	adiw	r28, 0x1b	; 27
    3488:	3f ad       	ldd	r19, Y+63	; 0x3f
    348a:	6b 97       	sbiw	r28, 0x1b	; 27
    348c:	6d 96       	adiw	r28, 0x1d	; 29
    348e:	4f ad       	ldd	r20, Y+63	; 0x3f
    3490:	6d 97       	sbiw	r28, 0x1d	; 29
    3492:	34 2b       	or	r19, r20
    3494:	6b 96       	adiw	r28, 0x1b	; 27
    3496:	3f af       	std	Y+63, r19	; 0x3f
    3498:	6b 97       	sbiw	r28, 0x1b	; 27
    349a:	6c 96       	adiw	r28, 0x1c	; 28
    349c:	5f ad       	ldd	r21, Y+63	; 0x3f
    349e:	6c 97       	sbiw	r28, 0x1c	; 28
    34a0:	2d 96       	adiw	r28, 0x0d	; 13
    34a2:	5f af       	std	Y+63, r21	; 0x3f
    34a4:	2d 97       	sbiw	r28, 0x0d	; 13
    34a6:	26 96       	adiw	r28, 0x06	; 6
    34a8:	6f ad       	ldd	r22, Y+63	; 0x3f
    34aa:	26 97       	sbiw	r28, 0x06	; 6
    34ac:	7a 89       	ldd	r23, Y+18	; 0x12
    34ae:	67 0f       	add	r22, r23
    34b0:	2e 96       	adiw	r28, 0x0e	; 14
    34b2:	6f af       	std	Y+63, r22	; 0x3f
    34b4:	2e 97       	sbiw	r28, 0x0e	; 14
    34b6:	81 e0       	ldi	r24, 0x01	; 1
    34b8:	6e 96       	adiw	r28, 0x1e	; 30
    34ba:	8f af       	std	Y+63, r24	; 0x3f
    34bc:	6e 97       	sbiw	r28, 0x1e	; 30
    34be:	2e 96       	adiw	r28, 0x0e	; 14
    34c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    34c2:	2e 97       	sbiw	r28, 0x0e	; 14
    34c4:	26 96       	adiw	r28, 0x06	; 6
    34c6:	0f ad       	ldd	r16, Y+63	; 0x3f
    34c8:	26 97       	sbiw	r28, 0x06	; 6
    34ca:	90 17       	cp	r25, r16
    34cc:	18 f0       	brcs	.+6      	; 0x34d4 <numConcat+0x510>
    34ce:	6e 96       	adiw	r28, 0x1e	; 30
    34d0:	1f ae       	std	Y+63, r1	; 0x3f
    34d2:	6e 97       	sbiw	r28, 0x1e	; 30
    34d4:	6b 96       	adiw	r28, 0x1b	; 27
    34d6:	1f ad       	ldd	r17, Y+63	; 0x3f
    34d8:	6b 97       	sbiw	r28, 0x1b	; 27
    34da:	2e 96       	adiw	r28, 0x0e	; 14
    34dc:	2f ad       	ldd	r18, Y+63	; 0x3f
    34de:	2e 97       	sbiw	r28, 0x0e	; 14
    34e0:	12 0f       	add	r17, r18
    34e2:	6f 96       	adiw	r28, 0x1f	; 31
    34e4:	1f af       	std	Y+63, r17	; 0x3f
    34e6:	6f 97       	sbiw	r28, 0x1f	; 31
    34e8:	31 e0       	ldi	r19, 0x01	; 1
    34ea:	a0 96       	adiw	r28, 0x20	; 32
    34ec:	3f af       	std	Y+63, r19	; 0x3f
    34ee:	a0 97       	sbiw	r28, 0x20	; 32
    34f0:	6f 96       	adiw	r28, 0x1f	; 31
    34f2:	4f ad       	ldd	r20, Y+63	; 0x3f
    34f4:	6f 97       	sbiw	r28, 0x1f	; 31
    34f6:	2e 96       	adiw	r28, 0x0e	; 14
    34f8:	5f ad       	ldd	r21, Y+63	; 0x3f
    34fa:	2e 97       	sbiw	r28, 0x0e	; 14
    34fc:	45 17       	cp	r20, r21
    34fe:	18 f0       	brcs	.+6      	; 0x3506 <numConcat+0x542>
    3500:	a0 96       	adiw	r28, 0x20	; 32
    3502:	1f ae       	std	Y+63, r1	; 0x3f
    3504:	a0 97       	sbiw	r28, 0x20	; 32
    3506:	6e 96       	adiw	r28, 0x1e	; 30
    3508:	6f ad       	ldd	r22, Y+63	; 0x3f
    350a:	6e 97       	sbiw	r28, 0x1e	; 30
    350c:	a0 96       	adiw	r28, 0x20	; 32
    350e:	7f ad       	ldd	r23, Y+63	; 0x3f
    3510:	a0 97       	sbiw	r28, 0x20	; 32
    3512:	67 2b       	or	r22, r23
    3514:	6e 96       	adiw	r28, 0x1e	; 30
    3516:	6f af       	std	Y+63, r22	; 0x3f
    3518:	6e 97       	sbiw	r28, 0x1e	; 30
    351a:	6f 96       	adiw	r28, 0x1f	; 31
    351c:	8f ad       	ldd	r24, Y+63	; 0x3f
    351e:	6f 97       	sbiw	r28, 0x1f	; 31
    3520:	2e 96       	adiw	r28, 0x0e	; 14
    3522:	8f af       	std	Y+63, r24	; 0x3f
    3524:	2e 97       	sbiw	r28, 0x0e	; 14
    3526:	27 96       	adiw	r28, 0x07	; 7
    3528:	9f ad       	ldd	r25, Y+63	; 0x3f
    352a:	27 97       	sbiw	r28, 0x07	; 7
    352c:	0b 89       	ldd	r16, Y+19	; 0x13
    352e:	90 0f       	add	r25, r16
    3530:	2f 96       	adiw	r28, 0x0f	; 15
    3532:	9f af       	std	Y+63, r25	; 0x3f
    3534:	2f 97       	sbiw	r28, 0x0f	; 15
    3536:	11 e0       	ldi	r17, 0x01	; 1
    3538:	a1 96       	adiw	r28, 0x21	; 33
    353a:	1f af       	std	Y+63, r17	; 0x3f
    353c:	a1 97       	sbiw	r28, 0x21	; 33
    353e:	2f 96       	adiw	r28, 0x0f	; 15
    3540:	2f ad       	ldd	r18, Y+63	; 0x3f
    3542:	2f 97       	sbiw	r28, 0x0f	; 15
    3544:	27 96       	adiw	r28, 0x07	; 7
    3546:	3f ad       	ldd	r19, Y+63	; 0x3f
    3548:	27 97       	sbiw	r28, 0x07	; 7
    354a:	23 17       	cp	r18, r19
    354c:	18 f0       	brcs	.+6      	; 0x3554 <numConcat+0x590>
    354e:	a1 96       	adiw	r28, 0x21	; 33
    3550:	1f ae       	std	Y+63, r1	; 0x3f
    3552:	a1 97       	sbiw	r28, 0x21	; 33
    3554:	6e 96       	adiw	r28, 0x1e	; 30
    3556:	4f ad       	ldd	r20, Y+63	; 0x3f
    3558:	6e 97       	sbiw	r28, 0x1e	; 30
    355a:	2f 96       	adiw	r28, 0x0f	; 15
    355c:	5f ad       	ldd	r21, Y+63	; 0x3f
    355e:	2f 97       	sbiw	r28, 0x0f	; 15
    3560:	45 0f       	add	r20, r21
    3562:	a2 96       	adiw	r28, 0x22	; 34
    3564:	4f af       	std	Y+63, r20	; 0x3f
    3566:	a2 97       	sbiw	r28, 0x22	; 34
    3568:	61 e0       	ldi	r22, 0x01	; 1
    356a:	a3 96       	adiw	r28, 0x23	; 35
    356c:	6f af       	std	Y+63, r22	; 0x3f
    356e:	a3 97       	sbiw	r28, 0x23	; 35
    3570:	a2 96       	adiw	r28, 0x22	; 34
    3572:	7f ad       	ldd	r23, Y+63	; 0x3f
    3574:	a2 97       	sbiw	r28, 0x22	; 34
    3576:	2f 96       	adiw	r28, 0x0f	; 15
    3578:	8f ad       	ldd	r24, Y+63	; 0x3f
    357a:	2f 97       	sbiw	r28, 0x0f	; 15
    357c:	78 17       	cp	r23, r24
    357e:	18 f0       	brcs	.+6      	; 0x3586 <numConcat+0x5c2>
    3580:	a3 96       	adiw	r28, 0x23	; 35
    3582:	1f ae       	std	Y+63, r1	; 0x3f
    3584:	a3 97       	sbiw	r28, 0x23	; 35
    3586:	a1 96       	adiw	r28, 0x21	; 33
    3588:	9f ad       	ldd	r25, Y+63	; 0x3f
    358a:	a1 97       	sbiw	r28, 0x21	; 33
    358c:	a3 96       	adiw	r28, 0x23	; 35
    358e:	0f ad       	ldd	r16, Y+63	; 0x3f
    3590:	a3 97       	sbiw	r28, 0x23	; 35
    3592:	90 2b       	or	r25, r16
    3594:	a1 96       	adiw	r28, 0x21	; 33
    3596:	9f af       	std	Y+63, r25	; 0x3f
    3598:	a1 97       	sbiw	r28, 0x21	; 33
    359a:	a2 96       	adiw	r28, 0x22	; 34
    359c:	1f ad       	ldd	r17, Y+63	; 0x3f
    359e:	a2 97       	sbiw	r28, 0x22	; 34
    35a0:	2f 96       	adiw	r28, 0x0f	; 15
    35a2:	1f af       	std	Y+63, r17	; 0x3f
    35a4:	2f 97       	sbiw	r28, 0x0f	; 15
    35a6:	28 96       	adiw	r28, 0x08	; 8
    35a8:	2f ad       	ldd	r18, Y+63	; 0x3f
    35aa:	28 97       	sbiw	r28, 0x08	; 8
    35ac:	3c 89       	ldd	r19, Y+20	; 0x14
    35ae:	23 0f       	add	r18, r19
    35b0:	60 96       	adiw	r28, 0x10	; 16
    35b2:	2f af       	std	Y+63, r18	; 0x3f
    35b4:	60 97       	sbiw	r28, 0x10	; 16
    35b6:	a1 96       	adiw	r28, 0x21	; 33
    35b8:	8f ad       	ldd	r24, Y+63	; 0x3f
    35ba:	a1 97       	sbiw	r28, 0x21	; 33
    35bc:	60 96       	adiw	r28, 0x10	; 16
    35be:	4f ad       	ldd	r20, Y+63	; 0x3f
    35c0:	60 97       	sbiw	r28, 0x10	; 16
    35c2:	84 0f       	add	r24, r20
    35c4:	60 96       	adiw	r28, 0x10	; 16
    35c6:	8f af       	std	Y+63, r24	; 0x3f
    35c8:	60 97       	sbiw	r28, 0x10	; 16
    35ca:	29 96       	adiw	r28, 0x09	; 9
    35cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    35ce:	29 97       	sbiw	r28, 0x09	; 9
    35d0:	5a 83       	std	Y+2, r21	; 0x02
    35d2:	2a 96       	adiw	r28, 0x0a	; 10
    35d4:	6f ad       	ldd	r22, Y+63	; 0x3f
    35d6:	2a 97       	sbiw	r28, 0x0a	; 10
    35d8:	6b 83       	std	Y+3, r22	; 0x03
    35da:	2b 96       	adiw	r28, 0x0b	; 11
    35dc:	7f ad       	ldd	r23, Y+63	; 0x3f
    35de:	2b 97       	sbiw	r28, 0x0b	; 11
    35e0:	7c 83       	std	Y+4, r23	; 0x04
    35e2:	2c 96       	adiw	r28, 0x0c	; 12
    35e4:	8f ad       	ldd	r24, Y+63	; 0x3f
    35e6:	2c 97       	sbiw	r28, 0x0c	; 12
    35e8:	8d 83       	std	Y+5, r24	; 0x05
    35ea:	2d 96       	adiw	r28, 0x0d	; 13
    35ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    35ee:	2d 97       	sbiw	r28, 0x0d	; 13
    35f0:	9e 83       	std	Y+6, r25	; 0x06
    35f2:	2e 96       	adiw	r28, 0x0e	; 14
    35f4:	0f ad       	ldd	r16, Y+63	; 0x3f
    35f6:	2e 97       	sbiw	r28, 0x0e	; 14
    35f8:	0f 83       	std	Y+7, r16	; 0x07
    35fa:	2f 96       	adiw	r28, 0x0f	; 15
    35fc:	1f ad       	ldd	r17, Y+63	; 0x3f
    35fe:	2f 97       	sbiw	r28, 0x0f	; 15
    3600:	18 87       	std	Y+8, r17	; 0x08
    3602:	60 96       	adiw	r28, 0x10	; 16
    3604:	2f ad       	ldd	r18, Y+63	; 0x3f
    3606:	60 97       	sbiw	r28, 0x10	; 16
    3608:	29 87       	std	Y+9, r18	; 0x09
/* Concatenates Characters To Become a Full Number */
uint64 numConcat(uint8 array[], uint8 size)
{
	uint64 num = 0;
	uint8 i;
	for (i = 0; i < size; i++)
    360a:	89 81       	ldd	r24, Y+1	; 0x01
    360c:	8f 5f       	subi	r24, 0xFF	; 255
    360e:	89 83       	std	Y+1, r24	; 0x01
    3610:	99 81       	ldd	r25, Y+1	; 0x01
    3612:	8c 85       	ldd	r24, Y+12	; 0x0c
    3614:	98 17       	cp	r25, r24
    3616:	08 f4       	brcc	.+2      	; 0x361a <numConcat+0x656>
    3618:	f5 cc       	rjmp	.-1558   	; 0x3004 <numConcat+0x40>
	{
		num *= 10;
		num += array[i];
	}
	return num;
    361a:	2a 81       	ldd	r18, Y+2	; 0x02
    361c:	3b 81       	ldd	r19, Y+3	; 0x03
    361e:	4c 81       	ldd	r20, Y+4	; 0x04
    3620:	5d 81       	ldd	r21, Y+5	; 0x05
    3622:	6e 81       	ldd	r22, Y+6	; 0x06
    3624:	7f 81       	ldd	r23, Y+7	; 0x07
    3626:	88 85       	ldd	r24, Y+8	; 0x08
    3628:	99 85       	ldd	r25, Y+9	; 0x09
    362a:	a2 2e       	mov	r10, r18
    362c:	b3 2e       	mov	r11, r19
    362e:	c4 2e       	mov	r12, r20
    3630:	d5 2e       	mov	r13, r21
    3632:	e6 2e       	mov	r14, r22
    3634:	f7 2e       	mov	r15, r23
    3636:	08 2f       	mov	r16, r24
    3638:	19 2f       	mov	r17, r25
}
    363a:	2a 2d       	mov	r18, r10
    363c:	3b 2d       	mov	r19, r11
    363e:	4c 2d       	mov	r20, r12
    3640:	5d 2d       	mov	r21, r13
    3642:	6e 2d       	mov	r22, r14
    3644:	7f 2d       	mov	r23, r15
    3646:	80 2f       	mov	r24, r16
    3648:	91 2f       	mov	r25, r17
    364a:	ce 59       	subi	r28, 0x9E	; 158
    364c:	df 4f       	sbci	r29, 0xFF	; 255
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	f8 94       	cli
    3652:	de bf       	out	0x3e, r29	; 62
    3654:	0f be       	out	0x3f, r0	; 63
    3656:	cd bf       	out	0x3d, r28	; 61
    3658:	cf 91       	pop	r28
    365a:	df 91       	pop	r29
    365c:	1f 91       	pop	r17
    365e:	0f 91       	pop	r16
    3660:	ff 90       	pop	r15
    3662:	ef 90       	pop	r14
    3664:	df 90       	pop	r13
    3666:	cf 90       	pop	r12
    3668:	bf 90       	pop	r11
    366a:	af 90       	pop	r10
    366c:	08 95       	ret

0000366e <clearAll>:

/* Function That Clears The Array & Screen */
void clearAll()
{
    366e:	df 93       	push	r29
    3670:	cf 93       	push	r28
    3672:	cd b7       	in	r28, 0x3d	; 61
    3674:	de b7       	in	r29, 0x3e	; 62
	g_array[16] = 0;
    3676:	10 92 86 01 	sts	0x0186, r1
	g_arrayIndex = 0;
    367a:	10 92 86 01 	sts	0x0186, r1
	g_newCalcFlag = FALSE;
    367e:	10 92 87 01 	sts	0x0187, r1
	LCD_clearScreen();
    3682:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <LCD_clearScreen>
	LCD_displayString("CALCULATOR:");
    3686:	80 e6       	ldi	r24, 0x60	; 96
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayString>
	LCD_moveCursor(1, 0);
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	60 e0       	ldi	r22, 0x00	; 0
    3692:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <LCD_moveCursor>
}
    3696:	cf 91       	pop	r28
    3698:	df 91       	pop	r29
    369a:	08 95       	ret

0000369c <input>:

/* Displays Character on LCD Screen & Pushes It in The Array of Characters */
void input(uint8 key)
{
    369c:	df 93       	push	r29
    369e:	cf 93       	push	r28
    36a0:	0f 92       	push	r0
    36a2:	cd b7       	in	r28, 0x3d	; 61
    36a4:	de b7       	in	r29, 0x3e	; 62
    36a6:	89 83       	std	Y+1, r24	; 0x01
	if(g_arrayIndex < 16)
    36a8:	80 91 86 01 	lds	r24, 0x0186
    36ac:	80 31       	cpi	r24, 0x10	; 16
    36ae:	c8 f4       	brcc	.+50     	; 0x36e2 <input+0x46>
	{
		if(key >= 0 && key <= 9) LCD_intgerToString(key);
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	8a 30       	cpi	r24, 0x0A	; 10
    36b4:	30 f4       	brcc	.+12     	; 0x36c2 <input+0x26>
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	88 2f       	mov	r24, r24
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_intgerToString>
    36c0:	03 c0       	rjmp	.+6      	; 0x36c8 <input+0x2c>
		else LCD_displayCharacter(key);
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	0e 94 b6 12 	call	0x256c	; 0x256c <LCD_displayCharacter>
		g_array[g_arrayIndex++] = key;
    36c8:	20 91 86 01 	lds	r18, 0x0186
    36cc:	82 2f       	mov	r24, r18
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	fc 01       	movw	r30, r24
    36d2:	ea 58       	subi	r30, 0x8A	; 138
    36d4:	fe 4f       	sbci	r31, 0xFE	; 254
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	80 83       	st	Z, r24
    36da:	82 2f       	mov	r24, r18
    36dc:	8f 5f       	subi	r24, 0xFF	; 255
    36de:	80 93 86 01 	sts	0x0186, r24
	}
}
    36e2:	0f 90       	pop	r0
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <calculate>:

/*  */
void calculate()
{
    36ea:	8f 92       	push	r8
    36ec:	9f 92       	push	r9
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	df 93       	push	r29
    3700:	cf 93       	push	r28
    3702:	cd b7       	in	r28, 0x3d	; 61
    3704:	de b7       	in	r29, 0x3e	; 62
    3706:	c6 5c       	subi	r28, 0xC6	; 198
    3708:	d0 40       	sbci	r29, 0x00	; 0
    370a:	0f b6       	in	r0, 0x3f	; 63
    370c:	f8 94       	cli
    370e:	de bf       	out	0x3e, r29	; 62
    3710:	0f be       	out	0x3f, r0	; 63
    3712:	cd bf       	out	0x3d, r28	; 61
	uint64 numsAndSigns[16] = {0}; 			/* Array for All Numbers & Signs in Equation */
    3714:	80 e8       	ldi	r24, 0x80	; 128
    3716:	fe 01       	movw	r30, r28
    3718:	34 96       	adiw	r30, 0x04	; 4
    371a:	df 01       	movw	r26, r30
    371c:	98 2f       	mov	r25, r24
    371e:	1d 92       	st	X+, r1
    3720:	9a 95       	dec	r25
    3722:	e9 f7       	brne	.-6      	; 0x371e <calculate+0x34>
	uint8 i, numsAndSignsIndex = 0, num[16] = {0}, numIndex = 0;
    3724:	1a 82       	std	Y+2, r1	; 0x02
    3726:	ce 01       	movw	r24, r28
    3728:	8c 57       	subi	r24, 0x7C	; 124
    372a:	9f 4f       	sbci	r25, 0xFF	; 255
    372c:	20 e1       	ldi	r18, 0x10	; 16
    372e:	fc 01       	movw	r30, r24
    3730:	df 01       	movw	r26, r30
    3732:	82 2f       	mov	r24, r18
    3734:	1d 92       	st	X+, r1
    3736:	8a 95       	dec	r24
    3738:	e9 f7       	brne	.-6      	; 0x3734 <calculate+0x4a>
    373a:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i < g_arrayIndex; i++)
    373c:	1b 82       	std	Y+3, r1	; 0x03
    373e:	a9 c0       	rjmp	.+338    	; 0x3892 <calculate+0x1a8>
	{
		if(g_array[i] >= 0 && g_array[i] <= 9)
    3740:	8b 81       	ldd	r24, Y+3	; 0x03
    3742:	88 2f       	mov	r24, r24
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	fc 01       	movw	r30, r24
    3748:	ea 58       	subi	r30, 0x8A	; 138
    374a:	fe 4f       	sbci	r31, 0xFE	; 254
    374c:	80 81       	ld	r24, Z
    374e:	8a 30       	cpi	r24, 0x0A	; 10
    3750:	08 f0       	brcs	.+2      	; 0x3754 <calculate+0x6a>
    3752:	4a c0       	rjmp	.+148    	; 0x37e8 <calculate+0xfe>
		{
			num[numIndex++] = g_array[i];
    3754:	89 81       	ldd	r24, Y+1	; 0x01
    3756:	28 2f       	mov	r18, r24
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	8b 81       	ldd	r24, Y+3	; 0x03
    375c:	88 2f       	mov	r24, r24
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	fc 01       	movw	r30, r24
    3762:	ea 58       	subi	r30, 0x8A	; 138
    3764:	fe 4f       	sbci	r31, 0xFE	; 254
    3766:	40 81       	ld	r20, Z
    3768:	ce 01       	movw	r24, r28
    376a:	8c 57       	subi	r24, 0x7C	; 124
    376c:	9f 4f       	sbci	r25, 0xFF	; 255
    376e:	fc 01       	movw	r30, r24
    3770:	e2 0f       	add	r30, r18
    3772:	f3 1f       	adc	r31, r19
    3774:	40 83       	st	Z, r20
    3776:	89 81       	ldd	r24, Y+1	; 0x01
    3778:	8f 5f       	subi	r24, 0xFF	; 255
    377a:	89 83       	std	Y+1, r24	; 0x01
			if(i == g_arrayIndex - 1)
    377c:	8b 81       	ldd	r24, Y+3	; 0x03
    377e:	28 2f       	mov	r18, r24
    3780:	30 e0       	ldi	r19, 0x00	; 0
    3782:	80 91 86 01 	lds	r24, 0x0186
    3786:	88 2f       	mov	r24, r24
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	01 97       	sbiw	r24, 0x01	; 1
    378c:	28 17       	cp	r18, r24
    378e:	39 07       	cpc	r19, r25
    3790:	09 f0       	breq	.+2      	; 0x3794 <calculate+0xaa>
    3792:	7c c0       	rjmp	.+248    	; 0x388c <calculate+0x1a2>
				numsAndSigns[numsAndSignsIndex++] = numConcat(num, numIndex);
    3794:	8a 81       	ldd	r24, Y+2	; 0x02
    3796:	88 2e       	mov	r8, r24
    3798:	99 24       	eor	r9, r9
    379a:	ce 01       	movw	r24, r28
    379c:	8c 57       	subi	r24, 0x7C	; 124
    379e:	9f 4f       	sbci	r25, 0xFF	; 255
    37a0:	69 81       	ldd	r22, Y+1	; 0x01
    37a2:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <numConcat>
    37a6:	a2 2e       	mov	r10, r18
    37a8:	b3 2e       	mov	r11, r19
    37aa:	c4 2e       	mov	r12, r20
    37ac:	d5 2e       	mov	r13, r21
    37ae:	e6 2e       	mov	r14, r22
    37b0:	f7 2e       	mov	r15, r23
    37b2:	08 2f       	mov	r16, r24
    37b4:	19 2f       	mov	r17, r25
    37b6:	94 01       	movw	r18, r8
    37b8:	22 0f       	add	r18, r18
    37ba:	33 1f       	adc	r19, r19
    37bc:	22 0f       	add	r18, r18
    37be:	33 1f       	adc	r19, r19
    37c0:	22 0f       	add	r18, r18
    37c2:	33 1f       	adc	r19, r19
    37c4:	ce 01       	movw	r24, r28
    37c6:	01 96       	adiw	r24, 0x01	; 1
    37c8:	82 0f       	add	r24, r18
    37ca:	93 1f       	adc	r25, r19
    37cc:	fc 01       	movw	r30, r24
    37ce:	33 96       	adiw	r30, 0x03	; 3
    37d0:	a0 82       	st	Z, r10
    37d2:	b1 82       	std	Z+1, r11	; 0x01
    37d4:	c2 82       	std	Z+2, r12	; 0x02
    37d6:	d3 82       	std	Z+3, r13	; 0x03
    37d8:	e4 82       	std	Z+4, r14	; 0x04
    37da:	f5 82       	std	Z+5, r15	; 0x05
    37dc:	06 83       	std	Z+6, r16	; 0x06
    37de:	17 83       	std	Z+7, r17	; 0x07
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	8f 5f       	subi	r24, 0xFF	; 255
    37e4:	8a 83       	std	Y+2, r24	; 0x02
    37e6:	52 c0       	rjmp	.+164    	; 0x388c <calculate+0x1a2>
		}
		else
		{
			numsAndSigns[numsAndSignsIndex++] = numConcat(num, numIndex);
    37e8:	8a 81       	ldd	r24, Y+2	; 0x02
    37ea:	88 2e       	mov	r8, r24
    37ec:	99 24       	eor	r9, r9
    37ee:	ce 01       	movw	r24, r28
    37f0:	8c 57       	subi	r24, 0x7C	; 124
    37f2:	9f 4f       	sbci	r25, 0xFF	; 255
    37f4:	69 81       	ldd	r22, Y+1	; 0x01
    37f6:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <numConcat>
    37fa:	a2 2e       	mov	r10, r18
    37fc:	b3 2e       	mov	r11, r19
    37fe:	c4 2e       	mov	r12, r20
    3800:	d5 2e       	mov	r13, r21
    3802:	e6 2e       	mov	r14, r22
    3804:	f7 2e       	mov	r15, r23
    3806:	08 2f       	mov	r16, r24
    3808:	19 2f       	mov	r17, r25
    380a:	94 01       	movw	r18, r8
    380c:	22 0f       	add	r18, r18
    380e:	33 1f       	adc	r19, r19
    3810:	22 0f       	add	r18, r18
    3812:	33 1f       	adc	r19, r19
    3814:	22 0f       	add	r18, r18
    3816:	33 1f       	adc	r19, r19
    3818:	ce 01       	movw	r24, r28
    381a:	01 96       	adiw	r24, 0x01	; 1
    381c:	82 0f       	add	r24, r18
    381e:	93 1f       	adc	r25, r19
    3820:	fc 01       	movw	r30, r24
    3822:	33 96       	adiw	r30, 0x03	; 3
    3824:	a0 82       	st	Z, r10
    3826:	b1 82       	std	Z+1, r11	; 0x01
    3828:	c2 82       	std	Z+2, r12	; 0x02
    382a:	d3 82       	std	Z+3, r13	; 0x03
    382c:	e4 82       	std	Z+4, r14	; 0x04
    382e:	f5 82       	std	Z+5, r15	; 0x05
    3830:	06 83       	std	Z+6, r16	; 0x06
    3832:	17 83       	std	Z+7, r17	; 0x07
    3834:	8a 81       	ldd	r24, Y+2	; 0x02
    3836:	8f 5f       	subi	r24, 0xFF	; 255
    3838:	8a 83       	std	Y+2, r24	; 0x02
			numsAndSigns[numsAndSignsIndex++] = g_array[i];
    383a:	8a 81       	ldd	r24, Y+2	; 0x02
    383c:	a8 2f       	mov	r26, r24
    383e:	b0 e0       	ldi	r27, 0x00	; 0
    3840:	8b 81       	ldd	r24, Y+3	; 0x03
    3842:	88 2f       	mov	r24, r24
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	fc 01       	movw	r30, r24
    3848:	ea 58       	subi	r30, 0x8A	; 138
    384a:	fe 4f       	sbci	r31, 0xFE	; 254
    384c:	80 81       	ld	r24, Z
    384e:	28 2f       	mov	r18, r24
    3850:	30 e0       	ldi	r19, 0x00	; 0
    3852:	40 e0       	ldi	r20, 0x00	; 0
    3854:	50 e0       	ldi	r21, 0x00	; 0
    3856:	60 e0       	ldi	r22, 0x00	; 0
    3858:	70 e0       	ldi	r23, 0x00	; 0
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	aa 0f       	add	r26, r26
    3860:	bb 1f       	adc	r27, r27
    3862:	aa 0f       	add	r26, r26
    3864:	bb 1f       	adc	r27, r27
    3866:	aa 0f       	add	r26, r26
    3868:	bb 1f       	adc	r27, r27
    386a:	fe 01       	movw	r30, r28
    386c:	31 96       	adiw	r30, 0x01	; 1
    386e:	ea 0f       	add	r30, r26
    3870:	fb 1f       	adc	r31, r27
    3872:	33 96       	adiw	r30, 0x03	; 3
    3874:	20 83       	st	Z, r18
    3876:	31 83       	std	Z+1, r19	; 0x01
    3878:	42 83       	std	Z+2, r20	; 0x02
    387a:	53 83       	std	Z+3, r21	; 0x03
    387c:	64 83       	std	Z+4, r22	; 0x04
    387e:	75 83       	std	Z+5, r23	; 0x05
    3880:	86 83       	std	Z+6, r24	; 0x06
    3882:	97 83       	std	Z+7, r25	; 0x07
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	8f 5f       	subi	r24, 0xFF	; 255
    3888:	8a 83       	std	Y+2, r24	; 0x02
			numIndex = 0;
    388a:	19 82       	std	Y+1, r1	; 0x01
/*  */
void calculate()
{
	uint64 numsAndSigns[16] = {0}; 			/* Array for All Numbers & Signs in Equation */
	uint8 i, numsAndSignsIndex = 0, num[16] = {0}, numIndex = 0;
	for(i = 0; i < g_arrayIndex; i++)
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	8f 5f       	subi	r24, 0xFF	; 255
    3890:	8b 83       	std	Y+3, r24	; 0x03
    3892:	90 91 86 01 	lds	r25, 0x0186
    3896:	8b 81       	ldd	r24, Y+3	; 0x03
    3898:	89 17       	cp	r24, r25
    389a:	08 f4       	brcc	.+2      	; 0x389e <calculate+0x1b4>
    389c:	51 cf       	rjmp	.-350    	; 0x3740 <calculate+0x56>
			numsAndSigns[numsAndSignsIndex++] = numConcat(num, numIndex);
			numsAndSigns[numsAndSignsIndex++] = g_array[i];
			numIndex = 0;
		}
	}
	LCD_displayStringRowColumn(3, 0, "=");
    389e:	2c e6       	ldi	r18, 0x6C	; 108
    38a0:	30 e0       	ldi	r19, 0x00	; 0
    38a2:	83 e0       	ldi	r24, 0x03	; 3
    38a4:	60 e0       	ldi	r22, 0x00	; 0
    38a6:	a9 01       	movw	r20, r18
    38a8:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <LCD_displayStringRowColumn>
	for(i = 0; i < numsAndSignsIndex; i++)
    38ac:	1b 82       	std	Y+3, r1	; 0x03
    38ae:	f8 c3       	rjmp	.+2032   	; 0x40a0 <calculate+0x9b6>
	{
		if(numsAndSigns[i] == '+') result = numsAndSigns[i-1] +numsAndSigns[i+1];
    38b0:	8b 81       	ldd	r24, Y+3	; 0x03
    38b2:	88 2f       	mov	r24, r24
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	9c 01       	movw	r18, r24
    38b8:	22 0f       	add	r18, r18
    38ba:	33 1f       	adc	r19, r19
    38bc:	22 0f       	add	r18, r18
    38be:	33 1f       	adc	r19, r19
    38c0:	22 0f       	add	r18, r18
    38c2:	33 1f       	adc	r19, r19
    38c4:	ce 01       	movw	r24, r28
    38c6:	01 96       	adiw	r24, 0x01	; 1
    38c8:	82 0f       	add	r24, r18
    38ca:	93 1f       	adc	r25, r19
    38cc:	fc 01       	movw	r30, r24
    38ce:	33 96       	adiw	r30, 0x03	; 3
    38d0:	90 81       	ld	r25, Z
    38d2:	cc 55       	subi	r28, 0x5C	; 92
    38d4:	df 4f       	sbci	r29, 0xFF	; 255
    38d6:	98 83       	st	Y, r25
    38d8:	c4 5a       	subi	r28, 0xA4	; 164
    38da:	d0 40       	sbci	r29, 0x00	; 0
    38dc:	a1 81       	ldd	r26, Z+1	; 0x01
    38de:	cb 55       	subi	r28, 0x5B	; 91
    38e0:	df 4f       	sbci	r29, 0xFF	; 255
    38e2:	a8 83       	st	Y, r26
    38e4:	c5 5a       	subi	r28, 0xA5	; 165
    38e6:	d0 40       	sbci	r29, 0x00	; 0
    38e8:	b2 81       	ldd	r27, Z+2	; 0x02
    38ea:	ca 55       	subi	r28, 0x5A	; 90
    38ec:	df 4f       	sbci	r29, 0xFF	; 255
    38ee:	b8 83       	st	Y, r27
    38f0:	c6 5a       	subi	r28, 0xA6	; 166
    38f2:	d0 40       	sbci	r29, 0x00	; 0
    38f4:	83 81       	ldd	r24, Z+3	; 0x03
    38f6:	c9 55       	subi	r28, 0x59	; 89
    38f8:	df 4f       	sbci	r29, 0xFF	; 255
    38fa:	88 83       	st	Y, r24
    38fc:	c7 5a       	subi	r28, 0xA7	; 167
    38fe:	d0 40       	sbci	r29, 0x00	; 0
    3900:	94 81       	ldd	r25, Z+4	; 0x04
    3902:	c8 55       	subi	r28, 0x58	; 88
    3904:	df 4f       	sbci	r29, 0xFF	; 255
    3906:	98 83       	st	Y, r25
    3908:	c8 5a       	subi	r28, 0xA8	; 168
    390a:	d0 40       	sbci	r29, 0x00	; 0
    390c:	a5 81       	ldd	r26, Z+5	; 0x05
    390e:	c7 55       	subi	r28, 0x57	; 87
    3910:	df 4f       	sbci	r29, 0xFF	; 255
    3912:	a8 83       	st	Y, r26
    3914:	c9 5a       	subi	r28, 0xA9	; 169
    3916:	d0 40       	sbci	r29, 0x00	; 0
    3918:	b6 81       	ldd	r27, Z+6	; 0x06
    391a:	c6 55       	subi	r28, 0x56	; 86
    391c:	df 4f       	sbci	r29, 0xFF	; 255
    391e:	b8 83       	st	Y, r27
    3920:	ca 5a       	subi	r28, 0xAA	; 170
    3922:	d0 40       	sbci	r29, 0x00	; 0
    3924:	87 81       	ldd	r24, Z+7	; 0x07
    3926:	c5 55       	subi	r28, 0x55	; 85
    3928:	df 4f       	sbci	r29, 0xFF	; 255
    392a:	88 83       	st	Y, r24
    392c:	cb 5a       	subi	r28, 0xAB	; 171
    392e:	d0 40       	sbci	r29, 0x00	; 0
    3930:	cc 55       	subi	r28, 0x5C	; 92
    3932:	df 4f       	sbci	r29, 0xFF	; 255
    3934:	98 81       	ld	r25, Y
    3936:	c4 5a       	subi	r28, 0xA4	; 164
    3938:	d0 40       	sbci	r29, 0x00	; 0
    393a:	9b 32       	cpi	r25, 0x2B	; 43
    393c:	09 f0       	breq	.+2      	; 0x3940 <calculate+0x256>
    393e:	ad c3       	rjmp	.+1882   	; 0x409a <calculate+0x9b0>
    3940:	cb 55       	subi	r28, 0x5B	; 91
    3942:	df 4f       	sbci	r29, 0xFF	; 255
    3944:	a8 81       	ld	r26, Y
    3946:	c5 5a       	subi	r28, 0xA5	; 165
    3948:	d0 40       	sbci	r29, 0x00	; 0
    394a:	aa 23       	and	r26, r26
    394c:	09 f0       	breq	.+2      	; 0x3950 <calculate+0x266>
    394e:	a5 c3       	rjmp	.+1866   	; 0x409a <calculate+0x9b0>
    3950:	ca 55       	subi	r28, 0x5A	; 90
    3952:	df 4f       	sbci	r29, 0xFF	; 255
    3954:	b8 81       	ld	r27, Y
    3956:	c6 5a       	subi	r28, 0xA6	; 166
    3958:	d0 40       	sbci	r29, 0x00	; 0
    395a:	bb 23       	and	r27, r27
    395c:	09 f0       	breq	.+2      	; 0x3960 <calculate+0x276>
    395e:	9d c3       	rjmp	.+1850   	; 0x409a <calculate+0x9b0>
    3960:	c9 55       	subi	r28, 0x59	; 89
    3962:	df 4f       	sbci	r29, 0xFF	; 255
    3964:	88 81       	ld	r24, Y
    3966:	c7 5a       	subi	r28, 0xA7	; 167
    3968:	d0 40       	sbci	r29, 0x00	; 0
    396a:	88 23       	and	r24, r24
    396c:	09 f0       	breq	.+2      	; 0x3970 <calculate+0x286>
    396e:	95 c3       	rjmp	.+1834   	; 0x409a <calculate+0x9b0>
    3970:	c8 55       	subi	r28, 0x58	; 88
    3972:	df 4f       	sbci	r29, 0xFF	; 255
    3974:	98 81       	ld	r25, Y
    3976:	c8 5a       	subi	r28, 0xA8	; 168
    3978:	d0 40       	sbci	r29, 0x00	; 0
    397a:	99 23       	and	r25, r25
    397c:	09 f0       	breq	.+2      	; 0x3980 <calculate+0x296>
    397e:	8d c3       	rjmp	.+1818   	; 0x409a <calculate+0x9b0>
    3980:	c7 55       	subi	r28, 0x57	; 87
    3982:	df 4f       	sbci	r29, 0xFF	; 255
    3984:	a8 81       	ld	r26, Y
    3986:	c9 5a       	subi	r28, 0xA9	; 169
    3988:	d0 40       	sbci	r29, 0x00	; 0
    398a:	aa 23       	and	r26, r26
    398c:	09 f0       	breq	.+2      	; 0x3990 <calculate+0x2a6>
    398e:	85 c3       	rjmp	.+1802   	; 0x409a <calculate+0x9b0>
    3990:	c6 55       	subi	r28, 0x56	; 86
    3992:	df 4f       	sbci	r29, 0xFF	; 255
    3994:	b8 81       	ld	r27, Y
    3996:	ca 5a       	subi	r28, 0xAA	; 170
    3998:	d0 40       	sbci	r29, 0x00	; 0
    399a:	bb 23       	and	r27, r27
    399c:	09 f0       	breq	.+2      	; 0x39a0 <calculate+0x2b6>
    399e:	7d c3       	rjmp	.+1786   	; 0x409a <calculate+0x9b0>
    39a0:	c5 55       	subi	r28, 0x55	; 85
    39a2:	df 4f       	sbci	r29, 0xFF	; 255
    39a4:	88 81       	ld	r24, Y
    39a6:	cb 5a       	subi	r28, 0xAB	; 171
    39a8:	d0 40       	sbci	r29, 0x00	; 0
    39aa:	88 23       	and	r24, r24
    39ac:	09 f0       	breq	.+2      	; 0x39b0 <calculate+0x2c6>
    39ae:	75 c3       	rjmp	.+1770   	; 0x409a <calculate+0x9b0>
    39b0:	8b 81       	ldd	r24, Y+3	; 0x03
    39b2:	88 2f       	mov	r24, r24
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	01 97       	sbiw	r24, 0x01	; 1
    39b8:	9c 01       	movw	r18, r24
    39ba:	22 0f       	add	r18, r18
    39bc:	33 1f       	adc	r19, r19
    39be:	22 0f       	add	r18, r18
    39c0:	33 1f       	adc	r19, r19
    39c2:	22 0f       	add	r18, r18
    39c4:	33 1f       	adc	r19, r19
    39c6:	ce 01       	movw	r24, r28
    39c8:	01 96       	adiw	r24, 0x01	; 1
    39ca:	82 0f       	add	r24, r18
    39cc:	93 1f       	adc	r25, r19
    39ce:	fc 01       	movw	r30, r24
    39d0:	33 96       	adiw	r30, 0x03	; 3
    39d2:	90 81       	ld	r25, Z
    39d4:	c4 56       	subi	r28, 0x64	; 100
    39d6:	df 4f       	sbci	r29, 0xFF	; 255
    39d8:	98 83       	st	Y, r25
    39da:	cc 59       	subi	r28, 0x9C	; 156
    39dc:	d0 40       	sbci	r29, 0x00	; 0
    39de:	a1 81       	ldd	r26, Z+1	; 0x01
    39e0:	c3 56       	subi	r28, 0x63	; 99
    39e2:	df 4f       	sbci	r29, 0xFF	; 255
    39e4:	a8 83       	st	Y, r26
    39e6:	cd 59       	subi	r28, 0x9D	; 157
    39e8:	d0 40       	sbci	r29, 0x00	; 0
    39ea:	b2 81       	ldd	r27, Z+2	; 0x02
    39ec:	c2 56       	subi	r28, 0x62	; 98
    39ee:	df 4f       	sbci	r29, 0xFF	; 255
    39f0:	b8 83       	st	Y, r27
    39f2:	ce 59       	subi	r28, 0x9E	; 158
    39f4:	d0 40       	sbci	r29, 0x00	; 0
    39f6:	83 81       	ldd	r24, Z+3	; 0x03
    39f8:	c1 56       	subi	r28, 0x61	; 97
    39fa:	df 4f       	sbci	r29, 0xFF	; 255
    39fc:	88 83       	st	Y, r24
    39fe:	cf 59       	subi	r28, 0x9F	; 159
    3a00:	d0 40       	sbci	r29, 0x00	; 0
    3a02:	94 81       	ldd	r25, Z+4	; 0x04
    3a04:	c0 56       	subi	r28, 0x60	; 96
    3a06:	df 4f       	sbci	r29, 0xFF	; 255
    3a08:	98 83       	st	Y, r25
    3a0a:	c0 5a       	subi	r28, 0xA0	; 160
    3a0c:	d0 40       	sbci	r29, 0x00	; 0
    3a0e:	a5 81       	ldd	r26, Z+5	; 0x05
    3a10:	cf 55       	subi	r28, 0x5F	; 95
    3a12:	df 4f       	sbci	r29, 0xFF	; 255
    3a14:	a8 83       	st	Y, r26
    3a16:	c1 5a       	subi	r28, 0xA1	; 161
    3a18:	d0 40       	sbci	r29, 0x00	; 0
    3a1a:	b6 81       	ldd	r27, Z+6	; 0x06
    3a1c:	ce 55       	subi	r28, 0x5E	; 94
    3a1e:	df 4f       	sbci	r29, 0xFF	; 255
    3a20:	b8 83       	st	Y, r27
    3a22:	c2 5a       	subi	r28, 0xA2	; 162
    3a24:	d0 40       	sbci	r29, 0x00	; 0
    3a26:	87 81       	ldd	r24, Z+7	; 0x07
    3a28:	cd 55       	subi	r28, 0x5D	; 93
    3a2a:	df 4f       	sbci	r29, 0xFF	; 255
    3a2c:	88 83       	st	Y, r24
    3a2e:	c3 5a       	subi	r28, 0xA3	; 163
    3a30:	d0 40       	sbci	r29, 0x00	; 0
    3a32:	8b 81       	ldd	r24, Y+3	; 0x03
    3a34:	88 2f       	mov	r24, r24
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	01 96       	adiw	r24, 0x01	; 1
    3a3a:	9c 01       	movw	r18, r24
    3a3c:	22 0f       	add	r18, r18
    3a3e:	33 1f       	adc	r19, r19
    3a40:	22 0f       	add	r18, r18
    3a42:	33 1f       	adc	r19, r19
    3a44:	22 0f       	add	r18, r18
    3a46:	33 1f       	adc	r19, r19
    3a48:	ce 01       	movw	r24, r28
    3a4a:	01 96       	adiw	r24, 0x01	; 1
    3a4c:	82 0f       	add	r24, r18
    3a4e:	93 1f       	adc	r25, r19
    3a50:	fc 01       	movw	r30, r24
    3a52:	33 96       	adiw	r30, 0x03	; 3
    3a54:	90 81       	ld	r25, Z
    3a56:	cc 56       	subi	r28, 0x6C	; 108
    3a58:	df 4f       	sbci	r29, 0xFF	; 255
    3a5a:	98 83       	st	Y, r25
    3a5c:	c4 59       	subi	r28, 0x94	; 148
    3a5e:	d0 40       	sbci	r29, 0x00	; 0
    3a60:	a1 81       	ldd	r26, Z+1	; 0x01
    3a62:	cb 56       	subi	r28, 0x6B	; 107
    3a64:	df 4f       	sbci	r29, 0xFF	; 255
    3a66:	a8 83       	st	Y, r26
    3a68:	c5 59       	subi	r28, 0x95	; 149
    3a6a:	d0 40       	sbci	r29, 0x00	; 0
    3a6c:	b2 81       	ldd	r27, Z+2	; 0x02
    3a6e:	ca 56       	subi	r28, 0x6A	; 106
    3a70:	df 4f       	sbci	r29, 0xFF	; 255
    3a72:	b8 83       	st	Y, r27
    3a74:	c6 59       	subi	r28, 0x96	; 150
    3a76:	d0 40       	sbci	r29, 0x00	; 0
    3a78:	83 81       	ldd	r24, Z+3	; 0x03
    3a7a:	c9 56       	subi	r28, 0x69	; 105
    3a7c:	df 4f       	sbci	r29, 0xFF	; 255
    3a7e:	88 83       	st	Y, r24
    3a80:	c7 59       	subi	r28, 0x97	; 151
    3a82:	d0 40       	sbci	r29, 0x00	; 0
    3a84:	94 81       	ldd	r25, Z+4	; 0x04
    3a86:	c8 56       	subi	r28, 0x68	; 104
    3a88:	df 4f       	sbci	r29, 0xFF	; 255
    3a8a:	98 83       	st	Y, r25
    3a8c:	c8 59       	subi	r28, 0x98	; 152
    3a8e:	d0 40       	sbci	r29, 0x00	; 0
    3a90:	a5 81       	ldd	r26, Z+5	; 0x05
    3a92:	c7 56       	subi	r28, 0x67	; 103
    3a94:	df 4f       	sbci	r29, 0xFF	; 255
    3a96:	a8 83       	st	Y, r26
    3a98:	c9 59       	subi	r28, 0x99	; 153
    3a9a:	d0 40       	sbci	r29, 0x00	; 0
    3a9c:	b6 81       	ldd	r27, Z+6	; 0x06
    3a9e:	c6 56       	subi	r28, 0x66	; 102
    3aa0:	df 4f       	sbci	r29, 0xFF	; 255
    3aa2:	b8 83       	st	Y, r27
    3aa4:	ca 59       	subi	r28, 0x9A	; 154
    3aa6:	d0 40       	sbci	r29, 0x00	; 0
    3aa8:	87 81       	ldd	r24, Z+7	; 0x07
    3aaa:	c5 56       	subi	r28, 0x65	; 101
    3aac:	df 4f       	sbci	r29, 0xFF	; 255
    3aae:	88 83       	st	Y, r24
    3ab0:	cb 59       	subi	r28, 0x9B	; 155
    3ab2:	d0 40       	sbci	r29, 0x00	; 0
    3ab4:	c4 56       	subi	r28, 0x64	; 100
    3ab6:	df 4f       	sbci	r29, 0xFF	; 255
    3ab8:	98 81       	ld	r25, Y
    3aba:	cc 59       	subi	r28, 0x9C	; 156
    3abc:	d0 40       	sbci	r29, 0x00	; 0
    3abe:	cc 56       	subi	r28, 0x6C	; 108
    3ac0:	df 4f       	sbci	r29, 0xFF	; 255
    3ac2:	a8 81       	ld	r26, Y
    3ac4:	c4 59       	subi	r28, 0x94	; 148
    3ac6:	d0 40       	sbci	r29, 0x00	; 0
    3ac8:	9a 0f       	add	r25, r26
    3aca:	c4 55       	subi	r28, 0x54	; 84
    3acc:	df 4f       	sbci	r29, 0xFF	; 255
    3ace:	98 83       	st	Y, r25
    3ad0:	cc 5a       	subi	r28, 0xAC	; 172
    3ad2:	d0 40       	sbci	r29, 0x00	; 0
    3ad4:	b1 e0       	ldi	r27, 0x01	; 1
    3ad6:	cc 54       	subi	r28, 0x4C	; 76
    3ad8:	df 4f       	sbci	r29, 0xFF	; 255
    3ada:	b8 83       	st	Y, r27
    3adc:	c4 5b       	subi	r28, 0xB4	; 180
    3ade:	d0 40       	sbci	r29, 0x00	; 0
    3ae0:	c4 55       	subi	r28, 0x54	; 84
    3ae2:	df 4f       	sbci	r29, 0xFF	; 255
    3ae4:	88 81       	ld	r24, Y
    3ae6:	cc 5a       	subi	r28, 0xAC	; 172
    3ae8:	d0 40       	sbci	r29, 0x00	; 0
    3aea:	c4 56       	subi	r28, 0x64	; 100
    3aec:	df 4f       	sbci	r29, 0xFF	; 255
    3aee:	98 81       	ld	r25, Y
    3af0:	cc 59       	subi	r28, 0x9C	; 156
    3af2:	d0 40       	sbci	r29, 0x00	; 0
    3af4:	89 17       	cp	r24, r25
    3af6:	28 f0       	brcs	.+10     	; 0x3b02 <calculate+0x418>
    3af8:	cc 54       	subi	r28, 0x4C	; 76
    3afa:	df 4f       	sbci	r29, 0xFF	; 255
    3afc:	18 82       	st	Y, r1
    3afe:	c4 5b       	subi	r28, 0xB4	; 180
    3b00:	d0 40       	sbci	r29, 0x00	; 0
    3b02:	c3 56       	subi	r28, 0x63	; 99
    3b04:	df 4f       	sbci	r29, 0xFF	; 255
    3b06:	a8 81       	ld	r26, Y
    3b08:	cd 59       	subi	r28, 0x9D	; 157
    3b0a:	d0 40       	sbci	r29, 0x00	; 0
    3b0c:	cb 56       	subi	r28, 0x6B	; 107
    3b0e:	df 4f       	sbci	r29, 0xFF	; 255
    3b10:	b8 81       	ld	r27, Y
    3b12:	c5 59       	subi	r28, 0x95	; 149
    3b14:	d0 40       	sbci	r29, 0x00	; 0
    3b16:	ab 0f       	add	r26, r27
    3b18:	c3 55       	subi	r28, 0x53	; 83
    3b1a:	df 4f       	sbci	r29, 0xFF	; 255
    3b1c:	a8 83       	st	Y, r26
    3b1e:	cd 5a       	subi	r28, 0xAD	; 173
    3b20:	d0 40       	sbci	r29, 0x00	; 0
    3b22:	81 e0       	ldi	r24, 0x01	; 1
    3b24:	cb 54       	subi	r28, 0x4B	; 75
    3b26:	df 4f       	sbci	r29, 0xFF	; 255
    3b28:	88 83       	st	Y, r24
    3b2a:	c5 5b       	subi	r28, 0xB5	; 181
    3b2c:	d0 40       	sbci	r29, 0x00	; 0
    3b2e:	c3 55       	subi	r28, 0x53	; 83
    3b30:	df 4f       	sbci	r29, 0xFF	; 255
    3b32:	98 81       	ld	r25, Y
    3b34:	cd 5a       	subi	r28, 0xAD	; 173
    3b36:	d0 40       	sbci	r29, 0x00	; 0
    3b38:	c3 56       	subi	r28, 0x63	; 99
    3b3a:	df 4f       	sbci	r29, 0xFF	; 255
    3b3c:	a8 81       	ld	r26, Y
    3b3e:	cd 59       	subi	r28, 0x9D	; 157
    3b40:	d0 40       	sbci	r29, 0x00	; 0
    3b42:	9a 17       	cp	r25, r26
    3b44:	28 f0       	brcs	.+10     	; 0x3b50 <calculate+0x466>
    3b46:	cb 54       	subi	r28, 0x4B	; 75
    3b48:	df 4f       	sbci	r29, 0xFF	; 255
    3b4a:	18 82       	st	Y, r1
    3b4c:	c5 5b       	subi	r28, 0xB5	; 181
    3b4e:	d0 40       	sbci	r29, 0x00	; 0
    3b50:	cc 54       	subi	r28, 0x4C	; 76
    3b52:	df 4f       	sbci	r29, 0xFF	; 255
    3b54:	b8 81       	ld	r27, Y
    3b56:	c4 5b       	subi	r28, 0xB4	; 180
    3b58:	d0 40       	sbci	r29, 0x00	; 0
    3b5a:	c3 55       	subi	r28, 0x53	; 83
    3b5c:	df 4f       	sbci	r29, 0xFF	; 255
    3b5e:	88 81       	ld	r24, Y
    3b60:	cd 5a       	subi	r28, 0xAD	; 173
    3b62:	d0 40       	sbci	r29, 0x00	; 0
    3b64:	b8 0f       	add	r27, r24
    3b66:	ca 54       	subi	r28, 0x4A	; 74
    3b68:	df 4f       	sbci	r29, 0xFF	; 255
    3b6a:	b8 83       	st	Y, r27
    3b6c:	c6 5b       	subi	r28, 0xB6	; 182
    3b6e:	d0 40       	sbci	r29, 0x00	; 0
    3b70:	91 e0       	ldi	r25, 0x01	; 1
    3b72:	c9 54       	subi	r28, 0x49	; 73
    3b74:	df 4f       	sbci	r29, 0xFF	; 255
    3b76:	98 83       	st	Y, r25
    3b78:	c7 5b       	subi	r28, 0xB7	; 183
    3b7a:	d0 40       	sbci	r29, 0x00	; 0
    3b7c:	ca 54       	subi	r28, 0x4A	; 74
    3b7e:	df 4f       	sbci	r29, 0xFF	; 255
    3b80:	a8 81       	ld	r26, Y
    3b82:	c6 5b       	subi	r28, 0xB6	; 182
    3b84:	d0 40       	sbci	r29, 0x00	; 0
    3b86:	c3 55       	subi	r28, 0x53	; 83
    3b88:	df 4f       	sbci	r29, 0xFF	; 255
    3b8a:	b8 81       	ld	r27, Y
    3b8c:	cd 5a       	subi	r28, 0xAD	; 173
    3b8e:	d0 40       	sbci	r29, 0x00	; 0
    3b90:	ab 17       	cp	r26, r27
    3b92:	28 f0       	brcs	.+10     	; 0x3b9e <calculate+0x4b4>
    3b94:	c9 54       	subi	r28, 0x49	; 73
    3b96:	df 4f       	sbci	r29, 0xFF	; 255
    3b98:	18 82       	st	Y, r1
    3b9a:	c7 5b       	subi	r28, 0xB7	; 183
    3b9c:	d0 40       	sbci	r29, 0x00	; 0
    3b9e:	cb 54       	subi	r28, 0x4B	; 75
    3ba0:	df 4f       	sbci	r29, 0xFF	; 255
    3ba2:	88 81       	ld	r24, Y
    3ba4:	c5 5b       	subi	r28, 0xB5	; 181
    3ba6:	d0 40       	sbci	r29, 0x00	; 0
    3ba8:	c9 54       	subi	r28, 0x49	; 73
    3baa:	df 4f       	sbci	r29, 0xFF	; 255
    3bac:	98 81       	ld	r25, Y
    3bae:	c7 5b       	subi	r28, 0xB7	; 183
    3bb0:	d0 40       	sbci	r29, 0x00	; 0
    3bb2:	89 2b       	or	r24, r25
    3bb4:	cb 54       	subi	r28, 0x4B	; 75
    3bb6:	df 4f       	sbci	r29, 0xFF	; 255
    3bb8:	88 83       	st	Y, r24
    3bba:	c5 5b       	subi	r28, 0xB5	; 181
    3bbc:	d0 40       	sbci	r29, 0x00	; 0
    3bbe:	ca 54       	subi	r28, 0x4A	; 74
    3bc0:	df 4f       	sbci	r29, 0xFF	; 255
    3bc2:	a8 81       	ld	r26, Y
    3bc4:	c6 5b       	subi	r28, 0xB6	; 182
    3bc6:	d0 40       	sbci	r29, 0x00	; 0
    3bc8:	c3 55       	subi	r28, 0x53	; 83
    3bca:	df 4f       	sbci	r29, 0xFF	; 255
    3bcc:	a8 83       	st	Y, r26
    3bce:	cd 5a       	subi	r28, 0xAD	; 173
    3bd0:	d0 40       	sbci	r29, 0x00	; 0
    3bd2:	c2 56       	subi	r28, 0x62	; 98
    3bd4:	df 4f       	sbci	r29, 0xFF	; 255
    3bd6:	b8 81       	ld	r27, Y
    3bd8:	ce 59       	subi	r28, 0x9E	; 158
    3bda:	d0 40       	sbci	r29, 0x00	; 0
    3bdc:	ca 56       	subi	r28, 0x6A	; 106
    3bde:	df 4f       	sbci	r29, 0xFF	; 255
    3be0:	88 81       	ld	r24, Y
    3be2:	c6 59       	subi	r28, 0x96	; 150
    3be4:	d0 40       	sbci	r29, 0x00	; 0
    3be6:	b8 0f       	add	r27, r24
    3be8:	c2 55       	subi	r28, 0x52	; 82
    3bea:	df 4f       	sbci	r29, 0xFF	; 255
    3bec:	b8 83       	st	Y, r27
    3bee:	ce 5a       	subi	r28, 0xAE	; 174
    3bf0:	d0 40       	sbci	r29, 0x00	; 0
    3bf2:	91 e0       	ldi	r25, 0x01	; 1
    3bf4:	c8 54       	subi	r28, 0x48	; 72
    3bf6:	df 4f       	sbci	r29, 0xFF	; 255
    3bf8:	98 83       	st	Y, r25
    3bfa:	c8 5b       	subi	r28, 0xB8	; 184
    3bfc:	d0 40       	sbci	r29, 0x00	; 0
    3bfe:	c2 55       	subi	r28, 0x52	; 82
    3c00:	df 4f       	sbci	r29, 0xFF	; 255
    3c02:	a8 81       	ld	r26, Y
    3c04:	ce 5a       	subi	r28, 0xAE	; 174
    3c06:	d0 40       	sbci	r29, 0x00	; 0
    3c08:	c2 56       	subi	r28, 0x62	; 98
    3c0a:	df 4f       	sbci	r29, 0xFF	; 255
    3c0c:	b8 81       	ld	r27, Y
    3c0e:	ce 59       	subi	r28, 0x9E	; 158
    3c10:	d0 40       	sbci	r29, 0x00	; 0
    3c12:	ab 17       	cp	r26, r27
    3c14:	28 f0       	brcs	.+10     	; 0x3c20 <calculate+0x536>
    3c16:	c8 54       	subi	r28, 0x48	; 72
    3c18:	df 4f       	sbci	r29, 0xFF	; 255
    3c1a:	18 82       	st	Y, r1
    3c1c:	c8 5b       	subi	r28, 0xB8	; 184
    3c1e:	d0 40       	sbci	r29, 0x00	; 0
    3c20:	cb 54       	subi	r28, 0x4B	; 75
    3c22:	df 4f       	sbci	r29, 0xFF	; 255
    3c24:	88 81       	ld	r24, Y
    3c26:	c5 5b       	subi	r28, 0xB5	; 181
    3c28:	d0 40       	sbci	r29, 0x00	; 0
    3c2a:	c2 55       	subi	r28, 0x52	; 82
    3c2c:	df 4f       	sbci	r29, 0xFF	; 255
    3c2e:	98 81       	ld	r25, Y
    3c30:	ce 5a       	subi	r28, 0xAE	; 174
    3c32:	d0 40       	sbci	r29, 0x00	; 0
    3c34:	89 0f       	add	r24, r25
    3c36:	c7 54       	subi	r28, 0x47	; 71
    3c38:	df 4f       	sbci	r29, 0xFF	; 255
    3c3a:	88 83       	st	Y, r24
    3c3c:	c9 5b       	subi	r28, 0xB9	; 185
    3c3e:	d0 40       	sbci	r29, 0x00	; 0
    3c40:	a1 e0       	ldi	r26, 0x01	; 1
    3c42:	c6 54       	subi	r28, 0x46	; 70
    3c44:	df 4f       	sbci	r29, 0xFF	; 255
    3c46:	a8 83       	st	Y, r26
    3c48:	ca 5b       	subi	r28, 0xBA	; 186
    3c4a:	d0 40       	sbci	r29, 0x00	; 0
    3c4c:	c7 54       	subi	r28, 0x47	; 71
    3c4e:	df 4f       	sbci	r29, 0xFF	; 255
    3c50:	b8 81       	ld	r27, Y
    3c52:	c9 5b       	subi	r28, 0xB9	; 185
    3c54:	d0 40       	sbci	r29, 0x00	; 0
    3c56:	c2 55       	subi	r28, 0x52	; 82
    3c58:	df 4f       	sbci	r29, 0xFF	; 255
    3c5a:	88 81       	ld	r24, Y
    3c5c:	ce 5a       	subi	r28, 0xAE	; 174
    3c5e:	d0 40       	sbci	r29, 0x00	; 0
    3c60:	b8 17       	cp	r27, r24
    3c62:	28 f0       	brcs	.+10     	; 0x3c6e <calculate+0x584>
    3c64:	c6 54       	subi	r28, 0x46	; 70
    3c66:	df 4f       	sbci	r29, 0xFF	; 255
    3c68:	18 82       	st	Y, r1
    3c6a:	ca 5b       	subi	r28, 0xBA	; 186
    3c6c:	d0 40       	sbci	r29, 0x00	; 0
    3c6e:	c8 54       	subi	r28, 0x48	; 72
    3c70:	df 4f       	sbci	r29, 0xFF	; 255
    3c72:	98 81       	ld	r25, Y
    3c74:	c8 5b       	subi	r28, 0xB8	; 184
    3c76:	d0 40       	sbci	r29, 0x00	; 0
    3c78:	c6 54       	subi	r28, 0x46	; 70
    3c7a:	df 4f       	sbci	r29, 0xFF	; 255
    3c7c:	a8 81       	ld	r26, Y
    3c7e:	ca 5b       	subi	r28, 0xBA	; 186
    3c80:	d0 40       	sbci	r29, 0x00	; 0
    3c82:	9a 2b       	or	r25, r26
    3c84:	c8 54       	subi	r28, 0x48	; 72
    3c86:	df 4f       	sbci	r29, 0xFF	; 255
    3c88:	98 83       	st	Y, r25
    3c8a:	c8 5b       	subi	r28, 0xB8	; 184
    3c8c:	d0 40       	sbci	r29, 0x00	; 0
    3c8e:	c7 54       	subi	r28, 0x47	; 71
    3c90:	df 4f       	sbci	r29, 0xFF	; 255
    3c92:	b8 81       	ld	r27, Y
    3c94:	c9 5b       	subi	r28, 0xB9	; 185
    3c96:	d0 40       	sbci	r29, 0x00	; 0
    3c98:	c2 55       	subi	r28, 0x52	; 82
    3c9a:	df 4f       	sbci	r29, 0xFF	; 255
    3c9c:	b8 83       	st	Y, r27
    3c9e:	ce 5a       	subi	r28, 0xAE	; 174
    3ca0:	d0 40       	sbci	r29, 0x00	; 0
    3ca2:	c1 56       	subi	r28, 0x61	; 97
    3ca4:	df 4f       	sbci	r29, 0xFF	; 255
    3ca6:	88 81       	ld	r24, Y
    3ca8:	cf 59       	subi	r28, 0x9F	; 159
    3caa:	d0 40       	sbci	r29, 0x00	; 0
    3cac:	c9 56       	subi	r28, 0x69	; 105
    3cae:	df 4f       	sbci	r29, 0xFF	; 255
    3cb0:	98 81       	ld	r25, Y
    3cb2:	c7 59       	subi	r28, 0x97	; 151
    3cb4:	d0 40       	sbci	r29, 0x00	; 0
    3cb6:	89 0f       	add	r24, r25
    3cb8:	c1 55       	subi	r28, 0x51	; 81
    3cba:	df 4f       	sbci	r29, 0xFF	; 255
    3cbc:	88 83       	st	Y, r24
    3cbe:	cf 5a       	subi	r28, 0xAF	; 175
    3cc0:	d0 40       	sbci	r29, 0x00	; 0
    3cc2:	a1 e0       	ldi	r26, 0x01	; 1
    3cc4:	c5 54       	subi	r28, 0x45	; 69
    3cc6:	df 4f       	sbci	r29, 0xFF	; 255
    3cc8:	a8 83       	st	Y, r26
    3cca:	cb 5b       	subi	r28, 0xBB	; 187
    3ccc:	d0 40       	sbci	r29, 0x00	; 0
    3cce:	c1 55       	subi	r28, 0x51	; 81
    3cd0:	df 4f       	sbci	r29, 0xFF	; 255
    3cd2:	b8 81       	ld	r27, Y
    3cd4:	cf 5a       	subi	r28, 0xAF	; 175
    3cd6:	d0 40       	sbci	r29, 0x00	; 0
    3cd8:	c1 56       	subi	r28, 0x61	; 97
    3cda:	df 4f       	sbci	r29, 0xFF	; 255
    3cdc:	88 81       	ld	r24, Y
    3cde:	cf 59       	subi	r28, 0x9F	; 159
    3ce0:	d0 40       	sbci	r29, 0x00	; 0
    3ce2:	b8 17       	cp	r27, r24
    3ce4:	28 f0       	brcs	.+10     	; 0x3cf0 <calculate+0x606>
    3ce6:	c5 54       	subi	r28, 0x45	; 69
    3ce8:	df 4f       	sbci	r29, 0xFF	; 255
    3cea:	18 82       	st	Y, r1
    3cec:	cb 5b       	subi	r28, 0xBB	; 187
    3cee:	d0 40       	sbci	r29, 0x00	; 0
    3cf0:	c8 54       	subi	r28, 0x48	; 72
    3cf2:	df 4f       	sbci	r29, 0xFF	; 255
    3cf4:	98 81       	ld	r25, Y
    3cf6:	c8 5b       	subi	r28, 0xB8	; 184
    3cf8:	d0 40       	sbci	r29, 0x00	; 0
    3cfa:	c1 55       	subi	r28, 0x51	; 81
    3cfc:	df 4f       	sbci	r29, 0xFF	; 255
    3cfe:	a8 81       	ld	r26, Y
    3d00:	cf 5a       	subi	r28, 0xAF	; 175
    3d02:	d0 40       	sbci	r29, 0x00	; 0
    3d04:	9a 0f       	add	r25, r26
    3d06:	c4 54       	subi	r28, 0x44	; 68
    3d08:	df 4f       	sbci	r29, 0xFF	; 255
    3d0a:	98 83       	st	Y, r25
    3d0c:	cc 5b       	subi	r28, 0xBC	; 188
    3d0e:	d0 40       	sbci	r29, 0x00	; 0
    3d10:	b1 e0       	ldi	r27, 0x01	; 1
    3d12:	c3 54       	subi	r28, 0x43	; 67
    3d14:	df 4f       	sbci	r29, 0xFF	; 255
    3d16:	b8 83       	st	Y, r27
    3d18:	cd 5b       	subi	r28, 0xBD	; 189
    3d1a:	d0 40       	sbci	r29, 0x00	; 0
    3d1c:	c4 54       	subi	r28, 0x44	; 68
    3d1e:	df 4f       	sbci	r29, 0xFF	; 255
    3d20:	88 81       	ld	r24, Y
    3d22:	cc 5b       	subi	r28, 0xBC	; 188
    3d24:	d0 40       	sbci	r29, 0x00	; 0
    3d26:	c1 55       	subi	r28, 0x51	; 81
    3d28:	df 4f       	sbci	r29, 0xFF	; 255
    3d2a:	98 81       	ld	r25, Y
    3d2c:	cf 5a       	subi	r28, 0xAF	; 175
    3d2e:	d0 40       	sbci	r29, 0x00	; 0
    3d30:	89 17       	cp	r24, r25
    3d32:	28 f0       	brcs	.+10     	; 0x3d3e <calculate+0x654>
    3d34:	c3 54       	subi	r28, 0x43	; 67
    3d36:	df 4f       	sbci	r29, 0xFF	; 255
    3d38:	18 82       	st	Y, r1
    3d3a:	cd 5b       	subi	r28, 0xBD	; 189
    3d3c:	d0 40       	sbci	r29, 0x00	; 0
    3d3e:	c5 54       	subi	r28, 0x45	; 69
    3d40:	df 4f       	sbci	r29, 0xFF	; 255
    3d42:	a8 81       	ld	r26, Y
    3d44:	cb 5b       	subi	r28, 0xBB	; 187
    3d46:	d0 40       	sbci	r29, 0x00	; 0
    3d48:	c3 54       	subi	r28, 0x43	; 67
    3d4a:	df 4f       	sbci	r29, 0xFF	; 255
    3d4c:	b8 81       	ld	r27, Y
    3d4e:	cd 5b       	subi	r28, 0xBD	; 189
    3d50:	d0 40       	sbci	r29, 0x00	; 0
    3d52:	ab 2b       	or	r26, r27
    3d54:	c5 54       	subi	r28, 0x45	; 69
    3d56:	df 4f       	sbci	r29, 0xFF	; 255
    3d58:	a8 83       	st	Y, r26
    3d5a:	cb 5b       	subi	r28, 0xBB	; 187
    3d5c:	d0 40       	sbci	r29, 0x00	; 0
    3d5e:	c4 54       	subi	r28, 0x44	; 68
    3d60:	df 4f       	sbci	r29, 0xFF	; 255
    3d62:	88 81       	ld	r24, Y
    3d64:	cc 5b       	subi	r28, 0xBC	; 188
    3d66:	d0 40       	sbci	r29, 0x00	; 0
    3d68:	c1 55       	subi	r28, 0x51	; 81
    3d6a:	df 4f       	sbci	r29, 0xFF	; 255
    3d6c:	88 83       	st	Y, r24
    3d6e:	cf 5a       	subi	r28, 0xAF	; 175
    3d70:	d0 40       	sbci	r29, 0x00	; 0
    3d72:	c0 56       	subi	r28, 0x60	; 96
    3d74:	df 4f       	sbci	r29, 0xFF	; 255
    3d76:	98 81       	ld	r25, Y
    3d78:	c0 5a       	subi	r28, 0xA0	; 160
    3d7a:	d0 40       	sbci	r29, 0x00	; 0
    3d7c:	c8 56       	subi	r28, 0x68	; 104
    3d7e:	df 4f       	sbci	r29, 0xFF	; 255
    3d80:	a8 81       	ld	r26, Y
    3d82:	c8 59       	subi	r28, 0x98	; 152
    3d84:	d0 40       	sbci	r29, 0x00	; 0
    3d86:	9a 0f       	add	r25, r26
    3d88:	c0 55       	subi	r28, 0x50	; 80
    3d8a:	df 4f       	sbci	r29, 0xFF	; 255
    3d8c:	98 83       	st	Y, r25
    3d8e:	c0 5b       	subi	r28, 0xB0	; 176
    3d90:	d0 40       	sbci	r29, 0x00	; 0
    3d92:	b1 e0       	ldi	r27, 0x01	; 1
    3d94:	c2 54       	subi	r28, 0x42	; 66
    3d96:	df 4f       	sbci	r29, 0xFF	; 255
    3d98:	b8 83       	st	Y, r27
    3d9a:	ce 5b       	subi	r28, 0xBE	; 190
    3d9c:	d0 40       	sbci	r29, 0x00	; 0
    3d9e:	c0 55       	subi	r28, 0x50	; 80
    3da0:	df 4f       	sbci	r29, 0xFF	; 255
    3da2:	88 81       	ld	r24, Y
    3da4:	c0 5b       	subi	r28, 0xB0	; 176
    3da6:	d0 40       	sbci	r29, 0x00	; 0
    3da8:	c0 56       	subi	r28, 0x60	; 96
    3daa:	df 4f       	sbci	r29, 0xFF	; 255
    3dac:	98 81       	ld	r25, Y
    3dae:	c0 5a       	subi	r28, 0xA0	; 160
    3db0:	d0 40       	sbci	r29, 0x00	; 0
    3db2:	89 17       	cp	r24, r25
    3db4:	28 f0       	brcs	.+10     	; 0x3dc0 <calculate+0x6d6>
    3db6:	c2 54       	subi	r28, 0x42	; 66
    3db8:	df 4f       	sbci	r29, 0xFF	; 255
    3dba:	18 82       	st	Y, r1
    3dbc:	ce 5b       	subi	r28, 0xBE	; 190
    3dbe:	d0 40       	sbci	r29, 0x00	; 0
    3dc0:	c5 54       	subi	r28, 0x45	; 69
    3dc2:	df 4f       	sbci	r29, 0xFF	; 255
    3dc4:	a8 81       	ld	r26, Y
    3dc6:	cb 5b       	subi	r28, 0xBB	; 187
    3dc8:	d0 40       	sbci	r29, 0x00	; 0
    3dca:	c0 55       	subi	r28, 0x50	; 80
    3dcc:	df 4f       	sbci	r29, 0xFF	; 255
    3dce:	b8 81       	ld	r27, Y
    3dd0:	c0 5b       	subi	r28, 0xB0	; 176
    3dd2:	d0 40       	sbci	r29, 0x00	; 0
    3dd4:	ab 0f       	add	r26, r27
    3dd6:	c1 54       	subi	r28, 0x41	; 65
    3dd8:	df 4f       	sbci	r29, 0xFF	; 255
    3dda:	a8 83       	st	Y, r26
    3ddc:	cf 5b       	subi	r28, 0xBF	; 191
    3dde:	d0 40       	sbci	r29, 0x00	; 0
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	c0 54       	subi	r28, 0x40	; 64
    3de4:	df 4f       	sbci	r29, 0xFF	; 255
    3de6:	88 83       	st	Y, r24
    3de8:	c0 5c       	subi	r28, 0xC0	; 192
    3dea:	d0 40       	sbci	r29, 0x00	; 0
    3dec:	c1 54       	subi	r28, 0x41	; 65
    3dee:	df 4f       	sbci	r29, 0xFF	; 255
    3df0:	98 81       	ld	r25, Y
    3df2:	cf 5b       	subi	r28, 0xBF	; 191
    3df4:	d0 40       	sbci	r29, 0x00	; 0
    3df6:	c0 55       	subi	r28, 0x50	; 80
    3df8:	df 4f       	sbci	r29, 0xFF	; 255
    3dfa:	a8 81       	ld	r26, Y
    3dfc:	c0 5b       	subi	r28, 0xB0	; 176
    3dfe:	d0 40       	sbci	r29, 0x00	; 0
    3e00:	9a 17       	cp	r25, r26
    3e02:	28 f0       	brcs	.+10     	; 0x3e0e <calculate+0x724>
    3e04:	c0 54       	subi	r28, 0x40	; 64
    3e06:	df 4f       	sbci	r29, 0xFF	; 255
    3e08:	18 82       	st	Y, r1
    3e0a:	c0 5c       	subi	r28, 0xC0	; 192
    3e0c:	d0 40       	sbci	r29, 0x00	; 0
    3e0e:	c2 54       	subi	r28, 0x42	; 66
    3e10:	df 4f       	sbci	r29, 0xFF	; 255
    3e12:	b8 81       	ld	r27, Y
    3e14:	ce 5b       	subi	r28, 0xBE	; 190
    3e16:	d0 40       	sbci	r29, 0x00	; 0
    3e18:	c0 54       	subi	r28, 0x40	; 64
    3e1a:	df 4f       	sbci	r29, 0xFF	; 255
    3e1c:	88 81       	ld	r24, Y
    3e1e:	c0 5c       	subi	r28, 0xC0	; 192
    3e20:	d0 40       	sbci	r29, 0x00	; 0
    3e22:	b8 2b       	or	r27, r24
    3e24:	c2 54       	subi	r28, 0x42	; 66
    3e26:	df 4f       	sbci	r29, 0xFF	; 255
    3e28:	b8 83       	st	Y, r27
    3e2a:	ce 5b       	subi	r28, 0xBE	; 190
    3e2c:	d0 40       	sbci	r29, 0x00	; 0
    3e2e:	c1 54       	subi	r28, 0x41	; 65
    3e30:	df 4f       	sbci	r29, 0xFF	; 255
    3e32:	98 81       	ld	r25, Y
    3e34:	cf 5b       	subi	r28, 0xBF	; 191
    3e36:	d0 40       	sbci	r29, 0x00	; 0
    3e38:	c0 55       	subi	r28, 0x50	; 80
    3e3a:	df 4f       	sbci	r29, 0xFF	; 255
    3e3c:	98 83       	st	Y, r25
    3e3e:	c0 5b       	subi	r28, 0xB0	; 176
    3e40:	d0 40       	sbci	r29, 0x00	; 0
    3e42:	cf 55       	subi	r28, 0x5F	; 95
    3e44:	df 4f       	sbci	r29, 0xFF	; 255
    3e46:	a8 81       	ld	r26, Y
    3e48:	c1 5a       	subi	r28, 0xA1	; 161
    3e4a:	d0 40       	sbci	r29, 0x00	; 0
    3e4c:	c7 56       	subi	r28, 0x67	; 103
    3e4e:	df 4f       	sbci	r29, 0xFF	; 255
    3e50:	b8 81       	ld	r27, Y
    3e52:	c9 59       	subi	r28, 0x99	; 153
    3e54:	d0 40       	sbci	r29, 0x00	; 0
    3e56:	ab 0f       	add	r26, r27
    3e58:	cf 54       	subi	r28, 0x4F	; 79
    3e5a:	df 4f       	sbci	r29, 0xFF	; 255
    3e5c:	a8 83       	st	Y, r26
    3e5e:	c1 5b       	subi	r28, 0xB1	; 177
    3e60:	d0 40       	sbci	r29, 0x00	; 0
    3e62:	81 e0       	ldi	r24, 0x01	; 1
    3e64:	cf 53       	subi	r28, 0x3F	; 63
    3e66:	df 4f       	sbci	r29, 0xFF	; 255
    3e68:	88 83       	st	Y, r24
    3e6a:	c1 5c       	subi	r28, 0xC1	; 193
    3e6c:	d0 40       	sbci	r29, 0x00	; 0
    3e6e:	cf 54       	subi	r28, 0x4F	; 79
    3e70:	df 4f       	sbci	r29, 0xFF	; 255
    3e72:	98 81       	ld	r25, Y
    3e74:	c1 5b       	subi	r28, 0xB1	; 177
    3e76:	d0 40       	sbci	r29, 0x00	; 0
    3e78:	cf 55       	subi	r28, 0x5F	; 95
    3e7a:	df 4f       	sbci	r29, 0xFF	; 255
    3e7c:	a8 81       	ld	r26, Y
    3e7e:	c1 5a       	subi	r28, 0xA1	; 161
    3e80:	d0 40       	sbci	r29, 0x00	; 0
    3e82:	9a 17       	cp	r25, r26
    3e84:	28 f0       	brcs	.+10     	; 0x3e90 <calculate+0x7a6>
    3e86:	cf 53       	subi	r28, 0x3F	; 63
    3e88:	df 4f       	sbci	r29, 0xFF	; 255
    3e8a:	18 82       	st	Y, r1
    3e8c:	c1 5c       	subi	r28, 0xC1	; 193
    3e8e:	d0 40       	sbci	r29, 0x00	; 0
    3e90:	c2 54       	subi	r28, 0x42	; 66
    3e92:	df 4f       	sbci	r29, 0xFF	; 255
    3e94:	b8 81       	ld	r27, Y
    3e96:	ce 5b       	subi	r28, 0xBE	; 190
    3e98:	d0 40       	sbci	r29, 0x00	; 0
    3e9a:	cf 54       	subi	r28, 0x4F	; 79
    3e9c:	df 4f       	sbci	r29, 0xFF	; 255
    3e9e:	88 81       	ld	r24, Y
    3ea0:	c1 5b       	subi	r28, 0xB1	; 177
    3ea2:	d0 40       	sbci	r29, 0x00	; 0
    3ea4:	b8 0f       	add	r27, r24
    3ea6:	ce 53       	subi	r28, 0x3E	; 62
    3ea8:	df 4f       	sbci	r29, 0xFF	; 255
    3eaa:	b8 83       	st	Y, r27
    3eac:	c2 5c       	subi	r28, 0xC2	; 194
    3eae:	d0 40       	sbci	r29, 0x00	; 0
    3eb0:	91 e0       	ldi	r25, 0x01	; 1
    3eb2:	cd 53       	subi	r28, 0x3D	; 61
    3eb4:	df 4f       	sbci	r29, 0xFF	; 255
    3eb6:	98 83       	st	Y, r25
    3eb8:	c3 5c       	subi	r28, 0xC3	; 195
    3eba:	d0 40       	sbci	r29, 0x00	; 0
    3ebc:	ce 53       	subi	r28, 0x3E	; 62
    3ebe:	df 4f       	sbci	r29, 0xFF	; 255
    3ec0:	a8 81       	ld	r26, Y
    3ec2:	c2 5c       	subi	r28, 0xC2	; 194
    3ec4:	d0 40       	sbci	r29, 0x00	; 0
    3ec6:	cf 54       	subi	r28, 0x4F	; 79
    3ec8:	df 4f       	sbci	r29, 0xFF	; 255
    3eca:	b8 81       	ld	r27, Y
    3ecc:	c1 5b       	subi	r28, 0xB1	; 177
    3ece:	d0 40       	sbci	r29, 0x00	; 0
    3ed0:	ab 17       	cp	r26, r27
    3ed2:	28 f0       	brcs	.+10     	; 0x3ede <calculate+0x7f4>
    3ed4:	cd 53       	subi	r28, 0x3D	; 61
    3ed6:	df 4f       	sbci	r29, 0xFF	; 255
    3ed8:	18 82       	st	Y, r1
    3eda:	c3 5c       	subi	r28, 0xC3	; 195
    3edc:	d0 40       	sbci	r29, 0x00	; 0
    3ede:	cf 53       	subi	r28, 0x3F	; 63
    3ee0:	df 4f       	sbci	r29, 0xFF	; 255
    3ee2:	88 81       	ld	r24, Y
    3ee4:	c1 5c       	subi	r28, 0xC1	; 193
    3ee6:	d0 40       	sbci	r29, 0x00	; 0
    3ee8:	cd 53       	subi	r28, 0x3D	; 61
    3eea:	df 4f       	sbci	r29, 0xFF	; 255
    3eec:	98 81       	ld	r25, Y
    3eee:	c3 5c       	subi	r28, 0xC3	; 195
    3ef0:	d0 40       	sbci	r29, 0x00	; 0
    3ef2:	89 2b       	or	r24, r25
    3ef4:	cf 53       	subi	r28, 0x3F	; 63
    3ef6:	df 4f       	sbci	r29, 0xFF	; 255
    3ef8:	88 83       	st	Y, r24
    3efa:	c1 5c       	subi	r28, 0xC1	; 193
    3efc:	d0 40       	sbci	r29, 0x00	; 0
    3efe:	ce 53       	subi	r28, 0x3E	; 62
    3f00:	df 4f       	sbci	r29, 0xFF	; 255
    3f02:	a8 81       	ld	r26, Y
    3f04:	c2 5c       	subi	r28, 0xC2	; 194
    3f06:	d0 40       	sbci	r29, 0x00	; 0
    3f08:	cf 54       	subi	r28, 0x4F	; 79
    3f0a:	df 4f       	sbci	r29, 0xFF	; 255
    3f0c:	a8 83       	st	Y, r26
    3f0e:	c1 5b       	subi	r28, 0xB1	; 177
    3f10:	d0 40       	sbci	r29, 0x00	; 0
    3f12:	ce 55       	subi	r28, 0x5E	; 94
    3f14:	df 4f       	sbci	r29, 0xFF	; 255
    3f16:	b8 81       	ld	r27, Y
    3f18:	c2 5a       	subi	r28, 0xA2	; 162
    3f1a:	d0 40       	sbci	r29, 0x00	; 0
    3f1c:	c6 56       	subi	r28, 0x66	; 102
    3f1e:	df 4f       	sbci	r29, 0xFF	; 255
    3f20:	88 81       	ld	r24, Y
    3f22:	ca 59       	subi	r28, 0x9A	; 154
    3f24:	d0 40       	sbci	r29, 0x00	; 0
    3f26:	b8 0f       	add	r27, r24
    3f28:	ce 54       	subi	r28, 0x4E	; 78
    3f2a:	df 4f       	sbci	r29, 0xFF	; 255
    3f2c:	b8 83       	st	Y, r27
    3f2e:	c2 5b       	subi	r28, 0xB2	; 178
    3f30:	d0 40       	sbci	r29, 0x00	; 0
    3f32:	91 e0       	ldi	r25, 0x01	; 1
    3f34:	cc 53       	subi	r28, 0x3C	; 60
    3f36:	df 4f       	sbci	r29, 0xFF	; 255
    3f38:	98 83       	st	Y, r25
    3f3a:	c4 5c       	subi	r28, 0xC4	; 196
    3f3c:	d0 40       	sbci	r29, 0x00	; 0
    3f3e:	ce 54       	subi	r28, 0x4E	; 78
    3f40:	df 4f       	sbci	r29, 0xFF	; 255
    3f42:	a8 81       	ld	r26, Y
    3f44:	c2 5b       	subi	r28, 0xB2	; 178
    3f46:	d0 40       	sbci	r29, 0x00	; 0
    3f48:	ce 55       	subi	r28, 0x5E	; 94
    3f4a:	df 4f       	sbci	r29, 0xFF	; 255
    3f4c:	b8 81       	ld	r27, Y
    3f4e:	c2 5a       	subi	r28, 0xA2	; 162
    3f50:	d0 40       	sbci	r29, 0x00	; 0
    3f52:	ab 17       	cp	r26, r27
    3f54:	28 f0       	brcs	.+10     	; 0x3f60 <calculate+0x876>
    3f56:	cc 53       	subi	r28, 0x3C	; 60
    3f58:	df 4f       	sbci	r29, 0xFF	; 255
    3f5a:	18 82       	st	Y, r1
    3f5c:	c4 5c       	subi	r28, 0xC4	; 196
    3f5e:	d0 40       	sbci	r29, 0x00	; 0
    3f60:	cf 53       	subi	r28, 0x3F	; 63
    3f62:	df 4f       	sbci	r29, 0xFF	; 255
    3f64:	88 81       	ld	r24, Y
    3f66:	c1 5c       	subi	r28, 0xC1	; 193
    3f68:	d0 40       	sbci	r29, 0x00	; 0
    3f6a:	ce 54       	subi	r28, 0x4E	; 78
    3f6c:	df 4f       	sbci	r29, 0xFF	; 255
    3f6e:	98 81       	ld	r25, Y
    3f70:	c2 5b       	subi	r28, 0xB2	; 178
    3f72:	d0 40       	sbci	r29, 0x00	; 0
    3f74:	89 0f       	add	r24, r25
    3f76:	cb 53       	subi	r28, 0x3B	; 59
    3f78:	df 4f       	sbci	r29, 0xFF	; 255
    3f7a:	88 83       	st	Y, r24
    3f7c:	c5 5c       	subi	r28, 0xC5	; 197
    3f7e:	d0 40       	sbci	r29, 0x00	; 0
    3f80:	a1 e0       	ldi	r26, 0x01	; 1
    3f82:	ca 53       	subi	r28, 0x3A	; 58
    3f84:	df 4f       	sbci	r29, 0xFF	; 255
    3f86:	a8 83       	st	Y, r26
    3f88:	c6 5c       	subi	r28, 0xC6	; 198
    3f8a:	d0 40       	sbci	r29, 0x00	; 0
    3f8c:	cb 53       	subi	r28, 0x3B	; 59
    3f8e:	df 4f       	sbci	r29, 0xFF	; 255
    3f90:	b8 81       	ld	r27, Y
    3f92:	c5 5c       	subi	r28, 0xC5	; 197
    3f94:	d0 40       	sbci	r29, 0x00	; 0
    3f96:	ce 54       	subi	r28, 0x4E	; 78
    3f98:	df 4f       	sbci	r29, 0xFF	; 255
    3f9a:	88 81       	ld	r24, Y
    3f9c:	c2 5b       	subi	r28, 0xB2	; 178
    3f9e:	d0 40       	sbci	r29, 0x00	; 0
    3fa0:	b8 17       	cp	r27, r24
    3fa2:	28 f0       	brcs	.+10     	; 0x3fae <calculate+0x8c4>
    3fa4:	ca 53       	subi	r28, 0x3A	; 58
    3fa6:	df 4f       	sbci	r29, 0xFF	; 255
    3fa8:	18 82       	st	Y, r1
    3faa:	c6 5c       	subi	r28, 0xC6	; 198
    3fac:	d0 40       	sbci	r29, 0x00	; 0
    3fae:	cc 53       	subi	r28, 0x3C	; 60
    3fb0:	df 4f       	sbci	r29, 0xFF	; 255
    3fb2:	98 81       	ld	r25, Y
    3fb4:	c4 5c       	subi	r28, 0xC4	; 196
    3fb6:	d0 40       	sbci	r29, 0x00	; 0
    3fb8:	ca 53       	subi	r28, 0x3A	; 58
    3fba:	df 4f       	sbci	r29, 0xFF	; 255
    3fbc:	a8 81       	ld	r26, Y
    3fbe:	c6 5c       	subi	r28, 0xC6	; 198
    3fc0:	d0 40       	sbci	r29, 0x00	; 0
    3fc2:	9a 2b       	or	r25, r26
    3fc4:	cc 53       	subi	r28, 0x3C	; 60
    3fc6:	df 4f       	sbci	r29, 0xFF	; 255
    3fc8:	98 83       	st	Y, r25
    3fca:	c4 5c       	subi	r28, 0xC4	; 196
    3fcc:	d0 40       	sbci	r29, 0x00	; 0
    3fce:	cb 53       	subi	r28, 0x3B	; 59
    3fd0:	df 4f       	sbci	r29, 0xFF	; 255
    3fd2:	b8 81       	ld	r27, Y
    3fd4:	c5 5c       	subi	r28, 0xC5	; 197
    3fd6:	d0 40       	sbci	r29, 0x00	; 0
    3fd8:	ce 54       	subi	r28, 0x4E	; 78
    3fda:	df 4f       	sbci	r29, 0xFF	; 255
    3fdc:	b8 83       	st	Y, r27
    3fde:	c2 5b       	subi	r28, 0xB2	; 178
    3fe0:	d0 40       	sbci	r29, 0x00	; 0
    3fe2:	cd 55       	subi	r28, 0x5D	; 93
    3fe4:	df 4f       	sbci	r29, 0xFF	; 255
    3fe6:	88 81       	ld	r24, Y
    3fe8:	c3 5a       	subi	r28, 0xA3	; 163
    3fea:	d0 40       	sbci	r29, 0x00	; 0
    3fec:	c5 56       	subi	r28, 0x65	; 101
    3fee:	df 4f       	sbci	r29, 0xFF	; 255
    3ff0:	98 81       	ld	r25, Y
    3ff2:	cb 59       	subi	r28, 0x9B	; 155
    3ff4:	d0 40       	sbci	r29, 0x00	; 0
    3ff6:	89 0f       	add	r24, r25
    3ff8:	cd 54       	subi	r28, 0x4D	; 77
    3ffa:	df 4f       	sbci	r29, 0xFF	; 255
    3ffc:	88 83       	st	Y, r24
    3ffe:	c3 5b       	subi	r28, 0xB3	; 179
    4000:	d0 40       	sbci	r29, 0x00	; 0
    4002:	cc 53       	subi	r28, 0x3C	; 60
    4004:	df 4f       	sbci	r29, 0xFF	; 255
    4006:	88 81       	ld	r24, Y
    4008:	c4 5c       	subi	r28, 0xC4	; 196
    400a:	d0 40       	sbci	r29, 0x00	; 0
    400c:	cd 54       	subi	r28, 0x4D	; 77
    400e:	df 4f       	sbci	r29, 0xFF	; 255
    4010:	a8 81       	ld	r26, Y
    4012:	c3 5b       	subi	r28, 0xB3	; 179
    4014:	d0 40       	sbci	r29, 0x00	; 0
    4016:	8a 0f       	add	r24, r26
    4018:	cd 54       	subi	r28, 0x4D	; 77
    401a:	df 4f       	sbci	r29, 0xFF	; 255
    401c:	88 83       	st	Y, r24
    401e:	c3 5b       	subi	r28, 0xB3	; 179
    4020:	d0 40       	sbci	r29, 0x00	; 0
    4022:	c4 55       	subi	r28, 0x54	; 84
    4024:	df 4f       	sbci	r29, 0xFF	; 255
    4026:	a8 80       	ld	r10, Y
    4028:	cc 5a       	subi	r28, 0xAC	; 172
    402a:	d0 40       	sbci	r29, 0x00	; 0
    402c:	c3 55       	subi	r28, 0x53	; 83
    402e:	df 4f       	sbci	r29, 0xFF	; 255
    4030:	b8 80       	ld	r11, Y
    4032:	cd 5a       	subi	r28, 0xAD	; 173
    4034:	d0 40       	sbci	r29, 0x00	; 0
    4036:	c2 55       	subi	r28, 0x52	; 82
    4038:	df 4f       	sbci	r29, 0xFF	; 255
    403a:	c8 80       	ld	r12, Y
    403c:	ce 5a       	subi	r28, 0xAE	; 174
    403e:	d0 40       	sbci	r29, 0x00	; 0
    4040:	c1 55       	subi	r28, 0x51	; 81
    4042:	df 4f       	sbci	r29, 0xFF	; 255
    4044:	d8 80       	ld	r13, Y
    4046:	cf 5a       	subi	r28, 0xAF	; 175
    4048:	d0 40       	sbci	r29, 0x00	; 0
    404a:	c0 55       	subi	r28, 0x50	; 80
    404c:	df 4f       	sbci	r29, 0xFF	; 255
    404e:	e8 80       	ld	r14, Y
    4050:	c0 5b       	subi	r28, 0xB0	; 176
    4052:	d0 40       	sbci	r29, 0x00	; 0
    4054:	cf 54       	subi	r28, 0x4F	; 79
    4056:	df 4f       	sbci	r29, 0xFF	; 255
    4058:	f8 80       	ld	r15, Y
    405a:	c1 5b       	subi	r28, 0xB1	; 177
    405c:	d0 40       	sbci	r29, 0x00	; 0
    405e:	ce 54       	subi	r28, 0x4E	; 78
    4060:	df 4f       	sbci	r29, 0xFF	; 255
    4062:	08 81       	ld	r16, Y
    4064:	c2 5b       	subi	r28, 0xB2	; 178
    4066:	d0 40       	sbci	r29, 0x00	; 0
    4068:	cd 54       	subi	r28, 0x4D	; 77
    406a:	df 4f       	sbci	r29, 0xFF	; 255
    406c:	18 81       	ld	r17, Y
    406e:	c3 5b       	subi	r28, 0xB3	; 179
    4070:	d0 40       	sbci	r29, 0x00	; 0
    4072:	2a 2d       	mov	r18, r10
    4074:	3b 2d       	mov	r19, r11
    4076:	4c 2d       	mov	r20, r12
    4078:	5d 2d       	mov	r21, r13
    407a:	6e 2d       	mov	r22, r14
    407c:	7f 2d       	mov	r23, r15
    407e:	80 2f       	mov	r24, r16
    4080:	91 2f       	mov	r25, r17
    4082:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__floatundisf>
    4086:	dc 01       	movw	r26, r24
    4088:	cb 01       	movw	r24, r22
    408a:	80 93 88 01 	sts	0x0188, r24
    408e:	90 93 89 01 	sts	0x0189, r25
    4092:	a0 93 8a 01 	sts	0x018A, r26
    4096:	b0 93 8b 01 	sts	0x018B, r27
			numsAndSigns[numsAndSignsIndex++] = g_array[i];
			numIndex = 0;
		}
	}
	LCD_displayStringRowColumn(3, 0, "=");
	for(i = 0; i < numsAndSignsIndex; i++)
    409a:	8b 81       	ldd	r24, Y+3	; 0x03
    409c:	8f 5f       	subi	r24, 0xFF	; 255
    409e:	8b 83       	std	Y+3, r24	; 0x03
    40a0:	9b 81       	ldd	r25, Y+3	; 0x03
    40a2:	8a 81       	ldd	r24, Y+2	; 0x02
    40a4:	98 17       	cp	r25, r24
    40a6:	08 f4       	brcc	.+2      	; 0x40aa <calculate+0x9c0>
    40a8:	03 cc       	rjmp	.-2042   	; 0x38b0 <calculate+0x1c6>
	{
		if(numsAndSigns[i] == '+') result = numsAndSigns[i-1] +numsAndSigns[i+1];
	}
	LCD_intgerToString(result);
    40aa:	80 91 88 01 	lds	r24, 0x0188
    40ae:	90 91 89 01 	lds	r25, 0x0189
    40b2:	a0 91 8a 01 	lds	r26, 0x018A
    40b6:	b0 91 8b 01 	lds	r27, 0x018B
    40ba:	bc 01       	movw	r22, r24
    40bc:	cd 01       	movw	r24, r26
    40be:	0e 94 62 05 	call	0xac4	; 0xac4 <__fixsfsi>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <LCD_intgerToString>
	g_newCalcFlag = TRUE;
    40ca:	81 e0       	ldi	r24, 0x01	; 1
    40cc:	80 93 87 01 	sts	0x0187, r24
}
    40d0:	ca 53       	subi	r28, 0x3A	; 58
    40d2:	df 4f       	sbci	r29, 0xFF	; 255
    40d4:	0f b6       	in	r0, 0x3f	; 63
    40d6:	f8 94       	cli
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	cf 91       	pop	r28
    40e0:	df 91       	pop	r29
    40e2:	1f 91       	pop	r17
    40e4:	0f 91       	pop	r16
    40e6:	ff 90       	pop	r15
    40e8:	ef 90       	pop	r14
    40ea:	df 90       	pop	r13
    40ec:	cf 90       	pop	r12
    40ee:	bf 90       	pop	r11
    40f0:	af 90       	pop	r10
    40f2:	9f 90       	pop	r9
    40f4:	8f 90       	pop	r8
    40f6:	08 95       	ret

000040f8 <main>:
/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/

int main(void)
{
    40f8:	df 93       	push	r29
    40fa:	cf 93       	push	r28
    40fc:	cd b7       	in	r28, 0x3d	; 61
    40fe:	de b7       	in	r29, 0x3e	; 62
    4100:	61 97       	sbiw	r28, 0x11	; 17
    4102:	0f b6       	in	r0, 0x3f	; 63
    4104:	f8 94       	cli
    4106:	de bf       	out	0x3e, r29	; 62
    4108:	0f be       	out	0x3f, r0	; 63
    410a:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_init();
    410c:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <LCD_init>
	LCD_displayString("CALCULATOR:");
    4110:	80 e6       	ldi	r24, 0x60	; 96
    4112:	90 e0       	ldi	r25, 0x00	; 0
    4114:	0e 94 31 17 	call	0x2e62	; 0x2e62 <LCD_displayString>
	LCD_moveCursor(1, 0);
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	0e 94 5a 17 	call	0x2eb4	; 0x2eb4 <LCD_moveCursor>
	while(1)
	{
		key = KEYPAD_getPressedKey();	/* Reads Pressed Key */
    4120:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <KEYPAD_getPressedKey>
    4124:	8f 87       	std	Y+15, r24	; 0x0f
		if(g_newCalcFlag) clearAll();	/* If Its New Calculation Clears The Previous */
    4126:	80 91 87 01 	lds	r24, 0x0187
    412a:	88 23       	and	r24, r24
    412c:	11 f0       	breq	.+4      	; 0x4132 <main+0x3a>
    412e:	0e 94 37 1b 	call	0x366e	; 0x366e <clearAll>
		/* Checks The Pressed Key */
		switch(key)
    4132:	8f 85       	ldd	r24, Y+15	; 0x0f
    4134:	28 2f       	mov	r18, r24
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	39 8b       	std	Y+17, r19	; 0x11
    413a:	28 8b       	std	Y+16, r18	; 0x10
    413c:	88 89       	ldd	r24, Y+16	; 0x10
    413e:	99 89       	ldd	r25, Y+17	; 0x11
    4140:	8d 30       	cpi	r24, 0x0D	; 13
    4142:	91 05       	cpc	r25, r1
    4144:	31 f0       	breq	.+12     	; 0x4152 <main+0x5a>
    4146:	28 89       	ldd	r18, Y+16	; 0x10
    4148:	39 89       	ldd	r19, Y+17	; 0x11
    414a:	2d 33       	cpi	r18, 0x3D	; 61
    414c:	31 05       	cpc	r19, r1
    414e:	21 f0       	breq	.+8      	; 0x4158 <main+0x60>
    4150:	06 c0       	rjmp	.+12     	; 0x415e <main+0x66>
		{
		/* If Its "Enter", Clear Everything */
		case 13:
			clearAll();
    4152:	0e 94 37 1b 	call	0x366e	; 0x366e <clearAll>
    4156:	06 c0       	rjmp	.+12     	; 0x4164 <main+0x6c>
			break;
		/* If Its "=", Calculate The Written Equation */
		case '=':
			calculate();
    4158:	0e 94 75 1b 	call	0x36ea	; 0x36ea <calculate>
    415c:	03 c0       	rjmp	.+6      	; 0x4164 <main+0x6c>
			break;
		/* If Its a Number or a Sign, Call Input Function */
		default:
			input(key);
    415e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4160:	0e 94 4e 1b 	call	0x369c	; 0x369c <input>
    4164:	80 e0       	ldi	r24, 0x00	; 0
    4166:	90 e0       	ldi	r25, 0x00	; 0
    4168:	a8 e4       	ldi	r26, 0x48	; 72
    416a:	b3 e4       	ldi	r27, 0x43	; 67
    416c:	8b 87       	std	Y+11, r24	; 0x0b
    416e:	9c 87       	std	Y+12, r25	; 0x0c
    4170:	ad 87       	std	Y+13, r26	; 0x0d
    4172:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4174:	6b 85       	ldd	r22, Y+11	; 0x0b
    4176:	7c 85       	ldd	r23, Y+12	; 0x0c
    4178:	8d 85       	ldd	r24, Y+13	; 0x0d
    417a:	9e 85       	ldd	r25, Y+14	; 0x0e
    417c:	20 e0       	ldi	r18, 0x00	; 0
    417e:	30 e0       	ldi	r19, 0x00	; 0
    4180:	4a e7       	ldi	r20, 0x7A	; 122
    4182:	53 e4       	ldi	r21, 0x43	; 67
    4184:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    4188:	dc 01       	movw	r26, r24
    418a:	cb 01       	movw	r24, r22
    418c:	8f 83       	std	Y+7, r24	; 0x07
    418e:	98 87       	std	Y+8, r25	; 0x08
    4190:	a9 87       	std	Y+9, r26	; 0x09
    4192:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4194:	6f 81       	ldd	r22, Y+7	; 0x07
    4196:	78 85       	ldd	r23, Y+8	; 0x08
    4198:	89 85       	ldd	r24, Y+9	; 0x09
    419a:	9a 85       	ldd	r25, Y+10	; 0x0a
    419c:	20 e0       	ldi	r18, 0x00	; 0
    419e:	30 e0       	ldi	r19, 0x00	; 0
    41a0:	40 e8       	ldi	r20, 0x80	; 128
    41a2:	5f e3       	ldi	r21, 0x3F	; 63
    41a4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__ltsf2>
    41a8:	88 23       	and	r24, r24
    41aa:	2c f4       	brge	.+10     	; 0x41b6 <main+0xbe>
		__ticks = 1;
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	9e 83       	std	Y+6, r25	; 0x06
    41b2:	8d 83       	std	Y+5, r24	; 0x05
    41b4:	3f c0       	rjmp	.+126    	; 0x4234 <main+0x13c>
	else if (__tmp > 65535)
    41b6:	6f 81       	ldd	r22, Y+7	; 0x07
    41b8:	78 85       	ldd	r23, Y+8	; 0x08
    41ba:	89 85       	ldd	r24, Y+9	; 0x09
    41bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	3f ef       	ldi	r19, 0xFF	; 255
    41c2:	4f e7       	ldi	r20, 0x7F	; 127
    41c4:	57 e4       	ldi	r21, 0x47	; 71
    41c6:	0e 94 74 04 	call	0x8e8	; 0x8e8 <__gtsf2>
    41ca:	18 16       	cp	r1, r24
    41cc:	4c f5       	brge	.+82     	; 0x4220 <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    41d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    41d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    41d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    41d6:	20 e0       	ldi	r18, 0x00	; 0
    41d8:	30 e0       	ldi	r19, 0x00	; 0
    41da:	40 e2       	ldi	r20, 0x20	; 32
    41dc:	51 e4       	ldi	r21, 0x41	; 65
    41de:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__mulsf3>
    41e2:	dc 01       	movw	r26, r24
    41e4:	cb 01       	movw	r24, r22
    41e6:	bc 01       	movw	r22, r24
    41e8:	cd 01       	movw	r24, r26
    41ea:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    41ee:	dc 01       	movw	r26, r24
    41f0:	cb 01       	movw	r24, r22
    41f2:	9e 83       	std	Y+6, r25	; 0x06
    41f4:	8d 83       	std	Y+5, r24	; 0x05
    41f6:	0f c0       	rjmp	.+30     	; 0x4216 <main+0x11e>
    41f8:	89 e1       	ldi	r24, 0x19	; 25
    41fa:	90 e0       	ldi	r25, 0x00	; 0
    41fc:	9c 83       	std	Y+4, r25	; 0x04
    41fe:	8b 83       	std	Y+3, r24	; 0x03
    4200:	8b 81       	ldd	r24, Y+3	; 0x03
    4202:	9c 81       	ldd	r25, Y+4	; 0x04
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <main+0x10c>
    4208:	9c 83       	std	Y+4, r25	; 0x04
    420a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    420c:	8d 81       	ldd	r24, Y+5	; 0x05
    420e:	9e 81       	ldd	r25, Y+6	; 0x06
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	9e 83       	std	Y+6, r25	; 0x06
    4214:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4216:	8d 81       	ldd	r24, Y+5	; 0x05
    4218:	9e 81       	ldd	r25, Y+6	; 0x06
    421a:	00 97       	sbiw	r24, 0x00	; 0
    421c:	69 f7       	brne	.-38     	; 0x41f8 <main+0x100>
    421e:	80 cf       	rjmp	.-256    	; 0x4120 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4220:	6f 81       	ldd	r22, Y+7	; 0x07
    4222:	78 85       	ldd	r23, Y+8	; 0x08
    4224:	89 85       	ldd	r24, Y+9	; 0x09
    4226:	9a 85       	ldd	r25, Y+10	; 0x0a
    4228:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    422c:	dc 01       	movw	r26, r24
    422e:	cb 01       	movw	r24, r22
    4230:	9e 83       	std	Y+6, r25	; 0x06
    4232:	8d 83       	std	Y+5, r24	; 0x05
    4234:	8d 81       	ldd	r24, Y+5	; 0x05
    4236:	9e 81       	ldd	r25, Y+6	; 0x06
    4238:	9a 83       	std	Y+2, r25	; 0x02
    423a:	89 83       	std	Y+1, r24	; 0x01
    423c:	89 81       	ldd	r24, Y+1	; 0x01
    423e:	9a 81       	ldd	r25, Y+2	; 0x02
    4240:	01 97       	sbiw	r24, 0x01	; 1
    4242:	f1 f7       	brne	.-4      	; 0x4240 <main+0x148>
    4244:	9a 83       	std	Y+2, r25	; 0x02
    4246:	89 83       	std	Y+1, r24	; 0x01
    4248:	6b cf       	rjmp	.-298    	; 0x4120 <main+0x28>

0000424a <__prologue_saves__>:
    424a:	2f 92       	push	r2
    424c:	3f 92       	push	r3
    424e:	4f 92       	push	r4
    4250:	5f 92       	push	r5
    4252:	6f 92       	push	r6
    4254:	7f 92       	push	r7
    4256:	8f 92       	push	r8
    4258:	9f 92       	push	r9
    425a:	af 92       	push	r10
    425c:	bf 92       	push	r11
    425e:	cf 92       	push	r12
    4260:	df 92       	push	r13
    4262:	ef 92       	push	r14
    4264:	ff 92       	push	r15
    4266:	0f 93       	push	r16
    4268:	1f 93       	push	r17
    426a:	cf 93       	push	r28
    426c:	df 93       	push	r29
    426e:	cd b7       	in	r28, 0x3d	; 61
    4270:	de b7       	in	r29, 0x3e	; 62
    4272:	ca 1b       	sub	r28, r26
    4274:	db 0b       	sbc	r29, r27
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	f8 94       	cli
    427a:	de bf       	out	0x3e, r29	; 62
    427c:	0f be       	out	0x3f, r0	; 63
    427e:	cd bf       	out	0x3d, r28	; 61
    4280:	09 94       	ijmp

00004282 <__epilogue_restores__>:
    4282:	2a 88       	ldd	r2, Y+18	; 0x12
    4284:	39 88       	ldd	r3, Y+17	; 0x11
    4286:	48 88       	ldd	r4, Y+16	; 0x10
    4288:	5f 84       	ldd	r5, Y+15	; 0x0f
    428a:	6e 84       	ldd	r6, Y+14	; 0x0e
    428c:	7d 84       	ldd	r7, Y+13	; 0x0d
    428e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4290:	9b 84       	ldd	r9, Y+11	; 0x0b
    4292:	aa 84       	ldd	r10, Y+10	; 0x0a
    4294:	b9 84       	ldd	r11, Y+9	; 0x09
    4296:	c8 84       	ldd	r12, Y+8	; 0x08
    4298:	df 80       	ldd	r13, Y+7	; 0x07
    429a:	ee 80       	ldd	r14, Y+6	; 0x06
    429c:	fd 80       	ldd	r15, Y+5	; 0x05
    429e:	0c 81       	ldd	r16, Y+4	; 0x04
    42a0:	1b 81       	ldd	r17, Y+3	; 0x03
    42a2:	aa 81       	ldd	r26, Y+2	; 0x02
    42a4:	b9 81       	ldd	r27, Y+1	; 0x01
    42a6:	ce 0f       	add	r28, r30
    42a8:	d1 1d       	adc	r29, r1
    42aa:	0f b6       	in	r0, 0x3f	; 63
    42ac:	f8 94       	cli
    42ae:	de bf       	out	0x3e, r29	; 62
    42b0:	0f be       	out	0x3f, r0	; 63
    42b2:	cd bf       	out	0x3d, r28	; 61
    42b4:	ed 01       	movw	r28, r26
    42b6:	08 95       	ret

000042b8 <itoa>:
    42b8:	fb 01       	movw	r30, r22
    42ba:	9f 01       	movw	r18, r30
    42bc:	e8 94       	clt
    42be:	42 30       	cpi	r20, 0x02	; 2
    42c0:	c4 f0       	brlt	.+48     	; 0x42f2 <itoa+0x3a>
    42c2:	45 32       	cpi	r20, 0x25	; 37
    42c4:	b4 f4       	brge	.+44     	; 0x42f2 <itoa+0x3a>
    42c6:	4a 30       	cpi	r20, 0x0A	; 10
    42c8:	29 f4       	brne	.+10     	; 0x42d4 <itoa+0x1c>
    42ca:	97 fb       	bst	r25, 7
    42cc:	1e f4       	brtc	.+6      	; 0x42d4 <itoa+0x1c>
    42ce:	90 95       	com	r25
    42d0:	81 95       	neg	r24
    42d2:	9f 4f       	sbci	r25, 0xFF	; 255
    42d4:	64 2f       	mov	r22, r20
    42d6:	77 27       	eor	r23, r23
    42d8:	0e 94 8d 21 	call	0x431a	; 0x431a <__udivmodhi4>
    42dc:	80 5d       	subi	r24, 0xD0	; 208
    42de:	8a 33       	cpi	r24, 0x3A	; 58
    42e0:	0c f0       	brlt	.+2      	; 0x42e4 <itoa+0x2c>
    42e2:	89 5d       	subi	r24, 0xD9	; 217
    42e4:	81 93       	st	Z+, r24
    42e6:	cb 01       	movw	r24, r22
    42e8:	00 97       	sbiw	r24, 0x00	; 0
    42ea:	a1 f7       	brne	.-24     	; 0x42d4 <itoa+0x1c>
    42ec:	16 f4       	brtc	.+4      	; 0x42f2 <itoa+0x3a>
    42ee:	5d e2       	ldi	r21, 0x2D	; 45
    42f0:	51 93       	st	Z+, r21
    42f2:	10 82       	st	Z, r1
    42f4:	c9 01       	movw	r24, r18
    42f6:	0c 94 7d 21 	jmp	0x42fa	; 0x42fa <strrev>

000042fa <strrev>:
    42fa:	dc 01       	movw	r26, r24
    42fc:	fc 01       	movw	r30, r24
    42fe:	67 2f       	mov	r22, r23
    4300:	71 91       	ld	r23, Z+
    4302:	77 23       	and	r23, r23
    4304:	e1 f7       	brne	.-8      	; 0x42fe <strrev+0x4>
    4306:	32 97       	sbiw	r30, 0x02	; 2
    4308:	04 c0       	rjmp	.+8      	; 0x4312 <strrev+0x18>
    430a:	7c 91       	ld	r23, X
    430c:	6d 93       	st	X+, r22
    430e:	70 83       	st	Z, r23
    4310:	62 91       	ld	r22, -Z
    4312:	ae 17       	cp	r26, r30
    4314:	bf 07       	cpc	r27, r31
    4316:	c8 f3       	brcs	.-14     	; 0x430a <strrev+0x10>
    4318:	08 95       	ret

0000431a <__udivmodhi4>:
    431a:	aa 1b       	sub	r26, r26
    431c:	bb 1b       	sub	r27, r27
    431e:	51 e1       	ldi	r21, 0x11	; 17
    4320:	07 c0       	rjmp	.+14     	; 0x4330 <__udivmodhi4_ep>

00004322 <__udivmodhi4_loop>:
    4322:	aa 1f       	adc	r26, r26
    4324:	bb 1f       	adc	r27, r27
    4326:	a6 17       	cp	r26, r22
    4328:	b7 07       	cpc	r27, r23
    432a:	10 f0       	brcs	.+4      	; 0x4330 <__udivmodhi4_ep>
    432c:	a6 1b       	sub	r26, r22
    432e:	b7 0b       	sbc	r27, r23

00004330 <__udivmodhi4_ep>:
    4330:	88 1f       	adc	r24, r24
    4332:	99 1f       	adc	r25, r25
    4334:	5a 95       	dec	r21
    4336:	a9 f7       	brne	.-22     	; 0x4322 <__udivmodhi4_loop>
    4338:	80 95       	com	r24
    433a:	90 95       	com	r25
    433c:	bc 01       	movw	r22, r24
    433e:	cd 01       	movw	r24, r26
    4340:	08 95       	ret

00004342 <_exit>:
    4342:	f8 94       	cli

00004344 <__stop_program>:
    4344:	ff cf       	rjmp	.-2      	; 0x4344 <__stop_program>
