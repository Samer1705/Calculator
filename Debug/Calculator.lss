
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00003fba  0000404e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800188  00800188  00004176  2**0
                  ALLOC
  3 .stab         0000258c  00000000  00000000  00004178  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f37  00000000  00000000  00006704  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000763b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000781b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00007a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000a2de  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000b906  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000cce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000cee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000d1f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dc49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__ltsf2+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ea eb       	ldi	r30, 0xBA	; 186
     162:	ff e3       	ldi	r31, 0x3F	; 63
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 38       	cpi	r26, 0x88	; 136
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a8 e8       	ldi	r26, 0x88	; 136
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	aa 39       	cpi	r26, 0x9A	; 154
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <main>
     184:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <__stack+0x11>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <__stack+0xf>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <__stack+0x11>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <__stack+0x11>
     220:	af e7       	ldi	r26, 0x7F	; 127
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <__stack+0x11>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <__stack+0xf>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <__stack+0x11>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <__stack+0xb>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <__stack+0xf>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__stack+0x11>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 04 1d 	jmp	0x3a08	; 0x3a08 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8f e7       	ldi	r24, 0x7F	; 127
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 20 1d 	jmp	0x3a40	; 0x3a40 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__divsf3+0x144>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__divsf3+0x14a>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__divsf3+0x144>
     794:	6f e7       	ldi	r22, 0x7F	; 127
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__divsf3+0x14a>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__divsf3+0x14a>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__divsf3+0x13c>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__divsf3+0x13c>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x13c>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__epilogue_restores__+0x10>

00000884 <__eqsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__eqsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__eqsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__eqsf2+0x58>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__epilogue_restores__+0x18>

000008e4 <__gtsf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gtsf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gtsf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gtsf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__epilogue_restores__+0x18>

00000944 <__gesf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__gesf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__gesf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__gesf2+0x58>
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__epilogue_restores__+0x18>

000009a4 <__ltsf2>:
     9a4:	a8 e1       	ldi	r26, 0x18	; 24
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 10 1d 	jmp	0x3a20	; 0x3a20 <__prologue_saves__+0x18>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	2d 83       	std	Y+5, r18	; 0x05
     9ba:	3e 83       	std	Y+6, r19	; 0x06
     9bc:	4f 83       	std	Y+7, r20	; 0x07
     9be:	58 87       	std	Y+8, r21	; 0x08
     9c0:	89 e0       	ldi	r24, 0x09	; 9
     9c2:	e8 2e       	mov	r14, r24
     9c4:	f1 2c       	mov	r15, r1
     9c6:	ec 0e       	add	r14, r28
     9c8:	fd 1e       	adc	r15, r29
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	b7 01       	movw	r22, r14
     9d0:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     9d4:	8e 01       	movw	r16, r28
     9d6:	0f 5e       	subi	r16, 0xEF	; 239
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	05 96       	adiw	r24, 0x05	; 5
     9de:	b8 01       	movw	r22, r16
     9e0:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	40 f0       	brcs	.+16     	; 0x9fa <__ltsf2+0x56>
     9ea:	89 89       	ldd	r24, Y+17	; 0x11
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <__ltsf2+0x56>
     9f0:	c7 01       	movw	r24, r14
     9f2:	b8 01       	movw	r22, r16
     9f4:	0e 94 c9 07 	call	0xf92	; 0xf92 <__fpcmp_parts_f>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__ltsf2+0x58>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	e6 e0       	ldi	r30, 0x06	; 6
     a00:	0c 94 2c 1d 	jmp	0x3a58	; 0x3a58 <__epilogue_restores__+0x18>

00000a04 <__floatsisf>:
     a04:	a8 e0       	ldi	r26, 0x08	; 8
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e8 e0       	ldi	r30, 0x08	; 8
     a0a:	f5 e0       	ldi	r31, 0x05	; 5
     a0c:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <__prologue_saves__+0x12>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	da 01       	movw	r26, r20
     a1a:	c9 01       	movw	r24, r18
     a1c:	88 27       	eor	r24, r24
     a1e:	b7 fd       	sbrc	r27, 7
     a20:	83 95       	inc	r24
     a22:	99 27       	eor	r25, r25
     a24:	aa 27       	eor	r26, r26
     a26:	bb 27       	eor	r27, r27
     a28:	b8 2e       	mov	r11, r24
     a2a:	21 15       	cp	r18, r1
     a2c:	31 05       	cpc	r19, r1
     a2e:	41 05       	cpc	r20, r1
     a30:	51 05       	cpc	r21, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__floatsisf+0x36>
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	3a c0       	rjmp	.+116    	; 0xaae <__floatsisf+0xaa>
     a3a:	88 23       	and	r24, r24
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x64>
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	38 07       	cpc	r19, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	48 07       	cpc	r20, r24
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	58 07       	cpc	r21, r24
     a4c:	29 f4       	brne	.+10     	; 0xa58 <__floatsisf+0x54>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	9f ec       	ldi	r25, 0xCF	; 207
     a56:	30 c0       	rjmp	.+96     	; 0xab8 <__floatsisf+0xb4>
     a58:	ee 24       	eor	r14, r14
     a5a:	ff 24       	eor	r15, r15
     a5c:	87 01       	movw	r16, r14
     a5e:	e2 1a       	sub	r14, r18
     a60:	f3 0a       	sbc	r15, r19
     a62:	04 0b       	sbc	r16, r20
     a64:	15 0b       	sbc	r17, r21
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__floatsisf+0x68>
     a68:	79 01       	movw	r14, r18
     a6a:	8a 01       	movw	r16, r20
     a6c:	8e e1       	ldi	r24, 0x1E	; 30
     a6e:	c8 2e       	mov	r12, r24
     a70:	d1 2c       	mov	r13, r1
     a72:	dc 82       	std	Y+4, r13	; 0x04
     a74:	cb 82       	std	Y+3, r12	; 0x03
     a76:	ed 82       	std	Y+5, r14	; 0x05
     a78:	fe 82       	std	Y+6, r15	; 0x06
     a7a:	0f 83       	std	Y+7, r16	; 0x07
     a7c:	18 87       	std	Y+8, r17	; 0x08
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__clzsi2>
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	18 16       	cp	r1, r24
     a8a:	19 06       	cpc	r1, r25
     a8c:	84 f4       	brge	.+32     	; 0xaae <__floatsisf+0xaa>
     a8e:	08 2e       	mov	r0, r24
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__floatsisf+0x96>
     a92:	ee 0c       	add	r14, r14
     a94:	ff 1c       	adc	r15, r15
     a96:	00 1f       	adc	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	0a 94       	dec	r0
     a9c:	d2 f7       	brpl	.-12     	; 0xa92 <__floatsisf+0x8e>
     a9e:	ed 82       	std	Y+5, r14	; 0x05
     aa0:	fe 82       	std	Y+6, r15	; 0x06
     aa2:	0f 83       	std	Y+7, r16	; 0x07
     aa4:	18 87       	std	Y+8, r17	; 0x08
     aa6:	c8 1a       	sub	r12, r24
     aa8:	d9 0a       	sbc	r13, r25
     aaa:	dc 82       	std	Y+4, r13	; 0x04
     aac:	cb 82       	std	Y+3, r12	; 0x03
     aae:	ba 82       	std	Y+2, r11	; 0x02
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__pack_f>
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	e9 e0       	ldi	r30, 0x09	; 9
     abc:	0c 94 29 1d 	jmp	0x3a52	; 0x3a52 <__epilogue_restores__+0x12>

00000ac0 <__fixsfsi>:
     ac0:	ac e0       	ldi	r26, 0x0C	; 12
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e6 e6       	ldi	r30, 0x66	; 102
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	0c 94 14 1d 	jmp	0x3a28	; 0x3a28 <__prologue_saves__+0x20>
     acc:	69 83       	std	Y+1, r22	; 0x01
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	be 01       	movw	r22, r28
     ada:	6b 5f       	subi	r22, 0xFB	; 251
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	0e 94 51 07 	call	0xea2	; 0xea2 <__unpack_f>
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	61 f1       	breq	.+88     	; 0xb40 <__fixsfsi+0x80>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	50 f1       	brcs	.+84     	; 0xb40 <__fixsfsi+0x80>
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	21 f4       	brne	.+8      	; 0xaf8 <__fixsfsi+0x38>
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	88 23       	and	r24, r24
     af4:	51 f1       	breq	.+84     	; 0xb4a <__fixsfsi+0x8a>
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <__fixsfsi+0x94>
     af8:	2f 81       	ldd	r18, Y+7	; 0x07
     afa:	38 85       	ldd	r19, Y+8	; 0x08
     afc:	37 fd       	sbrc	r19, 7
     afe:	20 c0       	rjmp	.+64     	; 0xb40 <__fixsfsi+0x80>
     b00:	6e 81       	ldd	r22, Y+6	; 0x06
     b02:	2f 31       	cpi	r18, 0x1F	; 31
     b04:	31 05       	cpc	r19, r1
     b06:	1c f0       	brlt	.+6      	; 0xb0e <__fixsfsi+0x4e>
     b08:	66 23       	and	r22, r22
     b0a:	f9 f0       	breq	.+62     	; 0xb4a <__fixsfsi+0x8a>
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <__fixsfsi+0x94>
     b0e:	8e e1       	ldi	r24, 0x1E	; 30
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 1b       	sub	r24, r18
     b14:	93 0b       	sbc	r25, r19
     b16:	29 85       	ldd	r18, Y+9	; 0x09
     b18:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fixsfsi+0x68>
     b20:	56 95       	lsr	r21
     b22:	47 95       	ror	r20
     b24:	37 95       	ror	r19
     b26:	27 95       	ror	r18
     b28:	8a 95       	dec	r24
     b2a:	d2 f7       	brpl	.-12     	; 0xb20 <__fixsfsi+0x60>
     b2c:	66 23       	and	r22, r22
     b2e:	b1 f0       	breq	.+44     	; 0xb5c <__fixsfsi+0x9c>
     b30:	50 95       	com	r21
     b32:	40 95       	com	r20
     b34:	30 95       	com	r19
     b36:	21 95       	neg	r18
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	4f 4f       	sbci	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <__fixsfsi+0x9c>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <__fixsfsi+0x9c>
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	4f ef       	ldi	r20, 0xFF	; 255
     b50:	5f e7       	ldi	r21, 0x7F	; 127
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__fixsfsi+0x9c>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e8       	ldi	r21, 0x80	; 128
     b5c:	b9 01       	movw	r22, r18
     b5e:	ca 01       	movw	r24, r20
     b60:	2c 96       	adiw	r28, 0x0c	; 12
     b62:	e2 e0       	ldi	r30, 0x02	; 2
     b64:	0c 94 30 1d 	jmp	0x3a60	; 0x3a60 <__epilogue_restores__+0x20>

00000b68 <__floatunsisf>:
     b68:	a8 e0       	ldi	r26, 0x08	; 8
     b6a:	b0 e0       	ldi	r27, 0x00	; 0
     b6c:	ea eb       	ldi	r30, 0xBA	; 186
     b6e:	f5 e0       	ldi	r31, 0x05	; 5
     b70:	0c 94 0c 1d 	jmp	0x3a18	; 0x3a18 <__prologue_saves__+0x10>
     b74:	7b 01       	movw	r14, r22
     b76:	8c 01       	movw	r16, r24
     b78:	61 15       	cp	r22, r1
     b7a:	71 05       	cpc	r23, r1
     b7c:	81 05       	cpc	r24, r1
     b7e:	91 05       	cpc	r25, r1
     b80:	19 f4       	brne	.+6      	; 0xb88 <__floatunsisf+0x20>
     b82:	82 e0       	ldi	r24, 0x02	; 2
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	60 c0       	rjmp	.+192    	; 0xc48 <__floatunsisf+0xe0>
     b88:	83 e0       	ldi	r24, 0x03	; 3
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	8e e1       	ldi	r24, 0x1E	; 30
     b8e:	c8 2e       	mov	r12, r24
     b90:	d1 2c       	mov	r13, r1
     b92:	dc 82       	std	Y+4, r13	; 0x04
     b94:	cb 82       	std	Y+3, r12	; 0x03
     b96:	ed 82       	std	Y+5, r14	; 0x05
     b98:	fe 82       	std	Y+6, r15	; 0x06
     b9a:	0f 83       	std	Y+7, r16	; 0x07
     b9c:	18 87       	std	Y+8, r17	; 0x08
     b9e:	c8 01       	movw	r24, r16
     ba0:	b7 01       	movw	r22, r14
     ba2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <__clzsi2>
     ba6:	fc 01       	movw	r30, r24
     ba8:	31 97       	sbiw	r30, 0x01	; 1
     baa:	f7 ff       	sbrs	r31, 7
     bac:	3b c0       	rjmp	.+118    	; 0xc24 <__floatunsisf+0xbc>
     bae:	22 27       	eor	r18, r18
     bb0:	33 27       	eor	r19, r19
     bb2:	2e 1b       	sub	r18, r30
     bb4:	3f 0b       	sbc	r19, r31
     bb6:	57 01       	movw	r10, r14
     bb8:	68 01       	movw	r12, r16
     bba:	02 2e       	mov	r0, r18
     bbc:	04 c0       	rjmp	.+8      	; 0xbc6 <__floatunsisf+0x5e>
     bbe:	d6 94       	lsr	r13
     bc0:	c7 94       	ror	r12
     bc2:	b7 94       	ror	r11
     bc4:	a7 94       	ror	r10
     bc6:	0a 94       	dec	r0
     bc8:	d2 f7       	brpl	.-12     	; 0xbbe <__floatunsisf+0x56>
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	a0 e0       	ldi	r26, 0x00	; 0
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <__floatunsisf+0x7c>
     bdc:	88 0f       	add	r24, r24
     bde:	99 1f       	adc	r25, r25
     be0:	aa 1f       	adc	r26, r26
     be2:	bb 1f       	adc	r27, r27
     be4:	2a 95       	dec	r18
     be6:	d2 f7       	brpl	.-12     	; 0xbdc <__floatunsisf+0x74>
     be8:	01 97       	sbiw	r24, 0x01	; 1
     bea:	a1 09       	sbc	r26, r1
     bec:	b1 09       	sbc	r27, r1
     bee:	8e 21       	and	r24, r14
     bf0:	9f 21       	and	r25, r15
     bf2:	a0 23       	and	r26, r16
     bf4:	b1 23       	and	r27, r17
     bf6:	00 97       	sbiw	r24, 0x00	; 0
     bf8:	a1 05       	cpc	r26, r1
     bfa:	b1 05       	cpc	r27, r1
     bfc:	21 f0       	breq	.+8      	; 0xc06 <__floatunsisf+0x9e>
     bfe:	41 e0       	ldi	r20, 0x01	; 1
     c00:	50 e0       	ldi	r21, 0x00	; 0
     c02:	60 e0       	ldi	r22, 0x00	; 0
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	4a 29       	or	r20, r10
     c08:	5b 29       	or	r21, r11
     c0a:	6c 29       	or	r22, r12
     c0c:	7d 29       	or	r23, r13
     c0e:	4d 83       	std	Y+5, r20	; 0x05
     c10:	5e 83       	std	Y+6, r21	; 0x06
     c12:	6f 83       	std	Y+7, r22	; 0x07
     c14:	78 87       	std	Y+8, r23	; 0x08
     c16:	8e e1       	ldi	r24, 0x1E	; 30
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	8e 1b       	sub	r24, r30
     c1c:	9f 0b       	sbc	r25, r31
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
     c22:	12 c0       	rjmp	.+36     	; 0xc48 <__floatunsisf+0xe0>
     c24:	30 97       	sbiw	r30, 0x00	; 0
     c26:	81 f0       	breq	.+32     	; 0xc48 <__floatunsisf+0xe0>
     c28:	0e 2e       	mov	r0, r30
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__floatunsisf+0xcc>
     c2c:	ee 0c       	add	r14, r14
     c2e:	ff 1c       	adc	r15, r15
     c30:	00 1f       	adc	r16, r16
     c32:	11 1f       	adc	r17, r17
     c34:	0a 94       	dec	r0
     c36:	d2 f7       	brpl	.-12     	; 0xc2c <__floatunsisf+0xc4>
     c38:	ed 82       	std	Y+5, r14	; 0x05
     c3a:	fe 82       	std	Y+6, r15	; 0x06
     c3c:	0f 83       	std	Y+7, r16	; 0x07
     c3e:	18 87       	std	Y+8, r17	; 0x08
     c40:	ce 1a       	sub	r12, r30
     c42:	df 0a       	sbc	r13, r31
     c44:	dc 82       	std	Y+4, r13	; 0x04
     c46:	cb 82       	std	Y+3, r12	; 0x03
     c48:	1a 82       	std	Y+2, r1	; 0x02
     c4a:	ce 01       	movw	r24, r28
     c4c:	01 96       	adiw	r24, 0x01	; 1
     c4e:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <__pack_f>
     c52:	28 96       	adiw	r28, 0x08	; 8
     c54:	ea e0       	ldi	r30, 0x0A	; 10
     c56:	0c 94 28 1d 	jmp	0x3a50	; 0x3a50 <__epilogue_restores__+0x10>

00000c5a <__clzsi2>:
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
     c62:	7b 01       	movw	r14, r22
     c64:	8c 01       	movw	r16, r24
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	e8 16       	cp	r14, r24
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	f8 06       	cpc	r15, r24
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	08 07       	cpc	r16, r24
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	18 07       	cpc	r17, r24
     c76:	88 f4       	brcc	.+34     	; 0xc9a <__clzsi2+0x40>
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	e8 16       	cp	r14, r24
     c7c:	f1 04       	cpc	r15, r1
     c7e:	01 05       	cpc	r16, r1
     c80:	11 05       	cpc	r17, r1
     c82:	31 f0       	breq	.+12     	; 0xc90 <__clzsi2+0x36>
     c84:	28 f0       	brcs	.+10     	; 0xc90 <__clzsi2+0x36>
     c86:	88 e0       	ldi	r24, 0x08	; 8
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	17 c0       	rjmp	.+46     	; 0xcbe <__clzsi2+0x64>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	12 c0       	rjmp	.+36     	; 0xcbe <__clzsi2+0x64>
     c9a:	80 e0       	ldi	r24, 0x00	; 0
     c9c:	e8 16       	cp	r14, r24
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	f8 06       	cpc	r15, r24
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	08 07       	cpc	r16, r24
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	18 07       	cpc	r17, r24
     caa:	28 f0       	brcs	.+10     	; 0xcb6 <__clzsi2+0x5c>
     cac:	88 e1       	ldi	r24, 0x18	; 24
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	a0 e0       	ldi	r26, 0x00	; 0
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	04 c0       	rjmp	.+8      	; 0xcbe <__clzsi2+0x64>
     cb6:	80 e1       	ldi	r24, 0x10	; 16
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	20 e2       	ldi	r18, 0x20	; 32
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	28 1b       	sub	r18, r24
     cc8:	39 0b       	sbc	r19, r25
     cca:	4a 0b       	sbc	r20, r26
     ccc:	5b 0b       	sbc	r21, r27
     cce:	04 c0       	rjmp	.+8      	; 0xcd8 <__clzsi2+0x7e>
     cd0:	16 95       	lsr	r17
     cd2:	07 95       	ror	r16
     cd4:	f7 94       	ror	r15
     cd6:	e7 94       	ror	r14
     cd8:	8a 95       	dec	r24
     cda:	d2 f7       	brpl	.-12     	; 0xcd0 <__clzsi2+0x76>
     cdc:	f7 01       	movw	r30, r14
     cde:	e9 57       	subi	r30, 0x79	; 121
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 81       	ld	r24, Z
     ce4:	28 1b       	sub	r18, r24
     ce6:	31 09       	sbc	r19, r1
     ce8:	41 09       	sbc	r20, r1
     cea:	51 09       	sbc	r21, r1
     cec:	c9 01       	movw	r24, r18
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	08 95       	ret

00000cf8 <__pack_f>:
     cf8:	df 92       	push	r13
     cfa:	ef 92       	push	r14
     cfc:	ff 92       	push	r15
     cfe:	0f 93       	push	r16
     d00:	1f 93       	push	r17
     d02:	fc 01       	movw	r30, r24
     d04:	e4 80       	ldd	r14, Z+4	; 0x04
     d06:	f5 80       	ldd	r15, Z+5	; 0x05
     d08:	06 81       	ldd	r16, Z+6	; 0x06
     d0a:	17 81       	ldd	r17, Z+7	; 0x07
     d0c:	d1 80       	ldd	r13, Z+1	; 0x01
     d0e:	80 81       	ld	r24, Z
     d10:	82 30       	cpi	r24, 0x02	; 2
     d12:	48 f4       	brcc	.+18     	; 0xd26 <__pack_f+0x2e>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	a0 e1       	ldi	r26, 0x10	; 16
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	e8 2a       	or	r14, r24
     d1e:	f9 2a       	or	r15, r25
     d20:	0a 2b       	or	r16, r26
     d22:	1b 2b       	or	r17, r27
     d24:	a5 c0       	rjmp	.+330    	; 0xe70 <__pack_f+0x178>
     d26:	84 30       	cpi	r24, 0x04	; 4
     d28:	09 f4       	brne	.+2      	; 0xd2c <__pack_f+0x34>
     d2a:	9f c0       	rjmp	.+318    	; 0xe6a <__pack_f+0x172>
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	21 f4       	brne	.+8      	; 0xd38 <__pack_f+0x40>
     d30:	ee 24       	eor	r14, r14
     d32:	ff 24       	eor	r15, r15
     d34:	87 01       	movw	r16, r14
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <__pack_f+0x4a>
     d38:	e1 14       	cp	r14, r1
     d3a:	f1 04       	cpc	r15, r1
     d3c:	01 05       	cpc	r16, r1
     d3e:	11 05       	cpc	r17, r1
     d40:	19 f4       	brne	.+6      	; 0xd48 <__pack_f+0x50>
     d42:	e0 e0       	ldi	r30, 0x00	; 0
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	96 c0       	rjmp	.+300    	; 0xe74 <__pack_f+0x17c>
     d48:	62 81       	ldd	r22, Z+2	; 0x02
     d4a:	73 81       	ldd	r23, Z+3	; 0x03
     d4c:	9f ef       	ldi	r25, 0xFF	; 255
     d4e:	62 38       	cpi	r22, 0x82	; 130
     d50:	79 07       	cpc	r23, r25
     d52:	0c f0       	brlt	.+2      	; 0xd56 <__pack_f+0x5e>
     d54:	5b c0       	rjmp	.+182    	; 0xe0c <__pack_f+0x114>
     d56:	22 e8       	ldi	r18, 0x82	; 130
     d58:	3f ef       	ldi	r19, 0xFF	; 255
     d5a:	26 1b       	sub	r18, r22
     d5c:	37 0b       	sbc	r19, r23
     d5e:	2a 31       	cpi	r18, 0x1A	; 26
     d60:	31 05       	cpc	r19, r1
     d62:	2c f0       	brlt	.+10     	; 0xd6e <__pack_f+0x76>
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	2a c0       	rjmp	.+84     	; 0xdc2 <__pack_f+0xca>
     d6e:	b8 01       	movw	r22, r16
     d70:	a7 01       	movw	r20, r14
     d72:	02 2e       	mov	r0, r18
     d74:	04 c0       	rjmp	.+8      	; 0xd7e <__pack_f+0x86>
     d76:	76 95       	lsr	r23
     d78:	67 95       	ror	r22
     d7a:	57 95       	ror	r21
     d7c:	47 95       	ror	r20
     d7e:	0a 94       	dec	r0
     d80:	d2 f7       	brpl	.-12     	; 0xd76 <__pack_f+0x7e>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	04 c0       	rjmp	.+8      	; 0xd94 <__pack_f+0x9c>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	aa 1f       	adc	r26, r26
     d92:	bb 1f       	adc	r27, r27
     d94:	2a 95       	dec	r18
     d96:	d2 f7       	brpl	.-12     	; 0xd8c <__pack_f+0x94>
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	a1 09       	sbc	r26, r1
     d9c:	b1 09       	sbc	r27, r1
     d9e:	8e 21       	and	r24, r14
     da0:	9f 21       	and	r25, r15
     da2:	a0 23       	and	r26, r16
     da4:	b1 23       	and	r27, r17
     da6:	00 97       	sbiw	r24, 0x00	; 0
     da8:	a1 05       	cpc	r26, r1
     daa:	b1 05       	cpc	r27, r1
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__pack_f+0xbe>
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	a0 e0       	ldi	r26, 0x00	; 0
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	9a 01       	movw	r18, r20
     db8:	ab 01       	movw	r20, r22
     dba:	28 2b       	or	r18, r24
     dbc:	39 2b       	or	r19, r25
     dbe:	4a 2b       	or	r20, r26
     dc0:	5b 2b       	or	r21, r27
     dc2:	da 01       	movw	r26, r20
     dc4:	c9 01       	movw	r24, r18
     dc6:	8f 77       	andi	r24, 0x7F	; 127
     dc8:	90 70       	andi	r25, 0x00	; 0
     dca:	a0 70       	andi	r26, 0x00	; 0
     dcc:	b0 70       	andi	r27, 0x00	; 0
     dce:	80 34       	cpi	r24, 0x40	; 64
     dd0:	91 05       	cpc	r25, r1
     dd2:	a1 05       	cpc	r26, r1
     dd4:	b1 05       	cpc	r27, r1
     dd6:	39 f4       	brne	.+14     	; 0xde6 <__pack_f+0xee>
     dd8:	27 ff       	sbrs	r18, 7
     dda:	09 c0       	rjmp	.+18     	; 0xdee <__pack_f+0xf6>
     ddc:	20 5c       	subi	r18, 0xC0	; 192
     dde:	3f 4f       	sbci	r19, 0xFF	; 255
     de0:	4f 4f       	sbci	r20, 0xFF	; 255
     de2:	5f 4f       	sbci	r21, 0xFF	; 255
     de4:	04 c0       	rjmp	.+8      	; 0xdee <__pack_f+0xf6>
     de6:	21 5c       	subi	r18, 0xC1	; 193
     de8:	3f 4f       	sbci	r19, 0xFF	; 255
     dea:	4f 4f       	sbci	r20, 0xFF	; 255
     dec:	5f 4f       	sbci	r21, 0xFF	; 255
     dee:	e0 e0       	ldi	r30, 0x00	; 0
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	20 30       	cpi	r18, 0x00	; 0
     df4:	a0 e0       	ldi	r26, 0x00	; 0
     df6:	3a 07       	cpc	r19, r26
     df8:	a0 e0       	ldi	r26, 0x00	; 0
     dfa:	4a 07       	cpc	r20, r26
     dfc:	a0 e4       	ldi	r26, 0x40	; 64
     dfe:	5a 07       	cpc	r21, r26
     e00:	10 f0       	brcs	.+4      	; 0xe06 <__pack_f+0x10e>
     e02:	e1 e0       	ldi	r30, 0x01	; 1
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	79 01       	movw	r14, r18
     e08:	8a 01       	movw	r16, r20
     e0a:	27 c0       	rjmp	.+78     	; 0xe5a <__pack_f+0x162>
     e0c:	60 38       	cpi	r22, 0x80	; 128
     e0e:	71 05       	cpc	r23, r1
     e10:	64 f5       	brge	.+88     	; 0xe6a <__pack_f+0x172>
     e12:	fb 01       	movw	r30, r22
     e14:	e1 58       	subi	r30, 0x81	; 129
     e16:	ff 4f       	sbci	r31, 0xFF	; 255
     e18:	d8 01       	movw	r26, r16
     e1a:	c7 01       	movw	r24, r14
     e1c:	8f 77       	andi	r24, 0x7F	; 127
     e1e:	90 70       	andi	r25, 0x00	; 0
     e20:	a0 70       	andi	r26, 0x00	; 0
     e22:	b0 70       	andi	r27, 0x00	; 0
     e24:	80 34       	cpi	r24, 0x40	; 64
     e26:	91 05       	cpc	r25, r1
     e28:	a1 05       	cpc	r26, r1
     e2a:	b1 05       	cpc	r27, r1
     e2c:	39 f4       	brne	.+14     	; 0xe3c <__pack_f+0x144>
     e2e:	e7 fe       	sbrs	r14, 7
     e30:	0d c0       	rjmp	.+26     	; 0xe4c <__pack_f+0x154>
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	04 c0       	rjmp	.+8      	; 0xe44 <__pack_f+0x14c>
     e3c:	8f e3       	ldi	r24, 0x3F	; 63
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	a0 e0       	ldi	r26, 0x00	; 0
     e42:	b0 e0       	ldi	r27, 0x00	; 0
     e44:	e8 0e       	add	r14, r24
     e46:	f9 1e       	adc	r15, r25
     e48:	0a 1f       	adc	r16, r26
     e4a:	1b 1f       	adc	r17, r27
     e4c:	17 ff       	sbrs	r17, 7
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <__pack_f+0x162>
     e50:	16 95       	lsr	r17
     e52:	07 95       	ror	r16
     e54:	f7 94       	ror	r15
     e56:	e7 94       	ror	r14
     e58:	31 96       	adiw	r30, 0x01	; 1
     e5a:	87 e0       	ldi	r24, 0x07	; 7
     e5c:	16 95       	lsr	r17
     e5e:	07 95       	ror	r16
     e60:	f7 94       	ror	r15
     e62:	e7 94       	ror	r14
     e64:	8a 95       	dec	r24
     e66:	d1 f7       	brne	.-12     	; 0xe5c <__pack_f+0x164>
     e68:	05 c0       	rjmp	.+10     	; 0xe74 <__pack_f+0x17c>
     e6a:	ee 24       	eor	r14, r14
     e6c:	ff 24       	eor	r15, r15
     e6e:	87 01       	movw	r16, r14
     e70:	ef ef       	ldi	r30, 0xFF	; 255
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	6e 2f       	mov	r22, r30
     e76:	67 95       	ror	r22
     e78:	66 27       	eor	r22, r22
     e7a:	67 95       	ror	r22
     e7c:	90 2f       	mov	r25, r16
     e7e:	9f 77       	andi	r25, 0x7F	; 127
     e80:	d7 94       	ror	r13
     e82:	dd 24       	eor	r13, r13
     e84:	d7 94       	ror	r13
     e86:	8e 2f       	mov	r24, r30
     e88:	86 95       	lsr	r24
     e8a:	49 2f       	mov	r20, r25
     e8c:	46 2b       	or	r20, r22
     e8e:	58 2f       	mov	r21, r24
     e90:	5d 29       	or	r21, r13
     e92:	b7 01       	movw	r22, r14
     e94:	ca 01       	movw	r24, r20
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	08 95       	ret

00000ea2 <__unpack_f>:
     ea2:	fc 01       	movw	r30, r24
     ea4:	db 01       	movw	r26, r22
     ea6:	40 81       	ld	r20, Z
     ea8:	51 81       	ldd	r21, Z+1	; 0x01
     eaa:	22 81       	ldd	r18, Z+2	; 0x02
     eac:	62 2f       	mov	r22, r18
     eae:	6f 77       	andi	r22, 0x7F	; 127
     eb0:	70 e0       	ldi	r23, 0x00	; 0
     eb2:	22 1f       	adc	r18, r18
     eb4:	22 27       	eor	r18, r18
     eb6:	22 1f       	adc	r18, r18
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	89 2f       	mov	r24, r25
     ebc:	88 0f       	add	r24, r24
     ebe:	82 2b       	or	r24, r18
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	99 1f       	adc	r25, r25
     ec6:	99 27       	eor	r25, r25
     ec8:	99 1f       	adc	r25, r25
     eca:	11 96       	adiw	r26, 0x01	; 1
     ecc:	9c 93       	st	X, r25
     ece:	11 97       	sbiw	r26, 0x01	; 1
     ed0:	21 15       	cp	r18, r1
     ed2:	31 05       	cpc	r19, r1
     ed4:	a9 f5       	brne	.+106    	; 0xf40 <__unpack_f+0x9e>
     ed6:	41 15       	cp	r20, r1
     ed8:	51 05       	cpc	r21, r1
     eda:	61 05       	cpc	r22, r1
     edc:	71 05       	cpc	r23, r1
     ede:	11 f4       	brne	.+4      	; 0xee4 <__unpack_f+0x42>
     ee0:	82 e0       	ldi	r24, 0x02	; 2
     ee2:	37 c0       	rjmp	.+110    	; 0xf52 <__unpack_f+0xb0>
     ee4:	82 e8       	ldi	r24, 0x82	; 130
     ee6:	9f ef       	ldi	r25, 0xFF	; 255
     ee8:	13 96       	adiw	r26, 0x03	; 3
     eea:	9c 93       	st	X, r25
     eec:	8e 93       	st	-X, r24
     eee:	12 97       	sbiw	r26, 0x02	; 2
     ef0:	9a 01       	movw	r18, r20
     ef2:	ab 01       	movw	r20, r22
     ef4:	67 e0       	ldi	r22, 0x07	; 7
     ef6:	22 0f       	add	r18, r18
     ef8:	33 1f       	adc	r19, r19
     efa:	44 1f       	adc	r20, r20
     efc:	55 1f       	adc	r21, r21
     efe:	6a 95       	dec	r22
     f00:	d1 f7       	brne	.-12     	; 0xef6 <__unpack_f+0x54>
     f02:	83 e0       	ldi	r24, 0x03	; 3
     f04:	8c 93       	st	X, r24
     f06:	0d c0       	rjmp	.+26     	; 0xf22 <__unpack_f+0x80>
     f08:	22 0f       	add	r18, r18
     f0a:	33 1f       	adc	r19, r19
     f0c:	44 1f       	adc	r20, r20
     f0e:	55 1f       	adc	r21, r21
     f10:	12 96       	adiw	r26, 0x02	; 2
     f12:	8d 91       	ld	r24, X+
     f14:	9c 91       	ld	r25, X
     f16:	13 97       	sbiw	r26, 0x03	; 3
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	13 96       	adiw	r26, 0x03	; 3
     f1c:	9c 93       	st	X, r25
     f1e:	8e 93       	st	-X, r24
     f20:	12 97       	sbiw	r26, 0x02	; 2
     f22:	20 30       	cpi	r18, 0x00	; 0
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	38 07       	cpc	r19, r24
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	48 07       	cpc	r20, r24
     f2c:	80 e4       	ldi	r24, 0x40	; 64
     f2e:	58 07       	cpc	r21, r24
     f30:	58 f3       	brcs	.-42     	; 0xf08 <__unpack_f+0x66>
     f32:	14 96       	adiw	r26, 0x04	; 4
     f34:	2d 93       	st	X+, r18
     f36:	3d 93       	st	X+, r19
     f38:	4d 93       	st	X+, r20
     f3a:	5c 93       	st	X, r21
     f3c:	17 97       	sbiw	r26, 0x07	; 7
     f3e:	08 95       	ret
     f40:	2f 3f       	cpi	r18, 0xFF	; 255
     f42:	31 05       	cpc	r19, r1
     f44:	79 f4       	brne	.+30     	; 0xf64 <__unpack_f+0xc2>
     f46:	41 15       	cp	r20, r1
     f48:	51 05       	cpc	r21, r1
     f4a:	61 05       	cpc	r22, r1
     f4c:	71 05       	cpc	r23, r1
     f4e:	19 f4       	brne	.+6      	; 0xf56 <__unpack_f+0xb4>
     f50:	84 e0       	ldi	r24, 0x04	; 4
     f52:	8c 93       	st	X, r24
     f54:	08 95       	ret
     f56:	64 ff       	sbrs	r22, 4
     f58:	03 c0       	rjmp	.+6      	; 0xf60 <__unpack_f+0xbe>
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	8c 93       	st	X, r24
     f5e:	12 c0       	rjmp	.+36     	; 0xf84 <__unpack_f+0xe2>
     f60:	1c 92       	st	X, r1
     f62:	10 c0       	rjmp	.+32     	; 0xf84 <__unpack_f+0xe2>
     f64:	2f 57       	subi	r18, 0x7F	; 127
     f66:	30 40       	sbci	r19, 0x00	; 0
     f68:	13 96       	adiw	r26, 0x03	; 3
     f6a:	3c 93       	st	X, r19
     f6c:	2e 93       	st	-X, r18
     f6e:	12 97       	sbiw	r26, 0x02	; 2
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	8c 93       	st	X, r24
     f74:	87 e0       	ldi	r24, 0x07	; 7
     f76:	44 0f       	add	r20, r20
     f78:	55 1f       	adc	r21, r21
     f7a:	66 1f       	adc	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	8a 95       	dec	r24
     f80:	d1 f7       	brne	.-12     	; 0xf76 <__unpack_f+0xd4>
     f82:	70 64       	ori	r23, 0x40	; 64
     f84:	14 96       	adiw	r26, 0x04	; 4
     f86:	4d 93       	st	X+, r20
     f88:	5d 93       	st	X+, r21
     f8a:	6d 93       	st	X+, r22
     f8c:	7c 93       	st	X, r23
     f8e:	17 97       	sbiw	r26, 0x07	; 7
     f90:	08 95       	ret

00000f92 <__fpcmp_parts_f>:
     f92:	1f 93       	push	r17
     f94:	dc 01       	movw	r26, r24
     f96:	fb 01       	movw	r30, r22
     f98:	9c 91       	ld	r25, X
     f9a:	92 30       	cpi	r25, 0x02	; 2
     f9c:	08 f4       	brcc	.+2      	; 0xfa0 <__fpcmp_parts_f+0xe>
     f9e:	47 c0       	rjmp	.+142    	; 0x102e <__fpcmp_parts_f+0x9c>
     fa0:	80 81       	ld	r24, Z
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	08 f4       	brcc	.+2      	; 0xfa8 <__fpcmp_parts_f+0x16>
     fa6:	43 c0       	rjmp	.+134    	; 0x102e <__fpcmp_parts_f+0x9c>
     fa8:	94 30       	cpi	r25, 0x04	; 4
     faa:	51 f4       	brne	.+20     	; 0xfc0 <__fpcmp_parts_f+0x2e>
     fac:	11 96       	adiw	r26, 0x01	; 1
     fae:	1c 91       	ld	r17, X
     fb0:	84 30       	cpi	r24, 0x04	; 4
     fb2:	99 f5       	brne	.+102    	; 0x101a <__fpcmp_parts_f+0x88>
     fb4:	81 81       	ldd	r24, Z+1	; 0x01
     fb6:	68 2f       	mov	r22, r24
     fb8:	70 e0       	ldi	r23, 0x00	; 0
     fba:	61 1b       	sub	r22, r17
     fbc:	71 09       	sbc	r23, r1
     fbe:	3f c0       	rjmp	.+126    	; 0x103e <__fpcmp_parts_f+0xac>
     fc0:	84 30       	cpi	r24, 0x04	; 4
     fc2:	21 f0       	breq	.+8      	; 0xfcc <__fpcmp_parts_f+0x3a>
     fc4:	92 30       	cpi	r25, 0x02	; 2
     fc6:	31 f4       	brne	.+12     	; 0xfd4 <__fpcmp_parts_f+0x42>
     fc8:	82 30       	cpi	r24, 0x02	; 2
     fca:	b9 f1       	breq	.+110    	; 0x103a <__fpcmp_parts_f+0xa8>
     fcc:	81 81       	ldd	r24, Z+1	; 0x01
     fce:	88 23       	and	r24, r24
     fd0:	89 f1       	breq	.+98     	; 0x1034 <__fpcmp_parts_f+0xa2>
     fd2:	2d c0       	rjmp	.+90     	; 0x102e <__fpcmp_parts_f+0x9c>
     fd4:	11 96       	adiw	r26, 0x01	; 1
     fd6:	1c 91       	ld	r17, X
     fd8:	11 97       	sbiw	r26, 0x01	; 1
     fda:	82 30       	cpi	r24, 0x02	; 2
     fdc:	f1 f0       	breq	.+60     	; 0x101a <__fpcmp_parts_f+0x88>
     fde:	81 81       	ldd	r24, Z+1	; 0x01
     fe0:	18 17       	cp	r17, r24
     fe2:	d9 f4       	brne	.+54     	; 0x101a <__fpcmp_parts_f+0x88>
     fe4:	12 96       	adiw	r26, 0x02	; 2
     fe6:	2d 91       	ld	r18, X+
     fe8:	3c 91       	ld	r19, X
     fea:	13 97       	sbiw	r26, 0x03	; 3
     fec:	82 81       	ldd	r24, Z+2	; 0x02
     fee:	93 81       	ldd	r25, Z+3	; 0x03
     ff0:	82 17       	cp	r24, r18
     ff2:	93 07       	cpc	r25, r19
     ff4:	94 f0       	brlt	.+36     	; 0x101a <__fpcmp_parts_f+0x88>
     ff6:	28 17       	cp	r18, r24
     ff8:	39 07       	cpc	r19, r25
     ffa:	bc f0       	brlt	.+46     	; 0x102a <__fpcmp_parts_f+0x98>
     ffc:	14 96       	adiw	r26, 0x04	; 4
     ffe:	8d 91       	ld	r24, X+
    1000:	9d 91       	ld	r25, X+
    1002:	0d 90       	ld	r0, X+
    1004:	bc 91       	ld	r27, X
    1006:	a0 2d       	mov	r26, r0
    1008:	24 81       	ldd	r18, Z+4	; 0x04
    100a:	35 81       	ldd	r19, Z+5	; 0x05
    100c:	46 81       	ldd	r20, Z+6	; 0x06
    100e:	57 81       	ldd	r21, Z+7	; 0x07
    1010:	28 17       	cp	r18, r24
    1012:	39 07       	cpc	r19, r25
    1014:	4a 07       	cpc	r20, r26
    1016:	5b 07       	cpc	r21, r27
    1018:	18 f4       	brcc	.+6      	; 0x1020 <__fpcmp_parts_f+0x8e>
    101a:	11 23       	and	r17, r17
    101c:	41 f0       	breq	.+16     	; 0x102e <__fpcmp_parts_f+0x9c>
    101e:	0a c0       	rjmp	.+20     	; 0x1034 <__fpcmp_parts_f+0xa2>
    1020:	82 17       	cp	r24, r18
    1022:	93 07       	cpc	r25, r19
    1024:	a4 07       	cpc	r26, r20
    1026:	b5 07       	cpc	r27, r21
    1028:	40 f4       	brcc	.+16     	; 0x103a <__fpcmp_parts_f+0xa8>
    102a:	11 23       	and	r17, r17
    102c:	19 f0       	breq	.+6      	; 0x1034 <__fpcmp_parts_f+0xa2>
    102e:	61 e0       	ldi	r22, 0x01	; 1
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	05 c0       	rjmp	.+10     	; 0x103e <__fpcmp_parts_f+0xac>
    1034:	6f ef       	ldi	r22, 0xFF	; 255
    1036:	7f ef       	ldi	r23, 0xFF	; 255
    1038:	02 c0       	rjmp	.+4      	; 0x103e <__fpcmp_parts_f+0xac>
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	cb 01       	movw	r24, r22
    1040:	1f 91       	pop	r17
    1042:	08 95       	ret

00001044 <GPIO_setupPinDirection>:
/*
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <GPIO_setupPinDirection+0x6>
    104a:	00 d0       	rcall	.+0      	; 0x104c <GPIO_setupPinDirection+0x8>
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	89 83       	std	Y+1, r24	; 0x01
    1054:	6a 83       	std	Y+2, r22	; 0x02
    1056:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1058:	8a 81       	ldd	r24, Y+2	; 0x02
    105a:	88 30       	cpi	r24, 0x08	; 8
    105c:	08 f0       	brcs	.+2      	; 0x1060 <GPIO_setupPinDirection+0x1c>
    105e:	d5 c0       	rjmp	.+426    	; 0x120a <GPIO_setupPinDirection+0x1c6>
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	84 30       	cpi	r24, 0x04	; 4
    1064:	08 f0       	brcs	.+2      	; 0x1068 <GPIO_setupPinDirection+0x24>
    1066:	d1 c0       	rjmp	.+418    	; 0x120a <GPIO_setupPinDirection+0x1c6>
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1068:	89 81       	ldd	r24, Y+1	; 0x01
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	3d 83       	std	Y+5, r19	; 0x05
    1070:	2c 83       	std	Y+4, r18	; 0x04
    1072:	8c 81       	ldd	r24, Y+4	; 0x04
    1074:	9d 81       	ldd	r25, Y+5	; 0x05
    1076:	81 30       	cpi	r24, 0x01	; 1
    1078:	91 05       	cpc	r25, r1
    107a:	09 f4       	brne	.+2      	; 0x107e <GPIO_setupPinDirection+0x3a>
    107c:	43 c0       	rjmp	.+134    	; 0x1104 <GPIO_setupPinDirection+0xc0>
    107e:	2c 81       	ldd	r18, Y+4	; 0x04
    1080:	3d 81       	ldd	r19, Y+5	; 0x05
    1082:	22 30       	cpi	r18, 0x02	; 2
    1084:	31 05       	cpc	r19, r1
    1086:	2c f4       	brge	.+10     	; 0x1092 <GPIO_setupPinDirection+0x4e>
    1088:	8c 81       	ldd	r24, Y+4	; 0x04
    108a:	9d 81       	ldd	r25, Y+5	; 0x05
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	71 f0       	breq	.+28     	; 0x10ac <GPIO_setupPinDirection+0x68>
    1090:	bc c0       	rjmp	.+376    	; 0x120a <GPIO_setupPinDirection+0x1c6>
    1092:	2c 81       	ldd	r18, Y+4	; 0x04
    1094:	3d 81       	ldd	r19, Y+5	; 0x05
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	09 f4       	brne	.+2      	; 0x109e <GPIO_setupPinDirection+0x5a>
    109c:	5f c0       	rjmp	.+190    	; 0x115c <GPIO_setupPinDirection+0x118>
    109e:	8c 81       	ldd	r24, Y+4	; 0x04
    10a0:	9d 81       	ldd	r25, Y+5	; 0x05
    10a2:	83 30       	cpi	r24, 0x03	; 3
    10a4:	91 05       	cpc	r25, r1
    10a6:	09 f4       	brne	.+2      	; 0x10aa <GPIO_setupPinDirection+0x66>
    10a8:	85 c0       	rjmp	.+266    	; 0x11b4 <GPIO_setupPinDirection+0x170>
    10aa:	af c0       	rjmp	.+350    	; 0x120a <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRA,pin_num);
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	a1 f4       	brne	.+40     	; 0x10da <GPIO_setupPinDirection+0x96>
    10b2:	aa e3       	ldi	r26, 0x3A	; 58
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	ea e3       	ldi	r30, 0x3A	; 58
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <GPIO_setupPinDirection+0x8c>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <GPIO_setupPinDirection+0x88>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	98 c0       	rjmp	.+304    	; 0x120a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRA,pin_num);
    10da:	aa e3       	ldi	r26, 0x3A	; 58
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ea e3       	ldi	r30, 0x3A	; 58
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <GPIO_setupPinDirection+0xb4>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <GPIO_setupPinDirection+0xb0>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	83 c0       	rjmp	.+262    	; 0x120a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRB,pin_num);
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	a1 f4       	brne	.+40     	; 0x1132 <GPIO_setupPinDirection+0xee>
    110a:	a7 e3       	ldi	r26, 0x37	; 55
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e7 e3       	ldi	r30, 0x37	; 55
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_setupPinDirection+0xe4>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_setupPinDirection+0xe0>
    112c:	84 2b       	or	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	6c c0       	rjmp	.+216    	; 0x120a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRB,pin_num);
    1132:	a7 e3       	ldi	r26, 0x37	; 55
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e7 e3       	ldi	r30, 0x37	; 55
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <GPIO_setupPinDirection+0x10c>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <GPIO_setupPinDirection+0x108>
    1154:	80 95       	com	r24
    1156:	84 23       	and	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	57 c0       	rjmp	.+174    	; 0x120a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRC,pin_num);
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	a1 f4       	brne	.+40     	; 0x118a <GPIO_setupPinDirection+0x146>
    1162:	a4 e3       	ldi	r26, 0x34	; 52
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e4 e3       	ldi	r30, 0x34	; 52
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_setupPinDirection+0x13c>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_setupPinDirection+0x138>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	40 c0       	rjmp	.+128    	; 0x120a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRC,pin_num);
    118a:	a4 e3       	ldi	r26, 0x34	; 52
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e4 e3       	ldi	r30, 0x34	; 52
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <GPIO_setupPinDirection+0x164>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <GPIO_setupPinDirection+0x160>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
    11b2:	2b c0       	rjmp	.+86     	; 0x120a <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRD,pin_num);
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	a1 f4       	brne	.+40     	; 0x11e2 <GPIO_setupPinDirection+0x19e>
    11ba:	a1 e3       	ldi	r26, 0x31	; 49
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e1 e3       	ldi	r30, 0x31	; 49
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <GPIO_setupPinDirection+0x194>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <GPIO_setupPinDirection+0x190>
    11dc:	84 2b       	or	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	14 c0       	rjmp	.+40     	; 0x120a <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRD,pin_num);
    11e2:	a1 e3       	ldi	r26, 0x31	; 49
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e1 e3       	ldi	r30, 0x31	; 49
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <GPIO_setupPinDirection+0x1bc>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <GPIO_setupPinDirection+0x1b8>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
			break;
		}
	}
}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	0f 90       	pop	r0
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	00 d0       	rcall	.+0      	; 0x1220 <GPIO_writePin+0x6>
    1220:	00 d0       	rcall	.+0      	; 0x1222 <GPIO_writePin+0x8>
    1222:	0f 92       	push	r0
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
    122c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	88 30       	cpi	r24, 0x08	; 8
    1232:	08 f0       	brcs	.+2      	; 0x1236 <GPIO_writePin+0x1c>
    1234:	e4 c0       	rjmp	.+456    	; 0x13fe <GPIO_writePin+0x1e4>
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	84 30       	cpi	r24, 0x04	; 4
    123a:	08 f0       	brcs	.+2      	; 0x123e <GPIO_writePin+0x24>
    123c:	e0 c0       	rjmp	.+448    	; 0x13fe <GPIO_writePin+0x1e4>
	{
		/* Set up the pin value as required */
		switch (port_num)
    123e:	89 81       	ldd	r24, Y+1	; 0x01
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	3d 83       	std	Y+5, r19	; 0x05
    1246:	2c 83       	std	Y+4, r18	; 0x04
    1248:	8c 81       	ldd	r24, Y+4	; 0x04
    124a:	9d 81       	ldd	r25, Y+5	; 0x05
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	91 05       	cpc	r25, r1
    1250:	09 f4       	brne	.+2      	; 0x1254 <GPIO_writePin+0x3a>
    1252:	47 c0       	rjmp	.+142    	; 0x12e2 <GPIO_writePin+0xc8>
    1254:	2c 81       	ldd	r18, Y+4	; 0x04
    1256:	3d 81       	ldd	r19, Y+5	; 0x05
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	2c f4       	brge	.+10     	; 0x1268 <GPIO_writePin+0x4e>
    125e:	8c 81       	ldd	r24, Y+4	; 0x04
    1260:	9d 81       	ldd	r25, Y+5	; 0x05
    1262:	00 97       	sbiw	r24, 0x00	; 0
    1264:	71 f0       	breq	.+28     	; 0x1282 <GPIO_writePin+0x68>
    1266:	cb c0       	rjmp	.+406    	; 0x13fe <GPIO_writePin+0x1e4>
    1268:	2c 81       	ldd	r18, Y+4	; 0x04
    126a:	3d 81       	ldd	r19, Y+5	; 0x05
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	09 f4       	brne	.+2      	; 0x1274 <GPIO_writePin+0x5a>
    1272:	67 c0       	rjmp	.+206    	; 0x1342 <GPIO_writePin+0x128>
    1274:	8c 81       	ldd	r24, Y+4	; 0x04
    1276:	9d 81       	ldd	r25, Y+5	; 0x05
    1278:	83 30       	cpi	r24, 0x03	; 3
    127a:	91 05       	cpc	r25, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <GPIO_writePin+0x66>
    127e:	91 c0       	rjmp	.+290    	; 0x13a2 <GPIO_writePin+0x188>
    1280:	be c0       	rjmp	.+380    	; 0x13fe <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTA, pin_num);
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	88 23       	and	r24, r24
    1286:	a9 f4       	brne	.+42     	; 0x12b2 <GPIO_writePin+0x98>
    1288:	ab e3       	ldi	r26, 0x3B	; 59
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	eb e3       	ldi	r30, 0x3B	; 59
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_writePin+0x8c>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_writePin+0x88>
    12aa:	80 95       	com	r24
    12ac:	84 23       	and	r24, r20
    12ae:	8c 93       	st	X, r24
    12b0:	a6 c0       	rjmp	.+332    	; 0x13fe <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTA, pin_num);
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	81 30       	cpi	r24, 0x01	; 1
    12b6:	09 f0       	breq	.+2      	; 0x12ba <GPIO_writePin+0xa0>
    12b8:	a2 c0       	rjmp	.+324    	; 0x13fe <GPIO_writePin+0x1e4>
    12ba:	ab e3       	ldi	r26, 0x3B	; 59
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	eb e3       	ldi	r30, 0x3B	; 59
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	48 2f       	mov	r20, r24
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	28 2f       	mov	r18, r24
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	02 2e       	mov	r0, r18
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <GPIO_writePin+0xbe>
    12d4:	88 0f       	add	r24, r24
    12d6:	99 1f       	adc	r25, r25
    12d8:	0a 94       	dec	r0
    12da:	e2 f7       	brpl	.-8      	; 0x12d4 <GPIO_writePin+0xba>
    12dc:	84 2b       	or	r24, r20
    12de:	8c 93       	st	X, r24
    12e0:	8e c0       	rjmp	.+284    	; 0x13fe <GPIO_writePin+0x1e4>
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTB, pin_num);
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	88 23       	and	r24, r24
    12e6:	a9 f4       	brne	.+42     	; 0x1312 <GPIO_writePin+0xf8>
    12e8:	a8 e3       	ldi	r26, 0x38	; 56
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e8 e3       	ldi	r30, 0x38	; 56
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	48 2f       	mov	r20, r24
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	28 2f       	mov	r18, r24
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	02 2e       	mov	r0, r18
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <GPIO_writePin+0xec>
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	0a 94       	dec	r0
    1308:	e2 f7       	brpl	.-8      	; 0x1302 <GPIO_writePin+0xe8>
    130a:	80 95       	com	r24
    130c:	84 23       	and	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	76 c0       	rjmp	.+236    	; 0x13fe <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTB, pin_num);
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	81 30       	cpi	r24, 0x01	; 1
    1316:	09 f0       	breq	.+2      	; 0x131a <GPIO_writePin+0x100>
    1318:	72 c0       	rjmp	.+228    	; 0x13fe <GPIO_writePin+0x1e4>
    131a:	a8 e3       	ldi	r26, 0x38	; 56
    131c:	b0 e0       	ldi	r27, 0x00	; 0
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	80 81       	ld	r24, Z
    1324:	48 2f       	mov	r20, r24
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	02 2e       	mov	r0, r18
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <GPIO_writePin+0x11e>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	0a 94       	dec	r0
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <GPIO_writePin+0x11a>
    133c:	84 2b       	or	r24, r20
    133e:	8c 93       	st	X, r24
    1340:	5e c0       	rjmp	.+188    	; 0x13fe <GPIO_writePin+0x1e4>
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTC, pin_num);
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	88 23       	and	r24, r24
    1346:	a9 f4       	brne	.+42     	; 0x1372 <GPIO_writePin+0x158>
    1348:	a5 e3       	ldi	r26, 0x35	; 53
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	e5 e3       	ldi	r30, 0x35	; 53
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8a 81       	ldd	r24, Y+2	; 0x02
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <GPIO_writePin+0x14c>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <GPIO_writePin+0x148>
    136a:	80 95       	com	r24
    136c:	84 23       	and	r24, r20
    136e:	8c 93       	st	X, r24
    1370:	46 c0       	rjmp	.+140    	; 0x13fe <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTC, pin_num);
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	09 f0       	breq	.+2      	; 0x137a <GPIO_writePin+0x160>
    1378:	42 c0       	rjmp	.+132    	; 0x13fe <GPIO_writePin+0x1e4>
    137a:	a5 e3       	ldi	r26, 0x35	; 53
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	e5 e3       	ldi	r30, 0x35	; 53
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	48 2f       	mov	r20, r24
    1386:	8a 81       	ldd	r24, Y+2	; 0x02
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	02 2e       	mov	r0, r18
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <GPIO_writePin+0x17e>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <GPIO_writePin+0x17a>
    139c:	84 2b       	or	r24, r20
    139e:	8c 93       	st	X, r24
    13a0:	2e c0       	rjmp	.+92     	; 0x13fe <GPIO_writePin+0x1e4>
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTD, pin_num);
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 23       	and	r24, r24
    13a6:	a9 f4       	brne	.+42     	; 0x13d2 <GPIO_writePin+0x1b8>
    13a8:	a2 e3       	ldi	r26, 0x32	; 50
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	e2 e3       	ldi	r30, 0x32	; 50
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <GPIO_writePin+0x1ac>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <GPIO_writePin+0x1a8>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	16 c0       	rjmp	.+44     	; 0x13fe <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTD, pin_num);
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	99 f4       	brne	.+38     	; 0x13fe <GPIO_writePin+0x1e4>
    13d8:	a2 e3       	ldi	r26, 0x32	; 50
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	e2 e3       	ldi	r30, 0x32	; 50
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	48 2f       	mov	r20, r24
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	28 2f       	mov	r18, r24
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	02 2e       	mov	r0, r18
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <GPIO_writePin+0x1dc>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	0a 94       	dec	r0
    13f8:	e2 f7       	brpl	.-8      	; 0x13f2 <GPIO_writePin+0x1d8>
    13fa:	84 2b       	or	r24, r20
    13fc:	8c 93       	st	X, r24
			break;
		}
	}
}
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	0f 90       	pop	r0
    1408:	cf 91       	pop	r28
    140a:	df 91       	pop	r29
    140c:	08 95       	ret

0000140e <GPIO_readPin>:
/*
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    140e:	df 93       	push	r29
    1410:	cf 93       	push	r28
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	29 97       	sbiw	r28, 0x09	; 9
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	88 30       	cpi	r24, 0x08	; 8
    142a:	08 f0       	brcs	.+2      	; 0x142e <GPIO_readPin+0x20>
    142c:	8d c0       	rjmp	.+282    	; 0x1548 <GPIO_readPin+0x13a>
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	08 f0       	brcs	.+2      	; 0x1436 <GPIO_readPin+0x28>
    1434:	89 c0       	rjmp	.+274    	; 0x1548 <GPIO_readPin+0x13a>
	{
		/* Return the value of the desired pin as required */
		switch (port_num)
    1436:	89 81       	ldd	r24, Y+1	; 0x01
    1438:	28 2f       	mov	r18, r24
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	39 87       	std	Y+9, r19	; 0x09
    143e:	28 87       	std	Y+8, r18	; 0x08
    1440:	48 85       	ldd	r20, Y+8	; 0x08
    1442:	59 85       	ldd	r21, Y+9	; 0x09
    1444:	41 30       	cpi	r20, 0x01	; 1
    1446:	51 05       	cpc	r21, r1
    1448:	89 f1       	breq	.+98     	; 0x14ac <GPIO_readPin+0x9e>
    144a:	88 85       	ldd	r24, Y+8	; 0x08
    144c:	99 85       	ldd	r25, Y+9	; 0x09
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	91 05       	cpc	r25, r1
    1452:	34 f4       	brge	.+12     	; 0x1460 <GPIO_readPin+0x52>
    1454:	28 85       	ldd	r18, Y+8	; 0x08
    1456:	39 85       	ldd	r19, Y+9	; 0x09
    1458:	21 15       	cp	r18, r1
    145a:	31 05       	cpc	r19, r1
    145c:	69 f0       	breq	.+26     	; 0x1478 <GPIO_readPin+0x6a>
    145e:	74 c0       	rjmp	.+232    	; 0x1548 <GPIO_readPin+0x13a>
    1460:	48 85       	ldd	r20, Y+8	; 0x08
    1462:	59 85       	ldd	r21, Y+9	; 0x09
    1464:	42 30       	cpi	r20, 0x02	; 2
    1466:	51 05       	cpc	r21, r1
    1468:	d9 f1       	breq	.+118    	; 0x14e0 <GPIO_readPin+0xd2>
    146a:	88 85       	ldd	r24, Y+8	; 0x08
    146c:	99 85       	ldd	r25, Y+9	; 0x09
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	91 05       	cpc	r25, r1
    1472:	09 f4       	brne	.+2      	; 0x1476 <GPIO_readPin+0x68>
    1474:	4f c0       	rjmp	.+158    	; 0x1514 <GPIO_readPin+0x106>
    1476:	68 c0       	rjmp	.+208    	; 0x1548 <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			return (BIT_IS_SET(PINA, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1478:	e9 e3       	ldi	r30, 0x39	; 57
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	28 2f       	mov	r18, r24
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	88 2f       	mov	r24, r24
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	a9 01       	movw	r20, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <GPIO_readPin+0x82>
    148c:	55 95       	asr	r21
    148e:	47 95       	ror	r20
    1490:	8a 95       	dec	r24
    1492:	e2 f7       	brpl	.-8      	; 0x148c <GPIO_readPin+0x7e>
    1494:	ca 01       	movw	r24, r20
    1496:	81 70       	andi	r24, 0x01	; 1
    1498:	90 70       	andi	r25, 0x00	; 0
    149a:	88 23       	and	r24, r24
    149c:	19 f0       	breq	.+6      	; 0x14a4 <GPIO_readPin+0x96>
    149e:	51 e0       	ldi	r21, 0x01	; 1
    14a0:	5e 83       	std	Y+6, r21	; 0x06
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <GPIO_readPin+0x98>
    14a4:	1e 82       	std	Y+6, r1	; 0x06
    14a6:	8e 81       	ldd	r24, Y+6	; 0x06
    14a8:	8f 83       	std	Y+7, r24	; 0x07
    14aa:	4f c0       	rjmp	.+158    	; 0x154a <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    14ac:	e6 e3       	ldi	r30, 0x36	; 54
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	80 81       	ld	r24, Z
    14b2:	28 2f       	mov	r18, r24
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	88 2f       	mov	r24, r24
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	a9 01       	movw	r20, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_readPin+0xb6>
    14c0:	55 95       	asr	r21
    14c2:	47 95       	ror	r20
    14c4:	8a 95       	dec	r24
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_readPin+0xb2>
    14c8:	ca 01       	movw	r24, r20
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	88 23       	and	r24, r24
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <GPIO_readPin+0xca>
    14d2:	51 e0       	ldi	r21, 0x01	; 1
    14d4:	5d 83       	std	Y+5, r21	; 0x05
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <GPIO_readPin+0xcc>
    14d8:	1d 82       	std	Y+5, r1	; 0x05
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	8f 83       	std	Y+7, r24	; 0x07
    14de:	35 c0       	rjmp	.+106    	; 0x154a <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    14e0:	e3 e3       	ldi	r30, 0x33	; 51
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	a9 01       	movw	r20, r18
    14f2:	02 c0       	rjmp	.+4      	; 0x14f8 <GPIO_readPin+0xea>
    14f4:	55 95       	asr	r21
    14f6:	47 95       	ror	r20
    14f8:	8a 95       	dec	r24
    14fa:	e2 f7       	brpl	.-8      	; 0x14f4 <GPIO_readPin+0xe6>
    14fc:	ca 01       	movw	r24, r20
    14fe:	81 70       	andi	r24, 0x01	; 1
    1500:	90 70       	andi	r25, 0x00	; 0
    1502:	88 23       	and	r24, r24
    1504:	19 f0       	breq	.+6      	; 0x150c <GPIO_readPin+0xfe>
    1506:	51 e0       	ldi	r21, 0x01	; 1
    1508:	5c 83       	std	Y+4, r21	; 0x04
    150a:	01 c0       	rjmp	.+2      	; 0x150e <GPIO_readPin+0x100>
    150c:	1c 82       	std	Y+4, r1	; 0x04
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	8f 83       	std	Y+7, r24	; 0x07
    1512:	1b c0       	rjmp	.+54     	; 0x154a <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1514:	e0 e3       	ldi	r30, 0x30	; 48
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	28 2f       	mov	r18, r24
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	88 2f       	mov	r24, r24
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	a9 01       	movw	r20, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <GPIO_readPin+0x11e>
    1528:	55 95       	asr	r21
    152a:	47 95       	ror	r20
    152c:	8a 95       	dec	r24
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <GPIO_readPin+0x11a>
    1530:	ca 01       	movw	r24, r20
    1532:	81 70       	andi	r24, 0x01	; 1
    1534:	90 70       	andi	r25, 0x00	; 0
    1536:	88 23       	and	r24, r24
    1538:	19 f0       	breq	.+6      	; 0x1540 <GPIO_readPin+0x132>
    153a:	51 e0       	ldi	r21, 0x01	; 1
    153c:	5b 83       	std	Y+3, r21	; 0x03
    153e:	01 c0       	rjmp	.+2      	; 0x1542 <GPIO_readPin+0x134>
    1540:	1b 82       	std	Y+3, r1	; 0x03
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	8f 83       	std	Y+7, r24	; 0x07
    1546:	01 c0       	rjmp	.+2      	; 0x154a <GPIO_readPin+0x13c>
			break;
		}
	}
	return LOGIC_LOW;
    1548:	1f 82       	std	Y+7, r1	; 0x07
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
}
    154c:	29 96       	adiw	r28, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	de bf       	out	0x3e, r29	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	cd bf       	out	0x3d, r28	; 61
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_setupPortDirection+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_setupPortDirection+0x8>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	90 f5       	brcc	.+100    	; 0x15d8 <GPIO_setupPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port_num)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	d1 f0       	breq	.+52     	; 0x15bc <GPIO_setupPortDirection+0x5e>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	2c f4       	brge	.+10     	; 0x159c <GPIO_setupPortDirection+0x3e>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 f0       	breq	.+24     	; 0x15b2 <GPIO_setupPortDirection+0x54>
    159a:	1e c0       	rjmp	.+60     	; 0x15d8 <GPIO_setupPortDirection+0x7a>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <GPIO_setupPortDirection+0x68>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	81 f0       	breq	.+32     	; 0x15d0 <GPIO_setupPortDirection+0x72>
    15b0:	13 c0       	rjmp	.+38     	; 0x15d8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15b2:	ea e3       	ldi	r30, 0x3A	; 58
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15bc:	e7 e3       	ldi	r30, 0x37	; 55
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    15c6:	e4 e3       	ldi	r30, 0x34	; 52
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	80 83       	st	Z, r24
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    15d0:	e1 e3       	ldi	r30, 0x31	; 49
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
			break;
		}
	}
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_writePort+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_writePort+0x8>
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    15f6:	89 81       	ldd	r24, Y+1	; 0x01
    15f8:	84 30       	cpi	r24, 0x04	; 4
    15fa:	90 f5       	brcc	.+100    	; 0x1660 <GPIO_writePort+0x7a>
	{
		/* Setup the port value as required */
		switch(port_num)
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	3c 83       	std	Y+4, r19	; 0x04
    1604:	2b 83       	std	Y+3, r18	; 0x03
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	9c 81       	ldd	r25, Y+4	; 0x04
    160a:	81 30       	cpi	r24, 0x01	; 1
    160c:	91 05       	cpc	r25, r1
    160e:	d1 f0       	breq	.+52     	; 0x1644 <GPIO_writePort+0x5e>
    1610:	2b 81       	ldd	r18, Y+3	; 0x03
    1612:	3c 81       	ldd	r19, Y+4	; 0x04
    1614:	22 30       	cpi	r18, 0x02	; 2
    1616:	31 05       	cpc	r19, r1
    1618:	2c f4       	brge	.+10     	; 0x1624 <GPIO_writePort+0x3e>
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	9c 81       	ldd	r25, Y+4	; 0x04
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	61 f0       	breq	.+24     	; 0x163a <GPIO_writePort+0x54>
    1622:	1e c0       	rjmp	.+60     	; 0x1660 <GPIO_writePort+0x7a>
    1624:	2b 81       	ldd	r18, Y+3	; 0x03
    1626:	3c 81       	ldd	r19, Y+4	; 0x04
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	31 05       	cpc	r19, r1
    162c:	81 f0       	breq	.+32     	; 0x164e <GPIO_writePort+0x68>
    162e:	8b 81       	ldd	r24, Y+3	; 0x03
    1630:	9c 81       	ldd	r25, Y+4	; 0x04
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	91 05       	cpc	r25, r1
    1636:	81 f0       	breq	.+32     	; 0x1658 <GPIO_writePort+0x72>
    1638:	13 c0       	rjmp	.+38     	; 0x1660 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    163a:	eb e3       	ldi	r30, 0x3B	; 59
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	80 83       	st	Z, r24
    1642:	0e c0       	rjmp	.+28     	; 0x1660 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1644:	e8 e3       	ldi	r30, 0x38	; 56
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	80 83       	st	Z, r24
    164c:	09 c0       	rjmp	.+18     	; 0x1660 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    164e:	e5 e3       	ldi	r30, 0x35	; 53
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	8a 81       	ldd	r24, Y+2	; 0x02
    1654:	80 83       	st	Z, r24
    1656:	04 c0       	rjmp	.+8      	; 0x1660 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1658:	e2 e3       	ldi	r30, 0x32	; 50
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <GPIO_readPort>:
/*
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	00 d0       	rcall	.+0      	; 0x1674 <GPIO_readPort+0x6>
    1674:	00 d0       	rcall	.+0      	; 0x1676 <GPIO_readPort+0x8>
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
	if(port_num < NUM_OF_PORTS)
    167c:	89 81       	ldd	r24, Y+1	; 0x01
    167e:	84 30       	cpi	r24, 0x04	; 4
    1680:	98 f5       	brcc	.+102    	; 0x16e8 <GPIO_readPort+0x7a>
	{
		/* Return the value of the desired port as required */
		switch(port_num)
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	3c 83       	std	Y+4, r19	; 0x04
    168a:	2b 83       	std	Y+3, r18	; 0x03
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	81 30       	cpi	r24, 0x01	; 1
    1692:	91 05       	cpc	r25, r1
    1694:	d1 f0       	breq	.+52     	; 0x16ca <GPIO_readPort+0x5c>
    1696:	2b 81       	ldd	r18, Y+3	; 0x03
    1698:	3c 81       	ldd	r19, Y+4	; 0x04
    169a:	22 30       	cpi	r18, 0x02	; 2
    169c:	31 05       	cpc	r19, r1
    169e:	2c f4       	brge	.+10     	; 0x16aa <GPIO_readPort+0x3c>
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	00 97       	sbiw	r24, 0x00	; 0
    16a6:	61 f0       	breq	.+24     	; 0x16c0 <GPIO_readPort+0x52>
    16a8:	1f c0       	rjmp	.+62     	; 0x16e8 <GPIO_readPort+0x7a>
    16aa:	2b 81       	ldd	r18, Y+3	; 0x03
    16ac:	3c 81       	ldd	r19, Y+4	; 0x04
    16ae:	22 30       	cpi	r18, 0x02	; 2
    16b0:	31 05       	cpc	r19, r1
    16b2:	81 f0       	breq	.+32     	; 0x16d4 <GPIO_readPort+0x66>
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	83 30       	cpi	r24, 0x03	; 3
    16ba:	91 05       	cpc	r25, r1
    16bc:	81 f0       	breq	.+32     	; 0x16de <GPIO_readPort+0x70>
    16be:	14 c0       	rjmp	.+40     	; 0x16e8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    16c0:	e9 e3       	ldi	r30, 0x39	; 57
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	90 81       	ld	r25, Z
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	10 c0       	rjmp	.+32     	; 0x16ea <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    16ca:	e6 e3       	ldi	r30, 0x36	; 54
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	20 81       	ld	r18, Z
    16d0:	2a 83       	std	Y+2, r18	; 0x02
    16d2:	0b c0       	rjmp	.+22     	; 0x16ea <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    16d4:	e3 e3       	ldi	r30, 0x33	; 51
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	30 81       	ld	r19, Z
    16da:	3a 83       	std	Y+2, r19	; 0x02
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    16de:	e0 e3       	ldi	r30, 0x30	; 48
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    16e8:	1a 82       	std	Y+2, r1	; 0x02
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
}
    16ec:	0f 90       	pop	r0
    16ee:	0f 90       	pop	r0
    16f0:	0f 90       	pop	r0
    16f2:	0f 90       	pop	r0
    16f4:	cf 91       	pop	r28
    16f6:	df 91       	pop	r29
    16f8:	08 95       	ret

000016fa <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
    1702:	60 97       	sbiw	r28, 0x10	; 16
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	61 e0       	ldi	r22, 0x01	; 1
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1722:	83 e0       	ldi	r24, 0x03	; 3
    1724:	62 e0       	ldi	r22, 0x02	; 2
    1726:	40 e0       	ldi	r20, 0x00	; 0
    1728:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    172c:	83 e0       	ldi	r24, 0x03	; 3
    172e:	63 e0       	ldi	r22, 0x03	; 3
    1730:	40 e0       	ldi	r20, 0x00	; 0
    1732:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1736:	83 e0       	ldi	r24, 0x03	; 3
    1738:	64 e0       	ldi	r22, 0x04	; 4
    173a:	40 e0       	ldi	r20, 0x00	; 0
    173c:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1740:	83 e0       	ldi	r24, 0x03	; 3
    1742:	65 e0       	ldi	r22, 0x05	; 5
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    174a:	83 e0       	ldi	r24, 0x03	; 3
    174c:	66 e0       	ldi	r22, 0x06	; 6
    174e:	40 e0       	ldi	r20, 0x00	; 0
    1750:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	67 e0       	ldi	r22, 0x07	; 7
    1758:	40 e0       	ldi	r20, 0x00	; 0
    175a:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    175e:	1f 86       	std	Y+15, r1	; 0x0f
    1760:	ab c0       	rjmp	.+342    	; 0x18b8 <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1762:	83 e0       	ldi	r24, 0x03	; 3
    1764:	6f 85       	ldd	r22, Y+15	; 0x0f
    1766:	41 e0       	ldi	r20, 0x01	; 1
    1768:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    176c:	83 e0       	ldi	r24, 0x03	; 3
    176e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1776:	18 8a       	std	Y+16, r1	; 0x10
    1778:	22 c0       	rjmp	.+68     	; 0x17be <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    177a:	88 89       	ldd	r24, Y+16	; 0x10
    177c:	98 2f       	mov	r25, r24
    177e:	9c 5f       	subi	r25, 0xFC	; 252
    1780:	83 e0       	ldi	r24, 0x03	; 3
    1782:	69 2f       	mov	r22, r25
    1784:	0e 94 07 0a 	call	0x140e	; 0x140e <GPIO_readPin>
    1788:	88 23       	and	r24, r24
    178a:	b1 f4       	brne	.+44     	; 0x17b8 <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    178c:	8f 85       	ldd	r24, Y+15	; 0x0f
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	88 0f       	add	r24, r24
    1794:	99 1f       	adc	r25, r25
    1796:	88 0f       	add	r24, r24
    1798:	99 1f       	adc	r25, r25
    179a:	98 2f       	mov	r25, r24
    179c:	88 89       	ldd	r24, Y+16	; 0x10
    179e:	89 0f       	add	r24, r25
    17a0:	8f 5f       	subi	r24, 0xFF	; 255
    17a2:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    17a6:	60 96       	adiw	r28, 0x10	; 16
    17a8:	0f b6       	in	r0, 0x3f	; 63
    17aa:	f8 94       	cli
    17ac:	de bf       	out	0x3e, r29	; 62
    17ae:	0f be       	out	0x3f, r0	; 63
    17b0:	cd bf       	out	0x3d, r28	; 61
    17b2:	cf 91       	pop	r28
    17b4:	df 91       	pop	r29
    17b6:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    17b8:	88 89       	ldd	r24, Y+16	; 0x10
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	88 8b       	std	Y+16, r24	; 0x10
    17be:	88 89       	ldd	r24, Y+16	; 0x10
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	d8 f2       	brcs	.-74     	; 0x177a <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    17c4:	83 e0       	ldi	r24, 0x03	; 3
    17c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    17c8:	40 e0       	ldi	r20, 0x00	; 0
    17ca:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
    17ce:	80 e0       	ldi	r24, 0x00	; 0
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a0 ea       	ldi	r26, 0xA0	; 160
    17d4:	b0 e4       	ldi	r27, 0x40	; 64
    17d6:	8b 87       	std	Y+11, r24	; 0x0b
    17d8:	9c 87       	std	Y+12, r25	; 0x0c
    17da:	ad 87       	std	Y+13, r26	; 0x0d
    17dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17de:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	4a e7       	ldi	r20, 0x7A	; 122
    17ec:	53 e4       	ldi	r21, 0x43	; 67
    17ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	8f 83       	std	Y+7, r24	; 0x07
    17f8:	98 87       	std	Y+8, r25	; 0x08
    17fa:	a9 87       	std	Y+9, r26	; 0x09
    17fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1800:	78 85       	ldd	r23, Y+8	; 0x08
    1802:	89 85       	ldd	r24, Y+9	; 0x09
    1804:	9a 85       	ldd	r25, Y+10	; 0x0a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e8       	ldi	r20, 0x80	; 128
    180c:	5f e3       	ldi	r21, 0x3F	; 63
    180e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1812:	88 23       	and	r24, r24
    1814:	2c f4       	brge	.+10     	; 0x1820 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	8d 83       	std	Y+5, r24	; 0x05
    181e:	3f c0       	rjmp	.+126    	; 0x189e <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1820:	6f 81       	ldd	r22, Y+7	; 0x07
    1822:	78 85       	ldd	r23, Y+8	; 0x08
    1824:	89 85       	ldd	r24, Y+9	; 0x09
    1826:	9a 85       	ldd	r25, Y+10	; 0x0a
    1828:	20 e0       	ldi	r18, 0x00	; 0
    182a:	3f ef       	ldi	r19, 0xFF	; 255
    182c:	4f e7       	ldi	r20, 0x7F	; 127
    182e:	57 e4       	ldi	r21, 0x47	; 71
    1830:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1834:	18 16       	cp	r1, r24
    1836:	4c f5       	brge	.+82     	; 0x188a <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1838:	6b 85       	ldd	r22, Y+11	; 0x0b
    183a:	7c 85       	ldd	r23, Y+12	; 0x0c
    183c:	8d 85       	ldd	r24, Y+13	; 0x0d
    183e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1840:	20 e0       	ldi	r18, 0x00	; 0
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	40 e2       	ldi	r20, 0x20	; 32
    1846:	51 e4       	ldi	r21, 0x41	; 65
    1848:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    184c:	dc 01       	movw	r26, r24
    184e:	cb 01       	movw	r24, r22
    1850:	bc 01       	movw	r22, r24
    1852:	cd 01       	movw	r24, r26
    1854:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9e 83       	std	Y+6, r25	; 0x06
    185e:	8d 83       	std	Y+5, r24	; 0x05
    1860:	0f c0       	rjmp	.+30     	; 0x1880 <KEYPAD_getPressedKey+0x186>
    1862:	89 e1       	ldi	r24, 0x19	; 25
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	9c 83       	std	Y+4, r25	; 0x04
    1868:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	9c 81       	ldd	r25, Y+4	; 0x04
    186e:	01 97       	sbiw	r24, 0x01	; 1
    1870:	f1 f7       	brne	.-4      	; 0x186e <KEYPAD_getPressedKey+0x174>
    1872:	9c 83       	std	Y+4, r25	; 0x04
    1874:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1876:	8d 81       	ldd	r24, Y+5	; 0x05
    1878:	9e 81       	ldd	r25, Y+6	; 0x06
    187a:	01 97       	sbiw	r24, 0x01	; 1
    187c:	9e 83       	std	Y+6, r25	; 0x06
    187e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	69 f7       	brne	.-38     	; 0x1862 <KEYPAD_getPressedKey+0x168>
    1888:	14 c0       	rjmp	.+40     	; 0x18b2 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    188a:	6f 81       	ldd	r22, Y+7	; 0x07
    188c:	78 85       	ldd	r23, Y+8	; 0x08
    188e:	89 85       	ldd	r24, Y+9	; 0x09
    1890:	9a 85       	ldd	r25, Y+10	; 0x0a
    1892:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1896:	dc 01       	movw	r26, r24
    1898:	cb 01       	movw	r24, r22
    189a:	9e 83       	std	Y+6, r25	; 0x06
    189c:	8d 83       	std	Y+5, r24	; 0x05
    189e:	8d 81       	ldd	r24, Y+5	; 0x05
    18a0:	9e 81       	ldd	r25, Y+6	; 0x06
    18a2:	9a 83       	std	Y+2, r25	; 0x02
    18a4:	89 83       	std	Y+1, r24	; 0x01
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	01 97       	sbiw	r24, 0x01	; 1
    18ac:	f1 f7       	brne	.-4      	; 0x18aa <KEYPAD_getPressedKey+0x1b0>
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    18b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b4:	8f 5f       	subi	r24, 0xFF	; 255
    18b6:	8f 87       	std	Y+15, r24	; 0x0f
    18b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ba:	84 30       	cpi	r24, 0x04	; 4
    18bc:	08 f4       	brcc	.+2      	; 0x18c0 <KEYPAD_getPressedKey+0x1c6>
    18be:	51 cf       	rjmp	.-350    	; 0x1762 <KEYPAD_getPressedKey+0x68>
    18c0:	4e cf       	rjmp	.-356    	; 0x175e <KEYPAD_getPressedKey+0x64>

000018c2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <KEYPAD_4x4_adjustKeyNumber+0x8>
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    18d0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    18d2:	8a 81       	ldd	r24, Y+2	; 0x02
    18d4:	28 2f       	mov	r18, r24
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	3c 83       	std	Y+4, r19	; 0x04
    18da:	2b 83       	std	Y+3, r18	; 0x03
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	88 30       	cpi	r24, 0x08	; 8
    18e2:	91 05       	cpc	r25, r1
    18e4:	09 f4       	brne	.+2      	; 0x18e8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    18e6:	70 c0       	rjmp	.+224    	; 0x19c8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    18e8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ea:	3c 81       	ldd	r19, Y+4	; 0x04
    18ec:	29 30       	cpi	r18, 0x09	; 9
    18ee:	31 05       	cpc	r19, r1
    18f0:	5c f5       	brge	.+86     	; 0x1948 <KEYPAD_4x4_adjustKeyNumber+0x86>
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	9c 81       	ldd	r25, Y+4	; 0x04
    18f6:	84 30       	cpi	r24, 0x04	; 4
    18f8:	91 05       	cpc	r25, r1
    18fa:	09 f4       	brne	.+2      	; 0x18fe <KEYPAD_4x4_adjustKeyNumber+0x3c>
    18fc:	59 c0       	rjmp	.+178    	; 0x19b0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    18fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1900:	3c 81       	ldd	r19, Y+4	; 0x04
    1902:	25 30       	cpi	r18, 0x05	; 5
    1904:	31 05       	cpc	r19, r1
    1906:	9c f4       	brge	.+38     	; 0x192e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1908:	8b 81       	ldd	r24, Y+3	; 0x03
    190a:	9c 81       	ldd	r25, Y+4	; 0x04
    190c:	82 30       	cpi	r24, 0x02	; 2
    190e:	91 05       	cpc	r25, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1912:	48 c0       	rjmp	.+144    	; 0x19a4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1914:	2b 81       	ldd	r18, Y+3	; 0x03
    1916:	3c 81       	ldd	r19, Y+4	; 0x04
    1918:	23 30       	cpi	r18, 0x03	; 3
    191a:	31 05       	cpc	r19, r1
    191c:	0c f0       	brlt	.+2      	; 0x1920 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    191e:	45 c0       	rjmp	.+138    	; 0x19aa <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	9c 81       	ldd	r25, Y+4	; 0x04
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	91 05       	cpc	r25, r1
    1928:	09 f4       	brne	.+2      	; 0x192c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    192a:	39 c0       	rjmp	.+114    	; 0x199e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    192c:	67 c0       	rjmp	.+206    	; 0x19fc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    192e:	2b 81       	ldd	r18, Y+3	; 0x03
    1930:	3c 81       	ldd	r19, Y+4	; 0x04
    1932:	26 30       	cpi	r18, 0x06	; 6
    1934:	31 05       	cpc	r19, r1
    1936:	09 f4       	brne	.+2      	; 0x193a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1938:	41 c0       	rjmp	.+130    	; 0x19bc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    193a:	8b 81       	ldd	r24, Y+3	; 0x03
    193c:	9c 81       	ldd	r25, Y+4	; 0x04
    193e:	87 30       	cpi	r24, 0x07	; 7
    1940:	91 05       	cpc	r25, r1
    1942:	0c f0       	brlt	.+2      	; 0x1946 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1944:	3e c0       	rjmp	.+124    	; 0x19c2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1946:	37 c0       	rjmp	.+110    	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1948:	2b 81       	ldd	r18, Y+3	; 0x03
    194a:	3c 81       	ldd	r19, Y+4	; 0x04
    194c:	2c 30       	cpi	r18, 0x0C	; 12
    194e:	31 05       	cpc	r19, r1
    1950:	09 f4       	brne	.+2      	; 0x1954 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1952:	46 c0       	rjmp	.+140    	; 0x19e0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1954:	8b 81       	ldd	r24, Y+3	; 0x03
    1956:	9c 81       	ldd	r25, Y+4	; 0x04
    1958:	8d 30       	cpi	r24, 0x0D	; 13
    195a:	91 05       	cpc	r25, r1
    195c:	5c f4       	brge	.+22     	; 0x1974 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    195e:	2b 81       	ldd	r18, Y+3	; 0x03
    1960:	3c 81       	ldd	r19, Y+4	; 0x04
    1962:	2a 30       	cpi	r18, 0x0A	; 10
    1964:	31 05       	cpc	r19, r1
    1966:	b1 f1       	breq	.+108    	; 0x19d4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1968:	8b 81       	ldd	r24, Y+3	; 0x03
    196a:	9c 81       	ldd	r25, Y+4	; 0x04
    196c:	8b 30       	cpi	r24, 0x0B	; 11
    196e:	91 05       	cpc	r25, r1
    1970:	a4 f5       	brge	.+104    	; 0x19da <KEYPAD_4x4_adjustKeyNumber+0x118>
    1972:	2d c0       	rjmp	.+90     	; 0x19ce <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1974:	2b 81       	ldd	r18, Y+3	; 0x03
    1976:	3c 81       	ldd	r19, Y+4	; 0x04
    1978:	2e 30       	cpi	r18, 0x0E	; 14
    197a:	31 05       	cpc	r19, r1
    197c:	b9 f1       	breq	.+110    	; 0x19ec <KEYPAD_4x4_adjustKeyNumber+0x12a>
    197e:	8b 81       	ldd	r24, Y+3	; 0x03
    1980:	9c 81       	ldd	r25, Y+4	; 0x04
    1982:	8e 30       	cpi	r24, 0x0E	; 14
    1984:	91 05       	cpc	r25, r1
    1986:	7c f1       	brlt	.+94     	; 0x19e6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1988:	2b 81       	ldd	r18, Y+3	; 0x03
    198a:	3c 81       	ldd	r19, Y+4	; 0x04
    198c:	2f 30       	cpi	r18, 0x0F	; 15
    198e:	31 05       	cpc	r19, r1
    1990:	79 f1       	breq	.+94     	; 0x19f0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	80 31       	cpi	r24, 0x10	; 16
    1998:	91 05       	cpc	r25, r1
    199a:	69 f1       	breq	.+90     	; 0x19f6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    199c:	2f c0       	rjmp	.+94     	; 0x19fc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    199e:	87 e0       	ldi	r24, 0x07	; 7
    19a0:	89 83       	std	Y+1, r24	; 0x01
    19a2:	2e c0       	rjmp	.+92     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    19a4:	88 e0       	ldi	r24, 0x08	; 8
    19a6:	89 83       	std	Y+1, r24	; 0x01
    19a8:	2b c0       	rjmp	.+86     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    19aa:	89 e0       	ldi	r24, 0x09	; 9
    19ac:	89 83       	std	Y+1, r24	; 0x01
    19ae:	28 c0       	rjmp	.+80     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    19b0:	85 e2       	ldi	r24, 0x25	; 37
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	25 c0       	rjmp	.+74     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	22 c0       	rjmp	.+68     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    19bc:	85 e0       	ldi	r24, 0x05	; 5
    19be:	89 83       	std	Y+1, r24	; 0x01
    19c0:	1f c0       	rjmp	.+62     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    19c2:	86 e0       	ldi	r24, 0x06	; 6
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	1c c0       	rjmp	.+56     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    19c8:	8a e2       	ldi	r24, 0x2A	; 42
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	19 c0       	rjmp	.+50     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	89 83       	std	Y+1, r24	; 0x01
    19d2:	16 c0       	rjmp	.+44     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    19d4:	82 e0       	ldi	r24, 0x02	; 2
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	13 c0       	rjmp	.+38     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    19da:	83 e0       	ldi	r24, 0x03	; 3
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	10 c0       	rjmp	.+32     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    19e0:	8d e2       	ldi	r24, 0x2D	; 45
    19e2:	89 83       	std	Y+1, r24	; 0x01
    19e4:	0d c0       	rjmp	.+26     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    19e6:	8d e0       	ldi	r24, 0x0D	; 13
    19e8:	89 83       	std	Y+1, r24	; 0x01
    19ea:	0a c0       	rjmp	.+20     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    19ec:	19 82       	std	Y+1, r1	; 0x01
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    19f0:	8d e3       	ldi	r24, 0x3D	; 61
    19f2:	89 83       	std	Y+1, r24	; 0x01
    19f4:	05 c0       	rjmp	.+10     	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    19f6:	8b e2       	ldi	r24, 0x2B	; 43
    19f8:	89 83       	std	Y+1, r24	; 0x01
    19fa:	02 c0       	rjmp	.+4      	; 0x1a00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	2e 97       	sbiw	r28, 0x0e	; 14
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	60 e0       	ldi	r22, 0x00	; 0
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	61 e0       	ldi	r22, 0x01	; 1
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	a0 ea       	ldi	r26, 0xA0	; 160
    1a3e:	b1 e4       	ldi	r27, 0x41	; 65
    1a40:	8b 87       	std	Y+11, r24	; 0x0b
    1a42:	9c 87       	std	Y+12, r25	; 0x0c
    1a44:	ad 87       	std	Y+13, r26	; 0x0d
    1a46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a e7       	ldi	r20, 0x7A	; 122
    1a56:	53 e4       	ldi	r21, 0x43	; 67
    1a58:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8f 83       	std	Y+7, r24	; 0x07
    1a62:	98 87       	std	Y+8, r25	; 0x08
    1a64:	a9 87       	std	Y+9, r26	; 0x09
    1a66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	40 e8       	ldi	r20, 0x80	; 128
    1a76:	5f e3       	ldi	r21, 0x3F	; 63
    1a78:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1a7c:	88 23       	and	r24, r24
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <LCD_init+0x7a>
		__ticks = 1;
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	9e 83       	std	Y+6, r25	; 0x06
    1a86:	8d 83       	std	Y+5, r24	; 0x05
    1a88:	3f c0       	rjmp	.+126    	; 0x1b08 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	3f ef       	ldi	r19, 0xFF	; 255
    1a96:	4f e7       	ldi	r20, 0x7F	; 127
    1a98:	57 e4       	ldi	r21, 0x47	; 71
    1a9a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1a9e:	18 16       	cp	r1, r24
    1aa0:	4c f5       	brge	.+82     	; 0x1af4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aa2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e2       	ldi	r20, 0x20	; 32
    1ab0:	51 e4       	ldi	r21, 0x41	; 65
    1ab2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ab6:	dc 01       	movw	r26, r24
    1ab8:	cb 01       	movw	r24, r22
    1aba:	bc 01       	movw	r22, r24
    1abc:	cd 01       	movw	r24, r26
    1abe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1ac2:	dc 01       	movw	r26, r24
    1ac4:	cb 01       	movw	r24, r22
    1ac6:	9e 83       	std	Y+6, r25	; 0x06
    1ac8:	8d 83       	std	Y+5, r24	; 0x05
    1aca:	0f c0       	rjmp	.+30     	; 0x1aea <LCD_init+0xda>
    1acc:	89 e1       	ldi	r24, 0x19	; 25
    1ace:	90 e0       	ldi	r25, 0x00	; 0
    1ad0:	9c 83       	std	Y+4, r25	; 0x04
    1ad2:	8b 83       	std	Y+3, r24	; 0x03
    1ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_init+0xc8>
    1adc:	9c 83       	std	Y+4, r25	; 0x04
    1ade:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae4:	01 97       	sbiw	r24, 0x01	; 1
    1ae6:	9e 83       	std	Y+6, r25	; 0x06
    1ae8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aea:	8d 81       	ldd	r24, Y+5	; 0x05
    1aec:	9e 81       	ldd	r25, Y+6	; 0x06
    1aee:	00 97       	sbiw	r24, 0x00	; 0
    1af0:	69 f7       	brne	.-38     	; 0x1acc <LCD_init+0xbc>
    1af2:	14 c0       	rjmp	.+40     	; 0x1b1c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af4:	6f 81       	ldd	r22, Y+7	; 0x07
    1af6:	78 85       	ldd	r23, Y+8	; 0x08
    1af8:	89 85       	ldd	r24, Y+9	; 0x09
    1afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1afc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	9a 81       	ldd	r25, Y+2	; 0x02
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <LCD_init+0x104>
    1b18:	9a 83       	std	Y+2, r25	; 0x02
    1b1a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1b1c:	82 e0       	ldi	r24, 0x02	; 2
    1b1e:	64 e0       	ldi	r22, 0x04	; 4
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	65 e0       	ldi	r22, 0x05	; 5
    1b2a:	41 e0       	ldi	r20, 0x01	; 1
    1b2c:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1b30:	82 e0       	ldi	r24, 0x02	; 2
    1b32:	66 e0       	ldi	r22, 0x06	; 6
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1b3a:	82 e0       	ldi	r24, 0x02	; 2
    1b3c:	67 e0       	ldi	r22, 0x07	; 7
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 22 08 	call	0x1044	; 0x1044 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1b44:	83 e3       	ldi	r24, 0x33	; 51
    1b46:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1b4a:	82 e3       	ldi	r24, 0x32	; 50
    1b4c:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1b50:	88 e2       	ldi	r24, 0x28	; 40
    1b52:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b56:	8c e0       	ldi	r24, 0x0C	; 12
    1b58:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_sendCommand>
}
    1b62:	2e 96       	adiw	r28, 0x0e	; 14
    1b64:	0f b6       	in	r0, 0x3f	; 63
    1b66:	f8 94       	cli
    1b68:	de bf       	out	0x3e, r29	; 62
    1b6a:	0f be       	out	0x3f, r0	; 63
    1b6c:	cd bf       	out	0x3d, r28	; 61
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b74:	0f 93       	push	r16
    1b76:	1f 93       	push	r17
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	cd b7       	in	r28, 0x3d	; 61
    1b7e:	de b7       	in	r29, 0x3e	; 62
    1b80:	c3 56       	subi	r28, 0x63	; 99
    1b82:	d0 40       	sbci	r29, 0x00	; 0
    1b84:	0f b6       	in	r0, 0x3f	; 63
    1b86:	f8 94       	cli
    1b88:	de bf       	out	0x3e, r29	; 62
    1b8a:	0f be       	out	0x3f, r0	; 63
    1b8c:	cd bf       	out	0x3d, r28	; 61
    1b8e:	fe 01       	movw	r30, r28
    1b90:	ed 59       	subi	r30, 0x9D	; 157
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b96:	82 e0       	ldi	r24, 0x02	; 2
    1b98:	60 e0       	ldi	r22, 0x00	; 0
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e1 5a       	subi	r30, 0xA1	; 161
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 e0       	ldi	r24, 0x00	; 0
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	a0 e8       	ldi	r26, 0x80	; 128
    1bac:	bf e3       	ldi	r27, 0x3F	; 63
    1bae:	80 83       	st	Z, r24
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	a2 83       	std	Z+2, r26	; 0x02
    1bb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb6:	8e 01       	movw	r16, r28
    1bb8:	05 5a       	subi	r16, 0xA5	; 165
    1bba:	1f 4f       	sbci	r17, 0xFF	; 255
    1bbc:	fe 01       	movw	r30, r28
    1bbe:	e1 5a       	subi	r30, 0xA1	; 161
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	60 81       	ld	r22, Z
    1bc4:	71 81       	ldd	r23, Z+1	; 0x01
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	93 81       	ldd	r25, Z+3	; 0x03
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	4a e7       	ldi	r20, 0x7A	; 122
    1bd0:	53 e4       	ldi	r21, 0x43	; 67
    1bd2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	f8 01       	movw	r30, r16
    1bdc:	80 83       	st	Z, r24
    1bde:	91 83       	std	Z+1, r25	; 0x01
    1be0:	a2 83       	std	Z+2, r26	; 0x02
    1be2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1be4:	fe 01       	movw	r30, r28
    1be6:	e5 5a       	subi	r30, 0xA5	; 165
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	60 81       	ld	r22, Z
    1bec:	71 81       	ldd	r23, Z+1	; 0x01
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	93 81       	ldd	r25, Z+3	; 0x03
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	40 e8       	ldi	r20, 0x80	; 128
    1bf8:	5f e3       	ldi	r21, 0x3F	; 63
    1bfa:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1bfe:	88 23       	and	r24, r24
    1c00:	44 f4       	brge	.+16     	; 0x1c12 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1c02:	fe 01       	movw	r30, r28
    1c04:	e7 5a       	subi	r30, 0xA7	; 167
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	91 83       	std	Z+1, r25	; 0x01
    1c0e:	80 83       	st	Z, r24
    1c10:	64 c0       	rjmp	.+200    	; 0x1cda <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1c12:	fe 01       	movw	r30, r28
    1c14:	e5 5a       	subi	r30, 0xA5	; 165
    1c16:	ff 4f       	sbci	r31, 0xFF	; 255
    1c18:	60 81       	ld	r22, Z
    1c1a:	71 81       	ldd	r23, Z+1	; 0x01
    1c1c:	82 81       	ldd	r24, Z+2	; 0x02
    1c1e:	93 81       	ldd	r25, Z+3	; 0x03
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	3f ef       	ldi	r19, 0xFF	; 255
    1c24:	4f e7       	ldi	r20, 0x7F	; 127
    1c26:	57 e4       	ldi	r21, 0x47	; 71
    1c28:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1c2c:	18 16       	cp	r1, r24
    1c2e:	0c f0       	brlt	.+2      	; 0x1c32 <LCD_sendCommand+0xbe>
    1c30:	43 c0       	rjmp	.+134    	; 0x1cb8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c32:	fe 01       	movw	r30, r28
    1c34:	e1 5a       	subi	r30, 0xA1	; 161
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	8e 01       	movw	r16, r28
    1c52:	07 5a       	subi	r16, 0xA7	; 167
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	bc 01       	movw	r22, r24
    1c58:	cd 01       	movw	r24, r26
    1c5a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	f8 01       	movw	r30, r16
    1c64:	91 83       	std	Z+1, r25	; 0x01
    1c66:	80 83       	st	Z, r24
    1c68:	1f c0       	rjmp	.+62     	; 0x1ca8 <LCD_sendCommand+0x134>
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	e9 5a       	subi	r30, 0xA9	; 169
    1c6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c70:	89 e1       	ldi	r24, 0x19	; 25
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	80 83       	st	Z, r24
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e9 5a       	subi	r30, 0xA9	; 169
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	80 81       	ld	r24, Z
    1c80:	91 81       	ldd	r25, Z+1	; 0x01
    1c82:	01 97       	sbiw	r24, 0x01	; 1
    1c84:	f1 f7       	brne	.-4      	; 0x1c82 <LCD_sendCommand+0x10e>
    1c86:	fe 01       	movw	r30, r28
    1c88:	e9 5a       	subi	r30, 0xA9	; 169
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	91 83       	std	Z+1, r25	; 0x01
    1c8e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c90:	de 01       	movw	r26, r28
    1c92:	a7 5a       	subi	r26, 0xA7	; 167
    1c94:	bf 4f       	sbci	r27, 0xFF	; 255
    1c96:	fe 01       	movw	r30, r28
    1c98:	e7 5a       	subi	r30, 0xA7	; 167
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	80 81       	ld	r24, Z
    1c9e:	91 81       	ldd	r25, Z+1	; 0x01
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	9c 93       	st	X, r25
    1ca6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	e7 5a       	subi	r30, 0xA7	; 167
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 81       	ld	r24, Z
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	00 97       	sbiw	r24, 0x00	; 0
    1cb4:	d1 f6       	brne	.-76     	; 0x1c6a <LCD_sendCommand+0xf6>
    1cb6:	27 c0       	rjmp	.+78     	; 0x1d06 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb8:	8e 01       	movw	r16, r28
    1cba:	07 5a       	subi	r16, 0xA7	; 167
    1cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbe:	fe 01       	movw	r30, r28
    1cc0:	e5 5a       	subi	r30, 0xA5	; 165
    1cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc4:	60 81       	ld	r22, Z
    1cc6:	71 81       	ldd	r23, Z+1	; 0x01
    1cc8:	82 81       	ldd	r24, Z+2	; 0x02
    1cca:	93 81       	ldd	r25, Z+3	; 0x03
    1ccc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	f8 01       	movw	r30, r16
    1cd6:	91 83       	std	Z+1, r25	; 0x01
    1cd8:	80 83       	st	Z, r24
    1cda:	de 01       	movw	r26, r28
    1cdc:	ab 5a       	subi	r26, 0xAB	; 171
    1cde:	bf 4f       	sbci	r27, 0xFF	; 255
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e7 5a       	subi	r30, 0xA7	; 167
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	80 81       	ld	r24, Z
    1ce8:	91 81       	ldd	r25, Z+1	; 0x01
    1cea:	8d 93       	st	X+, r24
    1cec:	9c 93       	st	X, r25
    1cee:	fe 01       	movw	r30, r28
    1cf0:	eb 5a       	subi	r30, 0xAB	; 171
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_sendCommand+0x184>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	eb 5a       	subi	r30, 0xAB	; 171
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	61 e0       	ldi	r22, 0x01	; 1
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    1d10:	fe 01       	movw	r30, r28
    1d12:	ef 5a       	subi	r30, 0xAF	; 175
    1d14:	ff 4f       	sbci	r31, 0xFF	; 255
    1d16:	80 e0       	ldi	r24, 0x00	; 0
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e8       	ldi	r26, 0x80	; 128
    1d1c:	bf e3       	ldi	r27, 0x3F	; 63
    1d1e:	80 83       	st	Z, r24
    1d20:	91 83       	std	Z+1, r25	; 0x01
    1d22:	a2 83       	std	Z+2, r26	; 0x02
    1d24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d26:	8e 01       	movw	r16, r28
    1d28:	03 5b       	subi	r16, 0xB3	; 179
    1d2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2c:	fe 01       	movw	r30, r28
    1d2e:	ef 5a       	subi	r30, 0xAF	; 175
    1d30:	ff 4f       	sbci	r31, 0xFF	; 255
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a e7       	ldi	r20, 0x7A	; 122
    1d40:	53 e4       	ldi	r21, 0x43	; 67
    1d42:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	80 83       	st	Z, r24
    1d4e:	91 83       	std	Z+1, r25	; 0x01
    1d50:	a2 83       	std	Z+2, r26	; 0x02
    1d52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d54:	fe 01       	movw	r30, r28
    1d56:	e3 5b       	subi	r30, 0xB3	; 179
    1d58:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5a:	60 81       	ld	r22, Z
    1d5c:	71 81       	ldd	r23, Z+1	; 0x01
    1d5e:	82 81       	ldd	r24, Z+2	; 0x02
    1d60:	93 81       	ldd	r25, Z+3	; 0x03
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	5f e3       	ldi	r21, 0x3F	; 63
    1d6a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	44 f4       	brge	.+16     	; 0x1d82 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1d72:	fe 01       	movw	r30, r28
    1d74:	e5 5b       	subi	r30, 0xB5	; 181
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	91 83       	std	Z+1, r25	; 0x01
    1d7e:	80 83       	st	Z, r24
    1d80:	64 c0       	rjmp	.+200    	; 0x1e4a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1d82:	fe 01       	movw	r30, r28
    1d84:	e3 5b       	subi	r30, 0xB3	; 179
    1d86:	ff 4f       	sbci	r31, 0xFF	; 255
    1d88:	60 81       	ld	r22, Z
    1d8a:	71 81       	ldd	r23, Z+1	; 0x01
    1d8c:	82 81       	ldd	r24, Z+2	; 0x02
    1d8e:	93 81       	ldd	r25, Z+3	; 0x03
    1d90:	20 e0       	ldi	r18, 0x00	; 0
    1d92:	3f ef       	ldi	r19, 0xFF	; 255
    1d94:	4f e7       	ldi	r20, 0x7F	; 127
    1d96:	57 e4       	ldi	r21, 0x47	; 71
    1d98:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1d9c:	18 16       	cp	r1, r24
    1d9e:	0c f0       	brlt	.+2      	; 0x1da2 <LCD_sendCommand+0x22e>
    1da0:	43 c0       	rjmp	.+134    	; 0x1e28 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da2:	fe 01       	movw	r30, r28
    1da4:	ef 5a       	subi	r30, 0xAF	; 175
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	60 81       	ld	r22, Z
    1daa:	71 81       	ldd	r23, Z+1	; 0x01
    1dac:	82 81       	ldd	r24, Z+2	; 0x02
    1dae:	93 81       	ldd	r25, Z+3	; 0x03
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	8e 01       	movw	r16, r28
    1dc2:	05 5b       	subi	r16, 0xB5	; 181
    1dc4:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc6:	bc 01       	movw	r22, r24
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dce:	dc 01       	movw	r26, r24
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	91 83       	std	Z+1, r25	; 0x01
    1dd6:	80 83       	st	Z, r24
    1dd8:	1f c0       	rjmp	.+62     	; 0x1e18 <LCD_sendCommand+0x2a4>
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e7 5b       	subi	r30, 0xB7	; 183
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	89 e1       	ldi	r24, 0x19	; 25
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
    1de8:	fe 01       	movw	r30, r28
    1dea:	e7 5b       	subi	r30, 0xB7	; 183
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	91 81       	ldd	r25, Z+1	; 0x01
    1df2:	01 97       	sbiw	r24, 0x01	; 1
    1df4:	f1 f7       	brne	.-4      	; 0x1df2 <LCD_sendCommand+0x27e>
    1df6:	fe 01       	movw	r30, r28
    1df8:	e7 5b       	subi	r30, 0xB7	; 183
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	91 83       	std	Z+1, r25	; 0x01
    1dfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e00:	de 01       	movw	r26, r28
    1e02:	a5 5b       	subi	r26, 0xB5	; 181
    1e04:	bf 4f       	sbci	r27, 0xFF	; 255
    1e06:	fe 01       	movw	r30, r28
    1e08:	e5 5b       	subi	r30, 0xB5	; 181
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	11 96       	adiw	r26, 0x01	; 1
    1e14:	9c 93       	st	X, r25
    1e16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e18:	fe 01       	movw	r30, r28
    1e1a:	e5 5b       	subi	r30, 0xB5	; 181
    1e1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1e:	80 81       	ld	r24, Z
    1e20:	91 81       	ldd	r25, Z+1	; 0x01
    1e22:	00 97       	sbiw	r24, 0x00	; 0
    1e24:	d1 f6       	brne	.-76     	; 0x1dda <LCD_sendCommand+0x266>
    1e26:	27 c0       	rjmp	.+78     	; 0x1e76 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e28:	8e 01       	movw	r16, r28
    1e2a:	05 5b       	subi	r16, 0xB5	; 181
    1e2c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e3 5b       	subi	r30, 0xB3	; 179
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	60 81       	ld	r22, Z
    1e36:	71 81       	ldd	r23, Z+1	; 0x01
    1e38:	82 81       	ldd	r24, Z+2	; 0x02
    1e3a:	93 81       	ldd	r25, Z+3	; 0x03
    1e3c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	f8 01       	movw	r30, r16
    1e46:	91 83       	std	Z+1, r25	; 0x01
    1e48:	80 83       	st	Z, r24
    1e4a:	de 01       	movw	r26, r28
    1e4c:	a9 5b       	subi	r26, 0xB9	; 185
    1e4e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e50:	fe 01       	movw	r30, r28
    1e52:	e5 5b       	subi	r30, 0xB5	; 181
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	91 81       	ldd	r25, Z+1	; 0x01
    1e5a:	8d 93       	st	X+, r24
    1e5c:	9c 93       	st	X, r25
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e9 5b       	subi	r30, 0xB9	; 185
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	91 81       	ldd	r25, Z+1	; 0x01
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <LCD_sendCommand+0x2f4>
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e9 5b       	subi	r30, 0xB9	; 185
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1e76:	fe 01       	movw	r30, r28
    1e78:	ed 59       	subi	r30, 0x9D	; 157
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	80 81       	ld	r24, Z
    1e7e:	88 2f       	mov	r24, r24
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	80 71       	andi	r24, 0x10	; 16
    1e84:	90 70       	andi	r25, 0x00	; 0
    1e86:	95 95       	asr	r25
    1e88:	87 95       	ror	r24
    1e8a:	95 95       	asr	r25
    1e8c:	87 95       	ror	r24
    1e8e:	95 95       	asr	r25
    1e90:	87 95       	ror	r24
    1e92:	95 95       	asr	r25
    1e94:	87 95       	ror	r24
    1e96:	98 2f       	mov	r25, r24
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	64 e0       	ldi	r22, 0x04	; 4
    1e9c:	49 2f       	mov	r20, r25
    1e9e:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ed 59       	subi	r30, 0x9D	; 157
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	80 72       	andi	r24, 0x20	; 32
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	95 95       	asr	r25
    1ebc:	87 95       	ror	r24
    1ebe:	95 95       	asr	r25
    1ec0:	87 95       	ror	r24
    1ec2:	95 95       	asr	r25
    1ec4:	87 95       	ror	r24
    1ec6:	98 2f       	mov	r25, r24
    1ec8:	82 e0       	ldi	r24, 0x02	; 2
    1eca:	65 e0       	ldi	r22, 0x05	; 5
    1ecc:	49 2f       	mov	r20, r25
    1ece:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	ed 59       	subi	r30, 0x9D	; 157
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	88 2f       	mov	r24, r24
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	80 74       	andi	r24, 0x40	; 64
    1ee0:	90 70       	andi	r25, 0x00	; 0
    1ee2:	08 2e       	mov	r0, r24
    1ee4:	89 2f       	mov	r24, r25
    1ee6:	00 0c       	add	r0, r0
    1ee8:	88 1f       	adc	r24, r24
    1eea:	99 0b       	sbc	r25, r25
    1eec:	00 0c       	add	r0, r0
    1eee:	88 1f       	adc	r24, r24
    1ef0:	99 1f       	adc	r25, r25
    1ef2:	98 2f       	mov	r25, r24
    1ef4:	82 e0       	ldi	r24, 0x02	; 2
    1ef6:	66 e0       	ldi	r22, 0x06	; 6
    1ef8:	49 2f       	mov	r20, r25
    1efa:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1efe:	fe 01       	movw	r30, r28
    1f00:	ed 59       	subi	r30, 0x9D	; 157
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	80 81       	ld	r24, Z
    1f06:	98 2f       	mov	r25, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	99 27       	eor	r25, r25
    1f0c:	99 1f       	adc	r25, r25
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	67 e0       	ldi	r22, 0x07	; 7
    1f12:	49 2f       	mov	r20, r25
    1f14:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    1f18:	fe 01       	movw	r30, r28
    1f1a:	ed 5b       	subi	r30, 0xBD	; 189
    1f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	a0 e8       	ldi	r26, 0x80	; 128
    1f24:	bf e3       	ldi	r27, 0x3F	; 63
    1f26:	80 83       	st	Z, r24
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	a2 83       	std	Z+2, r26	; 0x02
    1f2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f2e:	8e 01       	movw	r16, r28
    1f30:	01 5c       	subi	r16, 0xC1	; 193
    1f32:	1f 4f       	sbci	r17, 0xFF	; 255
    1f34:	fe 01       	movw	r30, r28
    1f36:	ed 5b       	subi	r30, 0xBD	; 189
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4a e7       	ldi	r20, 0x7A	; 122
    1f48:	53 e4       	ldi	r21, 0x43	; 67
    1f4a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	f8 01       	movw	r30, r16
    1f54:	80 83       	st	Z, r24
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	a2 83       	std	Z+2, r26	; 0x02
    1f5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	ff 96       	adiw	r30, 0x3f	; 63
    1f60:	60 81       	ld	r22, Z
    1f62:	71 81       	ldd	r23, Z+1	; 0x01
    1f64:	82 81       	ldd	r24, Z+2	; 0x02
    1f66:	93 81       	ldd	r25, Z+3	; 0x03
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e8       	ldi	r20, 0x80	; 128
    1f6e:	5f e3       	ldi	r21, 0x3F	; 63
    1f70:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1f74:	88 23       	and	r24, r24
    1f76:	2c f4       	brge	.+10     	; 0x1f82 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1f78:	81 e0       	ldi	r24, 0x01	; 1
    1f7a:	90 e0       	ldi	r25, 0x00	; 0
    1f7c:	9e af       	std	Y+62, r25	; 0x3e
    1f7e:	8d af       	std	Y+61, r24	; 0x3d
    1f80:	46 c0       	rjmp	.+140    	; 0x200e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1f82:	fe 01       	movw	r30, r28
    1f84:	ff 96       	adiw	r30, 0x3f	; 63
    1f86:	60 81       	ld	r22, Z
    1f88:	71 81       	ldd	r23, Z+1	; 0x01
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	3f ef       	ldi	r19, 0xFF	; 255
    1f92:	4f e7       	ldi	r20, 0x7F	; 127
    1f94:	57 e4       	ldi	r21, 0x47	; 71
    1f96:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1f9a:	18 16       	cp	r1, r24
    1f9c:	64 f5       	brge	.+88     	; 0x1ff6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9e:	fe 01       	movw	r30, r28
    1fa0:	ed 5b       	subi	r30, 0xBD	; 189
    1fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa4:	60 81       	ld	r22, Z
    1fa6:	71 81       	ldd	r23, Z+1	; 0x01
    1fa8:	82 81       	ldd	r24, Z+2	; 0x02
    1faa:	93 81       	ldd	r25, Z+3	; 0x03
    1fac:	20 e0       	ldi	r18, 0x00	; 0
    1fae:	30 e0       	ldi	r19, 0x00	; 0
    1fb0:	40 e2       	ldi	r20, 0x20	; 32
    1fb2:	51 e4       	ldi	r21, 0x41	; 65
    1fb4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fb8:	dc 01       	movw	r26, r24
    1fba:	cb 01       	movw	r24, r22
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	9e af       	std	Y+62, r25	; 0x3e
    1fca:	8d af       	std	Y+61, r24	; 0x3d
    1fcc:	0f c0       	rjmp	.+30     	; 0x1fec <LCD_sendCommand+0x478>
    1fce:	89 e1       	ldi	r24, 0x19	; 25
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9c af       	std	Y+60, r25	; 0x3c
    1fd4:	8b af       	std	Y+59, r24	; 0x3b
    1fd6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1fd8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1fda:	01 97       	sbiw	r24, 0x01	; 1
    1fdc:	f1 f7       	brne	.-4      	; 0x1fda <LCD_sendCommand+0x466>
    1fde:	9c af       	std	Y+60, r25	; 0x3c
    1fe0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fe4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1fe6:	01 97       	sbiw	r24, 0x01	; 1
    1fe8:	9e af       	std	Y+62, r25	; 0x3e
    1fea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1fee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ff0:	00 97       	sbiw	r24, 0x00	; 0
    1ff2:	69 f7       	brne	.-38     	; 0x1fce <LCD_sendCommand+0x45a>
    1ff4:	16 c0       	rjmp	.+44     	; 0x2022 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ff 96       	adiw	r30, 0x3f	; 63
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e af       	std	Y+62, r25	; 0x3e
    200c:	8d af       	std	Y+61, r24	; 0x3d
    200e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2010:	9e ad       	ldd	r25, Y+62	; 0x3e
    2012:	9a af       	std	Y+58, r25	; 0x3a
    2014:	89 af       	std	Y+57, r24	; 0x39
    2016:	89 ad       	ldd	r24, Y+57	; 0x39
    2018:	9a ad       	ldd	r25, Y+58	; 0x3a
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_sendCommand+0x4a6>
    201e:	9a af       	std	Y+58, r25	; 0x3a
    2020:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	61 e0       	ldi	r22, 0x01	; 1
    2026:	40 e0       	ldi	r20, 0x00	; 0
    2028:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a0 e8       	ldi	r26, 0x80	; 128
    2032:	bf e3       	ldi	r27, 0x3F	; 63
    2034:	8d ab       	std	Y+53, r24	; 0x35
    2036:	9e ab       	std	Y+54, r25	; 0x36
    2038:	af ab       	std	Y+55, r26	; 0x37
    203a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203c:	6d a9       	ldd	r22, Y+53	; 0x35
    203e:	7e a9       	ldd	r23, Y+54	; 0x36
    2040:	8f a9       	ldd	r24, Y+55	; 0x37
    2042:	98 ad       	ldd	r25, Y+56	; 0x38
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	4a e7       	ldi	r20, 0x7A	; 122
    204a:	53 e4       	ldi	r21, 0x43	; 67
    204c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2050:	dc 01       	movw	r26, r24
    2052:	cb 01       	movw	r24, r22
    2054:	89 ab       	std	Y+49, r24	; 0x31
    2056:	9a ab       	std	Y+50, r25	; 0x32
    2058:	ab ab       	std	Y+51, r26	; 0x33
    205a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    205c:	69 a9       	ldd	r22, Y+49	; 0x31
    205e:	7a a9       	ldd	r23, Y+50	; 0x32
    2060:	8b a9       	ldd	r24, Y+51	; 0x33
    2062:	9c a9       	ldd	r25, Y+52	; 0x34
    2064:	20 e0       	ldi	r18, 0x00	; 0
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	40 e8       	ldi	r20, 0x80	; 128
    206a:	5f e3       	ldi	r21, 0x3F	; 63
    206c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2070:	88 23       	and	r24, r24
    2072:	2c f4       	brge	.+10     	; 0x207e <LCD_sendCommand+0x50a>
		__ticks = 1;
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	98 ab       	std	Y+48, r25	; 0x30
    207a:	8f a7       	std	Y+47, r24	; 0x2f
    207c:	3f c0       	rjmp	.+126    	; 0x20fc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    207e:	69 a9       	ldd	r22, Y+49	; 0x31
    2080:	7a a9       	ldd	r23, Y+50	; 0x32
    2082:	8b a9       	ldd	r24, Y+51	; 0x33
    2084:	9c a9       	ldd	r25, Y+52	; 0x34
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	3f ef       	ldi	r19, 0xFF	; 255
    208a:	4f e7       	ldi	r20, 0x7F	; 127
    208c:	57 e4       	ldi	r21, 0x47	; 71
    208e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2092:	18 16       	cp	r1, r24
    2094:	4c f5       	brge	.+82     	; 0x20e8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2096:	6d a9       	ldd	r22, Y+53	; 0x35
    2098:	7e a9       	ldd	r23, Y+54	; 0x36
    209a:	8f a9       	ldd	r24, Y+55	; 0x37
    209c:	98 ad       	ldd	r25, Y+56	; 0x38
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	98 ab       	std	Y+48, r25	; 0x30
    20bc:	8f a7       	std	Y+47, r24	; 0x2f
    20be:	0f c0       	rjmp	.+30     	; 0x20de <LCD_sendCommand+0x56a>
    20c0:	89 e1       	ldi	r24, 0x19	; 25
    20c2:	90 e0       	ldi	r25, 0x00	; 0
    20c4:	9e a7       	std	Y+46, r25	; 0x2e
    20c6:	8d a7       	std	Y+45, r24	; 0x2d
    20c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    20ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	f1 f7       	brne	.-4      	; 0x20cc <LCD_sendCommand+0x558>
    20d0:	9e a7       	std	Y+46, r25	; 0x2e
    20d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d6:	98 a9       	ldd	r25, Y+48	; 0x30
    20d8:	01 97       	sbiw	r24, 0x01	; 1
    20da:	98 ab       	std	Y+48, r25	; 0x30
    20dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	8f a5       	ldd	r24, Y+47	; 0x2f
    20e0:	98 a9       	ldd	r25, Y+48	; 0x30
    20e2:	00 97       	sbiw	r24, 0x00	; 0
    20e4:	69 f7       	brne	.-38     	; 0x20c0 <LCD_sendCommand+0x54c>
    20e6:	14 c0       	rjmp	.+40     	; 0x2110 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e8:	69 a9       	ldd	r22, Y+49	; 0x31
    20ea:	7a a9       	ldd	r23, Y+50	; 0x32
    20ec:	8b a9       	ldd	r24, Y+51	; 0x33
    20ee:	9c a9       	ldd	r25, Y+52	; 0x34
    20f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	98 ab       	std	Y+48, r25	; 0x30
    20fa:	8f a7       	std	Y+47, r24	; 0x2f
    20fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2100:	9c a7       	std	Y+44, r25	; 0x2c
    2102:	8b a7       	std	Y+43, r24	; 0x2b
    2104:	8b a5       	ldd	r24, Y+43	; 0x2b
    2106:	9c a5       	ldd	r25, Y+44	; 0x2c
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f1 f7       	brne	.-4      	; 0x2108 <LCD_sendCommand+0x594>
    210c:	9c a7       	std	Y+44, r25	; 0x2c
    210e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2110:	82 e0       	ldi	r24, 0x02	; 2
    2112:	61 e0       	ldi	r22, 0x01	; 1
    2114:	41 e0       	ldi	r20, 0x01	; 1
    2116:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	a0 e8       	ldi	r26, 0x80	; 128
    2120:	bf e3       	ldi	r27, 0x3F	; 63
    2122:	8f a3       	std	Y+39, r24	; 0x27
    2124:	98 a7       	std	Y+40, r25	; 0x28
    2126:	a9 a7       	std	Y+41, r26	; 0x29
    2128:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    212a:	6f a1       	ldd	r22, Y+39	; 0x27
    212c:	78 a5       	ldd	r23, Y+40	; 0x28
    212e:	89 a5       	ldd	r24, Y+41	; 0x29
    2130:	9a a5       	ldd	r25, Y+42	; 0x2a
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	4a e7       	ldi	r20, 0x7A	; 122
    2138:	53 e4       	ldi	r21, 0x43	; 67
    213a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    213e:	dc 01       	movw	r26, r24
    2140:	cb 01       	movw	r24, r22
    2142:	8b a3       	std	Y+35, r24	; 0x23
    2144:	9c a3       	std	Y+36, r25	; 0x24
    2146:	ad a3       	std	Y+37, r26	; 0x25
    2148:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    214a:	6b a1       	ldd	r22, Y+35	; 0x23
    214c:	7c a1       	ldd	r23, Y+36	; 0x24
    214e:	8d a1       	ldd	r24, Y+37	; 0x25
    2150:	9e a1       	ldd	r25, Y+38	; 0x26
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e8       	ldi	r20, 0x80	; 128
    2158:	5f e3       	ldi	r21, 0x3F	; 63
    215a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    215e:	88 23       	and	r24, r24
    2160:	2c f4       	brge	.+10     	; 0x216c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9a a3       	std	Y+34, r25	; 0x22
    2168:	89 a3       	std	Y+33, r24	; 0x21
    216a:	3f c0       	rjmp	.+126    	; 0x21ea <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    216c:	6b a1       	ldd	r22, Y+35	; 0x23
    216e:	7c a1       	ldd	r23, Y+36	; 0x24
    2170:	8d a1       	ldd	r24, Y+37	; 0x25
    2172:	9e a1       	ldd	r25, Y+38	; 0x26
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	3f ef       	ldi	r19, 0xFF	; 255
    2178:	4f e7       	ldi	r20, 0x7F	; 127
    217a:	57 e4       	ldi	r21, 0x47	; 71
    217c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2180:	18 16       	cp	r1, r24
    2182:	4c f5       	brge	.+82     	; 0x21d6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2184:	6f a1       	ldd	r22, Y+39	; 0x27
    2186:	78 a5       	ldd	r23, Y+40	; 0x28
    2188:	89 a5       	ldd	r24, Y+41	; 0x29
    218a:	9a a5       	ldd	r25, Y+42	; 0x2a
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e2       	ldi	r20, 0x20	; 32
    2192:	51 e4       	ldi	r21, 0x41	; 65
    2194:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	bc 01       	movw	r22, r24
    219e:	cd 01       	movw	r24, r26
    21a0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21a4:	dc 01       	movw	r26, r24
    21a6:	cb 01       	movw	r24, r22
    21a8:	9a a3       	std	Y+34, r25	; 0x22
    21aa:	89 a3       	std	Y+33, r24	; 0x21
    21ac:	0f c0       	rjmp	.+30     	; 0x21cc <LCD_sendCommand+0x658>
    21ae:	89 e1       	ldi	r24, 0x19	; 25
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	98 a3       	std	Y+32, r25	; 0x20
    21b4:	8f 8f       	std	Y+31, r24	; 0x1f
    21b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b8:	98 a1       	ldd	r25, Y+32	; 0x20
    21ba:	01 97       	sbiw	r24, 0x01	; 1
    21bc:	f1 f7       	brne	.-4      	; 0x21ba <LCD_sendCommand+0x646>
    21be:	98 a3       	std	Y+32, r25	; 0x20
    21c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c2:	89 a1       	ldd	r24, Y+33	; 0x21
    21c4:	9a a1       	ldd	r25, Y+34	; 0x22
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	9a a3       	std	Y+34, r25	; 0x22
    21ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21cc:	89 a1       	ldd	r24, Y+33	; 0x21
    21ce:	9a a1       	ldd	r25, Y+34	; 0x22
    21d0:	00 97       	sbiw	r24, 0x00	; 0
    21d2:	69 f7       	brne	.-38     	; 0x21ae <LCD_sendCommand+0x63a>
    21d4:	14 c0       	rjmp	.+40     	; 0x21fe <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d6:	6b a1       	ldd	r22, Y+35	; 0x23
    21d8:	7c a1       	ldd	r23, Y+36	; 0x24
    21da:	8d a1       	ldd	r24, Y+37	; 0x25
    21dc:	9e a1       	ldd	r25, Y+38	; 0x26
    21de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21e2:	dc 01       	movw	r26, r24
    21e4:	cb 01       	movw	r24, r22
    21e6:	9a a3       	std	Y+34, r25	; 0x22
    21e8:	89 a3       	std	Y+33, r24	; 0x21
    21ea:	89 a1       	ldd	r24, Y+33	; 0x21
    21ec:	9a a1       	ldd	r25, Y+34	; 0x22
    21ee:	9e 8f       	std	Y+30, r25	; 0x1e
    21f0:	8d 8f       	std	Y+29, r24	; 0x1d
    21f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	f1 f7       	brne	.-4      	; 0x21f6 <LCD_sendCommand+0x682>
    21fa:	9e 8f       	std	Y+30, r25	; 0x1e
    21fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    21fe:	fe 01       	movw	r30, r28
    2200:	ed 59       	subi	r30, 0x9D	; 157
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	98 2f       	mov	r25, r24
    2208:	91 70       	andi	r25, 0x01	; 1
    220a:	82 e0       	ldi	r24, 0x02	; 2
    220c:	64 e0       	ldi	r22, 0x04	; 4
    220e:	49 2f       	mov	r20, r25
    2210:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2214:	fe 01       	movw	r30, r28
    2216:	ed 59       	subi	r30, 0x9D	; 157
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	80 81       	ld	r24, Z
    221c:	88 2f       	mov	r24, r24
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	82 70       	andi	r24, 0x02	; 2
    2222:	90 70       	andi	r25, 0x00	; 0
    2224:	95 95       	asr	r25
    2226:	87 95       	ror	r24
    2228:	98 2f       	mov	r25, r24
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	65 e0       	ldi	r22, 0x05	; 5
    222e:	49 2f       	mov	r20, r25
    2230:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2234:	fe 01       	movw	r30, r28
    2236:	ed 59       	subi	r30, 0x9D	; 157
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	80 81       	ld	r24, Z
    223c:	88 2f       	mov	r24, r24
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	84 70       	andi	r24, 0x04	; 4
    2242:	90 70       	andi	r25, 0x00	; 0
    2244:	95 95       	asr	r25
    2246:	87 95       	ror	r24
    2248:	95 95       	asr	r25
    224a:	87 95       	ror	r24
    224c:	98 2f       	mov	r25, r24
    224e:	82 e0       	ldi	r24, 0x02	; 2
    2250:	66 e0       	ldi	r22, 0x06	; 6
    2252:	49 2f       	mov	r20, r25
    2254:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    2258:	fe 01       	movw	r30, r28
    225a:	ed 59       	subi	r30, 0x9D	; 157
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	88 2f       	mov	r24, r24
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	88 70       	andi	r24, 0x08	; 8
    2266:	90 70       	andi	r25, 0x00	; 0
    2268:	95 95       	asr	r25
    226a:	87 95       	ror	r24
    226c:	95 95       	asr	r25
    226e:	87 95       	ror	r24
    2270:	95 95       	asr	r25
    2272:	87 95       	ror	r24
    2274:	98 2f       	mov	r25, r24
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	67 e0       	ldi	r22, 0x07	; 7
    227a:	49 2f       	mov	r20, r25
    227c:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e8       	ldi	r26, 0x80	; 128
    2286:	bf e3       	ldi	r27, 0x3F	; 63
    2288:	89 8f       	std	Y+25, r24	; 0x19
    228a:	9a 8f       	std	Y+26, r25	; 0x1a
    228c:	ab 8f       	std	Y+27, r26	; 0x1b
    228e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	69 8d       	ldd	r22, Y+25	; 0x19
    2292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a e7       	ldi	r20, 0x7A	; 122
    229e:	53 e4       	ldi	r21, 0x43	; 67
    22a0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8d 8b       	std	Y+21, r24	; 0x15
    22aa:	9e 8b       	std	Y+22, r25	; 0x16
    22ac:	af 8b       	std	Y+23, r26	; 0x17
    22ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22b0:	6d 89       	ldd	r22, Y+21	; 0x15
    22b2:	7e 89       	ldd	r23, Y+22	; 0x16
    22b4:	8f 89       	ldd	r24, Y+23	; 0x17
    22b6:	98 8d       	ldd	r25, Y+24	; 0x18
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9c 8b       	std	Y+20, r25	; 0x14
    22ce:	8b 8b       	std	Y+19, r24	; 0x13
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	69 8d       	ldd	r22, Y+25	; 0x19
    22ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <LCD_sendCommand+0x7be>
    2314:	89 e1       	ldi	r24, 0x19	; 25
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9a 8b       	std	Y+18, r25	; 0x12
    231a:	89 8b       	std	Y+17, r24	; 0x11
    231c:	89 89       	ldd	r24, Y+17	; 0x11
    231e:	9a 89       	ldd	r25, Y+18	; 0x12
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_sendCommand+0x7ac>
    2324:	9a 8b       	std	Y+18, r25	; 0x12
    2326:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9c 8b       	std	Y+20, r25	; 0x14
    2330:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <LCD_sendCommand+0x7a0>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	6d 89       	ldd	r22, Y+21	; 0x15
    233e:	7e 89       	ldd	r23, Y+22	; 0x16
    2340:	8f 89       	ldd	r24, Y+23	; 0x17
    2342:	98 8d       	ldd	r25, Y+24	; 0x18
    2344:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9c 8b       	std	Y+20, r25	; 0x14
    234e:	8b 8b       	std	Y+19, r24	; 0x13
    2350:	8b 89       	ldd	r24, Y+19	; 0x13
    2352:	9c 89       	ldd	r25, Y+20	; 0x14
    2354:	98 8b       	std	Y+16, r25	; 0x10
    2356:	8f 87       	std	Y+15, r24	; 0x0f
    2358:	8f 85       	ldd	r24, Y+15	; 0x0f
    235a:	98 89       	ldd	r25, Y+16	; 0x10
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_sendCommand+0x7e8>
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	61 e0       	ldi	r22, 0x01	; 1
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e8       	ldi	r26, 0x80	; 128
    2374:	bf e3       	ldi	r27, 0x3F	; 63
    2376:	8b 87       	std	Y+11, r24	; 0x0b
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	ad 87       	std	Y+13, r26	; 0x0d
    237c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a e7       	ldi	r20, 0x7A	; 122
    238c:	53 e4       	ldi	r21, 0x43	; 67
    238e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8f 83       	std	Y+7, r24	; 0x07
    2398:	98 87       	std	Y+8, r25	; 0x08
    239a:	a9 87       	std	Y+9, r26	; 0x09
    239c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	3f c0       	rjmp	.+126    	; 0x243e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <LCD_sendCommand+0x8ac>
    2402:	89 e1       	ldi	r24, 0x19	; 25
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_sendCommand+0x89a>
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <LCD_sendCommand+0x88e>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_sendCommand+0x8d6>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2452:	cd 59       	subi	r28, 0x9D	; 157
    2454:	df 4f       	sbci	r29, 0xFF	; 255
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	08 95       	ret

0000246a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    246a:	0f 93       	push	r16
    246c:	1f 93       	push	r17
    246e:	df 93       	push	r29
    2470:	cf 93       	push	r28
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	c3 56       	subi	r28, 0x63	; 99
    2478:	d0 40       	sbci	r29, 0x00	; 0
    247a:	0f b6       	in	r0, 0x3f	; 63
    247c:	f8 94       	cli
    247e:	de bf       	out	0x3e, r29	; 62
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	cd bf       	out	0x3d, r28	; 61
    2484:	fe 01       	movw	r30, r28
    2486:	ed 59       	subi	r30, 0x9D	; 157
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	60 e0       	ldi	r22, 0x00	; 0
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    2496:	fe 01       	movw	r30, r28
    2498:	e1 5a       	subi	r30, 0xA1	; 161
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 e0       	ldi	r24, 0x00	; 0
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	a0 e8       	ldi	r26, 0x80	; 128
    24a2:	bf e3       	ldi	r27, 0x3F	; 63
    24a4:	80 83       	st	Z, r24
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	a2 83       	std	Z+2, r26	; 0x02
    24aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24ac:	8e 01       	movw	r16, r28
    24ae:	05 5a       	subi	r16, 0xA5	; 165
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	fe 01       	movw	r30, r28
    24b4:	e1 5a       	subi	r30, 0xA1	; 161
    24b6:	ff 4f       	sbci	r31, 0xFF	; 255
    24b8:	60 81       	ld	r22, Z
    24ba:	71 81       	ldd	r23, Z+1	; 0x01
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	4a e7       	ldi	r20, 0x7A	; 122
    24c6:	53 e4       	ldi	r21, 0x43	; 67
    24c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	f8 01       	movw	r30, r16
    24d2:	80 83       	st	Z, r24
    24d4:	91 83       	std	Z+1, r25	; 0x01
    24d6:	a2 83       	std	Z+2, r26	; 0x02
    24d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24da:	fe 01       	movw	r30, r28
    24dc:	e5 5a       	subi	r30, 0xA5	; 165
    24de:	ff 4f       	sbci	r31, 0xFF	; 255
    24e0:	60 81       	ld	r22, Z
    24e2:	71 81       	ldd	r23, Z+1	; 0x01
    24e4:	82 81       	ldd	r24, Z+2	; 0x02
    24e6:	93 81       	ldd	r25, Z+3	; 0x03
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	44 f4       	brge	.+16     	; 0x2508 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    24f8:	fe 01       	movw	r30, r28
    24fa:	e7 5a       	subi	r30, 0xA7	; 167
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	91 83       	std	Z+1, r25	; 0x01
    2504:	80 83       	st	Z, r24
    2506:	64 c0       	rjmp	.+200    	; 0x25d0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2508:	fe 01       	movw	r30, r28
    250a:	e5 5a       	subi	r30, 0xA5	; 165
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	60 81       	ld	r22, Z
    2510:	71 81       	ldd	r23, Z+1	; 0x01
    2512:	82 81       	ldd	r24, Z+2	; 0x02
    2514:	93 81       	ldd	r25, Z+3	; 0x03
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	3f ef       	ldi	r19, 0xFF	; 255
    251a:	4f e7       	ldi	r20, 0x7F	; 127
    251c:	57 e4       	ldi	r21, 0x47	; 71
    251e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2522:	18 16       	cp	r1, r24
    2524:	0c f0       	brlt	.+2      	; 0x2528 <LCD_displayCharacter+0xbe>
    2526:	43 c0       	rjmp	.+134    	; 0x25ae <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2528:	fe 01       	movw	r30, r28
    252a:	e1 5a       	subi	r30, 0xA1	; 161
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	51 e4       	ldi	r21, 0x41	; 65
    253e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	8e 01       	movw	r16, r28
    2548:	07 5a       	subi	r16, 0xA7	; 167
    254a:	1f 4f       	sbci	r17, 0xFF	; 255
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	f8 01       	movw	r30, r16
    255a:	91 83       	std	Z+1, r25	; 0x01
    255c:	80 83       	st	Z, r24
    255e:	1f c0       	rjmp	.+62     	; 0x259e <LCD_displayCharacter+0x134>
    2560:	fe 01       	movw	r30, r28
    2562:	e9 5a       	subi	r30, 0xA9	; 169
    2564:	ff 4f       	sbci	r31, 0xFF	; 255
    2566:	89 e1       	ldi	r24, 0x19	; 25
    2568:	90 e0       	ldi	r25, 0x00	; 0
    256a:	91 83       	std	Z+1, r25	; 0x01
    256c:	80 83       	st	Z, r24
    256e:	fe 01       	movw	r30, r28
    2570:	e9 5a       	subi	r30, 0xA9	; 169
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	80 81       	ld	r24, Z
    2576:	91 81       	ldd	r25, Z+1	; 0x01
    2578:	01 97       	sbiw	r24, 0x01	; 1
    257a:	f1 f7       	brne	.-4      	; 0x2578 <LCD_displayCharacter+0x10e>
    257c:	fe 01       	movw	r30, r28
    257e:	e9 5a       	subi	r30, 0xA9	; 169
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	91 83       	std	Z+1, r25	; 0x01
    2584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2586:	de 01       	movw	r26, r28
    2588:	a7 5a       	subi	r26, 0xA7	; 167
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e7 5a       	subi	r30, 0xA7	; 167
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	fe 01       	movw	r30, r28
    25a0:	e7 5a       	subi	r30, 0xA7	; 167
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	d1 f6       	brne	.-76     	; 0x2560 <LCD_displayCharacter+0xf6>
    25ac:	27 c0       	rjmp	.+78     	; 0x25fc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	8e 01       	movw	r16, r28
    25b0:	07 5a       	subi	r16, 0xA7	; 167
    25b2:	1f 4f       	sbci	r17, 0xFF	; 255
    25b4:	fe 01       	movw	r30, r28
    25b6:	e5 5a       	subi	r30, 0xA5	; 165
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	f8 01       	movw	r30, r16
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
    25d0:	de 01       	movw	r26, r28
    25d2:	ab 5a       	subi	r26, 0xAB	; 171
    25d4:	bf 4f       	sbci	r27, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e7 5a       	subi	r30, 0xA7	; 167
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	8d 93       	st	X+, r24
    25e2:	9c 93       	st	X, r25
    25e4:	fe 01       	movw	r30, r28
    25e6:	eb 5a       	subi	r30, 0xAB	; 171
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_displayCharacter+0x184>
    25f2:	fe 01       	movw	r30, r28
    25f4:	eb 5a       	subi	r30, 0xAB	; 171
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    25fc:	82 e0       	ldi	r24, 0x02	; 2
    25fe:	61 e0       	ldi	r22, 0x01	; 1
    2600:	41 e0       	ldi	r20, 0x01	; 1
    2602:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    2606:	fe 01       	movw	r30, r28
    2608:	ef 5a       	subi	r30, 0xAF	; 175
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a0 e8       	ldi	r26, 0x80	; 128
    2612:	bf e3       	ldi	r27, 0x3F	; 63
    2614:	80 83       	st	Z, r24
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	a2 83       	std	Z+2, r26	; 0x02
    261a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261c:	8e 01       	movw	r16, r28
    261e:	03 5b       	subi	r16, 0xB3	; 179
    2620:	1f 4f       	sbci	r17, 0xFF	; 255
    2622:	fe 01       	movw	r30, r28
    2624:	ef 5a       	subi	r30, 0xAF	; 175
    2626:	ff 4f       	sbci	r31, 0xFF	; 255
    2628:	60 81       	ld	r22, Z
    262a:	71 81       	ldd	r23, Z+1	; 0x01
    262c:	82 81       	ldd	r24, Z+2	; 0x02
    262e:	93 81       	ldd	r25, Z+3	; 0x03
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	4a e7       	ldi	r20, 0x7A	; 122
    2636:	53 e4       	ldi	r21, 0x43	; 67
    2638:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	f8 01       	movw	r30, r16
    2642:	80 83       	st	Z, r24
    2644:	91 83       	std	Z+1, r25	; 0x01
    2646:	a2 83       	std	Z+2, r26	; 0x02
    2648:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    264a:	fe 01       	movw	r30, r28
    264c:	e3 5b       	subi	r30, 0xB3	; 179
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	60 81       	ld	r22, Z
    2652:	71 81       	ldd	r23, Z+1	; 0x01
    2654:	82 81       	ldd	r24, Z+2	; 0x02
    2656:	93 81       	ldd	r25, Z+3	; 0x03
    2658:	20 e0       	ldi	r18, 0x00	; 0
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e8       	ldi	r20, 0x80	; 128
    265e:	5f e3       	ldi	r21, 0x3F	; 63
    2660:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2664:	88 23       	and	r24, r24
    2666:	44 f4       	brge	.+16     	; 0x2678 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2668:	fe 01       	movw	r30, r28
    266a:	e5 5b       	subi	r30, 0xB5	; 181
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	81 e0       	ldi	r24, 0x01	; 1
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	91 83       	std	Z+1, r25	; 0x01
    2674:	80 83       	st	Z, r24
    2676:	64 c0       	rjmp	.+200    	; 0x2740 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2678:	fe 01       	movw	r30, r28
    267a:	e3 5b       	subi	r30, 0xB3	; 179
    267c:	ff 4f       	sbci	r31, 0xFF	; 255
    267e:	60 81       	ld	r22, Z
    2680:	71 81       	ldd	r23, Z+1	; 0x01
    2682:	82 81       	ldd	r24, Z+2	; 0x02
    2684:	93 81       	ldd	r25, Z+3	; 0x03
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	3f ef       	ldi	r19, 0xFF	; 255
    268a:	4f e7       	ldi	r20, 0x7F	; 127
    268c:	57 e4       	ldi	r21, 0x47	; 71
    268e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2692:	18 16       	cp	r1, r24
    2694:	0c f0       	brlt	.+2      	; 0x2698 <LCD_displayCharacter+0x22e>
    2696:	43 c0       	rjmp	.+134    	; 0x271e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2698:	fe 01       	movw	r30, r28
    269a:	ef 5a       	subi	r30, 0xAF	; 175
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	60 81       	ld	r22, Z
    26a0:	71 81       	ldd	r23, Z+1	; 0x01
    26a2:	82 81       	ldd	r24, Z+2	; 0x02
    26a4:	93 81       	ldd	r25, Z+3	; 0x03
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	8e 01       	movw	r16, r28
    26b8:	05 5b       	subi	r16, 0xB5	; 181
    26ba:	1f 4f       	sbci	r17, 0xFF	; 255
    26bc:	bc 01       	movw	r22, r24
    26be:	cd 01       	movw	r24, r26
    26c0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	f8 01       	movw	r30, r16
    26ca:	91 83       	std	Z+1, r25	; 0x01
    26cc:	80 83       	st	Z, r24
    26ce:	1f c0       	rjmp	.+62     	; 0x270e <LCD_displayCharacter+0x2a4>
    26d0:	fe 01       	movw	r30, r28
    26d2:	e7 5b       	subi	r30, 0xB7	; 183
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	89 e1       	ldi	r24, 0x19	; 25
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	91 83       	std	Z+1, r25	; 0x01
    26dc:	80 83       	st	Z, r24
    26de:	fe 01       	movw	r30, r28
    26e0:	e7 5b       	subi	r30, 0xB7	; 183
    26e2:	ff 4f       	sbci	r31, 0xFF	; 255
    26e4:	80 81       	ld	r24, Z
    26e6:	91 81       	ldd	r25, Z+1	; 0x01
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <LCD_displayCharacter+0x27e>
    26ec:	fe 01       	movw	r30, r28
    26ee:	e7 5b       	subi	r30, 0xB7	; 183
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	91 83       	std	Z+1, r25	; 0x01
    26f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f6:	de 01       	movw	r26, r28
    26f8:	a5 5b       	subi	r26, 0xB5	; 181
    26fa:	bf 4f       	sbci	r27, 0xFF	; 255
    26fc:	fe 01       	movw	r30, r28
    26fe:	e5 5b       	subi	r30, 0xB5	; 181
    2700:	ff 4f       	sbci	r31, 0xFF	; 255
    2702:	80 81       	ld	r24, Z
    2704:	91 81       	ldd	r25, Z+1	; 0x01
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	11 96       	adiw	r26, 0x01	; 1
    270a:	9c 93       	st	X, r25
    270c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270e:	fe 01       	movw	r30, r28
    2710:	e5 5b       	subi	r30, 0xB5	; 181
    2712:	ff 4f       	sbci	r31, 0xFF	; 255
    2714:	80 81       	ld	r24, Z
    2716:	91 81       	ldd	r25, Z+1	; 0x01
    2718:	00 97       	sbiw	r24, 0x00	; 0
    271a:	d1 f6       	brne	.-76     	; 0x26d0 <LCD_displayCharacter+0x266>
    271c:	27 c0       	rjmp	.+78     	; 0x276c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271e:	8e 01       	movw	r16, r28
    2720:	05 5b       	subi	r16, 0xB5	; 181
    2722:	1f 4f       	sbci	r17, 0xFF	; 255
    2724:	fe 01       	movw	r30, r28
    2726:	e3 5b       	subi	r30, 0xB3	; 179
    2728:	ff 4f       	sbci	r31, 0xFF	; 255
    272a:	60 81       	ld	r22, Z
    272c:	71 81       	ldd	r23, Z+1	; 0x01
    272e:	82 81       	ldd	r24, Z+2	; 0x02
    2730:	93 81       	ldd	r25, Z+3	; 0x03
    2732:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	f8 01       	movw	r30, r16
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	80 83       	st	Z, r24
    2740:	de 01       	movw	r26, r28
    2742:	a9 5b       	subi	r26, 0xB9	; 185
    2744:	bf 4f       	sbci	r27, 0xFF	; 255
    2746:	fe 01       	movw	r30, r28
    2748:	e5 5b       	subi	r30, 0xB5	; 181
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	8d 93       	st	X+, r24
    2752:	9c 93       	st	X, r25
    2754:	fe 01       	movw	r30, r28
    2756:	e9 5b       	subi	r30, 0xB9	; 185
    2758:	ff 4f       	sbci	r31, 0xFF	; 255
    275a:	80 81       	ld	r24, Z
    275c:	91 81       	ldd	r25, Z+1	; 0x01
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <LCD_displayCharacter+0x2f4>
    2762:	fe 01       	movw	r30, r28
    2764:	e9 5b       	subi	r30, 0xB9	; 185
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	91 83       	std	Z+1, r25	; 0x01
    276a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    276c:	fe 01       	movw	r30, r28
    276e:	ed 59       	subi	r30, 0x9D	; 157
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	88 2f       	mov	r24, r24
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	80 71       	andi	r24, 0x10	; 16
    277a:	90 70       	andi	r25, 0x00	; 0
    277c:	95 95       	asr	r25
    277e:	87 95       	ror	r24
    2780:	95 95       	asr	r25
    2782:	87 95       	ror	r24
    2784:	95 95       	asr	r25
    2786:	87 95       	ror	r24
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	98 2f       	mov	r25, r24
    278e:	82 e0       	ldi	r24, 0x02	; 2
    2790:	64 e0       	ldi	r22, 0x04	; 4
    2792:	49 2f       	mov	r20, r25
    2794:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2798:	fe 01       	movw	r30, r28
    279a:	ed 59       	subi	r30, 0x9D	; 157
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 81       	ld	r24, Z
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	80 72       	andi	r24, 0x20	; 32
    27a6:	90 70       	andi	r25, 0x00	; 0
    27a8:	95 95       	asr	r25
    27aa:	87 95       	ror	r24
    27ac:	95 95       	asr	r25
    27ae:	87 95       	ror	r24
    27b0:	95 95       	asr	r25
    27b2:	87 95       	ror	r24
    27b4:	95 95       	asr	r25
    27b6:	87 95       	ror	r24
    27b8:	95 95       	asr	r25
    27ba:	87 95       	ror	r24
    27bc:	98 2f       	mov	r25, r24
    27be:	82 e0       	ldi	r24, 0x02	; 2
    27c0:	65 e0       	ldi	r22, 0x05	; 5
    27c2:	49 2f       	mov	r20, r25
    27c4:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    27c8:	fe 01       	movw	r30, r28
    27ca:	ed 59       	subi	r30, 0x9D	; 157
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	88 2f       	mov	r24, r24
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	80 74       	andi	r24, 0x40	; 64
    27d6:	90 70       	andi	r25, 0x00	; 0
    27d8:	08 2e       	mov	r0, r24
    27da:	89 2f       	mov	r24, r25
    27dc:	00 0c       	add	r0, r0
    27de:	88 1f       	adc	r24, r24
    27e0:	99 0b       	sbc	r25, r25
    27e2:	00 0c       	add	r0, r0
    27e4:	88 1f       	adc	r24, r24
    27e6:	99 1f       	adc	r25, r25
    27e8:	98 2f       	mov	r25, r24
    27ea:	82 e0       	ldi	r24, 0x02	; 2
    27ec:	66 e0       	ldi	r22, 0x06	; 6
    27ee:	49 2f       	mov	r20, r25
    27f0:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    27f4:	fe 01       	movw	r30, r28
    27f6:	ed 59       	subi	r30, 0x9D	; 157
    27f8:	ff 4f       	sbci	r31, 0xFF	; 255
    27fa:	80 81       	ld	r24, Z
    27fc:	98 2f       	mov	r25, r24
    27fe:	99 1f       	adc	r25, r25
    2800:	99 27       	eor	r25, r25
    2802:	99 1f       	adc	r25, r25
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	67 e0       	ldi	r22, 0x07	; 7
    2808:	49 2f       	mov	r20, r25
    280a:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    280e:	fe 01       	movw	r30, r28
    2810:	ed 5b       	subi	r30, 0xBD	; 189
    2812:	ff 4f       	sbci	r31, 0xFF	; 255
    2814:	80 e0       	ldi	r24, 0x00	; 0
    2816:	90 e0       	ldi	r25, 0x00	; 0
    2818:	a0 e8       	ldi	r26, 0x80	; 128
    281a:	bf e3       	ldi	r27, 0x3F	; 63
    281c:	80 83       	st	Z, r24
    281e:	91 83       	std	Z+1, r25	; 0x01
    2820:	a2 83       	std	Z+2, r26	; 0x02
    2822:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2824:	8e 01       	movw	r16, r28
    2826:	01 5c       	subi	r16, 0xC1	; 193
    2828:	1f 4f       	sbci	r17, 0xFF	; 255
    282a:	fe 01       	movw	r30, r28
    282c:	ed 5b       	subi	r30, 0xBD	; 189
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	60 81       	ld	r22, Z
    2832:	71 81       	ldd	r23, Z+1	; 0x01
    2834:	82 81       	ldd	r24, Z+2	; 0x02
    2836:	93 81       	ldd	r25, Z+3	; 0x03
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	4a e7       	ldi	r20, 0x7A	; 122
    283e:	53 e4       	ldi	r21, 0x43	; 67
    2840:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	f8 01       	movw	r30, r16
    284a:	80 83       	st	Z, r24
    284c:	91 83       	std	Z+1, r25	; 0x01
    284e:	a2 83       	std	Z+2, r26	; 0x02
    2850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2852:	fe 01       	movw	r30, r28
    2854:	ff 96       	adiw	r30, 0x3f	; 63
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e8       	ldi	r20, 0x80	; 128
    2864:	5f e3       	ldi	r21, 0x3F	; 63
    2866:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    286a:	88 23       	and	r24, r24
    286c:	2c f4       	brge	.+10     	; 0x2878 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    286e:	81 e0       	ldi	r24, 0x01	; 1
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9e af       	std	Y+62, r25	; 0x3e
    2874:	8d af       	std	Y+61, r24	; 0x3d
    2876:	46 c0       	rjmp	.+140    	; 0x2904 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2878:	fe 01       	movw	r30, r28
    287a:	ff 96       	adiw	r30, 0x3f	; 63
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	3f ef       	ldi	r19, 0xFF	; 255
    2888:	4f e7       	ldi	r20, 0x7F	; 127
    288a:	57 e4       	ldi	r21, 0x47	; 71
    288c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2890:	18 16       	cp	r1, r24
    2892:	64 f5       	brge	.+88     	; 0x28ec <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2894:	fe 01       	movw	r30, r28
    2896:	ed 5b       	subi	r30, 0xBD	; 189
    2898:	ff 4f       	sbci	r31, 0xFF	; 255
    289a:	60 81       	ld	r22, Z
    289c:	71 81       	ldd	r23, Z+1	; 0x01
    289e:	82 81       	ldd	r24, Z+2	; 0x02
    28a0:	93 81       	ldd	r25, Z+3	; 0x03
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e2       	ldi	r20, 0x20	; 32
    28a8:	51 e4       	ldi	r21, 0x41	; 65
    28aa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28ae:	dc 01       	movw	r26, r24
    28b0:	cb 01       	movw	r24, r22
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9e af       	std	Y+62, r25	; 0x3e
    28c0:	8d af       	std	Y+61, r24	; 0x3d
    28c2:	0f c0       	rjmp	.+30     	; 0x28e2 <LCD_displayCharacter+0x478>
    28c4:	89 e1       	ldi	r24, 0x19	; 25
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	9c af       	std	Y+60, r25	; 0x3c
    28ca:	8b af       	std	Y+59, r24	; 0x3b
    28cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    28ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    28d0:	01 97       	sbiw	r24, 0x01	; 1
    28d2:	f1 f7       	brne	.-4      	; 0x28d0 <LCD_displayCharacter+0x466>
    28d4:	9c af       	std	Y+60, r25	; 0x3c
    28d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    28da:	9e ad       	ldd	r25, Y+62	; 0x3e
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	9e af       	std	Y+62, r25	; 0x3e
    28e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    28e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	69 f7       	brne	.-38     	; 0x28c4 <LCD_displayCharacter+0x45a>
    28ea:	16 c0       	rjmp	.+44     	; 0x2918 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ec:	fe 01       	movw	r30, r28
    28ee:	ff 96       	adiw	r30, 0x3f	; 63
    28f0:	60 81       	ld	r22, Z
    28f2:	71 81       	ldd	r23, Z+1	; 0x01
    28f4:	82 81       	ldd	r24, Z+2	; 0x02
    28f6:	93 81       	ldd	r25, Z+3	; 0x03
    28f8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28fc:	dc 01       	movw	r26, r24
    28fe:	cb 01       	movw	r24, r22
    2900:	9e af       	std	Y+62, r25	; 0x3e
    2902:	8d af       	std	Y+61, r24	; 0x3d
    2904:	8d ad       	ldd	r24, Y+61	; 0x3d
    2906:	9e ad       	ldd	r25, Y+62	; 0x3e
    2908:	9a af       	std	Y+58, r25	; 0x3a
    290a:	89 af       	std	Y+57, r24	; 0x39
    290c:	89 ad       	ldd	r24, Y+57	; 0x39
    290e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	f1 f7       	brne	.-4      	; 0x2910 <LCD_displayCharacter+0x4a6>
    2914:	9a af       	std	Y+58, r25	; 0x3a
    2916:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2918:	82 e0       	ldi	r24, 0x02	; 2
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a0 e8       	ldi	r26, 0x80	; 128
    2928:	bf e3       	ldi	r27, 0x3F	; 63
    292a:	8d ab       	std	Y+53, r24	; 0x35
    292c:	9e ab       	std	Y+54, r25	; 0x36
    292e:	af ab       	std	Y+55, r26	; 0x37
    2930:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2932:	6d a9       	ldd	r22, Y+53	; 0x35
    2934:	7e a9       	ldd	r23, Y+54	; 0x36
    2936:	8f a9       	ldd	r24, Y+55	; 0x37
    2938:	98 ad       	ldd	r25, Y+56	; 0x38
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a e7       	ldi	r20, 0x7A	; 122
    2940:	53 e4       	ldi	r21, 0x43	; 67
    2942:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	89 ab       	std	Y+49, r24	; 0x31
    294c:	9a ab       	std	Y+50, r25	; 0x32
    294e:	ab ab       	std	Y+51, r26	; 0x33
    2950:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2952:	69 a9       	ldd	r22, Y+49	; 0x31
    2954:	7a a9       	ldd	r23, Y+50	; 0x32
    2956:	8b a9       	ldd	r24, Y+51	; 0x33
    2958:	9c a9       	ldd	r25, Y+52	; 0x34
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	98 ab       	std	Y+48, r25	; 0x30
    2970:	8f a7       	std	Y+47, r24	; 0x2f
    2972:	3f c0       	rjmp	.+126    	; 0x29f2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2974:	69 a9       	ldd	r22, Y+49	; 0x31
    2976:	7a a9       	ldd	r23, Y+50	; 0x32
    2978:	8b a9       	ldd	r24, Y+51	; 0x33
    297a:	9c a9       	ldd	r25, Y+52	; 0x34
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	4c f5       	brge	.+82     	; 0x29de <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	6d a9       	ldd	r22, Y+53	; 0x35
    298e:	7e a9       	ldd	r23, Y+54	; 0x36
    2990:	8f a9       	ldd	r24, Y+55	; 0x37
    2992:	98 ad       	ldd	r25, Y+56	; 0x38
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	98 ab       	std	Y+48, r25	; 0x30
    29b2:	8f a7       	std	Y+47, r24	; 0x2f
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <LCD_displayCharacter+0x56a>
    29b6:	89 e1       	ldi	r24, 0x19	; 25
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	9e a7       	std	Y+46, r25	; 0x2e
    29bc:	8d a7       	std	Y+45, r24	; 0x2d
    29be:	8d a5       	ldd	r24, Y+45	; 0x2d
    29c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <LCD_displayCharacter+0x558>
    29c6:	9e a7       	std	Y+46, r25	; 0x2e
    29c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    29cc:	98 a9       	ldd	r25, Y+48	; 0x30
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	98 ab       	std	Y+48, r25	; 0x30
    29d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29d6:	98 a9       	ldd	r25, Y+48	; 0x30
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	69 f7       	brne	.-38     	; 0x29b6 <LCD_displayCharacter+0x54c>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	69 a9       	ldd	r22, Y+49	; 0x31
    29e0:	7a a9       	ldd	r23, Y+50	; 0x32
    29e2:	8b a9       	ldd	r24, Y+51	; 0x33
    29e4:	9c a9       	ldd	r25, Y+52	; 0x34
    29e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	98 ab       	std	Y+48, r25	; 0x30
    29f0:	8f a7       	std	Y+47, r24	; 0x2f
    29f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    29f4:	98 a9       	ldd	r25, Y+48	; 0x30
    29f6:	9c a7       	std	Y+44, r25	; 0x2c
    29f8:	8b a7       	std	Y+43, r24	; 0x2b
    29fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    29fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <LCD_displayCharacter+0x594>
    2a02:	9c a7       	std	Y+44, r25	; 0x2c
    2a04:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	61 e0       	ldi	r22, 0x01	; 1
    2a0a:	41 e0       	ldi	r20, 0x01	; 1
    2a0c:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    2a10:	80 e0       	ldi	r24, 0x00	; 0
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 e8       	ldi	r26, 0x80	; 128
    2a16:	bf e3       	ldi	r27, 0x3F	; 63
    2a18:	8f a3       	std	Y+39, r24	; 0x27
    2a1a:	98 a7       	std	Y+40, r25	; 0x28
    2a1c:	a9 a7       	std	Y+41, r26	; 0x29
    2a1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a20:	6f a1       	ldd	r22, Y+39	; 0x27
    2a22:	78 a5       	ldd	r23, Y+40	; 0x28
    2a24:	89 a5       	ldd	r24, Y+41	; 0x29
    2a26:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	4a e7       	ldi	r20, 0x7A	; 122
    2a2e:	53 e4       	ldi	r21, 0x43	; 67
    2a30:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	8b a3       	std	Y+35, r24	; 0x23
    2a3a:	9c a3       	std	Y+36, r25	; 0x24
    2a3c:	ad a3       	std	Y+37, r26	; 0x25
    2a3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2a40:	6b a1       	ldd	r22, Y+35	; 0x23
    2a42:	7c a1       	ldd	r23, Y+36	; 0x24
    2a44:	8d a1       	ldd	r24, Y+37	; 0x25
    2a46:	9e a1       	ldd	r25, Y+38	; 0x26
    2a48:	20 e0       	ldi	r18, 0x00	; 0
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	40 e8       	ldi	r20, 0x80	; 128
    2a4e:	5f e3       	ldi	r21, 0x3F	; 63
    2a50:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2a54:	88 23       	and	r24, r24
    2a56:	2c f4       	brge	.+10     	; 0x2a62 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2a58:	81 e0       	ldi	r24, 0x01	; 1
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	9a a3       	std	Y+34, r25	; 0x22
    2a5e:	89 a3       	std	Y+33, r24	; 0x21
    2a60:	3f c0       	rjmp	.+126    	; 0x2ae0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2a62:	6b a1       	ldd	r22, Y+35	; 0x23
    2a64:	7c a1       	ldd	r23, Y+36	; 0x24
    2a66:	8d a1       	ldd	r24, Y+37	; 0x25
    2a68:	9e a1       	ldd	r25, Y+38	; 0x26
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	3f ef       	ldi	r19, 0xFF	; 255
    2a6e:	4f e7       	ldi	r20, 0x7F	; 127
    2a70:	57 e4       	ldi	r21, 0x47	; 71
    2a72:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2a76:	18 16       	cp	r1, r24
    2a78:	4c f5       	brge	.+82     	; 0x2acc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a7a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a7c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a7e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a80:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e2       	ldi	r20, 0x20	; 32
    2a88:	51 e4       	ldi	r21, 0x41	; 65
    2a8a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a8e:	dc 01       	movw	r26, r24
    2a90:	cb 01       	movw	r24, r22
    2a92:	bc 01       	movw	r22, r24
    2a94:	cd 01       	movw	r24, r26
    2a96:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	9a a3       	std	Y+34, r25	; 0x22
    2aa0:	89 a3       	std	Y+33, r24	; 0x21
    2aa2:	0f c0       	rjmp	.+30     	; 0x2ac2 <LCD_displayCharacter+0x658>
    2aa4:	89 e1       	ldi	r24, 0x19	; 25
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	98 a3       	std	Y+32, r25	; 0x20
    2aaa:	8f 8f       	std	Y+31, r24	; 0x1f
    2aac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2aae:	98 a1       	ldd	r25, Y+32	; 0x20
    2ab0:	01 97       	sbiw	r24, 0x01	; 1
    2ab2:	f1 f7       	brne	.-4      	; 0x2ab0 <LCD_displayCharacter+0x646>
    2ab4:	98 a3       	std	Y+32, r25	; 0x20
    2ab6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab8:	89 a1       	ldd	r24, Y+33	; 0x21
    2aba:	9a a1       	ldd	r25, Y+34	; 0x22
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	9a a3       	std	Y+34, r25	; 0x22
    2ac0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ac4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ac6:	00 97       	sbiw	r24, 0x00	; 0
    2ac8:	69 f7       	brne	.-38     	; 0x2aa4 <LCD_displayCharacter+0x63a>
    2aca:	14 c0       	rjmp	.+40     	; 0x2af4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2acc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ace:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2ad8:	dc 01       	movw	r26, r24
    2ada:	cb 01       	movw	r24, r22
    2adc:	9a a3       	std	Y+34, r25	; 0x22
    2ade:	89 a3       	std	Y+33, r24	; 0x21
    2ae0:	89 a1       	ldd	r24, Y+33	; 0x21
    2ae2:	9a a1       	ldd	r25, Y+34	; 0x22
    2ae4:	9e 8f       	std	Y+30, r25	; 0x1e
    2ae6:	8d 8f       	std	Y+29, r24	; 0x1d
    2ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aec:	01 97       	sbiw	r24, 0x01	; 1
    2aee:	f1 f7       	brne	.-4      	; 0x2aec <LCD_displayCharacter+0x682>
    2af0:	9e 8f       	std	Y+30, r25	; 0x1e
    2af2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2af4:	fe 01       	movw	r30, r28
    2af6:	ed 59       	subi	r30, 0x9D	; 157
    2af8:	ff 4f       	sbci	r31, 0xFF	; 255
    2afa:	80 81       	ld	r24, Z
    2afc:	98 2f       	mov	r25, r24
    2afe:	91 70       	andi	r25, 0x01	; 1
    2b00:	82 e0       	ldi	r24, 0x02	; 2
    2b02:	64 e0       	ldi	r22, 0x04	; 4
    2b04:	49 2f       	mov	r20, r25
    2b06:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	ed 59       	subi	r30, 0x9D	; 157
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	80 81       	ld	r24, Z
    2b12:	88 2f       	mov	r24, r24
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	82 70       	andi	r24, 0x02	; 2
    2b18:	90 70       	andi	r25, 0x00	; 0
    2b1a:	95 95       	asr	r25
    2b1c:	87 95       	ror	r24
    2b1e:	98 2f       	mov	r25, r24
    2b20:	82 e0       	ldi	r24, 0x02	; 2
    2b22:	65 e0       	ldi	r22, 0x05	; 5
    2b24:	49 2f       	mov	r20, r25
    2b26:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ed 59       	subi	r30, 0x9D	; 157
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 81       	ld	r24, Z
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	84 70       	andi	r24, 0x04	; 4
    2b38:	90 70       	andi	r25, 0x00	; 0
    2b3a:	95 95       	asr	r25
    2b3c:	87 95       	ror	r24
    2b3e:	95 95       	asr	r25
    2b40:	87 95       	ror	r24
    2b42:	98 2f       	mov	r25, r24
    2b44:	82 e0       	ldi	r24, 0x02	; 2
    2b46:	66 e0       	ldi	r22, 0x06	; 6
    2b48:	49 2f       	mov	r20, r25
    2b4a:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2b4e:	fe 01       	movw	r30, r28
    2b50:	ed 59       	subi	r30, 0x9D	; 157
    2b52:	ff 4f       	sbci	r31, 0xFF	; 255
    2b54:	80 81       	ld	r24, Z
    2b56:	88 2f       	mov	r24, r24
    2b58:	90 e0       	ldi	r25, 0x00	; 0
    2b5a:	88 70       	andi	r24, 0x08	; 8
    2b5c:	90 70       	andi	r25, 0x00	; 0
    2b5e:	95 95       	asr	r25
    2b60:	87 95       	ror	r24
    2b62:	95 95       	asr	r25
    2b64:	87 95       	ror	r24
    2b66:	95 95       	asr	r25
    2b68:	87 95       	ror	r24
    2b6a:	98 2f       	mov	r25, r24
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	67 e0       	ldi	r22, 0x07	; 7
    2b70:	49 2f       	mov	r20, r25
    2b72:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    2b76:	80 e0       	ldi	r24, 0x00	; 0
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	a0 e8       	ldi	r26, 0x80	; 128
    2b7c:	bf e3       	ldi	r27, 0x3F	; 63
    2b7e:	89 8f       	std	Y+25, r24	; 0x19
    2b80:	9a 8f       	std	Y+26, r25	; 0x1a
    2b82:	ab 8f       	std	Y+27, r26	; 0x1b
    2b84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b86:	69 8d       	ldd	r22, Y+25	; 0x19
    2b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	4a e7       	ldi	r20, 0x7A	; 122
    2b94:	53 e4       	ldi	r21, 0x43	; 67
    2b96:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	8d 8b       	std	Y+21, r24	; 0x15
    2ba0:	9e 8b       	std	Y+22, r25	; 0x16
    2ba2:	af 8b       	std	Y+23, r26	; 0x17
    2ba4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ba6:	6d 89       	ldd	r22, Y+21	; 0x15
    2ba8:	7e 89       	ldd	r23, Y+22	; 0x16
    2baa:	8f 89       	ldd	r24, Y+23	; 0x17
    2bac:	98 8d       	ldd	r25, Y+24	; 0x18
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	40 e8       	ldi	r20, 0x80	; 128
    2bb4:	5f e3       	ldi	r21, 0x3F	; 63
    2bb6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2bba:	88 23       	and	r24, r24
    2bbc:	2c f4       	brge	.+10     	; 0x2bc8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	9c 8b       	std	Y+20, r25	; 0x14
    2bc4:	8b 8b       	std	Y+19, r24	; 0x13
    2bc6:	3f c0       	rjmp	.+126    	; 0x2c46 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2bc8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bca:	7e 89       	ldd	r23, Y+22	; 0x16
    2bcc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bce:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	3f ef       	ldi	r19, 0xFF	; 255
    2bd4:	4f e7       	ldi	r20, 0x7F	; 127
    2bd6:	57 e4       	ldi	r21, 0x47	; 71
    2bd8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2bdc:	18 16       	cp	r1, r24
    2bde:	4c f5       	brge	.+82     	; 0x2c32 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be0:	69 8d       	ldd	r22, Y+25	; 0x19
    2be2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2be6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	40 e2       	ldi	r20, 0x20	; 32
    2bee:	51 e4       	ldi	r21, 0x41	; 65
    2bf0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	bc 01       	movw	r22, r24
    2bfa:	cd 01       	movw	r24, r26
    2bfc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	9c 8b       	std	Y+20, r25	; 0x14
    2c06:	8b 8b       	std	Y+19, r24	; 0x13
    2c08:	0f c0       	rjmp	.+30     	; 0x2c28 <LCD_displayCharacter+0x7be>
    2c0a:	89 e1       	ldi	r24, 0x19	; 25
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	9a 8b       	std	Y+18, r25	; 0x12
    2c10:	89 8b       	std	Y+17, r24	; 0x11
    2c12:	89 89       	ldd	r24, Y+17	; 0x11
    2c14:	9a 89       	ldd	r25, Y+18	; 0x12
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	f1 f7       	brne	.-4      	; 0x2c16 <LCD_displayCharacter+0x7ac>
    2c1a:	9a 8b       	std	Y+18, r25	; 0x12
    2c1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c20:	9c 89       	ldd	r25, Y+20	; 0x14
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	9c 8b       	std	Y+20, r25	; 0x14
    2c26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c28:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c2c:	00 97       	sbiw	r24, 0x00	; 0
    2c2e:	69 f7       	brne	.-38     	; 0x2c0a <LCD_displayCharacter+0x7a0>
    2c30:	14 c0       	rjmp	.+40     	; 0x2c5a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c32:	6d 89       	ldd	r22, Y+21	; 0x15
    2c34:	7e 89       	ldd	r23, Y+22	; 0x16
    2c36:	8f 89       	ldd	r24, Y+23	; 0x17
    2c38:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	9c 8b       	std	Y+20, r25	; 0x14
    2c44:	8b 8b       	std	Y+19, r24	; 0x13
    2c46:	8b 89       	ldd	r24, Y+19	; 0x13
    2c48:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4a:	98 8b       	std	Y+16, r25	; 0x10
    2c4c:	8f 87       	std	Y+15, r24	; 0x0f
    2c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c50:	98 89       	ldd	r25, Y+16	; 0x10
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCD_displayCharacter+0x7e8>
    2c56:	98 8b       	std	Y+16, r25	; 0x10
    2c58:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c5a:	82 e0       	ldi	r24, 0x02	; 2
    2c5c:	61 e0       	ldi	r22, 0x01	; 1
    2c5e:	40 e0       	ldi	r20, 0x00	; 0
    2c60:	0e 94 0d 09 	call	0x121a	; 0x121a <GPIO_writePin>
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	a0 e8       	ldi	r26, 0x80	; 128
    2c6a:	bf e3       	ldi	r27, 0x3F	; 63
    2c6c:	8b 87       	std	Y+11, r24	; 0x0b
    2c6e:	9c 87       	std	Y+12, r25	; 0x0c
    2c70:	ad 87       	std	Y+13, r26	; 0x0d
    2c72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	4a e7       	ldi	r20, 0x7A	; 122
    2c82:	53 e4       	ldi	r21, 0x43	; 67
    2c84:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	8f 83       	std	Y+7, r24	; 0x07
    2c8e:	98 87       	std	Y+8, r25	; 0x08
    2c90:	a9 87       	std	Y+9, r26	; 0x09
    2c92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c94:	6f 81       	ldd	r22, Y+7	; 0x07
    2c96:	78 85       	ldd	r23, Y+8	; 0x08
    2c98:	89 85       	ldd	r24, Y+9	; 0x09
    2c9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c9c:	20 e0       	ldi	r18, 0x00	; 0
    2c9e:	30 e0       	ldi	r19, 0x00	; 0
    2ca0:	40 e8       	ldi	r20, 0x80	; 128
    2ca2:	5f e3       	ldi	r21, 0x3F	; 63
    2ca4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2ca8:	88 23       	and	r24, r24
    2caa:	2c f4       	brge	.+10     	; 0x2cb6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	9e 83       	std	Y+6, r25	; 0x06
    2cb2:	8d 83       	std	Y+5, r24	; 0x05
    2cb4:	3f c0       	rjmp	.+126    	; 0x2d34 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb8:	78 85       	ldd	r23, Y+8	; 0x08
    2cba:	89 85       	ldd	r24, Y+9	; 0x09
    2cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	3f ef       	ldi	r19, 0xFF	; 255
    2cc2:	4f e7       	ldi	r20, 0x7F	; 127
    2cc4:	57 e4       	ldi	r21, 0x47	; 71
    2cc6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2cca:	18 16       	cp	r1, r24
    2ccc:	4c f5       	brge	.+82     	; 0x2d20 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	30 e0       	ldi	r19, 0x00	; 0
    2cda:	40 e2       	ldi	r20, 0x20	; 32
    2cdc:	51 e4       	ldi	r21, 0x41	; 65
    2cde:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ce2:	dc 01       	movw	r26, r24
    2ce4:	cb 01       	movw	r24, r22
    2ce6:	bc 01       	movw	r22, r24
    2ce8:	cd 01       	movw	r24, r26
    2cea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9e 83       	std	Y+6, r25	; 0x06
    2cf4:	8d 83       	std	Y+5, r24	; 0x05
    2cf6:	0f c0       	rjmp	.+30     	; 0x2d16 <LCD_displayCharacter+0x8ac>
    2cf8:	89 e1       	ldi	r24, 0x19	; 25
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	9c 83       	std	Y+4, r25	; 0x04
    2cfe:	8b 83       	std	Y+3, r24	; 0x03
    2d00:	8b 81       	ldd	r24, Y+3	; 0x03
    2d02:	9c 81       	ldd	r25, Y+4	; 0x04
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <LCD_displayCharacter+0x89a>
    2d08:	9c 83       	std	Y+4, r25	; 0x04
    2d0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	9e 83       	std	Y+6, r25	; 0x06
    2d14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d16:	8d 81       	ldd	r24, Y+5	; 0x05
    2d18:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1a:	00 97       	sbiw	r24, 0x00	; 0
    2d1c:	69 f7       	brne	.-38     	; 0x2cf8 <LCD_displayCharacter+0x88e>
    2d1e:	14 c0       	rjmp	.+40     	; 0x2d48 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d20:	6f 81       	ldd	r22, Y+7	; 0x07
    2d22:	78 85       	ldd	r23, Y+8	; 0x08
    2d24:	89 85       	ldd	r24, Y+9	; 0x09
    2d26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d28:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9e 83       	std	Y+6, r25	; 0x06
    2d32:	8d 83       	std	Y+5, r24	; 0x05
    2d34:	8d 81       	ldd	r24, Y+5	; 0x05
    2d36:	9e 81       	ldd	r25, Y+6	; 0x06
    2d38:	9a 83       	std	Y+2, r25	; 0x02
    2d3a:	89 83       	std	Y+1, r24	; 0x01
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	01 97       	sbiw	r24, 0x01	; 1
    2d42:	f1 f7       	brne	.-4      	; 0x2d40 <LCD_displayCharacter+0x8d6>
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d48:	cd 59       	subi	r28, 0x9D	; 157
    2d4a:	df 4f       	sbci	r29, 0xFF	; 255
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	cf 91       	pop	r28
    2d58:	df 91       	pop	r29
    2d5a:	1f 91       	pop	r17
    2d5c:	0f 91       	pop	r16
    2d5e:	08 95       	ret

00002d60 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d60:	df 93       	push	r29
    2d62:	cf 93       	push	r28
    2d64:	00 d0       	rcall	.+0      	; 0x2d66 <LCD_displayString+0x6>
    2d66:	0f 92       	push	r0
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	9b 83       	std	Y+3, r25	; 0x03
    2d6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d70:	19 82       	std	Y+1, r1	; 0x01
    2d72:	0e c0       	rjmp	.+28     	; 0x2d90 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	28 2f       	mov	r18, r24
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7e:	fc 01       	movw	r30, r24
    2d80:	e2 0f       	add	r30, r18
    2d82:	f3 1f       	adc	r31, r19
    2d84:	80 81       	ld	r24, Z
    2d86:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayCharacter>
		i++;
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	8f 5f       	subi	r24, 0xFF	; 255
    2d8e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	28 2f       	mov	r18, r24
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	e2 0f       	add	r30, r18
    2d9e:	f3 1f       	adc	r31, r19
    2da0:	80 81       	ld	r24, Z
    2da2:	88 23       	and	r24, r24
    2da4:	39 f7       	brne	.-50     	; 0x2d74 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2da6:	0f 90       	pop	r0
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	cf 91       	pop	r28
    2dae:	df 91       	pop	r29
    2db0:	08 95       	ret

00002db2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2db2:	df 93       	push	r29
    2db4:	cf 93       	push	r28
    2db6:	00 d0       	rcall	.+0      	; 0x2db8 <LCD_moveCursor+0x6>
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <LCD_moveCursor+0x8>
    2dba:	0f 92       	push	r0
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	8a 83       	std	Y+2, r24	; 0x02
    2dc2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc6:	28 2f       	mov	r18, r24
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	3d 83       	std	Y+5, r19	; 0x05
    2dcc:	2c 83       	std	Y+4, r18	; 0x04
    2dce:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	91 05       	cpc	r25, r1
    2dd6:	c1 f0       	breq	.+48     	; 0x2e08 <LCD_moveCursor+0x56>
    2dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    2dda:	3d 81       	ldd	r19, Y+5	; 0x05
    2ddc:	22 30       	cpi	r18, 0x02	; 2
    2dde:	31 05       	cpc	r19, r1
    2de0:	2c f4       	brge	.+10     	; 0x2dec <LCD_moveCursor+0x3a>
    2de2:	8c 81       	ldd	r24, Y+4	; 0x04
    2de4:	9d 81       	ldd	r25, Y+5	; 0x05
    2de6:	00 97       	sbiw	r24, 0x00	; 0
    2de8:	61 f0       	breq	.+24     	; 0x2e02 <LCD_moveCursor+0x50>
    2dea:	19 c0       	rjmp	.+50     	; 0x2e1e <LCD_moveCursor+0x6c>
    2dec:	2c 81       	ldd	r18, Y+4	; 0x04
    2dee:	3d 81       	ldd	r19, Y+5	; 0x05
    2df0:	22 30       	cpi	r18, 0x02	; 2
    2df2:	31 05       	cpc	r19, r1
    2df4:	69 f0       	breq	.+26     	; 0x2e10 <LCD_moveCursor+0x5e>
    2df6:	8c 81       	ldd	r24, Y+4	; 0x04
    2df8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfa:	83 30       	cpi	r24, 0x03	; 3
    2dfc:	91 05       	cpc	r25, r1
    2dfe:	61 f0       	breq	.+24     	; 0x2e18 <LCD_moveCursor+0x66>
    2e00:	0e c0       	rjmp	.+28     	; 0x2e1e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	0b c0       	rjmp	.+22     	; 0x2e1e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2e08:	8b 81       	ldd	r24, Y+3	; 0x03
    2e0a:	80 5c       	subi	r24, 0xC0	; 192
    2e0c:	89 83       	std	Y+1, r24	; 0x01
    2e0e:	07 c0       	rjmp	.+14     	; 0x2e1e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e10:	8b 81       	ldd	r24, Y+3	; 0x03
    2e12:	80 5f       	subi	r24, 0xF0	; 240
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	03 c0       	rjmp	.+6      	; 0x2e1e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e18:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1a:	80 5b       	subi	r24, 0xB0	; 176
    2e1c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	80 68       	ori	r24, 0x80	; 128
    2e22:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_sendCommand>
}
    2e26:	0f 90       	pop	r0
    2e28:	0f 90       	pop	r0
    2e2a:	0f 90       	pop	r0
    2e2c:	0f 90       	pop	r0
    2e2e:	0f 90       	pop	r0
    2e30:	cf 91       	pop	r28
    2e32:	df 91       	pop	r29
    2e34:	08 95       	ret

00002e36 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e36:	df 93       	push	r29
    2e38:	cf 93       	push	r28
    2e3a:	00 d0       	rcall	.+0      	; 0x2e3c <LCD_displayStringRowColumn+0x6>
    2e3c:	00 d0       	rcall	.+0      	; 0x2e3e <LCD_displayStringRowColumn+0x8>
    2e3e:	cd b7       	in	r28, 0x3d	; 61
    2e40:	de b7       	in	r29, 0x3e	; 62
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	6a 83       	std	Y+2, r22	; 0x02
    2e46:	5c 83       	std	Y+4, r21	; 0x04
    2e48:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e4a:	89 81       	ldd	r24, Y+1	; 0x01
    2e4c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e4e:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	9c 81       	ldd	r25, Y+4	; 0x04
    2e56:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <LCD_displayString>
}
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
    2e5e:	0f 90       	pop	r0
    2e60:	0f 90       	pop	r0
    2e62:	cf 91       	pop	r28
    2e64:	df 91       	pop	r29
    2e66:	08 95       	ret

00002e68 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e68:	df 93       	push	r29
    2e6a:	cf 93       	push	r28
    2e6c:	cd b7       	in	r28, 0x3d	; 61
    2e6e:	de b7       	in	r29, 0x3e	; 62
    2e70:	62 97       	sbiw	r28, 0x12	; 18
    2e72:	0f b6       	in	r0, 0x3f	; 63
    2e74:	f8 94       	cli
    2e76:	de bf       	out	0x3e, r29	; 62
    2e78:	0f be       	out	0x3f, r0	; 63
    2e7a:	cd bf       	out	0x3d, r28	; 61
    2e7c:	9a 8b       	std	Y+18, r25	; 0x12
    2e7e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e80:	89 89       	ldd	r24, Y+17	; 0x11
    2e82:	9a 89       	ldd	r25, Y+18	; 0x12
    2e84:	9e 01       	movw	r18, r28
    2e86:	2f 5f       	subi	r18, 0xFF	; 255
    2e88:	3f 4f       	sbci	r19, 0xFF	; 255
    2e8a:	b9 01       	movw	r22, r18
    2e8c:	4a e0       	ldi	r20, 0x0A	; 10
    2e8e:	50 e0       	ldi	r21, 0x00	; 0
    2e90:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e94:	ce 01       	movw	r24, r28
    2e96:	01 96       	adiw	r24, 0x01	; 1
    2e98:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <LCD_displayString>
}
    2e9c:	62 96       	adiw	r28, 0x12	; 18
    2e9e:	0f b6       	in	r0, 0x3f	; 63
    2ea0:	f8 94       	cli
    2ea2:	de bf       	out	0x3e, r29	; 62
    2ea4:	0f be       	out	0x3f, r0	; 63
    2ea6:	cd bf       	out	0x3d, r28	; 61
    2ea8:	cf 91       	pop	r28
    2eaa:	df 91       	pop	r29
    2eac:	08 95       	ret

00002eae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2eae:	df 93       	push	r29
    2eb0:	cf 93       	push	r28
    2eb2:	cd b7       	in	r28, 0x3d	; 61
    2eb4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <LCD_sendCommand>
}
    2ebc:	cf 91       	pop	r28
    2ebe:	df 91       	pop	r29
    2ec0:	08 95       	ret

00002ec2 <LCD_floatToString>:

/*
 * Description :
 * to display float numbers
 */
void LCD_floatToString(double num){
    2ec2:	0f 93       	push	r16
    2ec4:	1f 93       	push	r17
    2ec6:	df 93       	push	r29
    2ec8:	cf 93       	push	r28
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	68 97       	sbiw	r28, 0x18	; 24
    2ed0:	0f b6       	in	r0, 0x3f	; 63
    2ed2:	f8 94       	cli
    2ed4:	de bf       	out	0x3e, r29	; 62
    2ed6:	0f be       	out	0x3f, r0	; 63
    2ed8:	cd bf       	out	0x3d, r28	; 61
    2eda:	6d 8b       	std	Y+21, r22	; 0x15
    2edc:	7e 8b       	std	Y+22, r23	; 0x16
    2ede:	8f 8b       	std	Y+23, r24	; 0x17
    2ee0:	98 8f       	std	Y+24, r25	; 0x18
	char buffer[20];
	dtostrf(num,5,3,buffer);
    2ee2:	8d 89       	ldd	r24, Y+21	; 0x15
    2ee4:	9e 89       	ldd	r25, Y+22	; 0x16
    2ee6:	af 89       	ldd	r26, Y+23	; 0x17
    2ee8:	b8 8d       	ldd	r27, Y+24	; 0x18
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	45 e0       	ldi	r20, 0x05	; 5
    2ef0:	23 e0       	ldi	r18, 0x03	; 3
    2ef2:	fe 01       	movw	r30, r28
    2ef4:	31 96       	adiw	r30, 0x01	; 1
    2ef6:	8f 01       	movw	r16, r30
    2ef8:	0e 94 3b 1d 	call	0x3a76	; 0x3a76 <dtostrf>
	LCD_displayString(buffer);
    2efc:	ce 01       	movw	r24, r28
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <LCD_displayString>

}
    2f04:	68 96       	adiw	r28, 0x18	; 24
    2f06:	0f b6       	in	r0, 0x3f	; 63
    2f08:	f8 94       	cli
    2f0a:	de bf       	out	0x3e, r29	; 62
    2f0c:	0f be       	out	0x3f, r0	; 63
    2f0e:	cd bf       	out	0x3d, r28	; 61
    2f10:	cf 91       	pop	r28
    2f12:	df 91       	pop	r29
    2f14:	1f 91       	pop	r17
    2f16:	0f 91       	pop	r16
    2f18:	08 95       	ret

00002f1a <shiftArray>:
 *                                Function Definitions                         *
 *******************************************************************************/

/* Function Used For Shifting Array (Still in Progress) */
void shiftArray(float64 *arr[], uint8 currentIndex, uint8 *size, uint8 shift)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	cd b7       	in	r28, 0x3d	; 61
    2f20:	de b7       	in	r29, 0x3e	; 62
    2f22:	27 97       	sbiw	r28, 0x07	; 7
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	de bf       	out	0x3e, r29	; 62
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	cd bf       	out	0x3d, r28	; 61
    2f2e:	9b 83       	std	Y+3, r25	; 0x03
    2f30:	8a 83       	std	Y+2, r24	; 0x02
    2f32:	6c 83       	std	Y+4, r22	; 0x04
    2f34:	5e 83       	std	Y+6, r21	; 0x06
    2f36:	4d 83       	std	Y+5, r20	; 0x05
    2f38:	2f 83       	std	Y+7, r18	; 0x07
	uint8 j;
	for(j = currentIndex; j < *size; j++)
    2f3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f3c:	89 83       	std	Y+1, r24	; 0x01
    2f3e:	2d c0       	rjmp	.+90     	; 0x2f9a <shiftArray+0x80>
	{
		(*arr)[j] = (*arr)[j + shift];
    2f40:	ea 81       	ldd	r30, Y+2	; 0x02
    2f42:	fb 81       	ldd	r31, Y+3	; 0x03
    2f44:	20 81       	ld	r18, Z
    2f46:	31 81       	ldd	r19, Z+1	; 0x01
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	88 2f       	mov	r24, r24
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	88 0f       	add	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	88 0f       	add	r24, r24
    2f54:	99 1f       	adc	r25, r25
    2f56:	b9 01       	movw	r22, r18
    2f58:	68 0f       	add	r22, r24
    2f5a:	79 1f       	adc	r23, r25
    2f5c:	ea 81       	ldd	r30, Y+2	; 0x02
    2f5e:	fb 81       	ldd	r31, Y+3	; 0x03
    2f60:	40 81       	ld	r20, Z
    2f62:	51 81       	ldd	r21, Z+1	; 0x01
    2f64:	89 81       	ldd	r24, Y+1	; 0x01
    2f66:	28 2f       	mov	r18, r24
    2f68:	30 e0       	ldi	r19, 0x00	; 0
    2f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f6c:	88 2f       	mov	r24, r24
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	82 0f       	add	r24, r18
    2f72:	93 1f       	adc	r25, r19
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	88 0f       	add	r24, r24
    2f7a:	99 1f       	adc	r25, r25
    2f7c:	fa 01       	movw	r30, r20
    2f7e:	e8 0f       	add	r30, r24
    2f80:	f9 1f       	adc	r31, r25
    2f82:	80 81       	ld	r24, Z
    2f84:	91 81       	ldd	r25, Z+1	; 0x01
    2f86:	a2 81       	ldd	r26, Z+2	; 0x02
    2f88:	b3 81       	ldd	r27, Z+3	; 0x03
    2f8a:	fb 01       	movw	r30, r22
    2f8c:	80 83       	st	Z, r24
    2f8e:	91 83       	std	Z+1, r25	; 0x01
    2f90:	a2 83       	std	Z+2, r26	; 0x02
    2f92:	b3 83       	std	Z+3, r27	; 0x03

/* Function Used For Shifting Array (Still in Progress) */
void shiftArray(float64 *arr[], uint8 currentIndex, uint8 *size, uint8 shift)
{
	uint8 j;
	for(j = currentIndex; j < *size; j++)
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	8f 5f       	subi	r24, 0xFF	; 255
    2f98:	89 83       	std	Y+1, r24	; 0x01
    2f9a:	ed 81       	ldd	r30, Y+5	; 0x05
    2f9c:	fe 81       	ldd	r31, Y+6	; 0x06
    2f9e:	90 81       	ld	r25, Z
    2fa0:	89 81       	ldd	r24, Y+1	; 0x01
    2fa2:	89 17       	cp	r24, r25
    2fa4:	68 f2       	brcs	.-102    	; 0x2f40 <shiftArray+0x26>
	{
		(*arr)[j] = (*arr)[j + shift];
	}
	*size -= shift;
    2fa6:	ed 81       	ldd	r30, Y+5	; 0x05
    2fa8:	fe 81       	ldd	r31, Y+6	; 0x06
    2faa:	90 81       	ld	r25, Z
    2fac:	8f 81       	ldd	r24, Y+7	; 0x07
    2fae:	f9 2f       	mov	r31, r25
    2fb0:	f8 1b       	sub	r31, r24
    2fb2:	8f 2f       	mov	r24, r31
    2fb4:	ed 81       	ldd	r30, Y+5	; 0x05
    2fb6:	fe 81       	ldd	r31, Y+6	; 0x06
    2fb8:	80 83       	st	Z, r24
}
    2fba:	27 96       	adiw	r28, 0x07	; 7
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	cf 91       	pop	r28
    2fc8:	df 91       	pop	r29
    2fca:	08 95       	ret

00002fcc <displayArray>:

/* Function That Displays Array (Used For Testing) */
void displayArray(float64 arr[], uint8 size)
{
    2fcc:	df 93       	push	r29
    2fce:	cf 93       	push	r28
    2fd0:	cd b7       	in	r28, 0x3d	; 61
    2fd2:	de b7       	in	r29, 0x3e	; 62
    2fd4:	62 97       	sbiw	r28, 0x12	; 18
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	99 8b       	std	Y+17, r25	; 0x11
    2fe2:	88 8b       	std	Y+16, r24	; 0x10
    2fe4:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	LCD_displayStringRowColumn(2, 0, "                ");
    2fe6:	20 e6       	ldi	r18, 0x60	; 96
    2fe8:	30 e0       	ldi	r19, 0x00	; 0
    2fea:	82 e0       	ldi	r24, 0x02	; 2
    2fec:	60 e0       	ldi	r22, 0x00	; 0
    2fee:	a9 01       	movw	r20, r18
    2ff0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_displayStringRowColumn>
	LCD_moveCursor(2, 0);
    2ff4:	82 e0       	ldi	r24, 0x02	; 2
    2ff6:	60 e0       	ldi	r22, 0x00	; 0
    2ff8:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_moveCursor>
	for(i = 0; i < size; i++)
    2ffc:	1f 86       	std	Y+15, r1	; 0x0f
    2ffe:	1b c0       	rjmp	.+54     	; 0x3036 <displayArray+0x6a>
	{
		LCD_floatToString(arr[i]);
    3000:	8f 85       	ldd	r24, Y+15	; 0x0f
    3002:	88 2f       	mov	r24, r24
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	9c 01       	movw	r18, r24
    3008:	22 0f       	add	r18, r18
    300a:	33 1f       	adc	r19, r19
    300c:	22 0f       	add	r18, r18
    300e:	33 1f       	adc	r19, r19
    3010:	88 89       	ldd	r24, Y+16	; 0x10
    3012:	99 89       	ldd	r25, Y+17	; 0x11
    3014:	fc 01       	movw	r30, r24
    3016:	e2 0f       	add	r30, r18
    3018:	f3 1f       	adc	r31, r19
    301a:	80 81       	ld	r24, Z
    301c:	91 81       	ldd	r25, Z+1	; 0x01
    301e:	a2 81       	ldd	r26, Z+2	; 0x02
    3020:	b3 81       	ldd	r27, Z+3	; 0x03
    3022:	bc 01       	movw	r22, r24
    3024:	cd 01       	movw	r24, r26
    3026:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_floatToString>
		LCD_displayCharacter(',');
    302a:	8c e2       	ldi	r24, 0x2C	; 44
    302c:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayCharacter>
void displayArray(float64 arr[], uint8 size)
{
	uint8 i;
	LCD_displayStringRowColumn(2, 0, "                ");
	LCD_moveCursor(2, 0);
	for(i = 0; i < size; i++)
    3030:	8f 85       	ldd	r24, Y+15	; 0x0f
    3032:	8f 5f       	subi	r24, 0xFF	; 255
    3034:	8f 87       	std	Y+15, r24	; 0x0f
    3036:	9f 85       	ldd	r25, Y+15	; 0x0f
    3038:	8a 89       	ldd	r24, Y+18	; 0x12
    303a:	98 17       	cp	r25, r24
    303c:	08 f3       	brcs	.-62     	; 0x3000 <displayArray+0x34>
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	aa ef       	ldi	r26, 0xFA	; 250
    3044:	b3 e4       	ldi	r27, 0x43	; 67
    3046:	8b 87       	std	Y+11, r24	; 0x0b
    3048:	9c 87       	std	Y+12, r25	; 0x0c
    304a:	ad 87       	std	Y+13, r26	; 0x0d
    304c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    304e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3050:	7c 85       	ldd	r23, Y+12	; 0x0c
    3052:	8d 85       	ldd	r24, Y+13	; 0x0d
    3054:	9e 85       	ldd	r25, Y+14	; 0x0e
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	30 e0       	ldi	r19, 0x00	; 0
    305a:	4a e7       	ldi	r20, 0x7A	; 122
    305c:	53 e4       	ldi	r21, 0x43	; 67
    305e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3062:	dc 01       	movw	r26, r24
    3064:	cb 01       	movw	r24, r22
    3066:	8f 83       	std	Y+7, r24	; 0x07
    3068:	98 87       	std	Y+8, r25	; 0x08
    306a:	a9 87       	std	Y+9, r26	; 0x09
    306c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    306e:	6f 81       	ldd	r22, Y+7	; 0x07
    3070:	78 85       	ldd	r23, Y+8	; 0x08
    3072:	89 85       	ldd	r24, Y+9	; 0x09
    3074:	9a 85       	ldd	r25, Y+10	; 0x0a
    3076:	20 e0       	ldi	r18, 0x00	; 0
    3078:	30 e0       	ldi	r19, 0x00	; 0
    307a:	40 e8       	ldi	r20, 0x80	; 128
    307c:	5f e3       	ldi	r21, 0x3F	; 63
    307e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3082:	88 23       	and	r24, r24
    3084:	2c f4       	brge	.+10     	; 0x3090 <displayArray+0xc4>
		__ticks = 1;
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	3f c0       	rjmp	.+126    	; 0x310e <displayArray+0x142>
	else if (__tmp > 65535)
    3090:	6f 81       	ldd	r22, Y+7	; 0x07
    3092:	78 85       	ldd	r23, Y+8	; 0x08
    3094:	89 85       	ldd	r24, Y+9	; 0x09
    3096:	9a 85       	ldd	r25, Y+10	; 0x0a
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	3f ef       	ldi	r19, 0xFF	; 255
    309c:	4f e7       	ldi	r20, 0x7F	; 127
    309e:	57 e4       	ldi	r21, 0x47	; 71
    30a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    30a4:	18 16       	cp	r1, r24
    30a6:	4c f5       	brge	.+82     	; 0x30fa <displayArray+0x12e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    30aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	40 e2       	ldi	r20, 0x20	; 32
    30b6:	51 e4       	ldi	r21, 0x41	; 65
    30b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30bc:	dc 01       	movw	r26, r24
    30be:	cb 01       	movw	r24, r22
    30c0:	bc 01       	movw	r22, r24
    30c2:	cd 01       	movw	r24, r26
    30c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	9e 83       	std	Y+6, r25	; 0x06
    30ce:	8d 83       	std	Y+5, r24	; 0x05
    30d0:	0f c0       	rjmp	.+30     	; 0x30f0 <displayArray+0x124>
    30d2:	89 e1       	ldi	r24, 0x19	; 25
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	9c 83       	std	Y+4, r25	; 0x04
    30d8:	8b 83       	std	Y+3, r24	; 0x03
    30da:	8b 81       	ldd	r24, Y+3	; 0x03
    30dc:	9c 81       	ldd	r25, Y+4	; 0x04
    30de:	01 97       	sbiw	r24, 0x01	; 1
    30e0:	f1 f7       	brne	.-4      	; 0x30de <displayArray+0x112>
    30e2:	9c 83       	std	Y+4, r25	; 0x04
    30e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30e6:	8d 81       	ldd	r24, Y+5	; 0x05
    30e8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	9e 83       	std	Y+6, r25	; 0x06
    30ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f0:	8d 81       	ldd	r24, Y+5	; 0x05
    30f2:	9e 81       	ldd	r25, Y+6	; 0x06
    30f4:	00 97       	sbiw	r24, 0x00	; 0
    30f6:	69 f7       	brne	.-38     	; 0x30d2 <displayArray+0x106>
    30f8:	14 c0       	rjmp	.+40     	; 0x3122 <displayArray+0x156>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30fa:	6f 81       	ldd	r22, Y+7	; 0x07
    30fc:	78 85       	ldd	r23, Y+8	; 0x08
    30fe:	89 85       	ldd	r24, Y+9	; 0x09
    3100:	9a 85       	ldd	r25, Y+10	; 0x0a
    3102:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3106:	dc 01       	movw	r26, r24
    3108:	cb 01       	movw	r24, r22
    310a:	9e 83       	std	Y+6, r25	; 0x06
    310c:	8d 83       	std	Y+5, r24	; 0x05
    310e:	8d 81       	ldd	r24, Y+5	; 0x05
    3110:	9e 81       	ldd	r25, Y+6	; 0x06
    3112:	9a 83       	std	Y+2, r25	; 0x02
    3114:	89 83       	std	Y+1, r24	; 0x01
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	01 97       	sbiw	r24, 0x01	; 1
    311c:	f1 f7       	brne	.-4      	; 0x311a <displayArray+0x14e>
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_floatToString(arr[i]);
		LCD_displayCharacter(',');
	}
	_delay_ms(500);
}
    3122:	62 96       	adiw	r28, 0x12	; 18
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	cf 91       	pop	r28
    3130:	df 91       	pop	r29
    3132:	08 95       	ret

00003134 <numConcat>:

/* Concatenates Characters To Become a Full Number */
float64 numConcat(uint8 array[], uint8 size)
{
    3134:	df 93       	push	r29
    3136:	cf 93       	push	r28
    3138:	cd b7       	in	r28, 0x3d	; 61
    313a:	de b7       	in	r29, 0x3e	; 62
    313c:	28 97       	sbiw	r28, 0x08	; 8
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	de bf       	out	0x3e, r29	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	cd bf       	out	0x3d, r28	; 61
    3148:	9f 83       	std	Y+7, r25	; 0x07
    314a:	8e 83       	std	Y+6, r24	; 0x06
    314c:	68 87       	std	Y+8, r22	; 0x08
	float64 num = 0;
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	a0 e0       	ldi	r26, 0x00	; 0
    3154:	b0 e0       	ldi	r27, 0x00	; 0
    3156:	8a 83       	std	Y+2, r24	; 0x02
    3158:	9b 83       	std	Y+3, r25	; 0x03
    315a:	ac 83       	std	Y+4, r26	; 0x04
    315c:	bd 83       	std	Y+5, r27	; 0x05
	uint8 i;
	for (i = 0; i < size; i++)
    315e:	19 82       	std	Y+1, r1	; 0x01
    3160:	34 c0       	rjmp	.+104    	; 0x31ca <numConcat+0x96>
	{
		num *= 10;
    3162:	6a 81       	ldd	r22, Y+2	; 0x02
    3164:	7b 81       	ldd	r23, Y+3	; 0x03
    3166:	8c 81       	ldd	r24, Y+4	; 0x04
    3168:	9d 81       	ldd	r25, Y+5	; 0x05
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e2       	ldi	r20, 0x20	; 32
    3170:	51 e4       	ldi	r21, 0x41	; 65
    3172:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	8a 83       	std	Y+2, r24	; 0x02
    317c:	9b 83       	std	Y+3, r25	; 0x03
    317e:	ac 83       	std	Y+4, r26	; 0x04
    3180:	bd 83       	std	Y+5, r27	; 0x05
		num += array[i];
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	28 2f       	mov	r18, r24
    3186:	30 e0       	ldi	r19, 0x00	; 0
    3188:	8e 81       	ldd	r24, Y+6	; 0x06
    318a:	9f 81       	ldd	r25, Y+7	; 0x07
    318c:	fc 01       	movw	r30, r24
    318e:	e2 0f       	add	r30, r18
    3190:	f3 1f       	adc	r31, r19
    3192:	80 81       	ld	r24, Z
    3194:	88 2f       	mov	r24, r24
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	aa 27       	eor	r26, r26
    319a:	97 fd       	sbrc	r25, 7
    319c:	a0 95       	com	r26
    319e:	ba 2f       	mov	r27, r26
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    31a8:	9b 01       	movw	r18, r22
    31aa:	ac 01       	movw	r20, r24
    31ac:	6a 81       	ldd	r22, Y+2	; 0x02
    31ae:	7b 81       	ldd	r23, Y+3	; 0x03
    31b0:	8c 81       	ldd	r24, Y+4	; 0x04
    31b2:	9d 81       	ldd	r25, Y+5	; 0x05
    31b4:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    31b8:	dc 01       	movw	r26, r24
    31ba:	cb 01       	movw	r24, r22
    31bc:	8a 83       	std	Y+2, r24	; 0x02
    31be:	9b 83       	std	Y+3, r25	; 0x03
    31c0:	ac 83       	std	Y+4, r26	; 0x04
    31c2:	bd 83       	std	Y+5, r27	; 0x05
/* Concatenates Characters To Become a Full Number */
float64 numConcat(uint8 array[], uint8 size)
{
	float64 num = 0;
	uint8 i;
	for (i = 0; i < size; i++)
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	8f 5f       	subi	r24, 0xFF	; 255
    31c8:	89 83       	std	Y+1, r24	; 0x01
    31ca:	99 81       	ldd	r25, Y+1	; 0x01
    31cc:	88 85       	ldd	r24, Y+8	; 0x08
    31ce:	98 17       	cp	r25, r24
    31d0:	40 f2       	brcs	.-112    	; 0x3162 <numConcat+0x2e>
	{
		num *= 10;
		num += array[i];
	}
	return num;
    31d2:	8a 81       	ldd	r24, Y+2	; 0x02
    31d4:	9b 81       	ldd	r25, Y+3	; 0x03
    31d6:	ac 81       	ldd	r26, Y+4	; 0x04
    31d8:	bd 81       	ldd	r27, Y+5	; 0x05
}
    31da:	bc 01       	movw	r22, r24
    31dc:	cd 01       	movw	r24, r26
    31de:	28 96       	adiw	r28, 0x08	; 8
    31e0:	0f b6       	in	r0, 0x3f	; 63
    31e2:	f8 94       	cli
    31e4:	de bf       	out	0x3e, r29	; 62
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	cd bf       	out	0x3d, r28	; 61
    31ea:	cf 91       	pop	r28
    31ec:	df 91       	pop	r29
    31ee:	08 95       	ret

000031f0 <operation>:

/* Calculates The Operation Given & Returns The Result */
float64 operation(float64 num1, float64 num2, uint8 sign)
{
    31f0:	0f 93       	push	r16
    31f2:	df 93       	push	r29
    31f4:	cf 93       	push	r28
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	2f 97       	sbiw	r28, 0x0f	; 15
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	69 83       	std	Y+1, r22	; 0x01
    3208:	7a 83       	std	Y+2, r23	; 0x02
    320a:	8b 83       	std	Y+3, r24	; 0x03
    320c:	9c 83       	std	Y+4, r25	; 0x04
    320e:	2d 83       	std	Y+5, r18	; 0x05
    3210:	3e 83       	std	Y+6, r19	; 0x06
    3212:	4f 83       	std	Y+7, r20	; 0x07
    3214:	58 87       	std	Y+8, r21	; 0x08
    3216:	09 87       	std	Y+9, r16	; 0x09
	switch(sign)
    3218:	89 85       	ldd	r24, Y+9	; 0x09
    321a:	28 2f       	mov	r18, r24
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	3f 87       	std	Y+15, r19	; 0x0f
    3220:	2e 87       	std	Y+14, r18	; 0x0e
    3222:	8e 85       	ldd	r24, Y+14	; 0x0e
    3224:	9f 85       	ldd	r25, Y+15	; 0x0f
    3226:	8a 32       	cpi	r24, 0x2A	; 42
    3228:	91 05       	cpc	r25, r1
    322a:	c9 f1       	breq	.+114    	; 0x329e <operation+0xae>
    322c:	ae 85       	ldd	r26, Y+14	; 0x0e
    322e:	bf 85       	ldd	r27, Y+15	; 0x0f
    3230:	ab 32       	cpi	r26, 0x2B	; 43
    3232:	b1 05       	cpc	r27, r1
    3234:	3c f4       	brge	.+14     	; 0x3244 <operation+0x54>
    3236:	2e 85       	ldd	r18, Y+14	; 0x0e
    3238:	3f 85       	ldd	r19, Y+15	; 0x0f
    323a:	25 32       	cpi	r18, 0x25	; 37
    323c:	31 05       	cpc	r19, r1
    323e:	09 f4       	brne	.+2      	; 0x3242 <operation+0x52>
    3240:	3f c0       	rjmp	.+126    	; 0x32c0 <operation+0xd0>
    3242:	4f c0       	rjmp	.+158    	; 0x32e2 <operation+0xf2>
    3244:	8e 85       	ldd	r24, Y+14	; 0x0e
    3246:	9f 85       	ldd	r25, Y+15	; 0x0f
    3248:	8b 32       	cpi	r24, 0x2B	; 43
    324a:	91 05       	cpc	r25, r1
    324c:	31 f0       	breq	.+12     	; 0x325a <operation+0x6a>
    324e:	ae 85       	ldd	r26, Y+14	; 0x0e
    3250:	bf 85       	ldd	r27, Y+15	; 0x0f
    3252:	ad 32       	cpi	r26, 0x2D	; 45
    3254:	b1 05       	cpc	r27, r1
    3256:	91 f0       	breq	.+36     	; 0x327c <operation+0x8c>
    3258:	44 c0       	rjmp	.+136    	; 0x32e2 <operation+0xf2>
	{
	case '+':
		return num1 + num2;
    325a:	69 81       	ldd	r22, Y+1	; 0x01
    325c:	7a 81       	ldd	r23, Y+2	; 0x02
    325e:	8b 81       	ldd	r24, Y+3	; 0x03
    3260:	9c 81       	ldd	r25, Y+4	; 0x04
    3262:	2d 81       	ldd	r18, Y+5	; 0x05
    3264:	3e 81       	ldd	r19, Y+6	; 0x06
    3266:	4f 81       	ldd	r20, Y+7	; 0x07
    3268:	58 85       	ldd	r21, Y+8	; 0x08
    326a:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    326e:	dc 01       	movw	r26, r24
    3270:	cb 01       	movw	r24, r22
    3272:	8a 87       	std	Y+10, r24	; 0x0a
    3274:	9b 87       	std	Y+11, r25	; 0x0b
    3276:	ac 87       	std	Y+12, r26	; 0x0c
    3278:	bd 87       	std	Y+13, r27	; 0x0d
    327a:	3b c0       	rjmp	.+118    	; 0x32f2 <operation+0x102>
	case '-':
		return num1 - num2;
    327c:	69 81       	ldd	r22, Y+1	; 0x01
    327e:	7a 81       	ldd	r23, Y+2	; 0x02
    3280:	8b 81       	ldd	r24, Y+3	; 0x03
    3282:	9c 81       	ldd	r25, Y+4	; 0x04
    3284:	2d 81       	ldd	r18, Y+5	; 0x05
    3286:	3e 81       	ldd	r19, Y+6	; 0x06
    3288:	4f 81       	ldd	r20, Y+7	; 0x07
    328a:	58 85       	ldd	r21, Y+8	; 0x08
    328c:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	8a 87       	std	Y+10, r24	; 0x0a
    3296:	9b 87       	std	Y+11, r25	; 0x0b
    3298:	ac 87       	std	Y+12, r26	; 0x0c
    329a:	bd 87       	std	Y+13, r27	; 0x0d
    329c:	2a c0       	rjmp	.+84     	; 0x32f2 <operation+0x102>
	case '*':
		return num1 * num2;
    329e:	69 81       	ldd	r22, Y+1	; 0x01
    32a0:	7a 81       	ldd	r23, Y+2	; 0x02
    32a2:	8b 81       	ldd	r24, Y+3	; 0x03
    32a4:	9c 81       	ldd	r25, Y+4	; 0x04
    32a6:	2d 81       	ldd	r18, Y+5	; 0x05
    32a8:	3e 81       	ldd	r19, Y+6	; 0x06
    32aa:	4f 81       	ldd	r20, Y+7	; 0x07
    32ac:	58 85       	ldd	r21, Y+8	; 0x08
    32ae:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32b2:	dc 01       	movw	r26, r24
    32b4:	cb 01       	movw	r24, r22
    32b6:	8a 87       	std	Y+10, r24	; 0x0a
    32b8:	9b 87       	std	Y+11, r25	; 0x0b
    32ba:	ac 87       	std	Y+12, r26	; 0x0c
    32bc:	bd 87       	std	Y+13, r27	; 0x0d
    32be:	19 c0       	rjmp	.+50     	; 0x32f2 <operation+0x102>
	case '%':
		return num1 / num2;
    32c0:	69 81       	ldd	r22, Y+1	; 0x01
    32c2:	7a 81       	ldd	r23, Y+2	; 0x02
    32c4:	8b 81       	ldd	r24, Y+3	; 0x03
    32c6:	9c 81       	ldd	r25, Y+4	; 0x04
    32c8:	2d 81       	ldd	r18, Y+5	; 0x05
    32ca:	3e 81       	ldd	r19, Y+6	; 0x06
    32cc:	4f 81       	ldd	r20, Y+7	; 0x07
    32ce:	58 85       	ldd	r21, Y+8	; 0x08
    32d0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	8a 87       	std	Y+10, r24	; 0x0a
    32da:	9b 87       	std	Y+11, r25	; 0x0b
    32dc:	ac 87       	std	Y+12, r26	; 0x0c
    32de:	bd 87       	std	Y+13, r27	; 0x0d
    32e0:	08 c0       	rjmp	.+16     	; 0x32f2 <operation+0x102>
	default:
		break;
	}
	return 0;
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	a0 e0       	ldi	r26, 0x00	; 0
    32e8:	b0 e0       	ldi	r27, 0x00	; 0
    32ea:	8a 87       	std	Y+10, r24	; 0x0a
    32ec:	9b 87       	std	Y+11, r25	; 0x0b
    32ee:	ac 87       	std	Y+12, r26	; 0x0c
    32f0:	bd 87       	std	Y+13, r27	; 0x0d
    32f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    32f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    32f6:	ac 85       	ldd	r26, Y+12	; 0x0c
    32f8:	bd 85       	ldd	r27, Y+13	; 0x0d
}
    32fa:	bc 01       	movw	r22, r24
    32fc:	cd 01       	movw	r24, r26
    32fe:	2f 96       	adiw	r28, 0x0f	; 15
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	de bf       	out	0x3e, r29	; 62
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	cd bf       	out	0x3d, r28	; 61
    330a:	cf 91       	pop	r28
    330c:	df 91       	pop	r29
    330e:	0f 91       	pop	r16
    3310:	08 95       	ret

00003312 <clearAll>:

/* Function That Clears The Array & Screen */
void clearAll()
{
    3312:	df 93       	push	r29
    3314:	cf 93       	push	r28
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
	g_arrayCount = 0;
    331a:	10 92 98 01 	sts	0x0198, r1
	g_newCalcFlag = FALSE;
    331e:	10 92 99 01 	sts	0x0199, r1
	LCD_clearScreen();
    3322:	0e 94 57 17 	call	0x2eae	; 0x2eae <LCD_clearScreen>
	LCD_displayString("CALCULATOR:");
    3326:	81 e7       	ldi	r24, 0x71	; 113
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <LCD_displayString>
	LCD_moveCursor(1, 0);
    332e:	81 e0       	ldi	r24, 0x01	; 1
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_moveCursor>
}
    3336:	cf 91       	pop	r28
    3338:	df 91       	pop	r29
    333a:	08 95       	ret

0000333c <input>:

/* Function that Displays Character on LCD Screen & Pushes It in The Array of Characters */
void input(uint8 key)
{
    333c:	df 93       	push	r29
    333e:	cf 93       	push	r28
    3340:	0f 92       	push	r0
    3342:	cd b7       	in	r28, 0x3d	; 61
    3344:	de b7       	in	r29, 0x3e	; 62
    3346:	89 83       	std	Y+1, r24	; 0x01
	if(g_arrayCount < 16)
    3348:	80 91 98 01 	lds	r24, 0x0198
    334c:	80 31       	cpi	r24, 0x10	; 16
    334e:	c8 f4       	brcc	.+50     	; 0x3382 <input+0x46>
	{
		if(key >= 0 && key <= 9) LCD_intgerToString(key);
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	8a 30       	cpi	r24, 0x0A	; 10
    3354:	30 f4       	brcc	.+12     	; 0x3362 <input+0x26>
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	88 2f       	mov	r24, r24
    335a:	90 e0       	ldi	r25, 0x00	; 0
    335c:	0e 94 34 17 	call	0x2e68	; 0x2e68 <LCD_intgerToString>
    3360:	03 c0       	rjmp	.+6      	; 0x3368 <input+0x2c>
		else LCD_displayCharacter(key);
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayCharacter>
		g_array[g_arrayCount++] = key;
    3368:	20 91 98 01 	lds	r18, 0x0198
    336c:	82 2f       	mov	r24, r18
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	fc 01       	movw	r30, r24
    3372:	e8 57       	subi	r30, 0x78	; 120
    3374:	fe 4f       	sbci	r31, 0xFE	; 254
    3376:	89 81       	ldd	r24, Y+1	; 0x01
    3378:	80 83       	st	Z, r24
    337a:	82 2f       	mov	r24, r18
    337c:	8f 5f       	subi	r24, 0xFF	; 255
    337e:	80 93 98 01 	sts	0x0198, r24
	}
}
    3382:	0f 90       	pop	r0
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <calculate>:

/* Function that Does All the Calculation Process */
void calculate()
{
    338a:	8f 92       	push	r8
    338c:	9f 92       	push	r9
    338e:	af 92       	push	r10
    3390:	bf 92       	push	r11
    3392:	cf 92       	push	r12
    3394:	df 92       	push	r13
    3396:	ef 92       	push	r14
    3398:	ff 92       	push	r15
    339a:	0f 93       	push	r16
    339c:	1f 93       	push	r17
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	cd b7       	in	r28, 0x3d	; 61
    33a4:	de b7       	in	r29, 0x3e	; 62
    33a6:	c9 55       	subi	r28, 0x59	; 89
    33a8:	d0 40       	sbci	r29, 0x00	; 0
    33aa:	0f b6       	in	r0, 0x3f	; 63
    33ac:	f8 94       	cli
    33ae:	de bf       	out	0x3e, r29	; 62
    33b0:	0f be       	out	0x3f, r0	; 63
    33b2:	cd bf       	out	0x3d, r28	; 61
	float64 numsAndSigns[16] = {0},	/* Array for All Numbers & Signs in Equation */
    33b4:	80 e4       	ldi	r24, 0x40	; 64
    33b6:	fe 01       	movw	r30, r28
    33b8:	3a 96       	adiw	r30, 0x0a	; 10
    33ba:	df 01       	movw	r26, r30
    33bc:	98 2f       	mov	r25, r24
    33be:	1d 92       	st	X+, r1
    33c0:	9a 95       	dec	r25
    33c2:	e9 f7       	brne	.-6      	; 0x33be <calculate+0x34>
			result; 				/* The Result of The Equation */
	uint8 	numsAndSignsCount = 0,	/* Count for the Numbers & Signs */
    33c4:	1d 82       	std	Y+5, r1	; 0x05
			num[16] = {0},			/* Array for Numbers to be Concatenated  */
    33c6:	ce 01       	movw	r24, r28
    33c8:	86 5b       	subi	r24, 0xB6	; 182
    33ca:	9f 4f       	sbci	r25, 0xFF	; 255
    33cc:	20 e1       	ldi	r18, 0x10	; 16
    33ce:	fc 01       	movw	r30, r24
    33d0:	df 01       	movw	r26, r30
    33d2:	82 2f       	mov	r24, r18
    33d4:	1d 92       	st	X+, r1
    33d6:	8a 95       	dec	r24
    33d8:	e9 f7       	brne	.-6      	; 0x33d4 <calculate+0x4a>
			numCount = 0,			/* Count for Numbers to be Concatenated */
    33da:	1c 82       	std	Y+4, r1	; 0x04
			i;						/* Index Used in For Loops */

	for(i = 0; i < g_arrayCount; i++)
    33dc:	1b 82       	std	Y+3, r1	; 0x03
    33de:	8f c0       	rjmp	.+286    	; 0x34fe <calculate+0x174>
	{
		if(g_array[i] >= 0 && g_array[i] <= 9)
    33e0:	8b 81       	ldd	r24, Y+3	; 0x03
    33e2:	88 2f       	mov	r24, r24
    33e4:	90 e0       	ldi	r25, 0x00	; 0
    33e6:	fc 01       	movw	r30, r24
    33e8:	e8 57       	subi	r30, 0x78	; 120
    33ea:	fe 4f       	sbci	r31, 0xFE	; 254
    33ec:	80 81       	ld	r24, Z
    33ee:	8a 30       	cpi	r24, 0x0A	; 10
    33f0:	08 f0       	brcs	.+2      	; 0x33f4 <calculate+0x6a>
    33f2:	3e c0       	rjmp	.+124    	; 0x3470 <calculate+0xe6>
		{
			num[numCount++] = g_array[i];
    33f4:	8c 81       	ldd	r24, Y+4	; 0x04
    33f6:	28 2f       	mov	r18, r24
    33f8:	30 e0       	ldi	r19, 0x00	; 0
    33fa:	8b 81       	ldd	r24, Y+3	; 0x03
    33fc:	88 2f       	mov	r24, r24
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	fc 01       	movw	r30, r24
    3402:	e8 57       	subi	r30, 0x78	; 120
    3404:	fe 4f       	sbci	r31, 0xFE	; 254
    3406:	40 81       	ld	r20, Z
    3408:	ce 01       	movw	r24, r28
    340a:	86 5b       	subi	r24, 0xB6	; 182
    340c:	9f 4f       	sbci	r25, 0xFF	; 255
    340e:	fc 01       	movw	r30, r24
    3410:	e2 0f       	add	r30, r18
    3412:	f3 1f       	adc	r31, r19
    3414:	40 83       	st	Z, r20
    3416:	8c 81       	ldd	r24, Y+4	; 0x04
    3418:	8f 5f       	subi	r24, 0xFF	; 255
    341a:	8c 83       	std	Y+4, r24	; 0x04
			if(i == g_arrayCount - 1)
    341c:	8b 81       	ldd	r24, Y+3	; 0x03
    341e:	28 2f       	mov	r18, r24
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	80 91 98 01 	lds	r24, 0x0198
    3426:	88 2f       	mov	r24, r24
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	01 97       	sbiw	r24, 0x01	; 1
    342c:	28 17       	cp	r18, r24
    342e:	39 07       	cpc	r19, r25
    3430:	09 f0       	breq	.+2      	; 0x3434 <calculate+0xaa>
    3432:	62 c0       	rjmp	.+196    	; 0x34f8 <calculate+0x16e>
				numsAndSigns[numsAndSignsCount++] = numConcat(num, numCount);
    3434:	8d 81       	ldd	r24, Y+5	; 0x05
    3436:	08 2f       	mov	r16, r24
    3438:	10 e0       	ldi	r17, 0x00	; 0
    343a:	ce 01       	movw	r24, r28
    343c:	86 5b       	subi	r24, 0xB6	; 182
    343e:	9f 4f       	sbci	r25, 0xFF	; 255
    3440:	6c 81       	ldd	r22, Y+4	; 0x04
    3442:	0e 94 9a 18 	call	0x3134	; 0x3134 <numConcat>
    3446:	ab 01       	movw	r20, r22
    3448:	bc 01       	movw	r22, r24
    344a:	98 01       	movw	r18, r16
    344c:	22 0f       	add	r18, r18
    344e:	33 1f       	adc	r19, r19
    3450:	22 0f       	add	r18, r18
    3452:	33 1f       	adc	r19, r19
    3454:	ce 01       	movw	r24, r28
    3456:	01 96       	adiw	r24, 0x01	; 1
    3458:	82 0f       	add	r24, r18
    345a:	93 1f       	adc	r25, r19
    345c:	fc 01       	movw	r30, r24
    345e:	39 96       	adiw	r30, 0x09	; 9
    3460:	40 83       	st	Z, r20
    3462:	51 83       	std	Z+1, r21	; 0x01
    3464:	62 83       	std	Z+2, r22	; 0x02
    3466:	73 83       	std	Z+3, r23	; 0x03
    3468:	8d 81       	ldd	r24, Y+5	; 0x05
    346a:	8f 5f       	subi	r24, 0xFF	; 255
    346c:	8d 83       	std	Y+5, r24	; 0x05
    346e:	44 c0       	rjmp	.+136    	; 0x34f8 <calculate+0x16e>
		}
		else
		{
			numsAndSigns[numsAndSignsCount++] = numConcat(num, numCount);
    3470:	8d 81       	ldd	r24, Y+5	; 0x05
    3472:	08 2f       	mov	r16, r24
    3474:	10 e0       	ldi	r17, 0x00	; 0
    3476:	ce 01       	movw	r24, r28
    3478:	86 5b       	subi	r24, 0xB6	; 182
    347a:	9f 4f       	sbci	r25, 0xFF	; 255
    347c:	6c 81       	ldd	r22, Y+4	; 0x04
    347e:	0e 94 9a 18 	call	0x3134	; 0x3134 <numConcat>
    3482:	ab 01       	movw	r20, r22
    3484:	bc 01       	movw	r22, r24
    3486:	98 01       	movw	r18, r16
    3488:	22 0f       	add	r18, r18
    348a:	33 1f       	adc	r19, r19
    348c:	22 0f       	add	r18, r18
    348e:	33 1f       	adc	r19, r19
    3490:	ce 01       	movw	r24, r28
    3492:	01 96       	adiw	r24, 0x01	; 1
    3494:	82 0f       	add	r24, r18
    3496:	93 1f       	adc	r25, r19
    3498:	fc 01       	movw	r30, r24
    349a:	39 96       	adiw	r30, 0x09	; 9
    349c:	40 83       	st	Z, r20
    349e:	51 83       	std	Z+1, r21	; 0x01
    34a0:	62 83       	std	Z+2, r22	; 0x02
    34a2:	73 83       	std	Z+3, r23	; 0x03
    34a4:	8d 81       	ldd	r24, Y+5	; 0x05
    34a6:	8f 5f       	subi	r24, 0xFF	; 255
    34a8:	8d 83       	std	Y+5, r24	; 0x05
			numsAndSigns[numsAndSignsCount++] = g_array[i];
    34aa:	8d 81       	ldd	r24, Y+5	; 0x05
    34ac:	08 2f       	mov	r16, r24
    34ae:	10 e0       	ldi	r17, 0x00	; 0
    34b0:	8b 81       	ldd	r24, Y+3	; 0x03
    34b2:	88 2f       	mov	r24, r24
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	fc 01       	movw	r30, r24
    34b8:	e8 57       	subi	r30, 0x78	; 120
    34ba:	fe 4f       	sbci	r31, 0xFE	; 254
    34bc:	80 81       	ld	r24, Z
    34be:	88 2f       	mov	r24, r24
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	a0 e0       	ldi	r26, 0x00	; 0
    34c4:	b0 e0       	ldi	r27, 0x00	; 0
    34c6:	bc 01       	movw	r22, r24
    34c8:	cd 01       	movw	r24, r26
    34ca:	0e 94 b4 05 	call	0xb68	; 0xb68 <__floatunsisf>
    34ce:	ab 01       	movw	r20, r22
    34d0:	bc 01       	movw	r22, r24
    34d2:	98 01       	movw	r18, r16
    34d4:	22 0f       	add	r18, r18
    34d6:	33 1f       	adc	r19, r19
    34d8:	22 0f       	add	r18, r18
    34da:	33 1f       	adc	r19, r19
    34dc:	ce 01       	movw	r24, r28
    34de:	01 96       	adiw	r24, 0x01	; 1
    34e0:	82 0f       	add	r24, r18
    34e2:	93 1f       	adc	r25, r19
    34e4:	fc 01       	movw	r30, r24
    34e6:	39 96       	adiw	r30, 0x09	; 9
    34e8:	40 83       	st	Z, r20
    34ea:	51 83       	std	Z+1, r21	; 0x01
    34ec:	62 83       	std	Z+2, r22	; 0x02
    34ee:	73 83       	std	Z+3, r23	; 0x03
    34f0:	8d 81       	ldd	r24, Y+5	; 0x05
    34f2:	8f 5f       	subi	r24, 0xFF	; 255
    34f4:	8d 83       	std	Y+5, r24	; 0x05
			numCount = 0;
    34f6:	1c 82       	std	Y+4, r1	; 0x04
	uint8 	numsAndSignsCount = 0,	/* Count for the Numbers & Signs */
			num[16] = {0},			/* Array for Numbers to be Concatenated  */
			numCount = 0,			/* Count for Numbers to be Concatenated */
			i;						/* Index Used in For Loops */

	for(i = 0; i < g_arrayCount; i++)
    34f8:	8b 81       	ldd	r24, Y+3	; 0x03
    34fa:	8f 5f       	subi	r24, 0xFF	; 255
    34fc:	8b 83       	std	Y+3, r24	; 0x03
    34fe:	90 91 98 01 	lds	r25, 0x0198
    3502:	8b 81       	ldd	r24, Y+3	; 0x03
    3504:	89 17       	cp	r24, r25
    3506:	08 f4       	brcc	.+2      	; 0x350a <calculate+0x180>
    3508:	6b cf       	rjmp	.-298    	; 0x33e0 <calculate+0x56>
			numsAndSigns[numsAndSignsCount++] = g_array[i];
			numCount = 0;
		}
	}
	/* displayArray(numsAndSigns, numsAndSignsCount); */
	for(i = 0; i < numsAndSignsCount; i++)
    350a:	1b 82       	std	Y+3, r1	; 0x03
    350c:	cd c0       	rjmp	.+410    	; 0x36a8 <calculate+0x31e>
	{
		if(numsAndSigns[i] == '*' || numsAndSigns[i] == '%')
    350e:	8b 81       	ldd	r24, Y+3	; 0x03
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	9c 01       	movw	r18, r24
    3516:	22 0f       	add	r18, r18
    3518:	33 1f       	adc	r19, r19
    351a:	22 0f       	add	r18, r18
    351c:	33 1f       	adc	r19, r19
    351e:	ce 01       	movw	r24, r28
    3520:	01 96       	adiw	r24, 0x01	; 1
    3522:	82 0f       	add	r24, r18
    3524:	93 1f       	adc	r25, r19
    3526:	fc 01       	movw	r30, r24
    3528:	39 96       	adiw	r30, 0x09	; 9
    352a:	80 81       	ld	r24, Z
    352c:	91 81       	ldd	r25, Z+1	; 0x01
    352e:	a2 81       	ldd	r26, Z+2	; 0x02
    3530:	b3 81       	ldd	r27, Z+3	; 0x03
    3532:	bc 01       	movw	r22, r24
    3534:	cd 01       	movw	r24, r26
    3536:	20 e0       	ldi	r18, 0x00	; 0
    3538:	30 e0       	ldi	r19, 0x00	; 0
    353a:	48 e2       	ldi	r20, 0x28	; 40
    353c:	52 e4       	ldi	r21, 0x42	; 66
    353e:	0e 94 42 04 	call	0x884	; 0x884 <__eqsf2>
    3542:	88 23       	and	r24, r24
    3544:	e9 f0       	breq	.+58     	; 0x3580 <calculate+0x1f6>
    3546:	8b 81       	ldd	r24, Y+3	; 0x03
    3548:	88 2f       	mov	r24, r24
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	9c 01       	movw	r18, r24
    354e:	22 0f       	add	r18, r18
    3550:	33 1f       	adc	r19, r19
    3552:	22 0f       	add	r18, r18
    3554:	33 1f       	adc	r19, r19
    3556:	ce 01       	movw	r24, r28
    3558:	01 96       	adiw	r24, 0x01	; 1
    355a:	82 0f       	add	r24, r18
    355c:	93 1f       	adc	r25, r19
    355e:	fc 01       	movw	r30, r24
    3560:	39 96       	adiw	r30, 0x09	; 9
    3562:	80 81       	ld	r24, Z
    3564:	91 81       	ldd	r25, Z+1	; 0x01
    3566:	a2 81       	ldd	r26, Z+2	; 0x02
    3568:	b3 81       	ldd	r27, Z+3	; 0x03
    356a:	bc 01       	movw	r22, r24
    356c:	cd 01       	movw	r24, r26
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	44 e1       	ldi	r20, 0x14	; 20
    3574:	52 e4       	ldi	r21, 0x42	; 66
    3576:	0e 94 42 04 	call	0x884	; 0x884 <__eqsf2>
    357a:	88 23       	and	r24, r24
    357c:	09 f0       	breq	.+2      	; 0x3580 <calculate+0x1f6>
    357e:	91 c0       	rjmp	.+290    	; 0x36a2 <calculate+0x318>
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
    3580:	8b 81       	ldd	r24, Y+3	; 0x03
    3582:	88 2f       	mov	r24, r24
    3584:	90 e0       	ldi	r25, 0x00	; 0
    3586:	4c 01       	movw	r8, r24
    3588:	08 94       	sec
    358a:	81 08       	sbc	r8, r1
    358c:	91 08       	sbc	r9, r1
    358e:	8b 81       	ldd	r24, Y+3	; 0x03
    3590:	88 2f       	mov	r24, r24
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	9c 01       	movw	r18, r24
    3598:	22 0f       	add	r18, r18
    359a:	33 1f       	adc	r19, r19
    359c:	22 0f       	add	r18, r18
    359e:	33 1f       	adc	r19, r19
    35a0:	ce 01       	movw	r24, r28
    35a2:	01 96       	adiw	r24, 0x01	; 1
    35a4:	82 0f       	add	r24, r18
    35a6:	93 1f       	adc	r25, r19
    35a8:	fc 01       	movw	r30, r24
    35aa:	39 96       	adiw	r30, 0x09	; 9
    35ac:	a0 80       	ld	r10, Z
    35ae:	b1 80       	ldd	r11, Z+1	; 0x01
    35b0:	c2 80       	ldd	r12, Z+2	; 0x02
    35b2:	d3 80       	ldd	r13, Z+3	; 0x03
    35b4:	8b 81       	ldd	r24, Y+3	; 0x03
    35b6:	88 2f       	mov	r24, r24
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	01 96       	adiw	r24, 0x01	; 1
    35bc:	9c 01       	movw	r18, r24
    35be:	22 0f       	add	r18, r18
    35c0:	33 1f       	adc	r19, r19
    35c2:	22 0f       	add	r18, r18
    35c4:	33 1f       	adc	r19, r19
    35c6:	ce 01       	movw	r24, r28
    35c8:	01 96       	adiw	r24, 0x01	; 1
    35ca:	82 0f       	add	r24, r18
    35cc:	93 1f       	adc	r25, r19
    35ce:	fc 01       	movw	r30, r24
    35d0:	39 96       	adiw	r30, 0x09	; 9
    35d2:	e0 80       	ld	r14, Z
    35d4:	f1 80       	ldd	r15, Z+1	; 0x01
    35d6:	02 81       	ldd	r16, Z+2	; 0x02
    35d8:	13 81       	ldd	r17, Z+3	; 0x03
    35da:	8b 81       	ldd	r24, Y+3	; 0x03
    35dc:	88 2f       	mov	r24, r24
    35de:	90 e0       	ldi	r25, 0x00	; 0
    35e0:	9c 01       	movw	r18, r24
    35e2:	22 0f       	add	r18, r18
    35e4:	33 1f       	adc	r19, r19
    35e6:	22 0f       	add	r18, r18
    35e8:	33 1f       	adc	r19, r19
    35ea:	ce 01       	movw	r24, r28
    35ec:	01 96       	adiw	r24, 0x01	; 1
    35ee:	82 0f       	add	r24, r18
    35f0:	93 1f       	adc	r25, r19
    35f2:	fc 01       	movw	r30, r24
    35f4:	39 96       	adiw	r30, 0x09	; 9
    35f6:	80 81       	ld	r24, Z
    35f8:	91 81       	ldd	r25, Z+1	; 0x01
    35fa:	a2 81       	ldd	r26, Z+2	; 0x02
    35fc:	b3 81       	ldd	r27, Z+3	; 0x03
    35fe:	bc 01       	movw	r22, r24
    3600:	cd 01       	movw	r24, r26
    3602:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3606:	dc 01       	movw	r26, r24
    3608:	cb 01       	movw	r24, r22
    360a:	e8 2f       	mov	r30, r24
    360c:	c6 01       	movw	r24, r12
    360e:	b5 01       	movw	r22, r10
    3610:	a8 01       	movw	r20, r16
    3612:	97 01       	movw	r18, r14
    3614:	0e 2f       	mov	r16, r30
    3616:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <operation>
    361a:	ab 01       	movw	r20, r22
    361c:	bc 01       	movw	r22, r24
    361e:	94 01       	movw	r18, r8
    3620:	22 0f       	add	r18, r18
    3622:	33 1f       	adc	r19, r19
    3624:	22 0f       	add	r18, r18
    3626:	33 1f       	adc	r19, r19
    3628:	ce 01       	movw	r24, r28
    362a:	01 96       	adiw	r24, 0x01	; 1
    362c:	82 0f       	add	r24, r18
    362e:	93 1f       	adc	r25, r19
    3630:	fc 01       	movw	r30, r24
    3632:	39 96       	adiw	r30, 0x09	; 9
    3634:	40 83       	st	Z, r20
    3636:	51 83       	std	Z+1, r21	; 0x01
    3638:	62 83       	std	Z+2, r22	; 0x02
    363a:	73 83       	std	Z+3, r23	; 0x03
			/* shiftArray(&numsAndSigns, i, &numsAndSignsCount, 2); */
			uint8 j;
			for(j = i; j < numsAndSignsCount; j++)
    363c:	8b 81       	ldd	r24, Y+3	; 0x03
    363e:	8a 83       	std	Y+2, r24	; 0x02
    3640:	28 c0       	rjmp	.+80     	; 0x3692 <calculate+0x308>
			{
				numsAndSigns[j] = numsAndSigns[j + 2];
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	a8 2f       	mov	r26, r24
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	8a 81       	ldd	r24, Y+2	; 0x02
    364a:	88 2f       	mov	r24, r24
    364c:	90 e0       	ldi	r25, 0x00	; 0
    364e:	02 96       	adiw	r24, 0x02	; 2
    3650:	9c 01       	movw	r18, r24
    3652:	22 0f       	add	r18, r18
    3654:	33 1f       	adc	r19, r19
    3656:	22 0f       	add	r18, r18
    3658:	33 1f       	adc	r19, r19
    365a:	ce 01       	movw	r24, r28
    365c:	01 96       	adiw	r24, 0x01	; 1
    365e:	82 0f       	add	r24, r18
    3660:	93 1f       	adc	r25, r19
    3662:	fc 01       	movw	r30, r24
    3664:	39 96       	adiw	r30, 0x09	; 9
    3666:	40 81       	ld	r20, Z
    3668:	51 81       	ldd	r21, Z+1	; 0x01
    366a:	62 81       	ldd	r22, Z+2	; 0x02
    366c:	73 81       	ldd	r23, Z+3	; 0x03
    366e:	9d 01       	movw	r18, r26
    3670:	22 0f       	add	r18, r18
    3672:	33 1f       	adc	r19, r19
    3674:	22 0f       	add	r18, r18
    3676:	33 1f       	adc	r19, r19
    3678:	ce 01       	movw	r24, r28
    367a:	01 96       	adiw	r24, 0x01	; 1
    367c:	82 0f       	add	r24, r18
    367e:	93 1f       	adc	r25, r19
    3680:	fc 01       	movw	r30, r24
    3682:	39 96       	adiw	r30, 0x09	; 9
    3684:	40 83       	st	Z, r20
    3686:	51 83       	std	Z+1, r21	; 0x01
    3688:	62 83       	std	Z+2, r22	; 0x02
    368a:	73 83       	std	Z+3, r23	; 0x03
		if(numsAndSigns[i] == '*' || numsAndSigns[i] == '%')
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
			/* shiftArray(&numsAndSigns, i, &numsAndSignsCount, 2); */
			uint8 j;
			for(j = i; j < numsAndSignsCount; j++)
    368c:	8a 81       	ldd	r24, Y+2	; 0x02
    368e:	8f 5f       	subi	r24, 0xFF	; 255
    3690:	8a 83       	std	Y+2, r24	; 0x02
    3692:	9a 81       	ldd	r25, Y+2	; 0x02
    3694:	8d 81       	ldd	r24, Y+5	; 0x05
    3696:	98 17       	cp	r25, r24
    3698:	a0 f2       	brcs	.-88     	; 0x3642 <calculate+0x2b8>
			{
				numsAndSigns[j] = numsAndSigns[j + 2];
			}
			numsAndSignsCount -= 2;
    369a:	8d 81       	ldd	r24, Y+5	; 0x05
    369c:	82 50       	subi	r24, 0x02	; 2
    369e:	8d 83       	std	Y+5, r24	; 0x05
			i = 0;
    36a0:	1b 82       	std	Y+3, r1	; 0x03
			numsAndSigns[numsAndSignsCount++] = g_array[i];
			numCount = 0;
		}
	}
	/* displayArray(numsAndSigns, numsAndSignsCount); */
	for(i = 0; i < numsAndSignsCount; i++)
    36a2:	8b 81       	ldd	r24, Y+3	; 0x03
    36a4:	8f 5f       	subi	r24, 0xFF	; 255
    36a6:	8b 83       	std	Y+3, r24	; 0x03
    36a8:	9b 81       	ldd	r25, Y+3	; 0x03
    36aa:	8d 81       	ldd	r24, Y+5	; 0x05
    36ac:	98 17       	cp	r25, r24
    36ae:	08 f4       	brcc	.+2      	; 0x36b2 <calculate+0x328>
    36b0:	2e cf       	rjmp	.-420    	; 0x350e <calculate+0x184>
			numsAndSignsCount -= 2;
			i = 0;
		}
	}
	/* displayArray(numsAndSigns, numsAndSignsCount); */
	for(i = 0; i < numsAndSignsCount; i++)
    36b2:	1b 82       	std	Y+3, r1	; 0x03
    36b4:	cd c0       	rjmp	.+410    	; 0x3850 <calculate+0x4c6>
	{
		if(numsAndSigns[i] == '+' || numsAndSigns[i] == '-')
    36b6:	8b 81       	ldd	r24, Y+3	; 0x03
    36b8:	88 2f       	mov	r24, r24
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	9c 01       	movw	r18, r24
    36be:	22 0f       	add	r18, r18
    36c0:	33 1f       	adc	r19, r19
    36c2:	22 0f       	add	r18, r18
    36c4:	33 1f       	adc	r19, r19
    36c6:	ce 01       	movw	r24, r28
    36c8:	01 96       	adiw	r24, 0x01	; 1
    36ca:	82 0f       	add	r24, r18
    36cc:	93 1f       	adc	r25, r19
    36ce:	fc 01       	movw	r30, r24
    36d0:	39 96       	adiw	r30, 0x09	; 9
    36d2:	80 81       	ld	r24, Z
    36d4:	91 81       	ldd	r25, Z+1	; 0x01
    36d6:	a2 81       	ldd	r26, Z+2	; 0x02
    36d8:	b3 81       	ldd	r27, Z+3	; 0x03
    36da:	bc 01       	movw	r22, r24
    36dc:	cd 01       	movw	r24, r26
    36de:	20 e0       	ldi	r18, 0x00	; 0
    36e0:	30 e0       	ldi	r19, 0x00	; 0
    36e2:	4c e2       	ldi	r20, 0x2C	; 44
    36e4:	52 e4       	ldi	r21, 0x42	; 66
    36e6:	0e 94 42 04 	call	0x884	; 0x884 <__eqsf2>
    36ea:	88 23       	and	r24, r24
    36ec:	e9 f0       	breq	.+58     	; 0x3728 <calculate+0x39e>
    36ee:	8b 81       	ldd	r24, Y+3	; 0x03
    36f0:	88 2f       	mov	r24, r24
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	9c 01       	movw	r18, r24
    36f6:	22 0f       	add	r18, r18
    36f8:	33 1f       	adc	r19, r19
    36fa:	22 0f       	add	r18, r18
    36fc:	33 1f       	adc	r19, r19
    36fe:	ce 01       	movw	r24, r28
    3700:	01 96       	adiw	r24, 0x01	; 1
    3702:	82 0f       	add	r24, r18
    3704:	93 1f       	adc	r25, r19
    3706:	fc 01       	movw	r30, r24
    3708:	39 96       	adiw	r30, 0x09	; 9
    370a:	80 81       	ld	r24, Z
    370c:	91 81       	ldd	r25, Z+1	; 0x01
    370e:	a2 81       	ldd	r26, Z+2	; 0x02
    3710:	b3 81       	ldd	r27, Z+3	; 0x03
    3712:	bc 01       	movw	r22, r24
    3714:	cd 01       	movw	r24, r26
    3716:	20 e0       	ldi	r18, 0x00	; 0
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	44 e3       	ldi	r20, 0x34	; 52
    371c:	52 e4       	ldi	r21, 0x42	; 66
    371e:	0e 94 42 04 	call	0x884	; 0x884 <__eqsf2>
    3722:	88 23       	and	r24, r24
    3724:	09 f0       	breq	.+2      	; 0x3728 <calculate+0x39e>
    3726:	91 c0       	rjmp	.+290    	; 0x384a <calculate+0x4c0>
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
    3728:	8b 81       	ldd	r24, Y+3	; 0x03
    372a:	88 2f       	mov	r24, r24
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	4c 01       	movw	r8, r24
    3730:	08 94       	sec
    3732:	81 08       	sbc	r8, r1
    3734:	91 08       	sbc	r9, r1
    3736:	8b 81       	ldd	r24, Y+3	; 0x03
    3738:	88 2f       	mov	r24, r24
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	01 97       	sbiw	r24, 0x01	; 1
    373e:	9c 01       	movw	r18, r24
    3740:	22 0f       	add	r18, r18
    3742:	33 1f       	adc	r19, r19
    3744:	22 0f       	add	r18, r18
    3746:	33 1f       	adc	r19, r19
    3748:	ce 01       	movw	r24, r28
    374a:	01 96       	adiw	r24, 0x01	; 1
    374c:	82 0f       	add	r24, r18
    374e:	93 1f       	adc	r25, r19
    3750:	fc 01       	movw	r30, r24
    3752:	39 96       	adiw	r30, 0x09	; 9
    3754:	a0 80       	ld	r10, Z
    3756:	b1 80       	ldd	r11, Z+1	; 0x01
    3758:	c2 80       	ldd	r12, Z+2	; 0x02
    375a:	d3 80       	ldd	r13, Z+3	; 0x03
    375c:	8b 81       	ldd	r24, Y+3	; 0x03
    375e:	88 2f       	mov	r24, r24
    3760:	90 e0       	ldi	r25, 0x00	; 0
    3762:	01 96       	adiw	r24, 0x01	; 1
    3764:	9c 01       	movw	r18, r24
    3766:	22 0f       	add	r18, r18
    3768:	33 1f       	adc	r19, r19
    376a:	22 0f       	add	r18, r18
    376c:	33 1f       	adc	r19, r19
    376e:	ce 01       	movw	r24, r28
    3770:	01 96       	adiw	r24, 0x01	; 1
    3772:	82 0f       	add	r24, r18
    3774:	93 1f       	adc	r25, r19
    3776:	fc 01       	movw	r30, r24
    3778:	39 96       	adiw	r30, 0x09	; 9
    377a:	e0 80       	ld	r14, Z
    377c:	f1 80       	ldd	r15, Z+1	; 0x01
    377e:	02 81       	ldd	r16, Z+2	; 0x02
    3780:	13 81       	ldd	r17, Z+3	; 0x03
    3782:	8b 81       	ldd	r24, Y+3	; 0x03
    3784:	88 2f       	mov	r24, r24
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9c 01       	movw	r18, r24
    378a:	22 0f       	add	r18, r18
    378c:	33 1f       	adc	r19, r19
    378e:	22 0f       	add	r18, r18
    3790:	33 1f       	adc	r19, r19
    3792:	ce 01       	movw	r24, r28
    3794:	01 96       	adiw	r24, 0x01	; 1
    3796:	82 0f       	add	r24, r18
    3798:	93 1f       	adc	r25, r19
    379a:	fc 01       	movw	r30, r24
    379c:	39 96       	adiw	r30, 0x09	; 9
    379e:	80 81       	ld	r24, Z
    37a0:	91 81       	ldd	r25, Z+1	; 0x01
    37a2:	a2 81       	ldd	r26, Z+2	; 0x02
    37a4:	b3 81       	ldd	r27, Z+3	; 0x03
    37a6:	bc 01       	movw	r22, r24
    37a8:	cd 01       	movw	r24, r26
    37aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37ae:	dc 01       	movw	r26, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	e8 2f       	mov	r30, r24
    37b4:	c6 01       	movw	r24, r12
    37b6:	b5 01       	movw	r22, r10
    37b8:	a8 01       	movw	r20, r16
    37ba:	97 01       	movw	r18, r14
    37bc:	0e 2f       	mov	r16, r30
    37be:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <operation>
    37c2:	ab 01       	movw	r20, r22
    37c4:	bc 01       	movw	r22, r24
    37c6:	94 01       	movw	r18, r8
    37c8:	22 0f       	add	r18, r18
    37ca:	33 1f       	adc	r19, r19
    37cc:	22 0f       	add	r18, r18
    37ce:	33 1f       	adc	r19, r19
    37d0:	ce 01       	movw	r24, r28
    37d2:	01 96       	adiw	r24, 0x01	; 1
    37d4:	82 0f       	add	r24, r18
    37d6:	93 1f       	adc	r25, r19
    37d8:	fc 01       	movw	r30, r24
    37da:	39 96       	adiw	r30, 0x09	; 9
    37dc:	40 83       	st	Z, r20
    37de:	51 83       	std	Z+1, r21	; 0x01
    37e0:	62 83       	std	Z+2, r22	; 0x02
    37e2:	73 83       	std	Z+3, r23	; 0x03
			/* shiftArray(&numsAndSigns, i, &numsAndSignsCount, 2); */
			uint8 j;
			for(j = i; j < numsAndSignsCount; j++)
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	28 c0       	rjmp	.+80     	; 0x383a <calculate+0x4b0>
			{
				numsAndSigns[j] = numsAndSigns[j + 2];
    37ea:	89 81       	ldd	r24, Y+1	; 0x01
    37ec:	a8 2f       	mov	r26, r24
    37ee:	b0 e0       	ldi	r27, 0x00	; 0
    37f0:	89 81       	ldd	r24, Y+1	; 0x01
    37f2:	88 2f       	mov	r24, r24
    37f4:	90 e0       	ldi	r25, 0x00	; 0
    37f6:	02 96       	adiw	r24, 0x02	; 2
    37f8:	9c 01       	movw	r18, r24
    37fa:	22 0f       	add	r18, r18
    37fc:	33 1f       	adc	r19, r19
    37fe:	22 0f       	add	r18, r18
    3800:	33 1f       	adc	r19, r19
    3802:	ce 01       	movw	r24, r28
    3804:	01 96       	adiw	r24, 0x01	; 1
    3806:	82 0f       	add	r24, r18
    3808:	93 1f       	adc	r25, r19
    380a:	fc 01       	movw	r30, r24
    380c:	39 96       	adiw	r30, 0x09	; 9
    380e:	40 81       	ld	r20, Z
    3810:	51 81       	ldd	r21, Z+1	; 0x01
    3812:	62 81       	ldd	r22, Z+2	; 0x02
    3814:	73 81       	ldd	r23, Z+3	; 0x03
    3816:	9d 01       	movw	r18, r26
    3818:	22 0f       	add	r18, r18
    381a:	33 1f       	adc	r19, r19
    381c:	22 0f       	add	r18, r18
    381e:	33 1f       	adc	r19, r19
    3820:	ce 01       	movw	r24, r28
    3822:	01 96       	adiw	r24, 0x01	; 1
    3824:	82 0f       	add	r24, r18
    3826:	93 1f       	adc	r25, r19
    3828:	fc 01       	movw	r30, r24
    382a:	39 96       	adiw	r30, 0x09	; 9
    382c:	40 83       	st	Z, r20
    382e:	51 83       	std	Z+1, r21	; 0x01
    3830:	62 83       	std	Z+2, r22	; 0x02
    3832:	73 83       	std	Z+3, r23	; 0x03
		if(numsAndSigns[i] == '+' || numsAndSigns[i] == '-')
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
			/* shiftArray(&numsAndSigns, i, &numsAndSignsCount, 2); */
			uint8 j;
			for(j = i; j < numsAndSignsCount; j++)
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	8f 5f       	subi	r24, 0xFF	; 255
    3838:	89 83       	std	Y+1, r24	; 0x01
    383a:	99 81       	ldd	r25, Y+1	; 0x01
    383c:	8d 81       	ldd	r24, Y+5	; 0x05
    383e:	98 17       	cp	r25, r24
    3840:	a0 f2       	brcs	.-88     	; 0x37ea <calculate+0x460>
			{
				numsAndSigns[j] = numsAndSigns[j + 2];
			}
			numsAndSignsCount -= 2;
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	82 50       	subi	r24, 0x02	; 2
    3846:	8d 83       	std	Y+5, r24	; 0x05
			i = 0;
    3848:	1b 82       	std	Y+3, r1	; 0x03
			numsAndSignsCount -= 2;
			i = 0;
		}
	}
	/* displayArray(numsAndSigns, numsAndSignsCount); */
	for(i = 0; i < numsAndSignsCount; i++)
    384a:	8b 81       	ldd	r24, Y+3	; 0x03
    384c:	8f 5f       	subi	r24, 0xFF	; 255
    384e:	8b 83       	std	Y+3, r24	; 0x03
    3850:	9b 81       	ldd	r25, Y+3	; 0x03
    3852:	8d 81       	ldd	r24, Y+5	; 0x05
    3854:	98 17       	cp	r25, r24
    3856:	08 f4       	brcc	.+2      	; 0x385a <calculate+0x4d0>
    3858:	2e cf       	rjmp	.-420    	; 0x36b6 <calculate+0x32c>
			numsAndSignsCount -= 2;
			i = 0;
		}
	}
	/* Get the Final Result From The numsAndSigns Array and Display on LCD */
	result = numsAndSigns[0];
    385a:	8a 85       	ldd	r24, Y+10	; 0x0a
    385c:	9b 85       	ldd	r25, Y+11	; 0x0b
    385e:	ac 85       	ldd	r26, Y+12	; 0x0c
    3860:	bd 85       	ldd	r27, Y+13	; 0x0d
    3862:	8e 83       	std	Y+6, r24	; 0x06
    3864:	9f 83       	std	Y+7, r25	; 0x07
    3866:	a8 87       	std	Y+8, r26	; 0x08
    3868:	b9 87       	std	Y+9, r27	; 0x09
	LCD_displayStringRowColumn(3, 0, "=");
    386a:	2d e7       	ldi	r18, 0x7D	; 125
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	83 e0       	ldi	r24, 0x03	; 3
    3870:	60 e0       	ldi	r22, 0x00	; 0
    3872:	a9 01       	movw	r20, r18
    3874:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_displayStringRowColumn>
	LCD_floatToString(result);
    3878:	8e 81       	ldd	r24, Y+6	; 0x06
    387a:	9f 81       	ldd	r25, Y+7	; 0x07
    387c:	a8 85       	ldd	r26, Y+8	; 0x08
    387e:	b9 85       	ldd	r27, Y+9	; 0x09
    3880:	bc 01       	movw	r22, r24
    3882:	cd 01       	movw	r24, r26
    3884:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <LCD_floatToString>
	g_newCalcFlag = TRUE;
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 99 01 	sts	0x0199, r24
}
    388e:	c7 5a       	subi	r28, 0xA7	; 167
    3890:	df 4f       	sbci	r29, 0xFF	; 255
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
    389c:	cf 91       	pop	r28
    389e:	df 91       	pop	r29
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	ff 90       	pop	r15
    38a6:	ef 90       	pop	r14
    38a8:	df 90       	pop	r13
    38aa:	cf 90       	pop	r12
    38ac:	bf 90       	pop	r11
    38ae:	af 90       	pop	r10
    38b0:	9f 90       	pop	r9
    38b2:	8f 90       	pop	r8
    38b4:	08 95       	ret

000038b6 <main>:
/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/

int main(void)
{
    38b6:	df 93       	push	r29
    38b8:	cf 93       	push	r28
    38ba:	cd b7       	in	r28, 0x3d	; 61
    38bc:	de b7       	in	r29, 0x3e	; 62
    38be:	61 97       	sbiw	r28, 0x11	; 17
    38c0:	0f b6       	in	r0, 0x3f	; 63
    38c2:	f8 94       	cli
    38c4:	de bf       	out	0x3e, r29	; 62
    38c6:	0f be       	out	0x3f, r0	; 63
    38c8:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_init();
    38ca:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <LCD_init>
	LCD_displayString("CALCULATOR:");
    38ce:	81 e7       	ldi	r24, 0x71	; 113
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <LCD_displayString>
	LCD_moveCursor(1, 0);
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	60 e0       	ldi	r22, 0x00	; 0
    38da:	0e 94 d9 16 	call	0x2db2	; 0x2db2 <LCD_moveCursor>
	while(1)
	{
		key = KEYPAD_getPressedKey();	/* Reads Pressed Key */
    38de:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <KEYPAD_getPressedKey>
    38e2:	8f 87       	std	Y+15, r24	; 0x0f
		if(g_newCalcFlag) clearAll();	/* If Its New Calculation Clears The Previous */
    38e4:	80 91 99 01 	lds	r24, 0x0199
    38e8:	88 23       	and	r24, r24
    38ea:	11 f0       	breq	.+4      	; 0x38f0 <main+0x3a>
    38ec:	0e 94 89 19 	call	0x3312	; 0x3312 <clearAll>
		/* Checks The Pressed Key */
		switch(key)
    38f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38f2:	28 2f       	mov	r18, r24
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	39 8b       	std	Y+17, r19	; 0x11
    38f8:	28 8b       	std	Y+16, r18	; 0x10
    38fa:	88 89       	ldd	r24, Y+16	; 0x10
    38fc:	99 89       	ldd	r25, Y+17	; 0x11
    38fe:	8d 30       	cpi	r24, 0x0D	; 13
    3900:	91 05       	cpc	r25, r1
    3902:	31 f0       	breq	.+12     	; 0x3910 <main+0x5a>
    3904:	28 89       	ldd	r18, Y+16	; 0x10
    3906:	39 89       	ldd	r19, Y+17	; 0x11
    3908:	2d 33       	cpi	r18, 0x3D	; 61
    390a:	31 05       	cpc	r19, r1
    390c:	21 f0       	breq	.+8      	; 0x3916 <main+0x60>
    390e:	06 c0       	rjmp	.+12     	; 0x391c <main+0x66>
		{
			/* If Its "Enter", Clear Everything */
		case 13:
			clearAll();
    3910:	0e 94 89 19 	call	0x3312	; 0x3312 <clearAll>
    3914:	06 c0       	rjmp	.+12     	; 0x3922 <main+0x6c>
			break;
			/* If Its "=", Calculate The Written Equation */
		case '=':
			calculate();
    3916:	0e 94 c5 19 	call	0x338a	; 0x338a <calculate>
    391a:	03 c0       	rjmp	.+6      	; 0x3922 <main+0x6c>
			break;
			/* If Its a Number or a Sign, Call Input Function */
		default:
			input(key);
    391c:	8f 85       	ldd	r24, Y+15	; 0x0f
    391e:	0e 94 9e 19 	call	0x333c	; 0x333c <input>
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	a8 e4       	ldi	r26, 0x48	; 72
    3928:	b3 e4       	ldi	r27, 0x43	; 67
    392a:	8b 87       	std	Y+11, r24	; 0x0b
    392c:	9c 87       	std	Y+12, r25	; 0x0c
    392e:	ad 87       	std	Y+13, r26	; 0x0d
    3930:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3932:	6b 85       	ldd	r22, Y+11	; 0x0b
    3934:	7c 85       	ldd	r23, Y+12	; 0x0c
    3936:	8d 85       	ldd	r24, Y+13	; 0x0d
    3938:	9e 85       	ldd	r25, Y+14	; 0x0e
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	4a e7       	ldi	r20, 0x7A	; 122
    3940:	53 e4       	ldi	r21, 0x43	; 67
    3942:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3946:	dc 01       	movw	r26, r24
    3948:	cb 01       	movw	r24, r22
    394a:	8f 83       	std	Y+7, r24	; 0x07
    394c:	98 87       	std	Y+8, r25	; 0x08
    394e:	a9 87       	std	Y+9, r26	; 0x09
    3950:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3952:	6f 81       	ldd	r22, Y+7	; 0x07
    3954:	78 85       	ldd	r23, Y+8	; 0x08
    3956:	89 85       	ldd	r24, Y+9	; 0x09
    3958:	9a 85       	ldd	r25, Y+10	; 0x0a
    395a:	20 e0       	ldi	r18, 0x00	; 0
    395c:	30 e0       	ldi	r19, 0x00	; 0
    395e:	40 e8       	ldi	r20, 0x80	; 128
    3960:	5f e3       	ldi	r21, 0x3F	; 63
    3962:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3966:	88 23       	and	r24, r24
    3968:	2c f4       	brge	.+10     	; 0x3974 <main+0xbe>
		__ticks = 1;
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	9e 83       	std	Y+6, r25	; 0x06
    3970:	8d 83       	std	Y+5, r24	; 0x05
    3972:	3f c0       	rjmp	.+126    	; 0x39f2 <main+0x13c>
	else if (__tmp > 65535)
    3974:	6f 81       	ldd	r22, Y+7	; 0x07
    3976:	78 85       	ldd	r23, Y+8	; 0x08
    3978:	89 85       	ldd	r24, Y+9	; 0x09
    397a:	9a 85       	ldd	r25, Y+10	; 0x0a
    397c:	20 e0       	ldi	r18, 0x00	; 0
    397e:	3f ef       	ldi	r19, 0xFF	; 255
    3980:	4f e7       	ldi	r20, 0x7F	; 127
    3982:	57 e4       	ldi	r21, 0x47	; 71
    3984:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3988:	18 16       	cp	r1, r24
    398a:	4c f5       	brge	.+82     	; 0x39de <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    398c:	6b 85       	ldd	r22, Y+11	; 0x0b
    398e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3990:	8d 85       	ldd	r24, Y+13	; 0x0d
    3992:	9e 85       	ldd	r25, Y+14	; 0x0e
    3994:	20 e0       	ldi	r18, 0x00	; 0
    3996:	30 e0       	ldi	r19, 0x00	; 0
    3998:	40 e2       	ldi	r20, 0x20	; 32
    399a:	51 e4       	ldi	r21, 0x41	; 65
    399c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39a0:	dc 01       	movw	r26, r24
    39a2:	cb 01       	movw	r24, r22
    39a4:	bc 01       	movw	r22, r24
    39a6:	cd 01       	movw	r24, r26
    39a8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39ac:	dc 01       	movw	r26, r24
    39ae:	cb 01       	movw	r24, r22
    39b0:	9e 83       	std	Y+6, r25	; 0x06
    39b2:	8d 83       	std	Y+5, r24	; 0x05
    39b4:	0f c0       	rjmp	.+30     	; 0x39d4 <main+0x11e>
    39b6:	89 e1       	ldi	r24, 0x19	; 25
    39b8:	90 e0       	ldi	r25, 0x00	; 0
    39ba:	9c 83       	std	Y+4, r25	; 0x04
    39bc:	8b 83       	std	Y+3, r24	; 0x03
    39be:	8b 81       	ldd	r24, Y+3	; 0x03
    39c0:	9c 81       	ldd	r25, Y+4	; 0x04
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	f1 f7       	brne	.-4      	; 0x39c2 <main+0x10c>
    39c6:	9c 83       	std	Y+4, r25	; 0x04
    39c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39ca:	8d 81       	ldd	r24, Y+5	; 0x05
    39cc:	9e 81       	ldd	r25, Y+6	; 0x06
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	9e 83       	std	Y+6, r25	; 0x06
    39d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d4:	8d 81       	ldd	r24, Y+5	; 0x05
    39d6:	9e 81       	ldd	r25, Y+6	; 0x06
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	69 f7       	brne	.-38     	; 0x39b6 <main+0x100>
    39dc:	80 cf       	rjmp	.-256    	; 0x38de <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39de:	6f 81       	ldd	r22, Y+7	; 0x07
    39e0:	78 85       	ldd	r23, Y+8	; 0x08
    39e2:	89 85       	ldd	r24, Y+9	; 0x09
    39e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    39e6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39ea:	dc 01       	movw	r26, r24
    39ec:	cb 01       	movw	r24, r22
    39ee:	9e 83       	std	Y+6, r25	; 0x06
    39f0:	8d 83       	std	Y+5, r24	; 0x05
    39f2:	8d 81       	ldd	r24, Y+5	; 0x05
    39f4:	9e 81       	ldd	r25, Y+6	; 0x06
    39f6:	9a 83       	std	Y+2, r25	; 0x02
    39f8:	89 83       	std	Y+1, r24	; 0x01
    39fa:	89 81       	ldd	r24, Y+1	; 0x01
    39fc:	9a 81       	ldd	r25, Y+2	; 0x02
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <main+0x148>
    3a02:	9a 83       	std	Y+2, r25	; 0x02
    3a04:	89 83       	std	Y+1, r24	; 0x01
    3a06:	6b cf       	rjmp	.-298    	; 0x38de <main+0x28>

00003a08 <__prologue_saves__>:
    3a08:	2f 92       	push	r2
    3a0a:	3f 92       	push	r3
    3a0c:	4f 92       	push	r4
    3a0e:	5f 92       	push	r5
    3a10:	6f 92       	push	r6
    3a12:	7f 92       	push	r7
    3a14:	8f 92       	push	r8
    3a16:	9f 92       	push	r9
    3a18:	af 92       	push	r10
    3a1a:	bf 92       	push	r11
    3a1c:	cf 92       	push	r12
    3a1e:	df 92       	push	r13
    3a20:	ef 92       	push	r14
    3a22:	ff 92       	push	r15
    3a24:	0f 93       	push	r16
    3a26:	1f 93       	push	r17
    3a28:	cf 93       	push	r28
    3a2a:	df 93       	push	r29
    3a2c:	cd b7       	in	r28, 0x3d	; 61
    3a2e:	de b7       	in	r29, 0x3e	; 62
    3a30:	ca 1b       	sub	r28, r26
    3a32:	db 0b       	sbc	r29, r27
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	09 94       	ijmp

00003a40 <__epilogue_restores__>:
    3a40:	2a 88       	ldd	r2, Y+18	; 0x12
    3a42:	39 88       	ldd	r3, Y+17	; 0x11
    3a44:	48 88       	ldd	r4, Y+16	; 0x10
    3a46:	5f 84       	ldd	r5, Y+15	; 0x0f
    3a48:	6e 84       	ldd	r6, Y+14	; 0x0e
    3a4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    3a4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    3a4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3a50:	aa 84       	ldd	r10, Y+10	; 0x0a
    3a52:	b9 84       	ldd	r11, Y+9	; 0x09
    3a54:	c8 84       	ldd	r12, Y+8	; 0x08
    3a56:	df 80       	ldd	r13, Y+7	; 0x07
    3a58:	ee 80       	ldd	r14, Y+6	; 0x06
    3a5a:	fd 80       	ldd	r15, Y+5	; 0x05
    3a5c:	0c 81       	ldd	r16, Y+4	; 0x04
    3a5e:	1b 81       	ldd	r17, Y+3	; 0x03
    3a60:	aa 81       	ldd	r26, Y+2	; 0x02
    3a62:	b9 81       	ldd	r27, Y+1	; 0x01
    3a64:	ce 0f       	add	r28, r30
    3a66:	d1 1d       	adc	r29, r1
    3a68:	0f b6       	in	r0, 0x3f	; 63
    3a6a:	f8 94       	cli
    3a6c:	de bf       	out	0x3e, r29	; 62
    3a6e:	0f be       	out	0x3f, r0	; 63
    3a70:	cd bf       	out	0x3d, r28	; 61
    3a72:	ed 01       	movw	r28, r26
    3a74:	08 95       	ret

00003a76 <dtostrf>:
    3a76:	ef 92       	push	r14
    3a78:	ff 92       	push	r15
    3a7a:	0f 93       	push	r16
    3a7c:	1f 93       	push	r17
    3a7e:	f2 2f       	mov	r31, r18
    3a80:	f0 2e       	mov	r15, r16
    3a82:	47 fd       	sbrc	r20, 7
    3a84:	02 c0       	rjmp	.+4      	; 0x3a8a <dtostrf+0x14>
    3a86:	e4 e0       	ldi	r30, 0x04	; 4
    3a88:	01 c0       	rjmp	.+2      	; 0x3a8c <dtostrf+0x16>
    3a8a:	e4 e1       	ldi	r30, 0x14	; 20
    3a8c:	24 2f       	mov	r18, r20
    3a8e:	33 27       	eor	r19, r19
    3a90:	27 fd       	sbrc	r18, 7
    3a92:	30 95       	com	r19
    3a94:	37 ff       	sbrs	r19, 7
    3a96:	03 c0       	rjmp	.+6      	; 0x3a9e <dtostrf+0x28>
    3a98:	30 95       	com	r19
    3a9a:	21 95       	neg	r18
    3a9c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9e:	4f 2d       	mov	r20, r15
    3aa0:	51 2f       	mov	r21, r17
    3aa2:	0f 2f       	mov	r16, r31
    3aa4:	ee 2e       	mov	r14, r30
    3aa6:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <dtoa_prf>
    3aaa:	8f 2d       	mov	r24, r15
    3aac:	91 2f       	mov	r25, r17
    3aae:	1f 91       	pop	r17
    3ab0:	0f 91       	pop	r16
    3ab2:	ff 90       	pop	r15
    3ab4:	ef 90       	pop	r14
    3ab6:	08 95       	ret

00003ab8 <itoa>:
    3ab8:	fb 01       	movw	r30, r22
    3aba:	9f 01       	movw	r18, r30
    3abc:	e8 94       	clt
    3abe:	42 30       	cpi	r20, 0x02	; 2
    3ac0:	c4 f0       	brlt	.+48     	; 0x3af2 <itoa+0x3a>
    3ac2:	45 32       	cpi	r20, 0x25	; 37
    3ac4:	b4 f4       	brge	.+44     	; 0x3af2 <itoa+0x3a>
    3ac6:	4a 30       	cpi	r20, 0x0A	; 10
    3ac8:	29 f4       	brne	.+10     	; 0x3ad4 <itoa+0x1c>
    3aca:	97 fb       	bst	r25, 7
    3acc:	1e f4       	brtc	.+6      	; 0x3ad4 <itoa+0x1c>
    3ace:	90 95       	com	r25
    3ad0:	81 95       	neg	r24
    3ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ad4:	64 2f       	mov	r22, r20
    3ad6:	77 27       	eor	r23, r23
    3ad8:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__udivmodhi4>
    3adc:	80 5d       	subi	r24, 0xD0	; 208
    3ade:	8a 33       	cpi	r24, 0x3A	; 58
    3ae0:	0c f0       	brlt	.+2      	; 0x3ae4 <itoa+0x2c>
    3ae2:	89 5d       	subi	r24, 0xD9	; 217
    3ae4:	81 93       	st	Z+, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	a1 f7       	brne	.-24     	; 0x3ad4 <itoa+0x1c>
    3aec:	16 f4       	brtc	.+4      	; 0x3af2 <itoa+0x3a>
    3aee:	5d e2       	ldi	r21, 0x2D	; 45
    3af0:	51 93       	st	Z+, r21
    3af2:	10 82       	st	Z, r1
    3af4:	c9 01       	movw	r24, r18
    3af6:	0c 94 b7 1f 	jmp	0x3f6e	; 0x3f6e <strrev>

00003afa <dtoa_prf>:
    3afa:	a9 e0       	ldi	r26, 0x09	; 9
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
    3afe:	e3 e8       	ldi	r30, 0x83	; 131
    3b00:	fd e1       	ldi	r31, 0x1D	; 29
    3b02:	0c 94 08 1d 	jmp	0x3a10	; 0x3a10 <__prologue_saves__+0x8>
    3b06:	6a 01       	movw	r12, r20
    3b08:	12 2f       	mov	r17, r18
    3b0a:	a0 2e       	mov	r10, r16
    3b0c:	be 2c       	mov	r11, r14
    3b0e:	2b e3       	ldi	r18, 0x3B	; 59
    3b10:	20 17       	cp	r18, r16
    3b12:	18 f4       	brcc	.+6      	; 0x3b1a <dtoa_prf+0x20>
    3b14:	2c e3       	ldi	r18, 0x3C	; 60
    3b16:	92 2e       	mov	r9, r18
    3b18:	02 c0       	rjmp	.+4      	; 0x3b1e <dtoa_prf+0x24>
    3b1a:	90 2e       	mov	r9, r16
    3b1c:	93 94       	inc	r9
    3b1e:	ae 01       	movw	r20, r28
    3b20:	4f 5f       	subi	r20, 0xFF	; 255
    3b22:	5f 4f       	sbci	r21, 0xFF	; 255
    3b24:	27 e0       	ldi	r18, 0x07	; 7
    3b26:	09 2d       	mov	r16, r9
    3b28:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <__ftoa_engine>
    3b2c:	bc 01       	movw	r22, r24
    3b2e:	89 81       	ldd	r24, Y+1	; 0x01
    3b30:	e8 2e       	mov	r14, r24
    3b32:	ff 24       	eor	r15, r15
    3b34:	c7 01       	movw	r24, r14
    3b36:	89 70       	andi	r24, 0x09	; 9
    3b38:	90 70       	andi	r25, 0x00	; 0
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	11 f4       	brne	.+4      	; 0x3b42 <dtoa_prf+0x48>
    3b3e:	ad e2       	ldi	r26, 0x2D	; 45
    3b40:	09 c0       	rjmp	.+18     	; 0x3b54 <dtoa_prf+0x5a>
    3b42:	b1 fe       	sbrs	r11, 1
    3b44:	02 c0       	rjmp	.+4      	; 0x3b4a <dtoa_prf+0x50>
    3b46:	ab e2       	ldi	r26, 0x2B	; 43
    3b48:	05 c0       	rjmp	.+10     	; 0x3b54 <dtoa_prf+0x5a>
    3b4a:	b0 fc       	sbrc	r11, 0
    3b4c:	02 c0       	rjmp	.+4      	; 0x3b52 <dtoa_prf+0x58>
    3b4e:	a0 e0       	ldi	r26, 0x00	; 0
    3b50:	01 c0       	rjmp	.+2      	; 0x3b54 <dtoa_prf+0x5a>
    3b52:	a0 e2       	ldi	r26, 0x20	; 32
    3b54:	e3 fe       	sbrs	r14, 3
    3b56:	3b c0       	rjmp	.+118    	; 0x3bce <dtoa_prf+0xd4>
    3b58:	aa 23       	and	r26, r26
    3b5a:	11 f4       	brne	.+4      	; 0x3b60 <dtoa_prf+0x66>
    3b5c:	23 e0       	ldi	r18, 0x03	; 3
    3b5e:	01 c0       	rjmp	.+2      	; 0x3b62 <dtoa_prf+0x68>
    3b60:	24 e0       	ldi	r18, 0x04	; 4
    3b62:	21 17       	cp	r18, r17
    3b64:	10 f0       	brcs	.+4      	; 0x3b6a <dtoa_prf+0x70>
    3b66:	20 e0       	ldi	r18, 0x00	; 0
    3b68:	02 c0       	rjmp	.+4      	; 0x3b6e <dtoa_prf+0x74>
    3b6a:	12 1b       	sub	r17, r18
    3b6c:	21 2f       	mov	r18, r17
    3b6e:	eb 2c       	mov	r14, r11
    3b70:	b4 fe       	sbrs	r11, 4
    3b72:	02 c0       	rjmp	.+4      	; 0x3b78 <dtoa_prf+0x7e>
    3b74:	32 2f       	mov	r19, r18
    3b76:	0a c0       	rjmp	.+20     	; 0x3b8c <dtoa_prf+0x92>
    3b78:	f6 01       	movw	r30, r12
    3b7a:	32 2f       	mov	r19, r18
    3b7c:	80 e2       	ldi	r24, 0x20	; 32
    3b7e:	02 c0       	rjmp	.+4      	; 0x3b84 <dtoa_prf+0x8a>
    3b80:	81 93       	st	Z+, r24
    3b82:	31 50       	subi	r19, 0x01	; 1
    3b84:	33 23       	and	r19, r19
    3b86:	e1 f7       	brne	.-8      	; 0x3b80 <dtoa_prf+0x86>
    3b88:	c2 0e       	add	r12, r18
    3b8a:	d1 1c       	adc	r13, r1
    3b8c:	aa 23       	and	r26, r26
    3b8e:	19 f0       	breq	.+6      	; 0x3b96 <dtoa_prf+0x9c>
    3b90:	f6 01       	movw	r30, r12
    3b92:	a1 93       	st	Z+, r26
    3b94:	6f 01       	movw	r12, r30
    3b96:	f6 01       	movw	r30, r12
    3b98:	31 96       	adiw	r30, 0x01	; 1
    3b9a:	e2 fe       	sbrs	r14, 2
    3b9c:	05 c0       	rjmp	.+10     	; 0x3ba8 <dtoa_prf+0xae>
    3b9e:	9e e4       	ldi	r25, 0x4E	; 78
    3ba0:	d6 01       	movw	r26, r12
    3ba2:	9c 93       	st	X, r25
    3ba4:	81 e4       	ldi	r24, 0x41	; 65
    3ba6:	04 c0       	rjmp	.+8      	; 0x3bb0 <dtoa_prf+0xb6>
    3ba8:	9e e6       	ldi	r25, 0x6E	; 110
    3baa:	d6 01       	movw	r26, r12
    3bac:	9c 93       	st	X, r25
    3bae:	81 e6       	ldi	r24, 0x61	; 97
    3bb0:	11 96       	adiw	r26, 0x01	; 1
    3bb2:	8c 93       	st	X, r24
    3bb4:	91 83       	std	Z+1, r25	; 0x01
    3bb6:	32 96       	adiw	r30, 0x02	; 2
    3bb8:	df 01       	movw	r26, r30
    3bba:	83 2f       	mov	r24, r19
    3bbc:	90 e2       	ldi	r25, 0x20	; 32
    3bbe:	02 c0       	rjmp	.+4      	; 0x3bc4 <dtoa_prf+0xca>
    3bc0:	9d 93       	st	X+, r25
    3bc2:	81 50       	subi	r24, 0x01	; 1
    3bc4:	88 23       	and	r24, r24
    3bc6:	e1 f7       	brne	.-8      	; 0x3bc0 <dtoa_prf+0xc6>
    3bc8:	e3 0f       	add	r30, r19
    3bca:	f1 1d       	adc	r31, r1
    3bcc:	40 c0       	rjmp	.+128    	; 0x3c4e <dtoa_prf+0x154>
    3bce:	e2 fe       	sbrs	r14, 2
    3bd0:	42 c0       	rjmp	.+132    	; 0x3c56 <dtoa_prf+0x15c>
    3bd2:	aa 23       	and	r26, r26
    3bd4:	11 f4       	brne	.+4      	; 0x3bda <dtoa_prf+0xe0>
    3bd6:	23 e0       	ldi	r18, 0x03	; 3
    3bd8:	01 c0       	rjmp	.+2      	; 0x3bdc <dtoa_prf+0xe2>
    3bda:	24 e0       	ldi	r18, 0x04	; 4
    3bdc:	21 17       	cp	r18, r17
    3bde:	10 f0       	brcs	.+4      	; 0x3be4 <dtoa_prf+0xea>
    3be0:	20 e0       	ldi	r18, 0x00	; 0
    3be2:	02 c0       	rjmp	.+4      	; 0x3be8 <dtoa_prf+0xee>
    3be4:	12 1b       	sub	r17, r18
    3be6:	21 2f       	mov	r18, r17
    3be8:	eb 2c       	mov	r14, r11
    3bea:	b4 fe       	sbrs	r11, 4
    3bec:	02 c0       	rjmp	.+4      	; 0x3bf2 <dtoa_prf+0xf8>
    3bee:	92 2f       	mov	r25, r18
    3bf0:	0a c0       	rjmp	.+20     	; 0x3c06 <dtoa_prf+0x10c>
    3bf2:	f6 01       	movw	r30, r12
    3bf4:	92 2f       	mov	r25, r18
    3bf6:	80 e2       	ldi	r24, 0x20	; 32
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <dtoa_prf+0x104>
    3bfa:	81 93       	st	Z+, r24
    3bfc:	91 50       	subi	r25, 0x01	; 1
    3bfe:	99 23       	and	r25, r25
    3c00:	e1 f7       	brne	.-8      	; 0x3bfa <dtoa_prf+0x100>
    3c02:	c2 0e       	add	r12, r18
    3c04:	d1 1c       	adc	r13, r1
    3c06:	aa 23       	and	r26, r26
    3c08:	19 f0       	breq	.+6      	; 0x3c10 <dtoa_prf+0x116>
    3c0a:	f6 01       	movw	r30, r12
    3c0c:	a1 93       	st	Z+, r26
    3c0e:	6f 01       	movw	r12, r30
    3c10:	f6 01       	movw	r30, r12
    3c12:	31 96       	adiw	r30, 0x01	; 1
    3c14:	e2 fe       	sbrs	r14, 2
    3c16:	08 c0       	rjmp	.+16     	; 0x3c28 <dtoa_prf+0x12e>
    3c18:	89 e4       	ldi	r24, 0x49	; 73
    3c1a:	d6 01       	movw	r26, r12
    3c1c:	8c 93       	st	X, r24
    3c1e:	8e e4       	ldi	r24, 0x4E	; 78
    3c20:	11 96       	adiw	r26, 0x01	; 1
    3c22:	8c 93       	st	X, r24
    3c24:	86 e4       	ldi	r24, 0x46	; 70
    3c26:	07 c0       	rjmp	.+14     	; 0x3c36 <dtoa_prf+0x13c>
    3c28:	89 e6       	ldi	r24, 0x69	; 105
    3c2a:	d6 01       	movw	r26, r12
    3c2c:	8c 93       	st	X, r24
    3c2e:	8e e6       	ldi	r24, 0x6E	; 110
    3c30:	11 96       	adiw	r26, 0x01	; 1
    3c32:	8c 93       	st	X, r24
    3c34:	86 e6       	ldi	r24, 0x66	; 102
    3c36:	81 83       	std	Z+1, r24	; 0x01
    3c38:	32 96       	adiw	r30, 0x02	; 2
    3c3a:	df 01       	movw	r26, r30
    3c3c:	89 2f       	mov	r24, r25
    3c3e:	20 e2       	ldi	r18, 0x20	; 32
    3c40:	02 c0       	rjmp	.+4      	; 0x3c46 <dtoa_prf+0x14c>
    3c42:	2d 93       	st	X+, r18
    3c44:	81 50       	subi	r24, 0x01	; 1
    3c46:	88 23       	and	r24, r24
    3c48:	e1 f7       	brne	.-8      	; 0x3c42 <dtoa_prf+0x148>
    3c4a:	e9 0f       	add	r30, r25
    3c4c:	f1 1d       	adc	r31, r1
    3c4e:	10 82       	st	Z, r1
    3c50:	2e ef       	ldi	r18, 0xFE	; 254
    3c52:	3f ef       	ldi	r19, 0xFF	; 255
    3c54:	af c0       	rjmp	.+350    	; 0x3db4 <dtoa_prf+0x2ba>
    3c56:	16 16       	cp	r1, r22
    3c58:	17 06       	cpc	r1, r23
    3c5a:	1c f0       	brlt	.+6      	; 0x3c62 <dtoa_prf+0x168>
    3c5c:	41 e0       	ldi	r20, 0x01	; 1
    3c5e:	50 e0       	ldi	r21, 0x00	; 0
    3c60:	03 c0       	rjmp	.+6      	; 0x3c68 <dtoa_prf+0x16e>
    3c62:	ab 01       	movw	r20, r22
    3c64:	4f 5f       	subi	r20, 0xFF	; 255
    3c66:	5f 4f       	sbci	r21, 0xFF	; 255
    3c68:	aa 20       	and	r10, r10
    3c6a:	19 f4       	brne	.+6      	; 0x3c72 <dtoa_prf+0x178>
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	03 c0       	rjmp	.+6      	; 0x3c78 <dtoa_prf+0x17e>
    3c72:	8a 2d       	mov	r24, r10
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	01 96       	adiw	r24, 0x01	; 1
    3c78:	20 e0       	ldi	r18, 0x00	; 0
    3c7a:	30 e0       	ldi	r19, 0x00	; 0
    3c7c:	aa 23       	and	r26, r26
    3c7e:	11 f0       	breq	.+4      	; 0x3c84 <dtoa_prf+0x18a>
    3c80:	21 e0       	ldi	r18, 0x01	; 1
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	24 0f       	add	r18, r20
    3c86:	35 1f       	adc	r19, r21
    3c88:	28 0f       	add	r18, r24
    3c8a:	39 1f       	adc	r19, r25
    3c8c:	81 2f       	mov	r24, r17
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	28 17       	cp	r18, r24
    3c92:	39 07       	cpc	r19, r25
    3c94:	14 f0       	brlt	.+4      	; 0x3c9a <dtoa_prf+0x1a0>
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	02 c0       	rjmp	.+4      	; 0x3c9e <dtoa_prf+0x1a4>
    3c9a:	12 1b       	sub	r17, r18
    3c9c:	21 2f       	mov	r18, r17
    3c9e:	4b 2d       	mov	r20, r11
    3ca0:	50 e0       	ldi	r21, 0x00	; 0
    3ca2:	ca 01       	movw	r24, r20
    3ca4:	80 71       	andi	r24, 0x10	; 16
    3ca6:	90 70       	andi	r25, 0x00	; 0
    3ca8:	b4 fc       	sbrc	r11, 4
    3caa:	0d c0       	rjmp	.+26     	; 0x3cc6 <dtoa_prf+0x1cc>
    3cac:	b3 fc       	sbrc	r11, 3
    3cae:	0b c0       	rjmp	.+22     	; 0x3cc6 <dtoa_prf+0x1cc>
    3cb0:	f6 01       	movw	r30, r12
    3cb2:	32 2f       	mov	r19, r18
    3cb4:	40 e2       	ldi	r20, 0x20	; 32
    3cb6:	02 c0       	rjmp	.+4      	; 0x3cbc <dtoa_prf+0x1c2>
    3cb8:	41 93       	st	Z+, r20
    3cba:	31 50       	subi	r19, 0x01	; 1
    3cbc:	33 23       	and	r19, r19
    3cbe:	e1 f7       	brne	.-8      	; 0x3cb8 <dtoa_prf+0x1be>
    3cc0:	c2 0e       	add	r12, r18
    3cc2:	d1 1c       	adc	r13, r1
    3cc4:	01 c0       	rjmp	.+2      	; 0x3cc8 <dtoa_prf+0x1ce>
    3cc6:	32 2f       	mov	r19, r18
    3cc8:	aa 23       	and	r26, r26
    3cca:	19 f0       	breq	.+6      	; 0x3cd2 <dtoa_prf+0x1d8>
    3ccc:	f6 01       	movw	r30, r12
    3cce:	a1 93       	st	Z+, r26
    3cd0:	6f 01       	movw	r12, r30
    3cd2:	89 2b       	or	r24, r25
    3cd4:	11 f0       	breq	.+4      	; 0x3cda <dtoa_prf+0x1e0>
    3cd6:	13 2f       	mov	r17, r19
    3cd8:	0a c0       	rjmp	.+20     	; 0x3cee <dtoa_prf+0x1f4>
    3cda:	f6 01       	movw	r30, r12
    3cdc:	13 2f       	mov	r17, r19
    3cde:	80 e3       	ldi	r24, 0x30	; 48
    3ce0:	02 c0       	rjmp	.+4      	; 0x3ce6 <dtoa_prf+0x1ec>
    3ce2:	81 93       	st	Z+, r24
    3ce4:	11 50       	subi	r17, 0x01	; 1
    3ce6:	11 23       	and	r17, r17
    3ce8:	e1 f7       	brne	.-8      	; 0x3ce2 <dtoa_prf+0x1e8>
    3cea:	c3 0e       	add	r12, r19
    3cec:	d1 1c       	adc	r13, r1
    3cee:	09 2d       	mov	r16, r9
    3cf0:	06 0f       	add	r16, r22
    3cf2:	ba 80       	ldd	r11, Y+2	; 0x02
    3cf4:	90 e1       	ldi	r25, 0x10	; 16
    3cf6:	89 2e       	mov	r8, r25
    3cf8:	91 2c       	mov	r9, r1
    3cfa:	8e 20       	and	r8, r14
    3cfc:	9f 20       	and	r9, r15
    3cfe:	e4 fe       	sbrs	r14, 4
    3d00:	04 c0       	rjmp	.+8      	; 0x3d0a <dtoa_prf+0x210>
    3d02:	f1 e3       	ldi	r31, 0x31	; 49
    3d04:	bf 16       	cp	r11, r31
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <dtoa_prf+0x210>
    3d08:	01 50       	subi	r16, 0x01	; 1
    3d0a:	10 16       	cp	r1, r16
    3d0c:	14 f0       	brlt	.+4      	; 0x3d12 <dtoa_prf+0x218>
    3d0e:	01 e0       	ldi	r16, 0x01	; 1
    3d10:	03 c0       	rjmp	.+6      	; 0x3d18 <dtoa_prf+0x21e>
    3d12:	09 30       	cpi	r16, 0x09	; 9
    3d14:	08 f0       	brcs	.+2      	; 0x3d18 <dtoa_prf+0x21e>
    3d16:	08 e0       	ldi	r16, 0x08	; 8
    3d18:	9b 01       	movw	r18, r22
    3d1a:	77 ff       	sbrs	r23, 7
    3d1c:	02 c0       	rjmp	.+4      	; 0x3d22 <dtoa_prf+0x228>
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	cb 01       	movw	r24, r22
    3d24:	01 96       	adiw	r24, 0x01	; 1
    3d26:	82 1b       	sub	r24, r18
    3d28:	93 0b       	sbc	r25, r19
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	31 96       	adiw	r30, 0x01	; 1
    3d2e:	e8 0f       	add	r30, r24
    3d30:	f9 1f       	adc	r31, r25
    3d32:	8e e2       	ldi	r24, 0x2E	; 46
    3d34:	f8 2e       	mov	r15, r24
    3d36:	3b 01       	movw	r6, r22
    3d38:	60 1a       	sub	r6, r16
    3d3a:	71 08       	sbc	r7, r1
    3d3c:	8a 2d       	mov	r24, r10
    3d3e:	90 e0       	ldi	r25, 0x00	; 0
    3d40:	44 27       	eor	r20, r20
    3d42:	55 27       	eor	r21, r21
    3d44:	48 1b       	sub	r20, r24
    3d46:	59 0b       	sbc	r21, r25
    3d48:	8f ef       	ldi	r24, 0xFF	; 255
    3d4a:	2f 3f       	cpi	r18, 0xFF	; 255
    3d4c:	38 07       	cpc	r19, r24
    3d4e:	19 f4       	brne	.+6      	; 0x3d56 <dtoa_prf+0x25c>
    3d50:	d6 01       	movw	r26, r12
    3d52:	fd 92       	st	X+, r15
    3d54:	6d 01       	movw	r12, r26
    3d56:	62 17       	cp	r22, r18
    3d58:	73 07       	cpc	r23, r19
    3d5a:	2c f0       	brlt	.+10     	; 0x3d66 <dtoa_prf+0x26c>
    3d5c:	62 16       	cp	r6, r18
    3d5e:	73 06       	cpc	r7, r19
    3d60:	14 f4       	brge	.+4      	; 0x3d66 <dtoa_prf+0x26c>
    3d62:	80 81       	ld	r24, Z
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <dtoa_prf+0x26e>
    3d66:	80 e3       	ldi	r24, 0x30	; 48
    3d68:	21 50       	subi	r18, 0x01	; 1
    3d6a:	30 40       	sbci	r19, 0x00	; 0
    3d6c:	31 96       	adiw	r30, 0x01	; 1
    3d6e:	24 17       	cp	r18, r20
    3d70:	35 07       	cpc	r19, r21
    3d72:	24 f0       	brlt	.+8      	; 0x3d7c <dtoa_prf+0x282>
    3d74:	d6 01       	movw	r26, r12
    3d76:	8d 93       	st	X+, r24
    3d78:	6d 01       	movw	r12, r26
    3d7a:	e6 cf       	rjmp	.-52     	; 0x3d48 <dtoa_prf+0x24e>
    3d7c:	26 17       	cp	r18, r22
    3d7e:	37 07       	cpc	r19, r23
    3d80:	49 f4       	brne	.+18     	; 0x3d94 <dtoa_prf+0x29a>
    3d82:	b5 e3       	ldi	r27, 0x35	; 53
    3d84:	bb 15       	cp	r27, r11
    3d86:	28 f0       	brcs	.+10     	; 0x3d92 <dtoa_prf+0x298>
    3d88:	bb 16       	cp	r11, r27
    3d8a:	21 f4       	brne	.+8      	; 0x3d94 <dtoa_prf+0x29a>
    3d8c:	81 14       	cp	r8, r1
    3d8e:	91 04       	cpc	r9, r1
    3d90:	09 f4       	brne	.+2      	; 0x3d94 <dtoa_prf+0x29a>
    3d92:	81 e3       	ldi	r24, 0x31	; 49
    3d94:	f6 01       	movw	r30, r12
    3d96:	81 93       	st	Z+, r24
    3d98:	d6 01       	movw	r26, r12
    3d9a:	81 2f       	mov	r24, r17
    3d9c:	90 e2       	ldi	r25, 0x20	; 32
    3d9e:	02 c0       	rjmp	.+4      	; 0x3da4 <dtoa_prf+0x2aa>
    3da0:	9c 93       	st	X, r25
    3da2:	81 50       	subi	r24, 0x01	; 1
    3da4:	11 96       	adiw	r26, 0x01	; 1
    3da6:	88 23       	and	r24, r24
    3da8:	d9 f7       	brne	.-10     	; 0x3da0 <dtoa_prf+0x2a6>
    3daa:	e1 0f       	add	r30, r17
    3dac:	f1 1d       	adc	r31, r1
    3dae:	10 82       	st	Z, r1
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	30 e0       	ldi	r19, 0x00	; 0
    3db4:	c9 01       	movw	r24, r18
    3db6:	29 96       	adiw	r28, 0x09	; 9
    3db8:	ee e0       	ldi	r30, 0x0E	; 14
    3dba:	0c 94 24 1d 	jmp	0x3a48	; 0x3a48 <__epilogue_restores__+0x8>

00003dbe <__ftoa_engine>:
    3dbe:	28 30       	cpi	r18, 0x08	; 8
    3dc0:	08 f0       	brcs	.+2      	; 0x3dc4 <__ftoa_engine+0x6>
    3dc2:	27 e0       	ldi	r18, 0x07	; 7
    3dc4:	33 27       	eor	r19, r19
    3dc6:	da 01       	movw	r26, r20
    3dc8:	99 0f       	add	r25, r25
    3dca:	31 1d       	adc	r19, r1
    3dcc:	87 fd       	sbrc	r24, 7
    3dce:	91 60       	ori	r25, 0x01	; 1
    3dd0:	00 96       	adiw	r24, 0x00	; 0
    3dd2:	61 05       	cpc	r22, r1
    3dd4:	71 05       	cpc	r23, r1
    3dd6:	39 f4       	brne	.+14     	; 0x3de6 <__ftoa_engine+0x28>
    3dd8:	32 60       	ori	r19, 0x02	; 2
    3dda:	2e 5f       	subi	r18, 0xFE	; 254
    3ddc:	3d 93       	st	X+, r19
    3dde:	30 e3       	ldi	r19, 0x30	; 48
    3de0:	2a 95       	dec	r18
    3de2:	e1 f7       	brne	.-8      	; 0x3ddc <__ftoa_engine+0x1e>
    3de4:	08 95       	ret
    3de6:	9f 3f       	cpi	r25, 0xFF	; 255
    3de8:	30 f0       	brcs	.+12     	; 0x3df6 <__ftoa_engine+0x38>
    3dea:	80 38       	cpi	r24, 0x80	; 128
    3dec:	71 05       	cpc	r23, r1
    3dee:	61 05       	cpc	r22, r1
    3df0:	09 f0       	breq	.+2      	; 0x3df4 <__ftoa_engine+0x36>
    3df2:	3c 5f       	subi	r19, 0xFC	; 252
    3df4:	3c 5f       	subi	r19, 0xFC	; 252
    3df6:	3d 93       	st	X+, r19
    3df8:	91 30       	cpi	r25, 0x01	; 1
    3dfa:	08 f0       	brcs	.+2      	; 0x3dfe <__ftoa_engine+0x40>
    3dfc:	80 68       	ori	r24, 0x80	; 128
    3dfe:	91 1d       	adc	r25, r1
    3e00:	df 93       	push	r29
    3e02:	cf 93       	push	r28
    3e04:	1f 93       	push	r17
    3e06:	0f 93       	push	r16
    3e08:	ff 92       	push	r15
    3e0a:	ef 92       	push	r14
    3e0c:	19 2f       	mov	r17, r25
    3e0e:	98 7f       	andi	r25, 0xF8	; 248
    3e10:	96 95       	lsr	r25
    3e12:	e9 2f       	mov	r30, r25
    3e14:	96 95       	lsr	r25
    3e16:	96 95       	lsr	r25
    3e18:	e9 0f       	add	r30, r25
    3e1a:	ff 27       	eor	r31, r31
    3e1c:	e2 55       	subi	r30, 0x52	; 82
    3e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e20:	99 27       	eor	r25, r25
    3e22:	33 27       	eor	r19, r19
    3e24:	ee 24       	eor	r14, r14
    3e26:	ff 24       	eor	r15, r15
    3e28:	a7 01       	movw	r20, r14
    3e2a:	e7 01       	movw	r28, r14
    3e2c:	05 90       	lpm	r0, Z+
    3e2e:	08 94       	sec
    3e30:	07 94       	ror	r0
    3e32:	28 f4       	brcc	.+10     	; 0x3e3e <__ftoa_engine+0x80>
    3e34:	36 0f       	add	r19, r22
    3e36:	e7 1e       	adc	r14, r23
    3e38:	f8 1e       	adc	r15, r24
    3e3a:	49 1f       	adc	r20, r25
    3e3c:	51 1d       	adc	r21, r1
    3e3e:	66 0f       	add	r22, r22
    3e40:	77 1f       	adc	r23, r23
    3e42:	88 1f       	adc	r24, r24
    3e44:	99 1f       	adc	r25, r25
    3e46:	06 94       	lsr	r0
    3e48:	a1 f7       	brne	.-24     	; 0x3e32 <__ftoa_engine+0x74>
    3e4a:	05 90       	lpm	r0, Z+
    3e4c:	07 94       	ror	r0
    3e4e:	28 f4       	brcc	.+10     	; 0x3e5a <__ftoa_engine+0x9c>
    3e50:	e7 0e       	add	r14, r23
    3e52:	f8 1e       	adc	r15, r24
    3e54:	49 1f       	adc	r20, r25
    3e56:	56 1f       	adc	r21, r22
    3e58:	c1 1d       	adc	r28, r1
    3e5a:	77 0f       	add	r23, r23
    3e5c:	88 1f       	adc	r24, r24
    3e5e:	99 1f       	adc	r25, r25
    3e60:	66 1f       	adc	r22, r22
    3e62:	06 94       	lsr	r0
    3e64:	a1 f7       	brne	.-24     	; 0x3e4e <__ftoa_engine+0x90>
    3e66:	05 90       	lpm	r0, Z+
    3e68:	07 94       	ror	r0
    3e6a:	28 f4       	brcc	.+10     	; 0x3e76 <__ftoa_engine+0xb8>
    3e6c:	f8 0e       	add	r15, r24
    3e6e:	49 1f       	adc	r20, r25
    3e70:	56 1f       	adc	r21, r22
    3e72:	c7 1f       	adc	r28, r23
    3e74:	d1 1d       	adc	r29, r1
    3e76:	88 0f       	add	r24, r24
    3e78:	99 1f       	adc	r25, r25
    3e7a:	66 1f       	adc	r22, r22
    3e7c:	77 1f       	adc	r23, r23
    3e7e:	06 94       	lsr	r0
    3e80:	a1 f7       	brne	.-24     	; 0x3e6a <__ftoa_engine+0xac>
    3e82:	05 90       	lpm	r0, Z+
    3e84:	07 94       	ror	r0
    3e86:	20 f4       	brcc	.+8      	; 0x3e90 <__ftoa_engine+0xd2>
    3e88:	49 0f       	add	r20, r25
    3e8a:	56 1f       	adc	r21, r22
    3e8c:	c7 1f       	adc	r28, r23
    3e8e:	d8 1f       	adc	r29, r24
    3e90:	99 0f       	add	r25, r25
    3e92:	66 1f       	adc	r22, r22
    3e94:	77 1f       	adc	r23, r23
    3e96:	88 1f       	adc	r24, r24
    3e98:	06 94       	lsr	r0
    3e9a:	a9 f7       	brne	.-22     	; 0x3e86 <__ftoa_engine+0xc8>
    3e9c:	84 91       	lpm	r24, Z+
    3e9e:	10 95       	com	r17
    3ea0:	17 70       	andi	r17, 0x07	; 7
    3ea2:	41 f0       	breq	.+16     	; 0x3eb4 <__ftoa_engine+0xf6>
    3ea4:	d6 95       	lsr	r29
    3ea6:	c7 95       	ror	r28
    3ea8:	57 95       	ror	r21
    3eaa:	47 95       	ror	r20
    3eac:	f7 94       	ror	r15
    3eae:	e7 94       	ror	r14
    3eb0:	1a 95       	dec	r17
    3eb2:	c1 f7       	brne	.-16     	; 0x3ea4 <__ftoa_engine+0xe6>
    3eb4:	e4 e5       	ldi	r30, 0x54	; 84
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	68 94       	set
    3eba:	15 90       	lpm	r1, Z+
    3ebc:	15 91       	lpm	r17, Z+
    3ebe:	35 91       	lpm	r19, Z+
    3ec0:	65 91       	lpm	r22, Z+
    3ec2:	95 91       	lpm	r25, Z+
    3ec4:	05 90       	lpm	r0, Z+
    3ec6:	7f e2       	ldi	r23, 0x2F	; 47
    3ec8:	73 95       	inc	r23
    3eca:	e1 18       	sub	r14, r1
    3ecc:	f1 0a       	sbc	r15, r17
    3ece:	43 0b       	sbc	r20, r19
    3ed0:	56 0b       	sbc	r21, r22
    3ed2:	c9 0b       	sbc	r28, r25
    3ed4:	d0 09       	sbc	r29, r0
    3ed6:	c0 f7       	brcc	.-16     	; 0x3ec8 <__ftoa_engine+0x10a>
    3ed8:	e1 0c       	add	r14, r1
    3eda:	f1 1e       	adc	r15, r17
    3edc:	43 1f       	adc	r20, r19
    3ede:	56 1f       	adc	r21, r22
    3ee0:	c9 1f       	adc	r28, r25
    3ee2:	d0 1d       	adc	r29, r0
    3ee4:	7e f4       	brtc	.+30     	; 0x3f04 <__ftoa_engine+0x146>
    3ee6:	70 33       	cpi	r23, 0x30	; 48
    3ee8:	11 f4       	brne	.+4      	; 0x3eee <__ftoa_engine+0x130>
    3eea:	8a 95       	dec	r24
    3eec:	e6 cf       	rjmp	.-52     	; 0x3eba <__ftoa_engine+0xfc>
    3eee:	e8 94       	clt
    3ef0:	01 50       	subi	r16, 0x01	; 1
    3ef2:	30 f0       	brcs	.+12     	; 0x3f00 <__ftoa_engine+0x142>
    3ef4:	08 0f       	add	r16, r24
    3ef6:	0a f4       	brpl	.+2      	; 0x3efa <__ftoa_engine+0x13c>
    3ef8:	00 27       	eor	r16, r16
    3efa:	02 17       	cp	r16, r18
    3efc:	08 f4       	brcc	.+2      	; 0x3f00 <__ftoa_engine+0x142>
    3efe:	20 2f       	mov	r18, r16
    3f00:	23 95       	inc	r18
    3f02:	02 2f       	mov	r16, r18
    3f04:	7a 33       	cpi	r23, 0x3A	; 58
    3f06:	28 f0       	brcs	.+10     	; 0x3f12 <__ftoa_engine+0x154>
    3f08:	79 e3       	ldi	r23, 0x39	; 57
    3f0a:	7d 93       	st	X+, r23
    3f0c:	2a 95       	dec	r18
    3f0e:	e9 f7       	brne	.-6      	; 0x3f0a <__ftoa_engine+0x14c>
    3f10:	10 c0       	rjmp	.+32     	; 0x3f32 <__ftoa_engine+0x174>
    3f12:	7d 93       	st	X+, r23
    3f14:	2a 95       	dec	r18
    3f16:	89 f6       	brne	.-94     	; 0x3eba <__ftoa_engine+0xfc>
    3f18:	06 94       	lsr	r0
    3f1a:	97 95       	ror	r25
    3f1c:	67 95       	ror	r22
    3f1e:	37 95       	ror	r19
    3f20:	17 95       	ror	r17
    3f22:	17 94       	ror	r1
    3f24:	e1 18       	sub	r14, r1
    3f26:	f1 0a       	sbc	r15, r17
    3f28:	43 0b       	sbc	r20, r19
    3f2a:	56 0b       	sbc	r21, r22
    3f2c:	c9 0b       	sbc	r28, r25
    3f2e:	d0 09       	sbc	r29, r0
    3f30:	98 f0       	brcs	.+38     	; 0x3f58 <__ftoa_engine+0x19a>
    3f32:	23 95       	inc	r18
    3f34:	7e 91       	ld	r23, -X
    3f36:	73 95       	inc	r23
    3f38:	7a 33       	cpi	r23, 0x3A	; 58
    3f3a:	08 f0       	brcs	.+2      	; 0x3f3e <__ftoa_engine+0x180>
    3f3c:	70 e3       	ldi	r23, 0x30	; 48
    3f3e:	7c 93       	st	X, r23
    3f40:	20 13       	cpse	r18, r16
    3f42:	b8 f7       	brcc	.-18     	; 0x3f32 <__ftoa_engine+0x174>
    3f44:	7e 91       	ld	r23, -X
    3f46:	70 61       	ori	r23, 0x10	; 16
    3f48:	7d 93       	st	X+, r23
    3f4a:	30 f0       	brcs	.+12     	; 0x3f58 <__ftoa_engine+0x19a>
    3f4c:	83 95       	inc	r24
    3f4e:	71 e3       	ldi	r23, 0x31	; 49
    3f50:	7d 93       	st	X+, r23
    3f52:	70 e3       	ldi	r23, 0x30	; 48
    3f54:	2a 95       	dec	r18
    3f56:	e1 f7       	brne	.-8      	; 0x3f50 <__ftoa_engine+0x192>
    3f58:	11 24       	eor	r1, r1
    3f5a:	ef 90       	pop	r14
    3f5c:	ff 90       	pop	r15
    3f5e:	0f 91       	pop	r16
    3f60:	1f 91       	pop	r17
    3f62:	cf 91       	pop	r28
    3f64:	df 91       	pop	r29
    3f66:	99 27       	eor	r25, r25
    3f68:	87 fd       	sbrc	r24, 7
    3f6a:	90 95       	com	r25
    3f6c:	08 95       	ret

00003f6e <strrev>:
    3f6e:	dc 01       	movw	r26, r24
    3f70:	fc 01       	movw	r30, r24
    3f72:	67 2f       	mov	r22, r23
    3f74:	71 91       	ld	r23, Z+
    3f76:	77 23       	and	r23, r23
    3f78:	e1 f7       	brne	.-8      	; 0x3f72 <strrev+0x4>
    3f7a:	32 97       	sbiw	r30, 0x02	; 2
    3f7c:	04 c0       	rjmp	.+8      	; 0x3f86 <strrev+0x18>
    3f7e:	7c 91       	ld	r23, X
    3f80:	6d 93       	st	X+, r22
    3f82:	70 83       	st	Z, r23
    3f84:	62 91       	ld	r22, -Z
    3f86:	ae 17       	cp	r26, r30
    3f88:	bf 07       	cpc	r27, r31
    3f8a:	c8 f3       	brcs	.-14     	; 0x3f7e <strrev+0x10>
    3f8c:	08 95       	ret

00003f8e <__udivmodhi4>:
    3f8e:	aa 1b       	sub	r26, r26
    3f90:	bb 1b       	sub	r27, r27
    3f92:	51 e1       	ldi	r21, 0x11	; 17
    3f94:	07 c0       	rjmp	.+14     	; 0x3fa4 <__udivmodhi4_ep>

00003f96 <__udivmodhi4_loop>:
    3f96:	aa 1f       	adc	r26, r26
    3f98:	bb 1f       	adc	r27, r27
    3f9a:	a6 17       	cp	r26, r22
    3f9c:	b7 07       	cpc	r27, r23
    3f9e:	10 f0       	brcs	.+4      	; 0x3fa4 <__udivmodhi4_ep>
    3fa0:	a6 1b       	sub	r26, r22
    3fa2:	b7 0b       	sbc	r27, r23

00003fa4 <__udivmodhi4_ep>:
    3fa4:	88 1f       	adc	r24, r24
    3fa6:	99 1f       	adc	r25, r25
    3fa8:	5a 95       	dec	r21
    3faa:	a9 f7       	brne	.-22     	; 0x3f96 <__udivmodhi4_loop>
    3fac:	80 95       	com	r24
    3fae:	90 95       	com	r25
    3fb0:	bc 01       	movw	r22, r24
    3fb2:	cd 01       	movw	r24, r26
    3fb4:	08 95       	ret

00003fb6 <_exit>:
    3fb6:	f8 94       	cli

00003fb8 <__stop_program>:
    3fb8:	ff cf       	rjmp	.-2      	; 0x3fb8 <__stop_program>
