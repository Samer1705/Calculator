
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003584  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00003584  00003618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000096  00800176  00800176  0000372e  2**0
                  ALLOC
  3 .stab         00002124  00000000  00000000  00003730  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3b  00000000  00000000  00005854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000200  00000000  00000000  0000658f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000257  00000000  00000000  0000678f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000028a2  00000000  00000000  000069e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000165a  00000000  00000000  00009288  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000014c9  00000000  00000000  0000a8e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000220  00000000  00000000  0000bdac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000361  00000000  00000000  0000bfcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000ba6  00000000  00000000  0000c32d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ced3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 30       	cpi	r26, 0x0C	; 12
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9b 19 	call	0x3336	; 0x3336 <main>
      8a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 9d 04 	call	0x93a	; 0x93a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 69 02 	call	0x4d2	; 0x4d2 <__subsf3>
      be:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <__fixunssfdi>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__prologue_saves__>
      f6:	7b 01       	movw	r14, r22
      f8:	8c 01       	movw	r16, r24
      fa:	20 e0       	ldi	r18, 0x00	; 0
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	40 e8       	ldi	r20, 0x80	; 128
     100:	5f e3       	ldi	r21, 0x3F	; 63
     102:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
     106:	88 23       	and	r24, r24
     108:	4c f4       	brge	.+18     	; 0x11c <__fixunssfdi+0x32>
     10a:	aa 24       	eor	r10, r10
     10c:	bb 24       	eor	r11, r11
     10e:	cc 24       	eor	r12, r12
     110:	dd 24       	eor	r13, r13
     112:	ee 24       	eor	r14, r14
     114:	ff 24       	eor	r15, r15
     116:	00 e0       	ldi	r16, 0x00	; 0
     118:	10 e0       	ldi	r17, 0x00	; 0
     11a:	86 c0       	rjmp	.+268    	; 0x228 <__fixunssfdi+0x13e>
     11c:	c8 01       	movw	r24, r16
     11e:	b7 01       	movw	r22, r14
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	30 e0       	ldi	r19, 0x00	; 0
     124:	40 e8       	ldi	r20, 0x80	; 128
     126:	5f e4       	ldi	r21, 0x4F	; 79
     128:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
     12c:	88 23       	and	r24, r24
     12e:	54 f4       	brge	.+20     	; 0x144 <__fixunssfdi+0x5a>
     130:	c8 01       	movw	r24, r16
     132:	b7 01       	movw	r22, r14
     134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     138:	5b 01       	movw	r10, r22
     13a:	6c 01       	movw	r12, r24
     13c:	ee 24       	eor	r14, r14
     13e:	ff 24       	eor	r15, r15
     140:	87 01       	movw	r16, r14
     142:	72 c0       	rjmp	.+228    	; 0x228 <__fixunssfdi+0x13e>
     144:	c8 01       	movw	r24, r16
     146:	b7 01       	movw	r22, r14
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e8       	ldi	r20, 0x80	; 128
     14e:	5f e5       	ldi	r21, 0x5F	; 95
     150:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
     154:	87 fd       	sbrc	r24, 7
     156:	0f c0       	rjmp	.+30     	; 0x176 <__fixunssfdi+0x8c>
     158:	aa 24       	eor	r10, r10
     15a:	aa 94       	dec	r10
     15c:	bb 24       	eor	r11, r11
     15e:	ba 94       	dec	r11
     160:	cc 24       	eor	r12, r12
     162:	ca 94       	dec	r12
     164:	dd 24       	eor	r13, r13
     166:	da 94       	dec	r13
     168:	ee 24       	eor	r14, r14
     16a:	ea 94       	dec	r14
     16c:	ff 24       	eor	r15, r15
     16e:	fa 94       	dec	r15
     170:	0f ef       	ldi	r16, 0xFF	; 255
     172:	1f ef       	ldi	r17, 0xFF	; 255
     174:	59 c0       	rjmp	.+178    	; 0x228 <__fixunssfdi+0x13e>
     176:	c8 01       	movw	r24, r16
     178:	b7 01       	movw	r22, r14
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e8       	ldi	r20, 0x80	; 128
     180:	5f e2       	ldi	r21, 0x2F	; 47
     182:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
     186:	7b 01       	movw	r14, r22
     188:	8c 01       	movw	r16, r24
     18a:	22 24       	eor	r2, r2
     18c:	33 24       	eor	r3, r3
     18e:	21 01       	movw	r4, r2
     190:	90 e1       	ldi	r25, 0x10	; 16
     192:	a9 2e       	mov	r10, r25
     194:	b1 2c       	mov	r11, r1
     196:	c1 2c       	mov	r12, r1
     198:	d1 2c       	mov	r13, r1
     19a:	c0 e0       	ldi	r28, 0x00	; 0
     19c:	d0 e0       	ldi	r29, 0x00	; 0
     19e:	61 e0       	ldi	r22, 0x01	; 1
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	80 e0       	ldi	r24, 0x00	; 0
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0a 2c       	mov	r0, r10
     1a8:	04 c0       	rjmp	.+8      	; 0x1b2 <__fixunssfdi+0xc8>
     1aa:	66 0f       	add	r22, r22
     1ac:	77 1f       	adc	r23, r23
     1ae:	88 1f       	adc	r24, r24
     1b0:	99 1f       	adc	r25, r25
     1b2:	0a 94       	dec	r0
     1b4:	d2 f7       	brpl	.-12     	; 0x1aa <__fixunssfdi+0xc0>
     1b6:	0e 94 af 05 	call	0xb5e	; 0xb5e <__floatunsisf>
     1ba:	3b 01       	movw	r6, r22
     1bc:	4c 01       	movw	r8, r24
     1be:	c8 01       	movw	r24, r16
     1c0:	b7 01       	movw	r22, r14
     1c2:	a4 01       	movw	r20, r8
     1c4:	93 01       	movw	r18, r6
     1c6:	0e 94 9d 04 	call	0x93a	; 0x93a <__gesf2>
     1ca:	88 23       	and	r24, r24
     1cc:	64 f0       	brlt	.+24     	; 0x1e6 <__fixunssfdi+0xfc>
     1ce:	2a 28       	or	r2, r10
     1d0:	3b 28       	or	r3, r11
     1d2:	4c 28       	or	r4, r12
     1d4:	5d 28       	or	r5, r13
     1d6:	c8 01       	movw	r24, r16
     1d8:	b7 01       	movw	r22, r14
     1da:	a4 01       	movw	r20, r8
     1dc:	93 01       	movw	r18, r6
     1de:	0e 94 c1 03 	call	0x782	; 0x782 <__divsf3>
     1e2:	7b 01       	movw	r14, r22
     1e4:	8c 01       	movw	r16, r24
     1e6:	d6 94       	lsr	r13
     1e8:	c7 94       	ror	r12
     1ea:	b7 94       	ror	r11
     1ec:	a7 94       	ror	r10
     1ee:	21 96       	adiw	r28, 0x01	; 1
     1f0:	c5 30       	cpi	r28, 0x05	; 5
     1f2:	d1 05       	cpc	r29, r1
     1f4:	a1 f6       	brne	.-88     	; 0x19e <__fixunssfdi+0xb4>
     1f6:	c8 01       	movw	r24, r16
     1f8:	b7 01       	movw	r22, r14
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	30 e0       	ldi	r19, 0x00	; 0
     1fe:	40 e8       	ldi	r20, 0x80	; 128
     200:	5f e4       	ldi	r21, 0x4F	; 79
     202:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
     206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     20a:	5b 01       	movw	r10, r22
     20c:	6c 01       	movw	r12, r24
     20e:	9b 01       	movw	r18, r22
     210:	a6 01       	movw	r20, r12
     212:	60 e0       	ldi	r22, 0x00	; 0
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	80 e0       	ldi	r24, 0x00	; 0
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	02 2d       	mov	r16, r2
     21c:	0e 94 28 06 	call	0xc50	; 0xc50 <__ashldi3>
     220:	59 01       	movw	r10, r18
     222:	6a 01       	movw	r12, r20
     224:	7b 01       	movw	r14, r22
     226:	8c 01       	movw	r16, r24
     228:	95 01       	movw	r18, r10
     22a:	a6 01       	movw	r20, r12
     22c:	b7 01       	movw	r22, r14
     22e:	c8 01       	movw	r24, r16
     230:	cd b7       	in	r28, 0x3d	; 61
     232:	de b7       	in	r29, 0x3e	; 62
     234:	e2 e1       	ldi	r30, 0x12	; 18
     236:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__epilogue_restores__>

0000023a <_fpadd_parts>:
     23a:	a0 e0       	ldi	r26, 0x00	; 0
     23c:	b0 e0       	ldi	r27, 0x00	; 0
     23e:	e3 e2       	ldi	r30, 0x23	; 35
     240:	f1 e0       	ldi	r31, 0x01	; 1
     242:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__prologue_saves__>
     246:	dc 01       	movw	r26, r24
     248:	2b 01       	movw	r4, r22
     24a:	fa 01       	movw	r30, r20
     24c:	9c 91       	ld	r25, X
     24e:	92 30       	cpi	r25, 0x02	; 2
     250:	08 f4       	brcc	.+2      	; 0x254 <_fpadd_parts+0x1a>
     252:	39 c1       	rjmp	.+626    	; 0x4c6 <__stack+0x67>
     254:	eb 01       	movw	r28, r22
     256:	88 81       	ld	r24, Y
     258:	82 30       	cpi	r24, 0x02	; 2
     25a:	08 f4       	brcc	.+2      	; 0x25e <_fpadd_parts+0x24>
     25c:	33 c1       	rjmp	.+614    	; 0x4c4 <__stack+0x65>
     25e:	94 30       	cpi	r25, 0x04	; 4
     260:	69 f4       	brne	.+26     	; 0x27c <_fpadd_parts+0x42>
     262:	84 30       	cpi	r24, 0x04	; 4
     264:	09 f0       	breq	.+2      	; 0x268 <_fpadd_parts+0x2e>
     266:	2f c1       	rjmp	.+606    	; 0x4c6 <__stack+0x67>
     268:	11 96       	adiw	r26, 0x01	; 1
     26a:	9c 91       	ld	r25, X
     26c:	11 97       	sbiw	r26, 0x01	; 1
     26e:	89 81       	ldd	r24, Y+1	; 0x01
     270:	98 17       	cp	r25, r24
     272:	09 f4       	brne	.+2      	; 0x276 <_fpadd_parts+0x3c>
     274:	28 c1       	rjmp	.+592    	; 0x4c6 <__stack+0x67>
     276:	ae e6       	ldi	r26, 0x6E	; 110
     278:	b0 e0       	ldi	r27, 0x00	; 0
     27a:	25 c1       	rjmp	.+586    	; 0x4c6 <__stack+0x67>
     27c:	84 30       	cpi	r24, 0x04	; 4
     27e:	09 f4       	brne	.+2      	; 0x282 <_fpadd_parts+0x48>
     280:	21 c1       	rjmp	.+578    	; 0x4c4 <__stack+0x65>
     282:	82 30       	cpi	r24, 0x02	; 2
     284:	a9 f4       	brne	.+42     	; 0x2b0 <_fpadd_parts+0x76>
     286:	92 30       	cpi	r25, 0x02	; 2
     288:	09 f0       	breq	.+2      	; 0x28c <_fpadd_parts+0x52>
     28a:	1d c1       	rjmp	.+570    	; 0x4c6 <__stack+0x67>
     28c:	9a 01       	movw	r18, r20
     28e:	ad 01       	movw	r20, r26
     290:	88 e0       	ldi	r24, 0x08	; 8
     292:	ea 01       	movw	r28, r20
     294:	09 90       	ld	r0, Y+
     296:	ae 01       	movw	r20, r28
     298:	e9 01       	movw	r28, r18
     29a:	09 92       	st	Y+, r0
     29c:	9e 01       	movw	r18, r28
     29e:	81 50       	subi	r24, 0x01	; 1
     2a0:	c1 f7       	brne	.-16     	; 0x292 <_fpadd_parts+0x58>
     2a2:	e2 01       	movw	r28, r4
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	11 96       	adiw	r26, 0x01	; 1
     2a8:	9c 91       	ld	r25, X
     2aa:	89 23       	and	r24, r25
     2ac:	81 83       	std	Z+1, r24	; 0x01
     2ae:	08 c1       	rjmp	.+528    	; 0x4c0 <__stack+0x61>
     2b0:	92 30       	cpi	r25, 0x02	; 2
     2b2:	09 f4       	brne	.+2      	; 0x2b6 <_fpadd_parts+0x7c>
     2b4:	07 c1       	rjmp	.+526    	; 0x4c4 <__stack+0x65>
     2b6:	12 96       	adiw	r26, 0x02	; 2
     2b8:	2d 90       	ld	r2, X+
     2ba:	3c 90       	ld	r3, X
     2bc:	13 97       	sbiw	r26, 0x03	; 3
     2be:	eb 01       	movw	r28, r22
     2c0:	8a 81       	ldd	r24, Y+2	; 0x02
     2c2:	9b 81       	ldd	r25, Y+3	; 0x03
     2c4:	14 96       	adiw	r26, 0x04	; 4
     2c6:	ad 90       	ld	r10, X+
     2c8:	bd 90       	ld	r11, X+
     2ca:	cd 90       	ld	r12, X+
     2cc:	dc 90       	ld	r13, X
     2ce:	17 97       	sbiw	r26, 0x07	; 7
     2d0:	ec 80       	ldd	r14, Y+4	; 0x04
     2d2:	fd 80       	ldd	r15, Y+5	; 0x05
     2d4:	0e 81       	ldd	r16, Y+6	; 0x06
     2d6:	1f 81       	ldd	r17, Y+7	; 0x07
     2d8:	91 01       	movw	r18, r2
     2da:	28 1b       	sub	r18, r24
     2dc:	39 0b       	sbc	r19, r25
     2de:	b9 01       	movw	r22, r18
     2e0:	37 ff       	sbrs	r19, 7
     2e2:	04 c0       	rjmp	.+8      	; 0x2ec <_fpadd_parts+0xb2>
     2e4:	66 27       	eor	r22, r22
     2e6:	77 27       	eor	r23, r23
     2e8:	62 1b       	sub	r22, r18
     2ea:	73 0b       	sbc	r23, r19
     2ec:	60 32       	cpi	r22, 0x20	; 32
     2ee:	71 05       	cpc	r23, r1
     2f0:	0c f0       	brlt	.+2      	; 0x2f4 <_fpadd_parts+0xba>
     2f2:	61 c0       	rjmp	.+194    	; 0x3b6 <_fpadd_parts+0x17c>
     2f4:	12 16       	cp	r1, r18
     2f6:	13 06       	cpc	r1, r19
     2f8:	6c f5       	brge	.+90     	; 0x354 <_fpadd_parts+0x11a>
     2fa:	37 01       	movw	r6, r14
     2fc:	48 01       	movw	r8, r16
     2fe:	06 2e       	mov	r0, r22
     300:	04 c0       	rjmp	.+8      	; 0x30a <_fpadd_parts+0xd0>
     302:	96 94       	lsr	r9
     304:	87 94       	ror	r8
     306:	77 94       	ror	r7
     308:	67 94       	ror	r6
     30a:	0a 94       	dec	r0
     30c:	d2 f7       	brpl	.-12     	; 0x302 <_fpadd_parts+0xc8>
     30e:	21 e0       	ldi	r18, 0x01	; 1
     310:	30 e0       	ldi	r19, 0x00	; 0
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	04 c0       	rjmp	.+8      	; 0x320 <_fpadd_parts+0xe6>
     318:	22 0f       	add	r18, r18
     31a:	33 1f       	adc	r19, r19
     31c:	44 1f       	adc	r20, r20
     31e:	55 1f       	adc	r21, r21
     320:	6a 95       	dec	r22
     322:	d2 f7       	brpl	.-12     	; 0x318 <_fpadd_parts+0xde>
     324:	21 50       	subi	r18, 0x01	; 1
     326:	30 40       	sbci	r19, 0x00	; 0
     328:	40 40       	sbci	r20, 0x00	; 0
     32a:	50 40       	sbci	r21, 0x00	; 0
     32c:	2e 21       	and	r18, r14
     32e:	3f 21       	and	r19, r15
     330:	40 23       	and	r20, r16
     332:	51 23       	and	r21, r17
     334:	21 15       	cp	r18, r1
     336:	31 05       	cpc	r19, r1
     338:	41 05       	cpc	r20, r1
     33a:	51 05       	cpc	r21, r1
     33c:	21 f0       	breq	.+8      	; 0x346 <_fpadd_parts+0x10c>
     33e:	21 e0       	ldi	r18, 0x01	; 1
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e0       	ldi	r20, 0x00	; 0
     344:	50 e0       	ldi	r21, 0x00	; 0
     346:	79 01       	movw	r14, r18
     348:	8a 01       	movw	r16, r20
     34a:	e6 28       	or	r14, r6
     34c:	f7 28       	or	r15, r7
     34e:	08 29       	or	r16, r8
     350:	19 29       	or	r17, r9
     352:	3c c0       	rjmp	.+120    	; 0x3cc <_fpadd_parts+0x192>
     354:	23 2b       	or	r18, r19
     356:	d1 f1       	breq	.+116    	; 0x3cc <_fpadd_parts+0x192>
     358:	26 0e       	add	r2, r22
     35a:	37 1e       	adc	r3, r23
     35c:	35 01       	movw	r6, r10
     35e:	46 01       	movw	r8, r12
     360:	06 2e       	mov	r0, r22
     362:	04 c0       	rjmp	.+8      	; 0x36c <_fpadd_parts+0x132>
     364:	96 94       	lsr	r9
     366:	87 94       	ror	r8
     368:	77 94       	ror	r7
     36a:	67 94       	ror	r6
     36c:	0a 94       	dec	r0
     36e:	d2 f7       	brpl	.-12     	; 0x364 <_fpadd_parts+0x12a>
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	04 c0       	rjmp	.+8      	; 0x382 <_fpadd_parts+0x148>
     37a:	22 0f       	add	r18, r18
     37c:	33 1f       	adc	r19, r19
     37e:	44 1f       	adc	r20, r20
     380:	55 1f       	adc	r21, r21
     382:	6a 95       	dec	r22
     384:	d2 f7       	brpl	.-12     	; 0x37a <_fpadd_parts+0x140>
     386:	21 50       	subi	r18, 0x01	; 1
     388:	30 40       	sbci	r19, 0x00	; 0
     38a:	40 40       	sbci	r20, 0x00	; 0
     38c:	50 40       	sbci	r21, 0x00	; 0
     38e:	2a 21       	and	r18, r10
     390:	3b 21       	and	r19, r11
     392:	4c 21       	and	r20, r12
     394:	5d 21       	and	r21, r13
     396:	21 15       	cp	r18, r1
     398:	31 05       	cpc	r19, r1
     39a:	41 05       	cpc	r20, r1
     39c:	51 05       	cpc	r21, r1
     39e:	21 f0       	breq	.+8      	; 0x3a8 <_fpadd_parts+0x16e>
     3a0:	21 e0       	ldi	r18, 0x01	; 1
     3a2:	30 e0       	ldi	r19, 0x00	; 0
     3a4:	40 e0       	ldi	r20, 0x00	; 0
     3a6:	50 e0       	ldi	r21, 0x00	; 0
     3a8:	59 01       	movw	r10, r18
     3aa:	6a 01       	movw	r12, r20
     3ac:	a6 28       	or	r10, r6
     3ae:	b7 28       	or	r11, r7
     3b0:	c8 28       	or	r12, r8
     3b2:	d9 28       	or	r13, r9
     3b4:	0b c0       	rjmp	.+22     	; 0x3cc <_fpadd_parts+0x192>
     3b6:	82 15       	cp	r24, r2
     3b8:	93 05       	cpc	r25, r3
     3ba:	2c f0       	brlt	.+10     	; 0x3c6 <_fpadd_parts+0x18c>
     3bc:	1c 01       	movw	r2, r24
     3be:	aa 24       	eor	r10, r10
     3c0:	bb 24       	eor	r11, r11
     3c2:	65 01       	movw	r12, r10
     3c4:	03 c0       	rjmp	.+6      	; 0x3cc <_fpadd_parts+0x192>
     3c6:	ee 24       	eor	r14, r14
     3c8:	ff 24       	eor	r15, r15
     3ca:	87 01       	movw	r16, r14
     3cc:	11 96       	adiw	r26, 0x01	; 1
     3ce:	9c 91       	ld	r25, X
     3d0:	d2 01       	movw	r26, r4
     3d2:	11 96       	adiw	r26, 0x01	; 1
     3d4:	8c 91       	ld	r24, X
     3d6:	98 17       	cp	r25, r24
     3d8:	09 f4       	brne	.+2      	; 0x3dc <_fpadd_parts+0x1a2>
     3da:	45 c0       	rjmp	.+138    	; 0x466 <__stack+0x7>
     3dc:	99 23       	and	r25, r25
     3de:	39 f0       	breq	.+14     	; 0x3ee <_fpadd_parts+0x1b4>
     3e0:	a8 01       	movw	r20, r16
     3e2:	97 01       	movw	r18, r14
     3e4:	2a 19       	sub	r18, r10
     3e6:	3b 09       	sbc	r19, r11
     3e8:	4c 09       	sbc	r20, r12
     3ea:	5d 09       	sbc	r21, r13
     3ec:	06 c0       	rjmp	.+12     	; 0x3fa <_fpadd_parts+0x1c0>
     3ee:	a6 01       	movw	r20, r12
     3f0:	95 01       	movw	r18, r10
     3f2:	2e 19       	sub	r18, r14
     3f4:	3f 09       	sbc	r19, r15
     3f6:	40 0b       	sbc	r20, r16
     3f8:	51 0b       	sbc	r21, r17
     3fa:	57 fd       	sbrc	r21, 7
     3fc:	08 c0       	rjmp	.+16     	; 0x40e <_fpadd_parts+0x1d4>
     3fe:	11 82       	std	Z+1, r1	; 0x01
     400:	33 82       	std	Z+3, r3	; 0x03
     402:	22 82       	std	Z+2, r2	; 0x02
     404:	24 83       	std	Z+4, r18	; 0x04
     406:	35 83       	std	Z+5, r19	; 0x05
     408:	46 83       	std	Z+6, r20	; 0x06
     40a:	57 83       	std	Z+7, r21	; 0x07
     40c:	1d c0       	rjmp	.+58     	; 0x448 <_fpadd_parts+0x20e>
     40e:	81 e0       	ldi	r24, 0x01	; 1
     410:	81 83       	std	Z+1, r24	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	88 27       	eor	r24, r24
     418:	99 27       	eor	r25, r25
     41a:	dc 01       	movw	r26, r24
     41c:	82 1b       	sub	r24, r18
     41e:	93 0b       	sbc	r25, r19
     420:	a4 0b       	sbc	r26, r20
     422:	b5 0b       	sbc	r27, r21
     424:	84 83       	std	Z+4, r24	; 0x04
     426:	95 83       	std	Z+5, r25	; 0x05
     428:	a6 83       	std	Z+6, r26	; 0x06
     42a:	b7 83       	std	Z+7, r27	; 0x07
     42c:	0d c0       	rjmp	.+26     	; 0x448 <_fpadd_parts+0x20e>
     42e:	22 0f       	add	r18, r18
     430:	33 1f       	adc	r19, r19
     432:	44 1f       	adc	r20, r20
     434:	55 1f       	adc	r21, r21
     436:	24 83       	std	Z+4, r18	; 0x04
     438:	35 83       	std	Z+5, r19	; 0x05
     43a:	46 83       	std	Z+6, r20	; 0x06
     43c:	57 83       	std	Z+7, r21	; 0x07
     43e:	82 81       	ldd	r24, Z+2	; 0x02
     440:	93 81       	ldd	r25, Z+3	; 0x03
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	93 83       	std	Z+3, r25	; 0x03
     446:	82 83       	std	Z+2, r24	; 0x02
     448:	24 81       	ldd	r18, Z+4	; 0x04
     44a:	35 81       	ldd	r19, Z+5	; 0x05
     44c:	46 81       	ldd	r20, Z+6	; 0x06
     44e:	57 81       	ldd	r21, Z+7	; 0x07
     450:	da 01       	movw	r26, r20
     452:	c9 01       	movw	r24, r18
     454:	01 97       	sbiw	r24, 0x01	; 1
     456:	a1 09       	sbc	r26, r1
     458:	b1 09       	sbc	r27, r1
     45a:	8f 5f       	subi	r24, 0xFF	; 255
     45c:	9f 4f       	sbci	r25, 0xFF	; 255
     45e:	af 4f       	sbci	r26, 0xFF	; 255
     460:	bf 43       	sbci	r27, 0x3F	; 63
     462:	28 f3       	brcs	.-54     	; 0x42e <_fpadd_parts+0x1f4>
     464:	0b c0       	rjmp	.+22     	; 0x47c <__stack+0x1d>
     466:	91 83       	std	Z+1, r25	; 0x01
     468:	33 82       	std	Z+3, r3	; 0x03
     46a:	22 82       	std	Z+2, r2	; 0x02
     46c:	ea 0c       	add	r14, r10
     46e:	fb 1c       	adc	r15, r11
     470:	0c 1d       	adc	r16, r12
     472:	1d 1d       	adc	r17, r13
     474:	e4 82       	std	Z+4, r14	; 0x04
     476:	f5 82       	std	Z+5, r15	; 0x05
     478:	06 83       	std	Z+6, r16	; 0x06
     47a:	17 83       	std	Z+7, r17	; 0x07
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	80 83       	st	Z, r24
     480:	24 81       	ldd	r18, Z+4	; 0x04
     482:	35 81       	ldd	r19, Z+5	; 0x05
     484:	46 81       	ldd	r20, Z+6	; 0x06
     486:	57 81       	ldd	r21, Z+7	; 0x07
     488:	57 ff       	sbrs	r21, 7
     48a:	1a c0       	rjmp	.+52     	; 0x4c0 <__stack+0x61>
     48c:	c9 01       	movw	r24, r18
     48e:	aa 27       	eor	r26, r26
     490:	97 fd       	sbrc	r25, 7
     492:	a0 95       	com	r26
     494:	ba 2f       	mov	r27, r26
     496:	81 70       	andi	r24, 0x01	; 1
     498:	90 70       	andi	r25, 0x00	; 0
     49a:	a0 70       	andi	r26, 0x00	; 0
     49c:	b0 70       	andi	r27, 0x00	; 0
     49e:	56 95       	lsr	r21
     4a0:	47 95       	ror	r20
     4a2:	37 95       	ror	r19
     4a4:	27 95       	ror	r18
     4a6:	82 2b       	or	r24, r18
     4a8:	93 2b       	or	r25, r19
     4aa:	a4 2b       	or	r26, r20
     4ac:	b5 2b       	or	r27, r21
     4ae:	84 83       	std	Z+4, r24	; 0x04
     4b0:	95 83       	std	Z+5, r25	; 0x05
     4b2:	a6 83       	std	Z+6, r26	; 0x06
     4b4:	b7 83       	std	Z+7, r27	; 0x07
     4b6:	82 81       	ldd	r24, Z+2	; 0x02
     4b8:	93 81       	ldd	r25, Z+3	; 0x03
     4ba:	01 96       	adiw	r24, 0x01	; 1
     4bc:	93 83       	std	Z+3, r25	; 0x03
     4be:	82 83       	std	Z+2, r24	; 0x02
     4c0:	df 01       	movw	r26, r30
     4c2:	01 c0       	rjmp	.+2      	; 0x4c6 <__stack+0x67>
     4c4:	d2 01       	movw	r26, r4
     4c6:	cd 01       	movw	r24, r26
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	e2 e1       	ldi	r30, 0x12	; 18
     4ce:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__epilogue_restores__>

000004d2 <__subsf3>:
     4d2:	a0 e2       	ldi	r26, 0x20	; 32
     4d4:	b0 e0       	ldi	r27, 0x00	; 0
     4d6:	ef e6       	ldi	r30, 0x6F	; 111
     4d8:	f2 e0       	ldi	r31, 0x02	; 2
     4da:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x18>
     4de:	69 83       	std	Y+1, r22	; 0x01
     4e0:	7a 83       	std	Y+2, r23	; 0x02
     4e2:	8b 83       	std	Y+3, r24	; 0x03
     4e4:	9c 83       	std	Y+4, r25	; 0x04
     4e6:	2d 83       	std	Y+5, r18	; 0x05
     4e8:	3e 83       	std	Y+6, r19	; 0x06
     4ea:	4f 83       	std	Y+7, r20	; 0x07
     4ec:	58 87       	std	Y+8, r21	; 0x08
     4ee:	e9 e0       	ldi	r30, 0x09	; 9
     4f0:	ee 2e       	mov	r14, r30
     4f2:	f1 2c       	mov	r15, r1
     4f4:	ec 0e       	add	r14, r28
     4f6:	fd 1e       	adc	r15, r29
     4f8:	ce 01       	movw	r24, r28
     4fa:	01 96       	adiw	r24, 0x01	; 1
     4fc:	b7 01       	movw	r22, r14
     4fe:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     502:	8e 01       	movw	r16, r28
     504:	0f 5e       	subi	r16, 0xEF	; 239
     506:	1f 4f       	sbci	r17, 0xFF	; 255
     508:	ce 01       	movw	r24, r28
     50a:	05 96       	adiw	r24, 0x05	; 5
     50c:	b8 01       	movw	r22, r16
     50e:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     512:	8a 89       	ldd	r24, Y+18	; 0x12
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	89 27       	eor	r24, r25
     518:	8a 8b       	std	Y+18, r24	; 0x12
     51a:	c7 01       	movw	r24, r14
     51c:	b8 01       	movw	r22, r16
     51e:	ae 01       	movw	r20, r28
     520:	47 5e       	subi	r20, 0xE7	; 231
     522:	5f 4f       	sbci	r21, 0xFF	; 255
     524:	0e 94 1d 01 	call	0x23a	; 0x23a <_fpadd_parts>
     528:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     52c:	a0 96       	adiw	r28, 0x20	; 32
     52e:	e6 e0       	ldi	r30, 0x06	; 6
     530:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x18>

00000534 <__addsf3>:
     534:	a0 e2       	ldi	r26, 0x20	; 32
     536:	b0 e0       	ldi	r27, 0x00	; 0
     538:	e0 ea       	ldi	r30, 0xA0	; 160
     53a:	f2 e0       	ldi	r31, 0x02	; 2
     53c:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x18>
     540:	69 83       	std	Y+1, r22	; 0x01
     542:	7a 83       	std	Y+2, r23	; 0x02
     544:	8b 83       	std	Y+3, r24	; 0x03
     546:	9c 83       	std	Y+4, r25	; 0x04
     548:	2d 83       	std	Y+5, r18	; 0x05
     54a:	3e 83       	std	Y+6, r19	; 0x06
     54c:	4f 83       	std	Y+7, r20	; 0x07
     54e:	58 87       	std	Y+8, r21	; 0x08
     550:	f9 e0       	ldi	r31, 0x09	; 9
     552:	ef 2e       	mov	r14, r31
     554:	f1 2c       	mov	r15, r1
     556:	ec 0e       	add	r14, r28
     558:	fd 1e       	adc	r15, r29
     55a:	ce 01       	movw	r24, r28
     55c:	01 96       	adiw	r24, 0x01	; 1
     55e:	b7 01       	movw	r22, r14
     560:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     564:	8e 01       	movw	r16, r28
     566:	0f 5e       	subi	r16, 0xEF	; 239
     568:	1f 4f       	sbci	r17, 0xFF	; 255
     56a:	ce 01       	movw	r24, r28
     56c:	05 96       	adiw	r24, 0x05	; 5
     56e:	b8 01       	movw	r22, r16
     570:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     574:	c7 01       	movw	r24, r14
     576:	b8 01       	movw	r22, r16
     578:	ae 01       	movw	r20, r28
     57a:	47 5e       	subi	r20, 0xE7	; 231
     57c:	5f 4f       	sbci	r21, 0xFF	; 255
     57e:	0e 94 1d 01 	call	0x23a	; 0x23a <_fpadd_parts>
     582:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     586:	a0 96       	adiw	r28, 0x20	; 32
     588:	e6 e0       	ldi	r30, 0x06	; 6
     58a:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x18>

0000058e <__mulsf3>:
     58e:	a0 e2       	ldi	r26, 0x20	; 32
     590:	b0 e0       	ldi	r27, 0x00	; 0
     592:	ed ec       	ldi	r30, 0xCD	; 205
     594:	f2 e0       	ldi	r31, 0x02	; 2
     596:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <__prologue_saves__>
     59a:	69 83       	std	Y+1, r22	; 0x01
     59c:	7a 83       	std	Y+2, r23	; 0x02
     59e:	8b 83       	std	Y+3, r24	; 0x03
     5a0:	9c 83       	std	Y+4, r25	; 0x04
     5a2:	2d 83       	std	Y+5, r18	; 0x05
     5a4:	3e 83       	std	Y+6, r19	; 0x06
     5a6:	4f 83       	std	Y+7, r20	; 0x07
     5a8:	58 87       	std	Y+8, r21	; 0x08
     5aa:	ce 01       	movw	r24, r28
     5ac:	01 96       	adiw	r24, 0x01	; 1
     5ae:	be 01       	movw	r22, r28
     5b0:	67 5f       	subi	r22, 0xF7	; 247
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     5b8:	ce 01       	movw	r24, r28
     5ba:	05 96       	adiw	r24, 0x05	; 5
     5bc:	be 01       	movw	r22, r28
     5be:	6f 5e       	subi	r22, 0xEF	; 239
     5c0:	7f 4f       	sbci	r23, 0xFF	; 255
     5c2:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     5c6:	99 85       	ldd	r25, Y+9	; 0x09
     5c8:	92 30       	cpi	r25, 0x02	; 2
     5ca:	88 f0       	brcs	.+34     	; 0x5ee <__mulsf3+0x60>
     5cc:	89 89       	ldd	r24, Y+17	; 0x11
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	c8 f0       	brcs	.+50     	; 0x604 <__mulsf3+0x76>
     5d2:	94 30       	cpi	r25, 0x04	; 4
     5d4:	19 f4       	brne	.+6      	; 0x5dc <__mulsf3+0x4e>
     5d6:	82 30       	cpi	r24, 0x02	; 2
     5d8:	51 f4       	brne	.+20     	; 0x5ee <__mulsf3+0x60>
     5da:	04 c0       	rjmp	.+8      	; 0x5e4 <__mulsf3+0x56>
     5dc:	84 30       	cpi	r24, 0x04	; 4
     5de:	29 f4       	brne	.+10     	; 0x5ea <__mulsf3+0x5c>
     5e0:	92 30       	cpi	r25, 0x02	; 2
     5e2:	81 f4       	brne	.+32     	; 0x604 <__mulsf3+0x76>
     5e4:	8e e6       	ldi	r24, 0x6E	; 110
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	c6 c0       	rjmp	.+396    	; 0x776 <__mulsf3+0x1e8>
     5ea:	92 30       	cpi	r25, 0x02	; 2
     5ec:	49 f4       	brne	.+18     	; 0x600 <__mulsf3+0x72>
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5f2:	8a 89       	ldd	r24, Y+18	; 0x12
     5f4:	98 13       	cpse	r25, r24
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	2a 87       	std	Y+10, r18	; 0x0a
     5fa:	ce 01       	movw	r24, r28
     5fc:	09 96       	adiw	r24, 0x09	; 9
     5fe:	bb c0       	rjmp	.+374    	; 0x776 <__mulsf3+0x1e8>
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	49 f4       	brne	.+18     	; 0x616 <__mulsf3+0x88>
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	9a 85       	ldd	r25, Y+10	; 0x0a
     608:	8a 89       	ldd	r24, Y+18	; 0x12
     60a:	98 13       	cpse	r25, r24
     60c:	21 e0       	ldi	r18, 0x01	; 1
     60e:	2a 8b       	std	Y+18, r18	; 0x12
     610:	ce 01       	movw	r24, r28
     612:	41 96       	adiw	r24, 0x11	; 17
     614:	b0 c0       	rjmp	.+352    	; 0x776 <__mulsf3+0x1e8>
     616:	2d 84       	ldd	r2, Y+13	; 0x0d
     618:	3e 84       	ldd	r3, Y+14	; 0x0e
     61a:	4f 84       	ldd	r4, Y+15	; 0x0f
     61c:	58 88       	ldd	r5, Y+16	; 0x10
     61e:	6d 88       	ldd	r6, Y+21	; 0x15
     620:	7e 88       	ldd	r7, Y+22	; 0x16
     622:	8f 88       	ldd	r8, Y+23	; 0x17
     624:	98 8c       	ldd	r9, Y+24	; 0x18
     626:	ee 24       	eor	r14, r14
     628:	ff 24       	eor	r15, r15
     62a:	87 01       	movw	r16, r14
     62c:	aa 24       	eor	r10, r10
     62e:	bb 24       	eor	r11, r11
     630:	65 01       	movw	r12, r10
     632:	40 e0       	ldi	r20, 0x00	; 0
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	e0 e0       	ldi	r30, 0x00	; 0
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	c1 01       	movw	r24, r2
     640:	81 70       	andi	r24, 0x01	; 1
     642:	90 70       	andi	r25, 0x00	; 0
     644:	89 2b       	or	r24, r25
     646:	e9 f0       	breq	.+58     	; 0x682 <__mulsf3+0xf4>
     648:	e6 0c       	add	r14, r6
     64a:	f7 1c       	adc	r15, r7
     64c:	08 1d       	adc	r16, r8
     64e:	19 1d       	adc	r17, r9
     650:	9a 01       	movw	r18, r20
     652:	ab 01       	movw	r20, r22
     654:	2a 0d       	add	r18, r10
     656:	3b 1d       	adc	r19, r11
     658:	4c 1d       	adc	r20, r12
     65a:	5d 1d       	adc	r21, r13
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	a0 e0       	ldi	r26, 0x00	; 0
     662:	b0 e0       	ldi	r27, 0x00	; 0
     664:	e6 14       	cp	r14, r6
     666:	f7 04       	cpc	r15, r7
     668:	08 05       	cpc	r16, r8
     66a:	19 05       	cpc	r17, r9
     66c:	20 f4       	brcc	.+8      	; 0x676 <__mulsf3+0xe8>
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	a0 e0       	ldi	r26, 0x00	; 0
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	ba 01       	movw	r22, r20
     678:	a9 01       	movw	r20, r18
     67a:	48 0f       	add	r20, r24
     67c:	59 1f       	adc	r21, r25
     67e:	6a 1f       	adc	r22, r26
     680:	7b 1f       	adc	r23, r27
     682:	aa 0c       	add	r10, r10
     684:	bb 1c       	adc	r11, r11
     686:	cc 1c       	adc	r12, r12
     688:	dd 1c       	adc	r13, r13
     68a:	97 fe       	sbrs	r9, 7
     68c:	08 c0       	rjmp	.+16     	; 0x69e <__mulsf3+0x110>
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	a0 e0       	ldi	r26, 0x00	; 0
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	a8 2a       	or	r10, r24
     698:	b9 2a       	or	r11, r25
     69a:	ca 2a       	or	r12, r26
     69c:	db 2a       	or	r13, r27
     69e:	31 96       	adiw	r30, 0x01	; 1
     6a0:	e0 32       	cpi	r30, 0x20	; 32
     6a2:	f1 05       	cpc	r31, r1
     6a4:	49 f0       	breq	.+18     	; 0x6b8 <__mulsf3+0x12a>
     6a6:	66 0c       	add	r6, r6
     6a8:	77 1c       	adc	r7, r7
     6aa:	88 1c       	adc	r8, r8
     6ac:	99 1c       	adc	r9, r9
     6ae:	56 94       	lsr	r5
     6b0:	47 94       	ror	r4
     6b2:	37 94       	ror	r3
     6b4:	27 94       	ror	r2
     6b6:	c3 cf       	rjmp	.-122    	; 0x63e <__mulsf3+0xb0>
     6b8:	fa 85       	ldd	r31, Y+10	; 0x0a
     6ba:	ea 89       	ldd	r30, Y+18	; 0x12
     6bc:	2b 89       	ldd	r18, Y+19	; 0x13
     6be:	3c 89       	ldd	r19, Y+20	; 0x14
     6c0:	8b 85       	ldd	r24, Y+11	; 0x0b
     6c2:	9c 85       	ldd	r25, Y+12	; 0x0c
     6c4:	28 0f       	add	r18, r24
     6c6:	39 1f       	adc	r19, r25
     6c8:	2e 5f       	subi	r18, 0xFE	; 254
     6ca:	3f 4f       	sbci	r19, 0xFF	; 255
     6cc:	17 c0       	rjmp	.+46     	; 0x6fc <__mulsf3+0x16e>
     6ce:	ca 01       	movw	r24, r20
     6d0:	81 70       	andi	r24, 0x01	; 1
     6d2:	90 70       	andi	r25, 0x00	; 0
     6d4:	89 2b       	or	r24, r25
     6d6:	61 f0       	breq	.+24     	; 0x6f0 <__mulsf3+0x162>
     6d8:	16 95       	lsr	r17
     6da:	07 95       	ror	r16
     6dc:	f7 94       	ror	r15
     6de:	e7 94       	ror	r14
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	a0 e0       	ldi	r26, 0x00	; 0
     6e6:	b0 e8       	ldi	r27, 0x80	; 128
     6e8:	e8 2a       	or	r14, r24
     6ea:	f9 2a       	or	r15, r25
     6ec:	0a 2b       	or	r16, r26
     6ee:	1b 2b       	or	r17, r27
     6f0:	76 95       	lsr	r23
     6f2:	67 95       	ror	r22
     6f4:	57 95       	ror	r21
     6f6:	47 95       	ror	r20
     6f8:	2f 5f       	subi	r18, 0xFF	; 255
     6fa:	3f 4f       	sbci	r19, 0xFF	; 255
     6fc:	77 fd       	sbrc	r23, 7
     6fe:	e7 cf       	rjmp	.-50     	; 0x6ce <__mulsf3+0x140>
     700:	0c c0       	rjmp	.+24     	; 0x71a <__mulsf3+0x18c>
     702:	44 0f       	add	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	66 1f       	adc	r22, r22
     708:	77 1f       	adc	r23, r23
     70a:	17 fd       	sbrc	r17, 7
     70c:	41 60       	ori	r20, 0x01	; 1
     70e:	ee 0c       	add	r14, r14
     710:	ff 1c       	adc	r15, r15
     712:	00 1f       	adc	r16, r16
     714:	11 1f       	adc	r17, r17
     716:	21 50       	subi	r18, 0x01	; 1
     718:	30 40       	sbci	r19, 0x00	; 0
     71a:	40 30       	cpi	r20, 0x00	; 0
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	59 07       	cpc	r21, r25
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	69 07       	cpc	r22, r25
     724:	90 e4       	ldi	r25, 0x40	; 64
     726:	79 07       	cpc	r23, r25
     728:	60 f3       	brcs	.-40     	; 0x702 <__mulsf3+0x174>
     72a:	2b 8f       	std	Y+27, r18	; 0x1b
     72c:	3c 8f       	std	Y+28, r19	; 0x1c
     72e:	db 01       	movw	r26, r22
     730:	ca 01       	movw	r24, r20
     732:	8f 77       	andi	r24, 0x7F	; 127
     734:	90 70       	andi	r25, 0x00	; 0
     736:	a0 70       	andi	r26, 0x00	; 0
     738:	b0 70       	andi	r27, 0x00	; 0
     73a:	80 34       	cpi	r24, 0x40	; 64
     73c:	91 05       	cpc	r25, r1
     73e:	a1 05       	cpc	r26, r1
     740:	b1 05       	cpc	r27, r1
     742:	61 f4       	brne	.+24     	; 0x75c <__mulsf3+0x1ce>
     744:	47 fd       	sbrc	r20, 7
     746:	0a c0       	rjmp	.+20     	; 0x75c <__mulsf3+0x1ce>
     748:	e1 14       	cp	r14, r1
     74a:	f1 04       	cpc	r15, r1
     74c:	01 05       	cpc	r16, r1
     74e:	11 05       	cpc	r17, r1
     750:	29 f0       	breq	.+10     	; 0x75c <__mulsf3+0x1ce>
     752:	40 5c       	subi	r20, 0xC0	; 192
     754:	5f 4f       	sbci	r21, 0xFF	; 255
     756:	6f 4f       	sbci	r22, 0xFF	; 255
     758:	7f 4f       	sbci	r23, 0xFF	; 255
     75a:	40 78       	andi	r20, 0x80	; 128
     75c:	1a 8e       	std	Y+26, r1	; 0x1a
     75e:	fe 17       	cp	r31, r30
     760:	11 f0       	breq	.+4      	; 0x766 <__mulsf3+0x1d8>
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	8a 8f       	std	Y+26, r24	; 0x1a
     766:	4d 8f       	std	Y+29, r20	; 0x1d
     768:	5e 8f       	std	Y+30, r21	; 0x1e
     76a:	6f 8f       	std	Y+31, r22	; 0x1f
     76c:	78 a3       	std	Y+32, r23	; 0x20
     76e:	83 e0       	ldi	r24, 0x03	; 3
     770:	89 8f       	std	Y+25, r24	; 0x19
     772:	ce 01       	movw	r24, r28
     774:	49 96       	adiw	r24, 0x19	; 25
     776:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     77a:	a0 96       	adiw	r28, 0x20	; 32
     77c:	e2 e1       	ldi	r30, 0x12	; 18
     77e:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__epilogue_restores__>

00000782 <__divsf3>:
     782:	a8 e1       	ldi	r26, 0x18	; 24
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e7 ec       	ldi	r30, 0xC7	; 199
     788:	f3 e0       	ldi	r31, 0x03	; 3
     78a:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x10>
     78e:	69 83       	std	Y+1, r22	; 0x01
     790:	7a 83       	std	Y+2, r23	; 0x02
     792:	8b 83       	std	Y+3, r24	; 0x03
     794:	9c 83       	std	Y+4, r25	; 0x04
     796:	2d 83       	std	Y+5, r18	; 0x05
     798:	3e 83       	std	Y+6, r19	; 0x06
     79a:	4f 83       	std	Y+7, r20	; 0x07
     79c:	58 87       	std	Y+8, r21	; 0x08
     79e:	b9 e0       	ldi	r27, 0x09	; 9
     7a0:	eb 2e       	mov	r14, r27
     7a2:	f1 2c       	mov	r15, r1
     7a4:	ec 0e       	add	r14, r28
     7a6:	fd 1e       	adc	r15, r29
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	b7 01       	movw	r22, r14
     7ae:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     7b2:	8e 01       	movw	r16, r28
     7b4:	0f 5e       	subi	r16, 0xEF	; 239
     7b6:	1f 4f       	sbci	r17, 0xFF	; 255
     7b8:	ce 01       	movw	r24, r28
     7ba:	05 96       	adiw	r24, 0x05	; 5
     7bc:	b8 01       	movw	r22, r16
     7be:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     7c2:	29 85       	ldd	r18, Y+9	; 0x09
     7c4:	22 30       	cpi	r18, 0x02	; 2
     7c6:	08 f4       	brcc	.+2      	; 0x7ca <__divsf3+0x48>
     7c8:	7e c0       	rjmp	.+252    	; 0x8c6 <__divsf3+0x144>
     7ca:	39 89       	ldd	r19, Y+17	; 0x11
     7cc:	32 30       	cpi	r19, 0x02	; 2
     7ce:	10 f4       	brcc	.+4      	; 0x7d4 <__divsf3+0x52>
     7d0:	b8 01       	movw	r22, r16
     7d2:	7c c0       	rjmp	.+248    	; 0x8cc <__divsf3+0x14a>
     7d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     7d6:	9a 89       	ldd	r25, Y+18	; 0x12
     7d8:	89 27       	eor	r24, r25
     7da:	8a 87       	std	Y+10, r24	; 0x0a
     7dc:	24 30       	cpi	r18, 0x04	; 4
     7de:	11 f0       	breq	.+4      	; 0x7e4 <__divsf3+0x62>
     7e0:	22 30       	cpi	r18, 0x02	; 2
     7e2:	31 f4       	brne	.+12     	; 0x7f0 <__divsf3+0x6e>
     7e4:	23 17       	cp	r18, r19
     7e6:	09 f0       	breq	.+2      	; 0x7ea <__divsf3+0x68>
     7e8:	6e c0       	rjmp	.+220    	; 0x8c6 <__divsf3+0x144>
     7ea:	6e e6       	ldi	r22, 0x6E	; 110
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	6e c0       	rjmp	.+220    	; 0x8cc <__divsf3+0x14a>
     7f0:	34 30       	cpi	r19, 0x04	; 4
     7f2:	39 f4       	brne	.+14     	; 0x802 <__divsf3+0x80>
     7f4:	1d 86       	std	Y+13, r1	; 0x0d
     7f6:	1e 86       	std	Y+14, r1	; 0x0e
     7f8:	1f 86       	std	Y+15, r1	; 0x0f
     7fa:	18 8a       	std	Y+16, r1	; 0x10
     7fc:	1c 86       	std	Y+12, r1	; 0x0c
     7fe:	1b 86       	std	Y+11, r1	; 0x0b
     800:	04 c0       	rjmp	.+8      	; 0x80a <__divsf3+0x88>
     802:	32 30       	cpi	r19, 0x02	; 2
     804:	21 f4       	brne	.+8      	; 0x80e <__divsf3+0x8c>
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	89 87       	std	Y+9, r24	; 0x09
     80a:	b7 01       	movw	r22, r14
     80c:	5f c0       	rjmp	.+190    	; 0x8cc <__divsf3+0x14a>
     80e:	2b 85       	ldd	r18, Y+11	; 0x0b
     810:	3c 85       	ldd	r19, Y+12	; 0x0c
     812:	8b 89       	ldd	r24, Y+19	; 0x13
     814:	9c 89       	ldd	r25, Y+20	; 0x14
     816:	28 1b       	sub	r18, r24
     818:	39 0b       	sbc	r19, r25
     81a:	3c 87       	std	Y+12, r19	; 0x0c
     81c:	2b 87       	std	Y+11, r18	; 0x0b
     81e:	ed 84       	ldd	r14, Y+13	; 0x0d
     820:	fe 84       	ldd	r15, Y+14	; 0x0e
     822:	0f 85       	ldd	r16, Y+15	; 0x0f
     824:	18 89       	ldd	r17, Y+16	; 0x10
     826:	ad 88       	ldd	r10, Y+21	; 0x15
     828:	be 88       	ldd	r11, Y+22	; 0x16
     82a:	cf 88       	ldd	r12, Y+23	; 0x17
     82c:	d8 8c       	ldd	r13, Y+24	; 0x18
     82e:	ea 14       	cp	r14, r10
     830:	fb 04       	cpc	r15, r11
     832:	0c 05       	cpc	r16, r12
     834:	1d 05       	cpc	r17, r13
     836:	40 f4       	brcc	.+16     	; 0x848 <__divsf3+0xc6>
     838:	ee 0c       	add	r14, r14
     83a:	ff 1c       	adc	r15, r15
     83c:	00 1f       	adc	r16, r16
     83e:	11 1f       	adc	r17, r17
     840:	21 50       	subi	r18, 0x01	; 1
     842:	30 40       	sbci	r19, 0x00	; 0
     844:	3c 87       	std	Y+12, r19	; 0x0c
     846:	2b 87       	std	Y+11, r18	; 0x0b
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	a0 e0       	ldi	r26, 0x00	; 0
     856:	b0 e4       	ldi	r27, 0x40	; 64
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	ea 14       	cp	r14, r10
     85e:	fb 04       	cpc	r15, r11
     860:	0c 05       	cpc	r16, r12
     862:	1d 05       	cpc	r17, r13
     864:	40 f0       	brcs	.+16     	; 0x876 <__divsf3+0xf4>
     866:	28 2b       	or	r18, r24
     868:	39 2b       	or	r19, r25
     86a:	4a 2b       	or	r20, r26
     86c:	5b 2b       	or	r21, r27
     86e:	ea 18       	sub	r14, r10
     870:	fb 08       	sbc	r15, r11
     872:	0c 09       	sbc	r16, r12
     874:	1d 09       	sbc	r17, r13
     876:	b6 95       	lsr	r27
     878:	a7 95       	ror	r26
     87a:	97 95       	ror	r25
     87c:	87 95       	ror	r24
     87e:	ee 0c       	add	r14, r14
     880:	ff 1c       	adc	r15, r15
     882:	00 1f       	adc	r16, r16
     884:	11 1f       	adc	r17, r17
     886:	6f 5f       	subi	r22, 0xFF	; 255
     888:	7f 4f       	sbci	r23, 0xFF	; 255
     88a:	6f 31       	cpi	r22, 0x1F	; 31
     88c:	71 05       	cpc	r23, r1
     88e:	31 f7       	brne	.-52     	; 0x85c <__divsf3+0xda>
     890:	da 01       	movw	r26, r20
     892:	c9 01       	movw	r24, r18
     894:	8f 77       	andi	r24, 0x7F	; 127
     896:	90 70       	andi	r25, 0x00	; 0
     898:	a0 70       	andi	r26, 0x00	; 0
     89a:	b0 70       	andi	r27, 0x00	; 0
     89c:	80 34       	cpi	r24, 0x40	; 64
     89e:	91 05       	cpc	r25, r1
     8a0:	a1 05       	cpc	r26, r1
     8a2:	b1 05       	cpc	r27, r1
     8a4:	61 f4       	brne	.+24     	; 0x8be <__divsf3+0x13c>
     8a6:	27 fd       	sbrc	r18, 7
     8a8:	0a c0       	rjmp	.+20     	; 0x8be <__divsf3+0x13c>
     8aa:	e1 14       	cp	r14, r1
     8ac:	f1 04       	cpc	r15, r1
     8ae:	01 05       	cpc	r16, r1
     8b0:	11 05       	cpc	r17, r1
     8b2:	29 f0       	breq	.+10     	; 0x8be <__divsf3+0x13c>
     8b4:	20 5c       	subi	r18, 0xC0	; 192
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	4f 4f       	sbci	r20, 0xFF	; 255
     8ba:	5f 4f       	sbci	r21, 0xFF	; 255
     8bc:	20 78       	andi	r18, 0x80	; 128
     8be:	2d 87       	std	Y+13, r18	; 0x0d
     8c0:	3e 87       	std	Y+14, r19	; 0x0e
     8c2:	4f 87       	std	Y+15, r20	; 0x0f
     8c4:	58 8b       	std	Y+16, r21	; 0x10
     8c6:	be 01       	movw	r22, r28
     8c8:	67 5f       	subi	r22, 0xF7	; 247
     8ca:	7f 4f       	sbci	r23, 0xFF	; 255
     8cc:	cb 01       	movw	r24, r22
     8ce:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     8d2:	68 96       	adiw	r28, 0x18	; 24
     8d4:	ea e0       	ldi	r30, 0x0A	; 10
     8d6:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x10>

000008da <__gtsf2>:
     8da:	a8 e1       	ldi	r26, 0x18	; 24
     8dc:	b0 e0       	ldi	r27, 0x00	; 0
     8de:	e3 e7       	ldi	r30, 0x73	; 115
     8e0:	f4 e0       	ldi	r31, 0x04	; 4
     8e2:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x18>
     8e6:	69 83       	std	Y+1, r22	; 0x01
     8e8:	7a 83       	std	Y+2, r23	; 0x02
     8ea:	8b 83       	std	Y+3, r24	; 0x03
     8ec:	9c 83       	std	Y+4, r25	; 0x04
     8ee:	2d 83       	std	Y+5, r18	; 0x05
     8f0:	3e 83       	std	Y+6, r19	; 0x06
     8f2:	4f 83       	std	Y+7, r20	; 0x07
     8f4:	58 87       	std	Y+8, r21	; 0x08
     8f6:	89 e0       	ldi	r24, 0x09	; 9
     8f8:	e8 2e       	mov	r14, r24
     8fa:	f1 2c       	mov	r15, r1
     8fc:	ec 0e       	add	r14, r28
     8fe:	fd 1e       	adc	r15, r29
     900:	ce 01       	movw	r24, r28
     902:	01 96       	adiw	r24, 0x01	; 1
     904:	b7 01       	movw	r22, r14
     906:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     90a:	8e 01       	movw	r16, r28
     90c:	0f 5e       	subi	r16, 0xEF	; 239
     90e:	1f 4f       	sbci	r17, 0xFF	; 255
     910:	ce 01       	movw	r24, r28
     912:	05 96       	adiw	r24, 0x05	; 5
     914:	b8 01       	movw	r22, r16
     916:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     91a:	89 85       	ldd	r24, Y+9	; 0x09
     91c:	82 30       	cpi	r24, 0x02	; 2
     91e:	40 f0       	brcs	.+16     	; 0x930 <__gtsf2+0x56>
     920:	89 89       	ldd	r24, Y+17	; 0x11
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	28 f0       	brcs	.+10     	; 0x930 <__gtsf2+0x56>
     926:	c7 01       	movw	r24, r14
     928:	b8 01       	movw	r22, r16
     92a:	0e 94 43 08 	call	0x1086	; 0x1086 <__fpcmp_parts_f>
     92e:	01 c0       	rjmp	.+2      	; 0x932 <__gtsf2+0x58>
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	68 96       	adiw	r28, 0x18	; 24
     934:	e6 e0       	ldi	r30, 0x06	; 6
     936:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x18>

0000093a <__gesf2>:
     93a:	a8 e1       	ldi	r26, 0x18	; 24
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	e3 ea       	ldi	r30, 0xA3	; 163
     940:	f4 e0       	ldi	r31, 0x04	; 4
     942:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x18>
     946:	69 83       	std	Y+1, r22	; 0x01
     948:	7a 83       	std	Y+2, r23	; 0x02
     94a:	8b 83       	std	Y+3, r24	; 0x03
     94c:	9c 83       	std	Y+4, r25	; 0x04
     94e:	2d 83       	std	Y+5, r18	; 0x05
     950:	3e 83       	std	Y+6, r19	; 0x06
     952:	4f 83       	std	Y+7, r20	; 0x07
     954:	58 87       	std	Y+8, r21	; 0x08
     956:	89 e0       	ldi	r24, 0x09	; 9
     958:	e8 2e       	mov	r14, r24
     95a:	f1 2c       	mov	r15, r1
     95c:	ec 0e       	add	r14, r28
     95e:	fd 1e       	adc	r15, r29
     960:	ce 01       	movw	r24, r28
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	b7 01       	movw	r22, r14
     966:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     96a:	8e 01       	movw	r16, r28
     96c:	0f 5e       	subi	r16, 0xEF	; 239
     96e:	1f 4f       	sbci	r17, 0xFF	; 255
     970:	ce 01       	movw	r24, r28
     972:	05 96       	adiw	r24, 0x05	; 5
     974:	b8 01       	movw	r22, r16
     976:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     97a:	89 85       	ldd	r24, Y+9	; 0x09
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	40 f0       	brcs	.+16     	; 0x990 <__gesf2+0x56>
     980:	89 89       	ldd	r24, Y+17	; 0x11
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	28 f0       	brcs	.+10     	; 0x990 <__gesf2+0x56>
     986:	c7 01       	movw	r24, r14
     988:	b8 01       	movw	r22, r16
     98a:	0e 94 43 08 	call	0x1086	; 0x1086 <__fpcmp_parts_f>
     98e:	01 c0       	rjmp	.+2      	; 0x992 <__gesf2+0x58>
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	68 96       	adiw	r28, 0x18	; 24
     994:	e6 e0       	ldi	r30, 0x06	; 6
     996:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x18>

0000099a <__ltsf2>:
     99a:	a8 e1       	ldi	r26, 0x18	; 24
     99c:	b0 e0       	ldi	r27, 0x00	; 0
     99e:	e3 ed       	ldi	r30, 0xD3	; 211
     9a0:	f4 e0       	ldi	r31, 0x04	; 4
     9a2:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__prologue_saves__+0x18>
     9a6:	69 83       	std	Y+1, r22	; 0x01
     9a8:	7a 83       	std	Y+2, r23	; 0x02
     9aa:	8b 83       	std	Y+3, r24	; 0x03
     9ac:	9c 83       	std	Y+4, r25	; 0x04
     9ae:	2d 83       	std	Y+5, r18	; 0x05
     9b0:	3e 83       	std	Y+6, r19	; 0x06
     9b2:	4f 83       	std	Y+7, r20	; 0x07
     9b4:	58 87       	std	Y+8, r21	; 0x08
     9b6:	89 e0       	ldi	r24, 0x09	; 9
     9b8:	e8 2e       	mov	r14, r24
     9ba:	f1 2c       	mov	r15, r1
     9bc:	ec 0e       	add	r14, r28
     9be:	fd 1e       	adc	r15, r29
     9c0:	ce 01       	movw	r24, r28
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	b7 01       	movw	r22, r14
     9c6:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     9ca:	8e 01       	movw	r16, r28
     9cc:	0f 5e       	subi	r16, 0xEF	; 239
     9ce:	1f 4f       	sbci	r17, 0xFF	; 255
     9d0:	ce 01       	movw	r24, r28
     9d2:	05 96       	adiw	r24, 0x05	; 5
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     9da:	89 85       	ldd	r24, Y+9	; 0x09
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	40 f0       	brcs	.+16     	; 0x9f0 <__ltsf2+0x56>
     9e0:	89 89       	ldd	r24, Y+17	; 0x11
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	28 f0       	brcs	.+10     	; 0x9f0 <__ltsf2+0x56>
     9e6:	c7 01       	movw	r24, r14
     9e8:	b8 01       	movw	r22, r16
     9ea:	0e 94 43 08 	call	0x1086	; 0x1086 <__fpcmp_parts_f>
     9ee:	01 c0       	rjmp	.+2      	; 0x9f2 <__ltsf2+0x58>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	68 96       	adiw	r28, 0x18	; 24
     9f4:	e6 e0       	ldi	r30, 0x06	; 6
     9f6:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__epilogue_restores__+0x18>

000009fa <__floatsisf>:
     9fa:	a8 e0       	ldi	r26, 0x08	; 8
     9fc:	b0 e0       	ldi	r27, 0x00	; 0
     9fe:	e3 e0       	ldi	r30, 0x03	; 3
     a00:	f5 e0       	ldi	r31, 0x05	; 5
     a02:	0c 94 4d 1a 	jmp	0x349a	; 0x349a <__prologue_saves__+0x12>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	83 e0       	ldi	r24, 0x03	; 3
     a0c:	89 83       	std	Y+1, r24	; 0x01
     a0e:	da 01       	movw	r26, r20
     a10:	c9 01       	movw	r24, r18
     a12:	88 27       	eor	r24, r24
     a14:	b7 fd       	sbrc	r27, 7
     a16:	83 95       	inc	r24
     a18:	99 27       	eor	r25, r25
     a1a:	aa 27       	eor	r26, r26
     a1c:	bb 27       	eor	r27, r27
     a1e:	b8 2e       	mov	r11, r24
     a20:	21 15       	cp	r18, r1
     a22:	31 05       	cpc	r19, r1
     a24:	41 05       	cpc	r20, r1
     a26:	51 05       	cpc	r21, r1
     a28:	19 f4       	brne	.+6      	; 0xa30 <__floatsisf+0x36>
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	89 83       	std	Y+1, r24	; 0x01
     a2e:	3a c0       	rjmp	.+116    	; 0xaa4 <__floatsisf+0xaa>
     a30:	88 23       	and	r24, r24
     a32:	a9 f0       	breq	.+42     	; 0xa5e <__floatsisf+0x64>
     a34:	20 30       	cpi	r18, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	38 07       	cpc	r19, r24
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	48 07       	cpc	r20, r24
     a3e:	80 e8       	ldi	r24, 0x80	; 128
     a40:	58 07       	cpc	r21, r24
     a42:	29 f4       	brne	.+10     	; 0xa4e <__floatsisf+0x54>
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	9f ec       	ldi	r25, 0xCF	; 207
     a4c:	30 c0       	rjmp	.+96     	; 0xaae <__floatsisf+0xb4>
     a4e:	ee 24       	eor	r14, r14
     a50:	ff 24       	eor	r15, r15
     a52:	87 01       	movw	r16, r14
     a54:	e2 1a       	sub	r14, r18
     a56:	f3 0a       	sbc	r15, r19
     a58:	04 0b       	sbc	r16, r20
     a5a:	15 0b       	sbc	r17, r21
     a5c:	02 c0       	rjmp	.+4      	; 0xa62 <__floatsisf+0x68>
     a5e:	79 01       	movw	r14, r18
     a60:	8a 01       	movw	r16, r20
     a62:	8e e1       	ldi	r24, 0x1E	; 30
     a64:	c8 2e       	mov	r12, r24
     a66:	d1 2c       	mov	r13, r1
     a68:	dc 82       	std	Y+4, r13	; 0x04
     a6a:	cb 82       	std	Y+3, r12	; 0x03
     a6c:	ed 82       	std	Y+5, r14	; 0x05
     a6e:	fe 82       	std	Y+6, r15	; 0x06
     a70:	0f 83       	std	Y+7, r16	; 0x07
     a72:	18 87       	std	Y+8, r17	; 0x08
     a74:	c8 01       	movw	r24, r16
     a76:	b7 01       	movw	r22, r14
     a78:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__clzsi2>
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	18 16       	cp	r1, r24
     a80:	19 06       	cpc	r1, r25
     a82:	84 f4       	brge	.+32     	; 0xaa4 <__floatsisf+0xaa>
     a84:	08 2e       	mov	r0, r24
     a86:	04 c0       	rjmp	.+8      	; 0xa90 <__floatsisf+0x96>
     a88:	ee 0c       	add	r14, r14
     a8a:	ff 1c       	adc	r15, r15
     a8c:	00 1f       	adc	r16, r16
     a8e:	11 1f       	adc	r17, r17
     a90:	0a 94       	dec	r0
     a92:	d2 f7       	brpl	.-12     	; 0xa88 <__floatsisf+0x8e>
     a94:	ed 82       	std	Y+5, r14	; 0x05
     a96:	fe 82       	std	Y+6, r15	; 0x06
     a98:	0f 83       	std	Y+7, r16	; 0x07
     a9a:	18 87       	std	Y+8, r17	; 0x08
     a9c:	c8 1a       	sub	r12, r24
     a9e:	d9 0a       	sbc	r13, r25
     aa0:	dc 82       	std	Y+4, r13	; 0x04
     aa2:	cb 82       	std	Y+3, r12	; 0x03
     aa4:	ba 82       	std	Y+2, r11	; 0x02
     aa6:	ce 01       	movw	r24, r28
     aa8:	01 96       	adiw	r24, 0x01	; 1
     aaa:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     aae:	28 96       	adiw	r28, 0x08	; 8
     ab0:	e9 e0       	ldi	r30, 0x09	; 9
     ab2:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__epilogue_restores__+0x12>

00000ab6 <__fixsfsi>:
     ab6:	ac e0       	ldi	r26, 0x0C	; 12
     ab8:	b0 e0       	ldi	r27, 0x00	; 0
     aba:	e1 e6       	ldi	r30, 0x61	; 97
     abc:	f5 e0       	ldi	r31, 0x05	; 5
     abe:	0c 94 54 1a 	jmp	0x34a8	; 0x34a8 <__prologue_saves__+0x20>
     ac2:	69 83       	std	Y+1, r22	; 0x01
     ac4:	7a 83       	std	Y+2, r23	; 0x02
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	9c 83       	std	Y+4, r25	; 0x04
     aca:	ce 01       	movw	r24, r28
     acc:	01 96       	adiw	r24, 0x01	; 1
     ace:	be 01       	movw	r22, r28
     ad0:	6b 5f       	subi	r22, 0xFB	; 251
     ad2:	7f 4f       	sbci	r23, 0xFF	; 255
     ad4:	0e 94 cb 07 	call	0xf96	; 0xf96 <__unpack_f>
     ad8:	8d 81       	ldd	r24, Y+5	; 0x05
     ada:	82 30       	cpi	r24, 0x02	; 2
     adc:	61 f1       	breq	.+88     	; 0xb36 <__fixsfsi+0x80>
     ade:	82 30       	cpi	r24, 0x02	; 2
     ae0:	50 f1       	brcs	.+84     	; 0xb36 <__fixsfsi+0x80>
     ae2:	84 30       	cpi	r24, 0x04	; 4
     ae4:	21 f4       	brne	.+8      	; 0xaee <__fixsfsi+0x38>
     ae6:	8e 81       	ldd	r24, Y+6	; 0x06
     ae8:	88 23       	and	r24, r24
     aea:	51 f1       	breq	.+84     	; 0xb40 <__fixsfsi+0x8a>
     aec:	2e c0       	rjmp	.+92     	; 0xb4a <__fixsfsi+0x94>
     aee:	2f 81       	ldd	r18, Y+7	; 0x07
     af0:	38 85       	ldd	r19, Y+8	; 0x08
     af2:	37 fd       	sbrc	r19, 7
     af4:	20 c0       	rjmp	.+64     	; 0xb36 <__fixsfsi+0x80>
     af6:	6e 81       	ldd	r22, Y+6	; 0x06
     af8:	2f 31       	cpi	r18, 0x1F	; 31
     afa:	31 05       	cpc	r19, r1
     afc:	1c f0       	brlt	.+6      	; 0xb04 <__fixsfsi+0x4e>
     afe:	66 23       	and	r22, r22
     b00:	f9 f0       	breq	.+62     	; 0xb40 <__fixsfsi+0x8a>
     b02:	23 c0       	rjmp	.+70     	; 0xb4a <__fixsfsi+0x94>
     b04:	8e e1       	ldi	r24, 0x1E	; 30
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	82 1b       	sub	r24, r18
     b0a:	93 0b       	sbc	r25, r19
     b0c:	29 85       	ldd	r18, Y+9	; 0x09
     b0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     b10:	4b 85       	ldd	r20, Y+11	; 0x0b
     b12:	5c 85       	ldd	r21, Y+12	; 0x0c
     b14:	04 c0       	rjmp	.+8      	; 0xb1e <__fixsfsi+0x68>
     b16:	56 95       	lsr	r21
     b18:	47 95       	ror	r20
     b1a:	37 95       	ror	r19
     b1c:	27 95       	ror	r18
     b1e:	8a 95       	dec	r24
     b20:	d2 f7       	brpl	.-12     	; 0xb16 <__fixsfsi+0x60>
     b22:	66 23       	and	r22, r22
     b24:	b1 f0       	breq	.+44     	; 0xb52 <__fixsfsi+0x9c>
     b26:	50 95       	com	r21
     b28:	40 95       	com	r20
     b2a:	30 95       	com	r19
     b2c:	21 95       	neg	r18
     b2e:	3f 4f       	sbci	r19, 0xFF	; 255
     b30:	4f 4f       	sbci	r20, 0xFF	; 255
     b32:	5f 4f       	sbci	r21, 0xFF	; 255
     b34:	0e c0       	rjmp	.+28     	; 0xb52 <__fixsfsi+0x9c>
     b36:	20 e0       	ldi	r18, 0x00	; 0
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	50 e0       	ldi	r21, 0x00	; 0
     b3e:	09 c0       	rjmp	.+18     	; 0xb52 <__fixsfsi+0x9c>
     b40:	2f ef       	ldi	r18, 0xFF	; 255
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	4f ef       	ldi	r20, 0xFF	; 255
     b46:	5f e7       	ldi	r21, 0x7F	; 127
     b48:	04 c0       	rjmp	.+8      	; 0xb52 <__fixsfsi+0x9c>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	40 e0       	ldi	r20, 0x00	; 0
     b50:	50 e8       	ldi	r21, 0x80	; 128
     b52:	b9 01       	movw	r22, r18
     b54:	ca 01       	movw	r24, r20
     b56:	2c 96       	adiw	r28, 0x0c	; 12
     b58:	e2 e0       	ldi	r30, 0x02	; 2
     b5a:	0c 94 70 1a 	jmp	0x34e0	; 0x34e0 <__epilogue_restores__+0x20>

00000b5e <__floatunsisf>:
     b5e:	a8 e0       	ldi	r26, 0x08	; 8
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e5 eb       	ldi	r30, 0xB5	; 181
     b64:	f5 e0       	ldi	r31, 0x05	; 5
     b66:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__prologue_saves__+0x10>
     b6a:	7b 01       	movw	r14, r22
     b6c:	8c 01       	movw	r16, r24
     b6e:	61 15       	cp	r22, r1
     b70:	71 05       	cpc	r23, r1
     b72:	81 05       	cpc	r24, r1
     b74:	91 05       	cpc	r25, r1
     b76:	19 f4       	brne	.+6      	; 0xb7e <__floatunsisf+0x20>
     b78:	82 e0       	ldi	r24, 0x02	; 2
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	60 c0       	rjmp	.+192    	; 0xc3e <__floatunsisf+0xe0>
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	89 83       	std	Y+1, r24	; 0x01
     b82:	8e e1       	ldi	r24, 0x1E	; 30
     b84:	c8 2e       	mov	r12, r24
     b86:	d1 2c       	mov	r13, r1
     b88:	dc 82       	std	Y+4, r13	; 0x04
     b8a:	cb 82       	std	Y+3, r12	; 0x03
     b8c:	ed 82       	std	Y+5, r14	; 0x05
     b8e:	fe 82       	std	Y+6, r15	; 0x06
     b90:	0f 83       	std	Y+7, r16	; 0x07
     b92:	18 87       	std	Y+8, r17	; 0x08
     b94:	c8 01       	movw	r24, r16
     b96:	b7 01       	movw	r22, r14
     b98:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__clzsi2>
     b9c:	fc 01       	movw	r30, r24
     b9e:	31 97       	sbiw	r30, 0x01	; 1
     ba0:	f7 ff       	sbrs	r31, 7
     ba2:	3b c0       	rjmp	.+118    	; 0xc1a <__floatunsisf+0xbc>
     ba4:	22 27       	eor	r18, r18
     ba6:	33 27       	eor	r19, r19
     ba8:	2e 1b       	sub	r18, r30
     baa:	3f 0b       	sbc	r19, r31
     bac:	57 01       	movw	r10, r14
     bae:	68 01       	movw	r12, r16
     bb0:	02 2e       	mov	r0, r18
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__floatunsisf+0x5e>
     bb4:	d6 94       	lsr	r13
     bb6:	c7 94       	ror	r12
     bb8:	b7 94       	ror	r11
     bba:	a7 94       	ror	r10
     bbc:	0a 94       	dec	r0
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__floatunsisf+0x56>
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	50 e0       	ldi	r21, 0x00	; 0
     bc4:	60 e0       	ldi	r22, 0x00	; 0
     bc6:	70 e0       	ldi	r23, 0x00	; 0
     bc8:	81 e0       	ldi	r24, 0x01	; 1
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	04 c0       	rjmp	.+8      	; 0xbda <__floatunsisf+0x7c>
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	2a 95       	dec	r18
     bdc:	d2 f7       	brpl	.-12     	; 0xbd2 <__floatunsisf+0x74>
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	a1 09       	sbc	r26, r1
     be2:	b1 09       	sbc	r27, r1
     be4:	8e 21       	and	r24, r14
     be6:	9f 21       	and	r25, r15
     be8:	a0 23       	and	r26, r16
     bea:	b1 23       	and	r27, r17
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	a1 05       	cpc	r26, r1
     bf0:	b1 05       	cpc	r27, r1
     bf2:	21 f0       	breq	.+8      	; 0xbfc <__floatunsisf+0x9e>
     bf4:	41 e0       	ldi	r20, 0x01	; 1
     bf6:	50 e0       	ldi	r21, 0x00	; 0
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	70 e0       	ldi	r23, 0x00	; 0
     bfc:	4a 29       	or	r20, r10
     bfe:	5b 29       	or	r21, r11
     c00:	6c 29       	or	r22, r12
     c02:	7d 29       	or	r23, r13
     c04:	4d 83       	std	Y+5, r20	; 0x05
     c06:	5e 83       	std	Y+6, r21	; 0x06
     c08:	6f 83       	std	Y+7, r22	; 0x07
     c0a:	78 87       	std	Y+8, r23	; 0x08
     c0c:	8e e1       	ldi	r24, 0x1E	; 30
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	8e 1b       	sub	r24, r30
     c12:	9f 0b       	sbc	r25, r31
     c14:	9c 83       	std	Y+4, r25	; 0x04
     c16:	8b 83       	std	Y+3, r24	; 0x03
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <__floatunsisf+0xe0>
     c1a:	30 97       	sbiw	r30, 0x00	; 0
     c1c:	81 f0       	breq	.+32     	; 0xc3e <__floatunsisf+0xe0>
     c1e:	0e 2e       	mov	r0, r30
     c20:	04 c0       	rjmp	.+8      	; 0xc2a <__floatunsisf+0xcc>
     c22:	ee 0c       	add	r14, r14
     c24:	ff 1c       	adc	r15, r15
     c26:	00 1f       	adc	r16, r16
     c28:	11 1f       	adc	r17, r17
     c2a:	0a 94       	dec	r0
     c2c:	d2 f7       	brpl	.-12     	; 0xc22 <__floatunsisf+0xc4>
     c2e:	ed 82       	std	Y+5, r14	; 0x05
     c30:	fe 82       	std	Y+6, r15	; 0x06
     c32:	0f 83       	std	Y+7, r16	; 0x07
     c34:	18 87       	std	Y+8, r17	; 0x08
     c36:	ce 1a       	sub	r12, r30
     c38:	df 0a       	sbc	r13, r31
     c3a:	dc 82       	std	Y+4, r13	; 0x04
     c3c:	cb 82       	std	Y+3, r12	; 0x03
     c3e:	1a 82       	std	Y+2, r1	; 0x02
     c40:	ce 01       	movw	r24, r28
     c42:	01 96       	adiw	r24, 0x01	; 1
     c44:	0e 94 f6 06 	call	0xdec	; 0xdec <__pack_f>
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	ea e0       	ldi	r30, 0x0A	; 10
     c4c:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__epilogue_restores__+0x10>

00000c50 <__ashldi3>:
     c50:	ef 92       	push	r14
     c52:	ff 92       	push	r15
     c54:	0f 93       	push	r16
     c56:	df 93       	push	r29
     c58:	cf 93       	push	r28
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	60 97       	sbiw	r28, 0x10	; 16
     c60:	0f b6       	in	r0, 0x3f	; 63
     c62:	f8 94       	cli
     c64:	de bf       	out	0x3e, r29	; 62
     c66:	0f be       	out	0x3f, r0	; 63
     c68:	cd bf       	out	0x3d, r28	; 61
     c6a:	a8 2f       	mov	r26, r24
     c6c:	00 23       	and	r16, r16
     c6e:	09 f4       	brne	.+2      	; 0xc72 <__ashldi3+0x22>
     c70:	61 c0       	rjmp	.+194    	; 0xd34 <__ashldi3+0xe4>
     c72:	7e 01       	movw	r14, r28
     c74:	08 94       	sec
     c76:	e1 1c       	adc	r14, r1
     c78:	f1 1c       	adc	r15, r1
     c7a:	88 e0       	ldi	r24, 0x08	; 8
     c7c:	f7 01       	movw	r30, r14
     c7e:	11 92       	st	Z+, r1
     c80:	8a 95       	dec	r24
     c82:	e9 f7       	brne	.-6      	; 0xc7e <__ashldi3+0x2e>
     c84:	29 83       	std	Y+1, r18	; 0x01
     c86:	3a 83       	std	Y+2, r19	; 0x02
     c88:	4b 83       	std	Y+3, r20	; 0x03
     c8a:	5c 83       	std	Y+4, r21	; 0x04
     c8c:	6d 83       	std	Y+5, r22	; 0x05
     c8e:	7e 83       	std	Y+6, r23	; 0x06
     c90:	af 83       	std	Y+7, r26	; 0x07
     c92:	98 87       	std	Y+8, r25	; 0x08
     c94:	80 e2       	ldi	r24, 0x20	; 32
     c96:	80 1b       	sub	r24, r16
     c98:	e8 2f       	mov	r30, r24
     c9a:	ff 27       	eor	r31, r31
     c9c:	e7 fd       	sbrc	r30, 7
     c9e:	f0 95       	com	r31
     ca0:	49 81       	ldd	r20, Y+1	; 0x01
     ca2:	5a 81       	ldd	r21, Y+2	; 0x02
     ca4:	6b 81       	ldd	r22, Y+3	; 0x03
     ca6:	7c 81       	ldd	r23, Y+4	; 0x04
     ca8:	18 16       	cp	r1, r24
     caa:	84 f0       	brlt	.+32     	; 0xccc <__ashldi3+0x7c>
     cac:	19 86       	std	Y+9, r1	; 0x09
     cae:	1a 86       	std	Y+10, r1	; 0x0a
     cb0:	1b 86       	std	Y+11, r1	; 0x0b
     cb2:	1c 86       	std	Y+12, r1	; 0x0c
     cb4:	88 27       	eor	r24, r24
     cb6:	99 27       	eor	r25, r25
     cb8:	8e 1b       	sub	r24, r30
     cba:	9f 0b       	sbc	r25, r31
     cbc:	04 c0       	rjmp	.+8      	; 0xcc6 <__ashldi3+0x76>
     cbe:	44 0f       	add	r20, r20
     cc0:	55 1f       	adc	r21, r21
     cc2:	66 1f       	adc	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	8a 95       	dec	r24
     cc8:	d2 f7       	brpl	.-12     	; 0xcbe <__ashldi3+0x6e>
     cca:	28 c0       	rjmp	.+80     	; 0xd1c <__ashldi3+0xcc>
     ccc:	20 2f       	mov	r18, r16
     cce:	33 27       	eor	r19, r19
     cd0:	27 fd       	sbrc	r18, 7
     cd2:	30 95       	com	r19
     cd4:	db 01       	movw	r26, r22
     cd6:	ca 01       	movw	r24, r20
     cd8:	02 2e       	mov	r0, r18
     cda:	04 c0       	rjmp	.+8      	; 0xce4 <__ashldi3+0x94>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	aa 1f       	adc	r26, r26
     ce2:	bb 1f       	adc	r27, r27
     ce4:	0a 94       	dec	r0
     ce6:	d2 f7       	brpl	.-12     	; 0xcdc <__ashldi3+0x8c>
     ce8:	89 87       	std	Y+9, r24	; 0x09
     cea:	9a 87       	std	Y+10, r25	; 0x0a
     cec:	ab 87       	std	Y+11, r26	; 0x0b
     cee:	bc 87       	std	Y+12, r27	; 0x0c
     cf0:	04 c0       	rjmp	.+8      	; 0xcfa <__ashldi3+0xaa>
     cf2:	76 95       	lsr	r23
     cf4:	67 95       	ror	r22
     cf6:	57 95       	ror	r21
     cf8:	47 95       	ror	r20
     cfa:	ea 95       	dec	r30
     cfc:	d2 f7       	brpl	.-12     	; 0xcf2 <__ashldi3+0xa2>
     cfe:	8d 81       	ldd	r24, Y+5	; 0x05
     d00:	9e 81       	ldd	r25, Y+6	; 0x06
     d02:	af 81       	ldd	r26, Y+7	; 0x07
     d04:	b8 85       	ldd	r27, Y+8	; 0x08
     d06:	04 c0       	rjmp	.+8      	; 0xd10 <__ashldi3+0xc0>
     d08:	88 0f       	add	r24, r24
     d0a:	99 1f       	adc	r25, r25
     d0c:	aa 1f       	adc	r26, r26
     d0e:	bb 1f       	adc	r27, r27
     d10:	2a 95       	dec	r18
     d12:	d2 f7       	brpl	.-12     	; 0xd08 <__ashldi3+0xb8>
     d14:	48 2b       	or	r20, r24
     d16:	59 2b       	or	r21, r25
     d18:	6a 2b       	or	r22, r26
     d1a:	7b 2b       	or	r23, r27
     d1c:	4d 87       	std	Y+13, r20	; 0x0d
     d1e:	5e 87       	std	Y+14, r21	; 0x0e
     d20:	6f 87       	std	Y+15, r22	; 0x0f
     d22:	78 8b       	std	Y+16, r23	; 0x10
     d24:	29 85       	ldd	r18, Y+9	; 0x09
     d26:	3a 85       	ldd	r19, Y+10	; 0x0a
     d28:	4b 85       	ldd	r20, Y+11	; 0x0b
     d2a:	5c 85       	ldd	r21, Y+12	; 0x0c
     d2c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d2e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d30:	af 85       	ldd	r26, Y+15	; 0x0f
     d32:	98 89       	ldd	r25, Y+16	; 0x10
     d34:	8a 2f       	mov	r24, r26
     d36:	60 96       	adiw	r28, 0x10	; 16
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	08 95       	ret

00000d4e <__clzsi2>:
     d4e:	ef 92       	push	r14
     d50:	ff 92       	push	r15
     d52:	0f 93       	push	r16
     d54:	1f 93       	push	r17
     d56:	7b 01       	movw	r14, r22
     d58:	8c 01       	movw	r16, r24
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	e8 16       	cp	r14, r24
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	f8 06       	cpc	r15, r24
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	08 07       	cpc	r16, r24
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	18 07       	cpc	r17, r24
     d6a:	88 f4       	brcc	.+34     	; 0xd8e <__clzsi2+0x40>
     d6c:	8f ef       	ldi	r24, 0xFF	; 255
     d6e:	e8 16       	cp	r14, r24
     d70:	f1 04       	cpc	r15, r1
     d72:	01 05       	cpc	r16, r1
     d74:	11 05       	cpc	r17, r1
     d76:	31 f0       	breq	.+12     	; 0xd84 <__clzsi2+0x36>
     d78:	28 f0       	brcs	.+10     	; 0xd84 <__clzsi2+0x36>
     d7a:	88 e0       	ldi	r24, 0x08	; 8
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	a0 e0       	ldi	r26, 0x00	; 0
     d80:	b0 e0       	ldi	r27, 0x00	; 0
     d82:	17 c0       	rjmp	.+46     	; 0xdb2 <__clzsi2+0x64>
     d84:	80 e0       	ldi	r24, 0x00	; 0
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	a0 e0       	ldi	r26, 0x00	; 0
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	12 c0       	rjmp	.+36     	; 0xdb2 <__clzsi2+0x64>
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	e8 16       	cp	r14, r24
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	f8 06       	cpc	r15, r24
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	08 07       	cpc	r16, r24
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	18 07       	cpc	r17, r24
     d9e:	28 f0       	brcs	.+10     	; 0xdaa <__clzsi2+0x5c>
     da0:	88 e1       	ldi	r24, 0x18	; 24
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	a0 e0       	ldi	r26, 0x00	; 0
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	04 c0       	rjmp	.+8      	; 0xdb2 <__clzsi2+0x64>
     daa:	80 e1       	ldi	r24, 0x10	; 16
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	a0 e0       	ldi	r26, 0x00	; 0
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	20 e2       	ldi	r18, 0x20	; 32
     db4:	30 e0       	ldi	r19, 0x00	; 0
     db6:	40 e0       	ldi	r20, 0x00	; 0
     db8:	50 e0       	ldi	r21, 0x00	; 0
     dba:	28 1b       	sub	r18, r24
     dbc:	39 0b       	sbc	r19, r25
     dbe:	4a 0b       	sbc	r20, r26
     dc0:	5b 0b       	sbc	r21, r27
     dc2:	04 c0       	rjmp	.+8      	; 0xdcc <__clzsi2+0x7e>
     dc4:	16 95       	lsr	r17
     dc6:	07 95       	ror	r16
     dc8:	f7 94       	ror	r15
     dca:	e7 94       	ror	r14
     dcc:	8a 95       	dec	r24
     dce:	d2 f7       	brpl	.-12     	; 0xdc4 <__clzsi2+0x76>
     dd0:	f7 01       	movw	r30, r14
     dd2:	ea 58       	subi	r30, 0x8A	; 138
     dd4:	ff 4f       	sbci	r31, 0xFF	; 255
     dd6:	80 81       	ld	r24, Z
     dd8:	28 1b       	sub	r18, r24
     dda:	31 09       	sbc	r19, r1
     ddc:	41 09       	sbc	r20, r1
     dde:	51 09       	sbc	r21, r1
     de0:	c9 01       	movw	r24, r18
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	08 95       	ret

00000dec <__pack_f>:
     dec:	df 92       	push	r13
     dee:	ef 92       	push	r14
     df0:	ff 92       	push	r15
     df2:	0f 93       	push	r16
     df4:	1f 93       	push	r17
     df6:	fc 01       	movw	r30, r24
     df8:	e4 80       	ldd	r14, Z+4	; 0x04
     dfa:	f5 80       	ldd	r15, Z+5	; 0x05
     dfc:	06 81       	ldd	r16, Z+6	; 0x06
     dfe:	17 81       	ldd	r17, Z+7	; 0x07
     e00:	d1 80       	ldd	r13, Z+1	; 0x01
     e02:	80 81       	ld	r24, Z
     e04:	82 30       	cpi	r24, 0x02	; 2
     e06:	48 f4       	brcc	.+18     	; 0xe1a <__pack_f+0x2e>
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a0 e1       	ldi	r26, 0x10	; 16
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 2a       	or	r14, r24
     e12:	f9 2a       	or	r15, r25
     e14:	0a 2b       	or	r16, r26
     e16:	1b 2b       	or	r17, r27
     e18:	a5 c0       	rjmp	.+330    	; 0xf64 <__pack_f+0x178>
     e1a:	84 30       	cpi	r24, 0x04	; 4
     e1c:	09 f4       	brne	.+2      	; 0xe20 <__pack_f+0x34>
     e1e:	9f c0       	rjmp	.+318    	; 0xf5e <__pack_f+0x172>
     e20:	82 30       	cpi	r24, 0x02	; 2
     e22:	21 f4       	brne	.+8      	; 0xe2c <__pack_f+0x40>
     e24:	ee 24       	eor	r14, r14
     e26:	ff 24       	eor	r15, r15
     e28:	87 01       	movw	r16, r14
     e2a:	05 c0       	rjmp	.+10     	; 0xe36 <__pack_f+0x4a>
     e2c:	e1 14       	cp	r14, r1
     e2e:	f1 04       	cpc	r15, r1
     e30:	01 05       	cpc	r16, r1
     e32:	11 05       	cpc	r17, r1
     e34:	19 f4       	brne	.+6      	; 0xe3c <__pack_f+0x50>
     e36:	e0 e0       	ldi	r30, 0x00	; 0
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	96 c0       	rjmp	.+300    	; 0xf68 <__pack_f+0x17c>
     e3c:	62 81       	ldd	r22, Z+2	; 0x02
     e3e:	73 81       	ldd	r23, Z+3	; 0x03
     e40:	9f ef       	ldi	r25, 0xFF	; 255
     e42:	62 38       	cpi	r22, 0x82	; 130
     e44:	79 07       	cpc	r23, r25
     e46:	0c f0       	brlt	.+2      	; 0xe4a <__pack_f+0x5e>
     e48:	5b c0       	rjmp	.+182    	; 0xf00 <__pack_f+0x114>
     e4a:	22 e8       	ldi	r18, 0x82	; 130
     e4c:	3f ef       	ldi	r19, 0xFF	; 255
     e4e:	26 1b       	sub	r18, r22
     e50:	37 0b       	sbc	r19, r23
     e52:	2a 31       	cpi	r18, 0x1A	; 26
     e54:	31 05       	cpc	r19, r1
     e56:	2c f0       	brlt	.+10     	; 0xe62 <__pack_f+0x76>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	2a c0       	rjmp	.+84     	; 0xeb6 <__pack_f+0xca>
     e62:	b8 01       	movw	r22, r16
     e64:	a7 01       	movw	r20, r14
     e66:	02 2e       	mov	r0, r18
     e68:	04 c0       	rjmp	.+8      	; 0xe72 <__pack_f+0x86>
     e6a:	76 95       	lsr	r23
     e6c:	67 95       	ror	r22
     e6e:	57 95       	ror	r21
     e70:	47 95       	ror	r20
     e72:	0a 94       	dec	r0
     e74:	d2 f7       	brpl	.-12     	; 0xe6a <__pack_f+0x7e>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	a0 e0       	ldi	r26, 0x00	; 0
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <__pack_f+0x9c>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	aa 1f       	adc	r26, r26
     e86:	bb 1f       	adc	r27, r27
     e88:	2a 95       	dec	r18
     e8a:	d2 f7       	brpl	.-12     	; 0xe80 <__pack_f+0x94>
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	a1 09       	sbc	r26, r1
     e90:	b1 09       	sbc	r27, r1
     e92:	8e 21       	and	r24, r14
     e94:	9f 21       	and	r25, r15
     e96:	a0 23       	and	r26, r16
     e98:	b1 23       	and	r27, r17
     e9a:	00 97       	sbiw	r24, 0x00	; 0
     e9c:	a1 05       	cpc	r26, r1
     e9e:	b1 05       	cpc	r27, r1
     ea0:	21 f0       	breq	.+8      	; 0xeaa <__pack_f+0xbe>
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	a0 e0       	ldi	r26, 0x00	; 0
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	9a 01       	movw	r18, r20
     eac:	ab 01       	movw	r20, r22
     eae:	28 2b       	or	r18, r24
     eb0:	39 2b       	or	r19, r25
     eb2:	4a 2b       	or	r20, r26
     eb4:	5b 2b       	or	r21, r27
     eb6:	da 01       	movw	r26, r20
     eb8:	c9 01       	movw	r24, r18
     eba:	8f 77       	andi	r24, 0x7F	; 127
     ebc:	90 70       	andi	r25, 0x00	; 0
     ebe:	a0 70       	andi	r26, 0x00	; 0
     ec0:	b0 70       	andi	r27, 0x00	; 0
     ec2:	80 34       	cpi	r24, 0x40	; 64
     ec4:	91 05       	cpc	r25, r1
     ec6:	a1 05       	cpc	r26, r1
     ec8:	b1 05       	cpc	r27, r1
     eca:	39 f4       	brne	.+14     	; 0xeda <__pack_f+0xee>
     ecc:	27 ff       	sbrs	r18, 7
     ece:	09 c0       	rjmp	.+18     	; 0xee2 <__pack_f+0xf6>
     ed0:	20 5c       	subi	r18, 0xC0	; 192
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	4f 4f       	sbci	r20, 0xFF	; 255
     ed6:	5f 4f       	sbci	r21, 0xFF	; 255
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <__pack_f+0xf6>
     eda:	21 5c       	subi	r18, 0xC1	; 193
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	4f 4f       	sbci	r20, 0xFF	; 255
     ee0:	5f 4f       	sbci	r21, 0xFF	; 255
     ee2:	e0 e0       	ldi	r30, 0x00	; 0
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	20 30       	cpi	r18, 0x00	; 0
     ee8:	a0 e0       	ldi	r26, 0x00	; 0
     eea:	3a 07       	cpc	r19, r26
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	4a 07       	cpc	r20, r26
     ef0:	a0 e4       	ldi	r26, 0x40	; 64
     ef2:	5a 07       	cpc	r21, r26
     ef4:	10 f0       	brcs	.+4      	; 0xefa <__pack_f+0x10e>
     ef6:	e1 e0       	ldi	r30, 0x01	; 1
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	79 01       	movw	r14, r18
     efc:	8a 01       	movw	r16, r20
     efe:	27 c0       	rjmp	.+78     	; 0xf4e <__pack_f+0x162>
     f00:	60 38       	cpi	r22, 0x80	; 128
     f02:	71 05       	cpc	r23, r1
     f04:	64 f5       	brge	.+88     	; 0xf5e <__pack_f+0x172>
     f06:	fb 01       	movw	r30, r22
     f08:	e1 58       	subi	r30, 0x81	; 129
     f0a:	ff 4f       	sbci	r31, 0xFF	; 255
     f0c:	d8 01       	movw	r26, r16
     f0e:	c7 01       	movw	r24, r14
     f10:	8f 77       	andi	r24, 0x7F	; 127
     f12:	90 70       	andi	r25, 0x00	; 0
     f14:	a0 70       	andi	r26, 0x00	; 0
     f16:	b0 70       	andi	r27, 0x00	; 0
     f18:	80 34       	cpi	r24, 0x40	; 64
     f1a:	91 05       	cpc	r25, r1
     f1c:	a1 05       	cpc	r26, r1
     f1e:	b1 05       	cpc	r27, r1
     f20:	39 f4       	brne	.+14     	; 0xf30 <__pack_f+0x144>
     f22:	e7 fe       	sbrs	r14, 7
     f24:	0d c0       	rjmp	.+26     	; 0xf40 <__pack_f+0x154>
     f26:	80 e4       	ldi	r24, 0x40	; 64
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	a0 e0       	ldi	r26, 0x00	; 0
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	04 c0       	rjmp	.+8      	; 0xf38 <__pack_f+0x14c>
     f30:	8f e3       	ldi	r24, 0x3F	; 63
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	a0 e0       	ldi	r26, 0x00	; 0
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	e8 0e       	add	r14, r24
     f3a:	f9 1e       	adc	r15, r25
     f3c:	0a 1f       	adc	r16, r26
     f3e:	1b 1f       	adc	r17, r27
     f40:	17 ff       	sbrs	r17, 7
     f42:	05 c0       	rjmp	.+10     	; 0xf4e <__pack_f+0x162>
     f44:	16 95       	lsr	r17
     f46:	07 95       	ror	r16
     f48:	f7 94       	ror	r15
     f4a:	e7 94       	ror	r14
     f4c:	31 96       	adiw	r30, 0x01	; 1
     f4e:	87 e0       	ldi	r24, 0x07	; 7
     f50:	16 95       	lsr	r17
     f52:	07 95       	ror	r16
     f54:	f7 94       	ror	r15
     f56:	e7 94       	ror	r14
     f58:	8a 95       	dec	r24
     f5a:	d1 f7       	brne	.-12     	; 0xf50 <__pack_f+0x164>
     f5c:	05 c0       	rjmp	.+10     	; 0xf68 <__pack_f+0x17c>
     f5e:	ee 24       	eor	r14, r14
     f60:	ff 24       	eor	r15, r15
     f62:	87 01       	movw	r16, r14
     f64:	ef ef       	ldi	r30, 0xFF	; 255
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	6e 2f       	mov	r22, r30
     f6a:	67 95       	ror	r22
     f6c:	66 27       	eor	r22, r22
     f6e:	67 95       	ror	r22
     f70:	90 2f       	mov	r25, r16
     f72:	9f 77       	andi	r25, 0x7F	; 127
     f74:	d7 94       	ror	r13
     f76:	dd 24       	eor	r13, r13
     f78:	d7 94       	ror	r13
     f7a:	8e 2f       	mov	r24, r30
     f7c:	86 95       	lsr	r24
     f7e:	49 2f       	mov	r20, r25
     f80:	46 2b       	or	r20, r22
     f82:	58 2f       	mov	r21, r24
     f84:	5d 29       	or	r21, r13
     f86:	b7 01       	movw	r22, r14
     f88:	ca 01       	movw	r24, r20
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	df 90       	pop	r13
     f94:	08 95       	ret

00000f96 <__unpack_f>:
     f96:	fc 01       	movw	r30, r24
     f98:	db 01       	movw	r26, r22
     f9a:	40 81       	ld	r20, Z
     f9c:	51 81       	ldd	r21, Z+1	; 0x01
     f9e:	22 81       	ldd	r18, Z+2	; 0x02
     fa0:	62 2f       	mov	r22, r18
     fa2:	6f 77       	andi	r22, 0x7F	; 127
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	22 1f       	adc	r18, r18
     fa8:	22 27       	eor	r18, r18
     faa:	22 1f       	adc	r18, r18
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	89 2f       	mov	r24, r25
     fb0:	88 0f       	add	r24, r24
     fb2:	82 2b       	or	r24, r18
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	99 1f       	adc	r25, r25
     fba:	99 27       	eor	r25, r25
     fbc:	99 1f       	adc	r25, r25
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	9c 93       	st	X, r25
     fc2:	11 97       	sbiw	r26, 0x01	; 1
     fc4:	21 15       	cp	r18, r1
     fc6:	31 05       	cpc	r19, r1
     fc8:	a9 f5       	brne	.+106    	; 0x1034 <__unpack_f+0x9e>
     fca:	41 15       	cp	r20, r1
     fcc:	51 05       	cpc	r21, r1
     fce:	61 05       	cpc	r22, r1
     fd0:	71 05       	cpc	r23, r1
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <__unpack_f+0x42>
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	37 c0       	rjmp	.+110    	; 0x1046 <__unpack_f+0xb0>
     fd8:	82 e8       	ldi	r24, 0x82	; 130
     fda:	9f ef       	ldi	r25, 0xFF	; 255
     fdc:	13 96       	adiw	r26, 0x03	; 3
     fde:	9c 93       	st	X, r25
     fe0:	8e 93       	st	-X, r24
     fe2:	12 97       	sbiw	r26, 0x02	; 2
     fe4:	9a 01       	movw	r18, r20
     fe6:	ab 01       	movw	r20, r22
     fe8:	67 e0       	ldi	r22, 0x07	; 7
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	44 1f       	adc	r20, r20
     ff0:	55 1f       	adc	r21, r21
     ff2:	6a 95       	dec	r22
     ff4:	d1 f7       	brne	.-12     	; 0xfea <__unpack_f+0x54>
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	8c 93       	st	X, r24
     ffa:	0d c0       	rjmp	.+26     	; 0x1016 <__unpack_f+0x80>
     ffc:	22 0f       	add	r18, r18
     ffe:	33 1f       	adc	r19, r19
    1000:	44 1f       	adc	r20, r20
    1002:	55 1f       	adc	r21, r21
    1004:	12 96       	adiw	r26, 0x02	; 2
    1006:	8d 91       	ld	r24, X+
    1008:	9c 91       	ld	r25, X
    100a:	13 97       	sbiw	r26, 0x03	; 3
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	13 96       	adiw	r26, 0x03	; 3
    1010:	9c 93       	st	X, r25
    1012:	8e 93       	st	-X, r24
    1014:	12 97       	sbiw	r26, 0x02	; 2
    1016:	20 30       	cpi	r18, 0x00	; 0
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	38 07       	cpc	r19, r24
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	48 07       	cpc	r20, r24
    1020:	80 e4       	ldi	r24, 0x40	; 64
    1022:	58 07       	cpc	r21, r24
    1024:	58 f3       	brcs	.-42     	; 0xffc <__unpack_f+0x66>
    1026:	14 96       	adiw	r26, 0x04	; 4
    1028:	2d 93       	st	X+, r18
    102a:	3d 93       	st	X+, r19
    102c:	4d 93       	st	X+, r20
    102e:	5c 93       	st	X, r21
    1030:	17 97       	sbiw	r26, 0x07	; 7
    1032:	08 95       	ret
    1034:	2f 3f       	cpi	r18, 0xFF	; 255
    1036:	31 05       	cpc	r19, r1
    1038:	79 f4       	brne	.+30     	; 0x1058 <__unpack_f+0xc2>
    103a:	41 15       	cp	r20, r1
    103c:	51 05       	cpc	r21, r1
    103e:	61 05       	cpc	r22, r1
    1040:	71 05       	cpc	r23, r1
    1042:	19 f4       	brne	.+6      	; 0x104a <__unpack_f+0xb4>
    1044:	84 e0       	ldi	r24, 0x04	; 4
    1046:	8c 93       	st	X, r24
    1048:	08 95       	ret
    104a:	64 ff       	sbrs	r22, 4
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <__unpack_f+0xbe>
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	8c 93       	st	X, r24
    1052:	12 c0       	rjmp	.+36     	; 0x1078 <__unpack_f+0xe2>
    1054:	1c 92       	st	X, r1
    1056:	10 c0       	rjmp	.+32     	; 0x1078 <__unpack_f+0xe2>
    1058:	2f 57       	subi	r18, 0x7F	; 127
    105a:	30 40       	sbci	r19, 0x00	; 0
    105c:	13 96       	adiw	r26, 0x03	; 3
    105e:	3c 93       	st	X, r19
    1060:	2e 93       	st	-X, r18
    1062:	12 97       	sbiw	r26, 0x02	; 2
    1064:	83 e0       	ldi	r24, 0x03	; 3
    1066:	8c 93       	st	X, r24
    1068:	87 e0       	ldi	r24, 0x07	; 7
    106a:	44 0f       	add	r20, r20
    106c:	55 1f       	adc	r21, r21
    106e:	66 1f       	adc	r22, r22
    1070:	77 1f       	adc	r23, r23
    1072:	8a 95       	dec	r24
    1074:	d1 f7       	brne	.-12     	; 0x106a <__unpack_f+0xd4>
    1076:	70 64       	ori	r23, 0x40	; 64
    1078:	14 96       	adiw	r26, 0x04	; 4
    107a:	4d 93       	st	X+, r20
    107c:	5d 93       	st	X+, r21
    107e:	6d 93       	st	X+, r22
    1080:	7c 93       	st	X, r23
    1082:	17 97       	sbiw	r26, 0x07	; 7
    1084:	08 95       	ret

00001086 <__fpcmp_parts_f>:
    1086:	1f 93       	push	r17
    1088:	dc 01       	movw	r26, r24
    108a:	fb 01       	movw	r30, r22
    108c:	9c 91       	ld	r25, X
    108e:	92 30       	cpi	r25, 0x02	; 2
    1090:	08 f4       	brcc	.+2      	; 0x1094 <__fpcmp_parts_f+0xe>
    1092:	47 c0       	rjmp	.+142    	; 0x1122 <__fpcmp_parts_f+0x9c>
    1094:	80 81       	ld	r24, Z
    1096:	82 30       	cpi	r24, 0x02	; 2
    1098:	08 f4       	brcc	.+2      	; 0x109c <__fpcmp_parts_f+0x16>
    109a:	43 c0       	rjmp	.+134    	; 0x1122 <__fpcmp_parts_f+0x9c>
    109c:	94 30       	cpi	r25, 0x04	; 4
    109e:	51 f4       	brne	.+20     	; 0x10b4 <__fpcmp_parts_f+0x2e>
    10a0:	11 96       	adiw	r26, 0x01	; 1
    10a2:	1c 91       	ld	r17, X
    10a4:	84 30       	cpi	r24, 0x04	; 4
    10a6:	99 f5       	brne	.+102    	; 0x110e <__fpcmp_parts_f+0x88>
    10a8:	81 81       	ldd	r24, Z+1	; 0x01
    10aa:	68 2f       	mov	r22, r24
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	61 1b       	sub	r22, r17
    10b0:	71 09       	sbc	r23, r1
    10b2:	3f c0       	rjmp	.+126    	; 0x1132 <__fpcmp_parts_f+0xac>
    10b4:	84 30       	cpi	r24, 0x04	; 4
    10b6:	21 f0       	breq	.+8      	; 0x10c0 <__fpcmp_parts_f+0x3a>
    10b8:	92 30       	cpi	r25, 0x02	; 2
    10ba:	31 f4       	brne	.+12     	; 0x10c8 <__fpcmp_parts_f+0x42>
    10bc:	82 30       	cpi	r24, 0x02	; 2
    10be:	b9 f1       	breq	.+110    	; 0x112e <__fpcmp_parts_f+0xa8>
    10c0:	81 81       	ldd	r24, Z+1	; 0x01
    10c2:	88 23       	and	r24, r24
    10c4:	89 f1       	breq	.+98     	; 0x1128 <__fpcmp_parts_f+0xa2>
    10c6:	2d c0       	rjmp	.+90     	; 0x1122 <__fpcmp_parts_f+0x9c>
    10c8:	11 96       	adiw	r26, 0x01	; 1
    10ca:	1c 91       	ld	r17, X
    10cc:	11 97       	sbiw	r26, 0x01	; 1
    10ce:	82 30       	cpi	r24, 0x02	; 2
    10d0:	f1 f0       	breq	.+60     	; 0x110e <__fpcmp_parts_f+0x88>
    10d2:	81 81       	ldd	r24, Z+1	; 0x01
    10d4:	18 17       	cp	r17, r24
    10d6:	d9 f4       	brne	.+54     	; 0x110e <__fpcmp_parts_f+0x88>
    10d8:	12 96       	adiw	r26, 0x02	; 2
    10da:	2d 91       	ld	r18, X+
    10dc:	3c 91       	ld	r19, X
    10de:	13 97       	sbiw	r26, 0x03	; 3
    10e0:	82 81       	ldd	r24, Z+2	; 0x02
    10e2:	93 81       	ldd	r25, Z+3	; 0x03
    10e4:	82 17       	cp	r24, r18
    10e6:	93 07       	cpc	r25, r19
    10e8:	94 f0       	brlt	.+36     	; 0x110e <__fpcmp_parts_f+0x88>
    10ea:	28 17       	cp	r18, r24
    10ec:	39 07       	cpc	r19, r25
    10ee:	bc f0       	brlt	.+46     	; 0x111e <__fpcmp_parts_f+0x98>
    10f0:	14 96       	adiw	r26, 0x04	; 4
    10f2:	8d 91       	ld	r24, X+
    10f4:	9d 91       	ld	r25, X+
    10f6:	0d 90       	ld	r0, X+
    10f8:	bc 91       	ld	r27, X
    10fa:	a0 2d       	mov	r26, r0
    10fc:	24 81       	ldd	r18, Z+4	; 0x04
    10fe:	35 81       	ldd	r19, Z+5	; 0x05
    1100:	46 81       	ldd	r20, Z+6	; 0x06
    1102:	57 81       	ldd	r21, Z+7	; 0x07
    1104:	28 17       	cp	r18, r24
    1106:	39 07       	cpc	r19, r25
    1108:	4a 07       	cpc	r20, r26
    110a:	5b 07       	cpc	r21, r27
    110c:	18 f4       	brcc	.+6      	; 0x1114 <__fpcmp_parts_f+0x8e>
    110e:	11 23       	and	r17, r17
    1110:	41 f0       	breq	.+16     	; 0x1122 <__fpcmp_parts_f+0x9c>
    1112:	0a c0       	rjmp	.+20     	; 0x1128 <__fpcmp_parts_f+0xa2>
    1114:	82 17       	cp	r24, r18
    1116:	93 07       	cpc	r25, r19
    1118:	a4 07       	cpc	r26, r20
    111a:	b5 07       	cpc	r27, r21
    111c:	40 f4       	brcc	.+16     	; 0x112e <__fpcmp_parts_f+0xa8>
    111e:	11 23       	and	r17, r17
    1120:	19 f0       	breq	.+6      	; 0x1128 <__fpcmp_parts_f+0xa2>
    1122:	61 e0       	ldi	r22, 0x01	; 1
    1124:	70 e0       	ldi	r23, 0x00	; 0
    1126:	05 c0       	rjmp	.+10     	; 0x1132 <__fpcmp_parts_f+0xac>
    1128:	6f ef       	ldi	r22, 0xFF	; 255
    112a:	7f ef       	ldi	r23, 0xFF	; 255
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <__fpcmp_parts_f+0xac>
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	cb 01       	movw	r24, r22
    1134:	1f 91       	pop	r17
    1136:	08 95       	ret

00001138 <GPIO_setupPinDirection>:
/*
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_setupPinDirection+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_setupPinDirection+0x8>
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
    1148:	6a 83       	std	Y+2, r22	; 0x02
    114a:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    114c:	8a 81       	ldd	r24, Y+2	; 0x02
    114e:	88 30       	cpi	r24, 0x08	; 8
    1150:	08 f0       	brcs	.+2      	; 0x1154 <GPIO_setupPinDirection+0x1c>
    1152:	d5 c0       	rjmp	.+426    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	84 30       	cpi	r24, 0x04	; 4
    1158:	08 f0       	brcs	.+2      	; 0x115c <GPIO_setupPinDirection+0x24>
    115a:	d1 c0       	rjmp	.+418    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
	{
		/* Setup the pin direction as required */
		switch(port_num)
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	3d 83       	std	Y+5, r19	; 0x05
    1164:	2c 83       	std	Y+4, r18	; 0x04
    1166:	8c 81       	ldd	r24, Y+4	; 0x04
    1168:	9d 81       	ldd	r25, Y+5	; 0x05
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	91 05       	cpc	r25, r1
    116e:	09 f4       	brne	.+2      	; 0x1172 <GPIO_setupPinDirection+0x3a>
    1170:	43 c0       	rjmp	.+134    	; 0x11f8 <GPIO_setupPinDirection+0xc0>
    1172:	2c 81       	ldd	r18, Y+4	; 0x04
    1174:	3d 81       	ldd	r19, Y+5	; 0x05
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <GPIO_setupPinDirection+0x4e>
    117c:	8c 81       	ldd	r24, Y+4	; 0x04
    117e:	9d 81       	ldd	r25, Y+5	; 0x05
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	71 f0       	breq	.+28     	; 0x11a0 <GPIO_setupPinDirection+0x68>
    1184:	bc c0       	rjmp	.+376    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
    1186:	2c 81       	ldd	r18, Y+4	; 0x04
    1188:	3d 81       	ldd	r19, Y+5	; 0x05
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	09 f4       	brne	.+2      	; 0x1192 <GPIO_setupPinDirection+0x5a>
    1190:	5f c0       	rjmp	.+190    	; 0x1250 <GPIO_setupPinDirection+0x118>
    1192:	8c 81       	ldd	r24, Y+4	; 0x04
    1194:	9d 81       	ldd	r25, Y+5	; 0x05
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	09 f4       	brne	.+2      	; 0x119e <GPIO_setupPinDirection+0x66>
    119c:	85 c0       	rjmp	.+266    	; 0x12a8 <GPIO_setupPinDirection+0x170>
    119e:	af c0       	rjmp	.+350    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRA,pin_num);
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	a1 f4       	brne	.+40     	; 0x11ce <GPIO_setupPinDirection+0x96>
    11a6:	aa e3       	ldi	r26, 0x3A	; 58
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ea e3       	ldi	r30, 0x3A	; 58
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	48 2f       	mov	r20, r24
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	02 2e       	mov	r0, r18
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <GPIO_setupPinDirection+0x8c>
    11c0:	88 0f       	add	r24, r24
    11c2:	99 1f       	adc	r25, r25
    11c4:	0a 94       	dec	r0
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <GPIO_setupPinDirection+0x88>
    11c8:	84 2b       	or	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	98 c0       	rjmp	.+304    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRA,pin_num);
    11ce:	aa e3       	ldi	r26, 0x3A	; 58
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	ea e3       	ldi	r30, 0x3A	; 58
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <GPIO_setupPinDirection+0xb4>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <GPIO_setupPinDirection+0xb0>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	83 c0       	rjmp	.+262    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRB,pin_num);
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	81 30       	cpi	r24, 0x01	; 1
    11fc:	a1 f4       	brne	.+40     	; 0x1226 <GPIO_setupPinDirection+0xee>
    11fe:	a7 e3       	ldi	r26, 0x37	; 55
    1200:	b0 e0       	ldi	r27, 0x00	; 0
    1202:	e7 e3       	ldi	r30, 0x37	; 55
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	48 2f       	mov	r20, r24
    120a:	8a 81       	ldd	r24, Y+2	; 0x02
    120c:	28 2f       	mov	r18, r24
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	02 2e       	mov	r0, r18
    1216:	02 c0       	rjmp	.+4      	; 0x121c <GPIO_setupPinDirection+0xe4>
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	0a 94       	dec	r0
    121e:	e2 f7       	brpl	.-8      	; 0x1218 <GPIO_setupPinDirection+0xe0>
    1220:	84 2b       	or	r24, r20
    1222:	8c 93       	st	X, r24
    1224:	6c c0       	rjmp	.+216    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRB,pin_num);
    1226:	a7 e3       	ldi	r26, 0x37	; 55
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e7 e3       	ldi	r30, 0x37	; 55
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	48 2f       	mov	r20, r24
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	02 2e       	mov	r0, r18
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <GPIO_setupPinDirection+0x10c>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	0a 94       	dec	r0
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <GPIO_setupPinDirection+0x108>
    1248:	80 95       	com	r24
    124a:	84 23       	and	r24, r20
    124c:	8c 93       	st	X, r24
    124e:	57 c0       	rjmp	.+174    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRC,pin_num);
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	81 30       	cpi	r24, 0x01	; 1
    1254:	a1 f4       	brne	.+40     	; 0x127e <GPIO_setupPinDirection+0x146>
    1256:	a4 e3       	ldi	r26, 0x34	; 52
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e4 e3       	ldi	r30, 0x34	; 52
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	48 2f       	mov	r20, r24
    1262:	8a 81       	ldd	r24, Y+2	; 0x02
    1264:	28 2f       	mov	r18, r24
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	02 2e       	mov	r0, r18
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <GPIO_setupPinDirection+0x13c>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <GPIO_setupPinDirection+0x138>
    1278:	84 2b       	or	r24, r20
    127a:	8c 93       	st	X, r24
    127c:	40 c0       	rjmp	.+128    	; 0x12fe <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRC,pin_num);
    127e:	a4 e3       	ldi	r26, 0x34	; 52
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e4 e3       	ldi	r30, 0x34	; 52
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	48 2f       	mov	r20, r24
    128a:	8a 81       	ldd	r24, Y+2	; 0x02
    128c:	28 2f       	mov	r18, r24
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	02 2e       	mov	r0, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <GPIO_setupPinDirection+0x164>
    1298:	88 0f       	add	r24, r24
    129a:	99 1f       	adc	r25, r25
    129c:	0a 94       	dec	r0
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <GPIO_setupPinDirection+0x160>
    12a0:	80 95       	com	r24
    12a2:	84 23       	and	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	2b c0       	rjmp	.+86     	; 0x12fe <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRD,pin_num);
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	a1 f4       	brne	.+40     	; 0x12d6 <GPIO_setupPinDirection+0x19e>
    12ae:	a1 e3       	ldi	r26, 0x31	; 49
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e1 e3       	ldi	r30, 0x31	; 49
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_setupPinDirection+0x194>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_setupPinDirection+0x190>
    12d0:	84 2b       	or	r24, r20
    12d2:	8c 93       	st	X, r24
    12d4:	14 c0       	rjmp	.+40     	; 0x12fe <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRD,pin_num);
    12d6:	a1 e3       	ldi	r26, 0x31	; 49
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	e1 e3       	ldi	r30, 0x31	; 49
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	48 2f       	mov	r20, r24
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	02 2e       	mov	r0, r18
    12ee:	02 c0       	rjmp	.+4      	; 0x12f4 <GPIO_setupPinDirection+0x1bc>
    12f0:	88 0f       	add	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	0a 94       	dec	r0
    12f6:	e2 f7       	brpl	.-8      	; 0x12f0 <GPIO_setupPinDirection+0x1b8>
    12f8:	80 95       	com	r24
    12fa:	84 23       	and	r24, r20
    12fc:	8c 93       	st	X, r24
			break;
		}
	}
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	00 d0       	rcall	.+0      	; 0x1314 <GPIO_writePin+0x6>
    1314:	00 d0       	rcall	.+0      	; 0x1316 <GPIO_writePin+0x8>
    1316:	0f 92       	push	r0
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	6a 83       	std	Y+2, r22	; 0x02
    1320:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	88 30       	cpi	r24, 0x08	; 8
    1326:	08 f0       	brcs	.+2      	; 0x132a <GPIO_writePin+0x1c>
    1328:	e4 c0       	rjmp	.+456    	; 0x14f2 <GPIO_writePin+0x1e4>
    132a:	89 81       	ldd	r24, Y+1	; 0x01
    132c:	84 30       	cpi	r24, 0x04	; 4
    132e:	08 f0       	brcs	.+2      	; 0x1332 <GPIO_writePin+0x24>
    1330:	e0 c0       	rjmp	.+448    	; 0x14f2 <GPIO_writePin+0x1e4>
	{
		/* Set up the pin value as required */
		switch (port_num)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3d 83       	std	Y+5, r19	; 0x05
    133a:	2c 83       	std	Y+4, r18	; 0x04
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	09 f4       	brne	.+2      	; 0x1348 <GPIO_writePin+0x3a>
    1346:	47 c0       	rjmp	.+142    	; 0x13d6 <GPIO_writePin+0xc8>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	22 30       	cpi	r18, 0x02	; 2
    134e:	31 05       	cpc	r19, r1
    1350:	2c f4       	brge	.+10     	; 0x135c <GPIO_writePin+0x4e>
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	00 97       	sbiw	r24, 0x00	; 0
    1358:	71 f0       	breq	.+28     	; 0x1376 <GPIO_writePin+0x68>
    135a:	cb c0       	rjmp	.+406    	; 0x14f2 <GPIO_writePin+0x1e4>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	09 f4       	brne	.+2      	; 0x1368 <GPIO_writePin+0x5a>
    1366:	67 c0       	rjmp	.+206    	; 0x1436 <GPIO_writePin+0x128>
    1368:	8c 81       	ldd	r24, Y+4	; 0x04
    136a:	9d 81       	ldd	r25, Y+5	; 0x05
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	91 05       	cpc	r25, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <GPIO_writePin+0x66>
    1372:	91 c0       	rjmp	.+290    	; 0x1496 <GPIO_writePin+0x188>
    1374:	be c0       	rjmp	.+380    	; 0x14f2 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTA, pin_num);
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	88 23       	and	r24, r24
    137a:	a9 f4       	brne	.+42     	; 0x13a6 <GPIO_writePin+0x98>
    137c:	ab e3       	ldi	r26, 0x3B	; 59
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <GPIO_writePin+0x8c>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <GPIO_writePin+0x88>
    139e:	80 95       	com	r24
    13a0:	84 23       	and	r24, r20
    13a2:	8c 93       	st	X, r24
    13a4:	a6 c0       	rjmp	.+332    	; 0x14f2 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTA, pin_num);
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	81 30       	cpi	r24, 0x01	; 1
    13aa:	09 f0       	breq	.+2      	; 0x13ae <GPIO_writePin+0xa0>
    13ac:	a2 c0       	rjmp	.+324    	; 0x14f2 <GPIO_writePin+0x1e4>
    13ae:	ab e3       	ldi	r26, 0x3B	; 59
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	eb e3       	ldi	r30, 0x3B	; 59
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <GPIO_writePin+0xbe>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <GPIO_writePin+0xba>
    13d0:	84 2b       	or	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	8e c0       	rjmp	.+284    	; 0x14f2 <GPIO_writePin+0x1e4>
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTB, pin_num);
    13d6:	8b 81       	ldd	r24, Y+3	; 0x03
    13d8:	88 23       	and	r24, r24
    13da:	a9 f4       	brne	.+42     	; 0x1406 <GPIO_writePin+0xf8>
    13dc:	a8 e3       	ldi	r26, 0x38	; 56
    13de:	b0 e0       	ldi	r27, 0x00	; 0
    13e0:	e8 e3       	ldi	r30, 0x38	; 56
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	80 81       	ld	r24, Z
    13e6:	48 2f       	mov	r20, r24
    13e8:	8a 81       	ldd	r24, Y+2	; 0x02
    13ea:	28 2f       	mov	r18, r24
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	02 2e       	mov	r0, r18
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <GPIO_writePin+0xec>
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	0a 94       	dec	r0
    13fc:	e2 f7       	brpl	.-8      	; 0x13f6 <GPIO_writePin+0xe8>
    13fe:	80 95       	com	r24
    1400:	84 23       	and	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	76 c0       	rjmp	.+236    	; 0x14f2 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTB, pin_num);
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	81 30       	cpi	r24, 0x01	; 1
    140a:	09 f0       	breq	.+2      	; 0x140e <GPIO_writePin+0x100>
    140c:	72 c0       	rjmp	.+228    	; 0x14f2 <GPIO_writePin+0x1e4>
    140e:	a8 e3       	ldi	r26, 0x38	; 56
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e8 e3       	ldi	r30, 0x38	; 56
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	48 2f       	mov	r20, r24
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	28 2f       	mov	r18, r24
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	02 2e       	mov	r0, r18
    1426:	02 c0       	rjmp	.+4      	; 0x142c <GPIO_writePin+0x11e>
    1428:	88 0f       	add	r24, r24
    142a:	99 1f       	adc	r25, r25
    142c:	0a 94       	dec	r0
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <GPIO_writePin+0x11a>
    1430:	84 2b       	or	r24, r20
    1432:	8c 93       	st	X, r24
    1434:	5e c0       	rjmp	.+188    	; 0x14f2 <GPIO_writePin+0x1e4>
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTC, pin_num);
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	88 23       	and	r24, r24
    143a:	a9 f4       	brne	.+42     	; 0x1466 <GPIO_writePin+0x158>
    143c:	a5 e3       	ldi	r26, 0x35	; 53
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e5 e3       	ldi	r30, 0x35	; 53
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	48 2f       	mov	r20, r24
    1448:	8a 81       	ldd	r24, Y+2	; 0x02
    144a:	28 2f       	mov	r18, r24
    144c:	30 e0       	ldi	r19, 0x00	; 0
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	90 e0       	ldi	r25, 0x00	; 0
    1452:	02 2e       	mov	r0, r18
    1454:	02 c0       	rjmp	.+4      	; 0x145a <GPIO_writePin+0x14c>
    1456:	88 0f       	add	r24, r24
    1458:	99 1f       	adc	r25, r25
    145a:	0a 94       	dec	r0
    145c:	e2 f7       	brpl	.-8      	; 0x1456 <GPIO_writePin+0x148>
    145e:	80 95       	com	r24
    1460:	84 23       	and	r24, r20
    1462:	8c 93       	st	X, r24
    1464:	46 c0       	rjmp	.+140    	; 0x14f2 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTC, pin_num);
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	09 f0       	breq	.+2      	; 0x146e <GPIO_writePin+0x160>
    146c:	42 c0       	rjmp	.+132    	; 0x14f2 <GPIO_writePin+0x1e4>
    146e:	a5 e3       	ldi	r26, 0x35	; 53
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	e5 e3       	ldi	r30, 0x35	; 53
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	48 2f       	mov	r20, r24
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	02 2e       	mov	r0, r18
    1486:	02 c0       	rjmp	.+4      	; 0x148c <GPIO_writePin+0x17e>
    1488:	88 0f       	add	r24, r24
    148a:	99 1f       	adc	r25, r25
    148c:	0a 94       	dec	r0
    148e:	e2 f7       	brpl	.-8      	; 0x1488 <GPIO_writePin+0x17a>
    1490:	84 2b       	or	r24, r20
    1492:	8c 93       	st	X, r24
    1494:	2e c0       	rjmp	.+92     	; 0x14f2 <GPIO_writePin+0x1e4>
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTD, pin_num);
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	88 23       	and	r24, r24
    149a:	a9 f4       	brne	.+42     	; 0x14c6 <GPIO_writePin+0x1b8>
    149c:	a2 e3       	ldi	r26, 0x32	; 50
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e2 e3       	ldi	r30, 0x32	; 50
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	02 2e       	mov	r0, r18
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <GPIO_writePin+0x1ac>
    14b6:	88 0f       	add	r24, r24
    14b8:	99 1f       	adc	r25, r25
    14ba:	0a 94       	dec	r0
    14bc:	e2 f7       	brpl	.-8      	; 0x14b6 <GPIO_writePin+0x1a8>
    14be:	80 95       	com	r24
    14c0:	84 23       	and	r24, r20
    14c2:	8c 93       	st	X, r24
    14c4:	16 c0       	rjmp	.+44     	; 0x14f2 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTD, pin_num);
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	99 f4       	brne	.+38     	; 0x14f2 <GPIO_writePin+0x1e4>
    14cc:	a2 e3       	ldi	r26, 0x32	; 50
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e2 e3       	ldi	r30, 0x32	; 50
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 2e       	mov	r0, r18
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <GPIO_writePin+0x1dc>
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	0a 94       	dec	r0
    14ec:	e2 f7       	brpl	.-8      	; 0x14e6 <GPIO_writePin+0x1d8>
    14ee:	84 2b       	or	r24, r20
    14f0:	8c 93       	st	X, r24
			break;
		}
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <GPIO_readPin>:
/*
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	29 97       	sbiw	r28, 0x09	; 9
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	88 30       	cpi	r24, 0x08	; 8
    151e:	08 f0       	brcs	.+2      	; 0x1522 <GPIO_readPin+0x20>
    1520:	8d c0       	rjmp	.+282    	; 0x163c <GPIO_readPin+0x13a>
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	84 30       	cpi	r24, 0x04	; 4
    1526:	08 f0       	brcs	.+2      	; 0x152a <GPIO_readPin+0x28>
    1528:	89 c0       	rjmp	.+274    	; 0x163c <GPIO_readPin+0x13a>
	{
		/* Return the value of the desired pin as required */
		switch (port_num)
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	39 87       	std	Y+9, r19	; 0x09
    1532:	28 87       	std	Y+8, r18	; 0x08
    1534:	48 85       	ldd	r20, Y+8	; 0x08
    1536:	59 85       	ldd	r21, Y+9	; 0x09
    1538:	41 30       	cpi	r20, 0x01	; 1
    153a:	51 05       	cpc	r21, r1
    153c:	89 f1       	breq	.+98     	; 0x15a0 <GPIO_readPin+0x9e>
    153e:	88 85       	ldd	r24, Y+8	; 0x08
    1540:	99 85       	ldd	r25, Y+9	; 0x09
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	91 05       	cpc	r25, r1
    1546:	34 f4       	brge	.+12     	; 0x1554 <GPIO_readPin+0x52>
    1548:	28 85       	ldd	r18, Y+8	; 0x08
    154a:	39 85       	ldd	r19, Y+9	; 0x09
    154c:	21 15       	cp	r18, r1
    154e:	31 05       	cpc	r19, r1
    1550:	69 f0       	breq	.+26     	; 0x156c <GPIO_readPin+0x6a>
    1552:	74 c0       	rjmp	.+232    	; 0x163c <GPIO_readPin+0x13a>
    1554:	48 85       	ldd	r20, Y+8	; 0x08
    1556:	59 85       	ldd	r21, Y+9	; 0x09
    1558:	42 30       	cpi	r20, 0x02	; 2
    155a:	51 05       	cpc	r21, r1
    155c:	d9 f1       	breq	.+118    	; 0x15d4 <GPIO_readPin+0xd2>
    155e:	88 85       	ldd	r24, Y+8	; 0x08
    1560:	99 85       	ldd	r25, Y+9	; 0x09
    1562:	83 30       	cpi	r24, 0x03	; 3
    1564:	91 05       	cpc	r25, r1
    1566:	09 f4       	brne	.+2      	; 0x156a <GPIO_readPin+0x68>
    1568:	4f c0       	rjmp	.+158    	; 0x1608 <GPIO_readPin+0x106>
    156a:	68 c0       	rjmp	.+208    	; 0x163c <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			return (BIT_IS_SET(PINA, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    156c:	e9 e3       	ldi	r30, 0x39	; 57
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	8a 81       	ldd	r24, Y+2	; 0x02
    1578:	88 2f       	mov	r24, r24
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	a9 01       	movw	r20, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_readPin+0x82>
    1580:	55 95       	asr	r21
    1582:	47 95       	ror	r20
    1584:	8a 95       	dec	r24
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_readPin+0x7e>
    1588:	ca 01       	movw	r24, r20
    158a:	81 70       	andi	r24, 0x01	; 1
    158c:	90 70       	andi	r25, 0x00	; 0
    158e:	88 23       	and	r24, r24
    1590:	19 f0       	breq	.+6      	; 0x1598 <GPIO_readPin+0x96>
    1592:	51 e0       	ldi	r21, 0x01	; 1
    1594:	5e 83       	std	Y+6, r21	; 0x06
    1596:	01 c0       	rjmp	.+2      	; 0x159a <GPIO_readPin+0x98>
    1598:	1e 82       	std	Y+6, r1	; 0x06
    159a:	8e 81       	ldd	r24, Y+6	; 0x06
    159c:	8f 83       	std	Y+7, r24	; 0x07
    159e:	4f c0       	rjmp	.+158    	; 0x163e <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    15a0:	e6 e3       	ldi	r30, 0x36	; 54
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	88 2f       	mov	r24, r24
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	a9 01       	movw	r20, r18
    15b2:	02 c0       	rjmp	.+4      	; 0x15b8 <GPIO_readPin+0xb6>
    15b4:	55 95       	asr	r21
    15b6:	47 95       	ror	r20
    15b8:	8a 95       	dec	r24
    15ba:	e2 f7       	brpl	.-8      	; 0x15b4 <GPIO_readPin+0xb2>
    15bc:	ca 01       	movw	r24, r20
    15be:	81 70       	andi	r24, 0x01	; 1
    15c0:	90 70       	andi	r25, 0x00	; 0
    15c2:	88 23       	and	r24, r24
    15c4:	19 f0       	breq	.+6      	; 0x15cc <GPIO_readPin+0xca>
    15c6:	51 e0       	ldi	r21, 0x01	; 1
    15c8:	5d 83       	std	Y+5, r21	; 0x05
    15ca:	01 c0       	rjmp	.+2      	; 0x15ce <GPIO_readPin+0xcc>
    15cc:	1d 82       	std	Y+5, r1	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
    15d0:	8f 83       	std	Y+7, r24	; 0x07
    15d2:	35 c0       	rjmp	.+106    	; 0x163e <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    15d4:	e3 e3       	ldi	r30, 0x33	; 51
    15d6:	f0 e0       	ldi	r31, 0x00	; 0
    15d8:	80 81       	ld	r24, Z
    15da:	28 2f       	mov	r18, r24
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	a9 01       	movw	r20, r18
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <GPIO_readPin+0xea>
    15e8:	55 95       	asr	r21
    15ea:	47 95       	ror	r20
    15ec:	8a 95       	dec	r24
    15ee:	e2 f7       	brpl	.-8      	; 0x15e8 <GPIO_readPin+0xe6>
    15f0:	ca 01       	movw	r24, r20
    15f2:	81 70       	andi	r24, 0x01	; 1
    15f4:	90 70       	andi	r25, 0x00	; 0
    15f6:	88 23       	and	r24, r24
    15f8:	19 f0       	breq	.+6      	; 0x1600 <GPIO_readPin+0xfe>
    15fa:	51 e0       	ldi	r21, 0x01	; 1
    15fc:	5c 83       	std	Y+4, r21	; 0x04
    15fe:	01 c0       	rjmp	.+2      	; 0x1602 <GPIO_readPin+0x100>
    1600:	1c 82       	std	Y+4, r1	; 0x04
    1602:	8c 81       	ldd	r24, Y+4	; 0x04
    1604:	8f 83       	std	Y+7, r24	; 0x07
    1606:	1b c0       	rjmp	.+54     	; 0x163e <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    1608:	e0 e3       	ldi	r30, 0x30	; 48
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	28 2f       	mov	r18, r24
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	88 2f       	mov	r24, r24
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	a9 01       	movw	r20, r18
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <GPIO_readPin+0x11e>
    161c:	55 95       	asr	r21
    161e:	47 95       	ror	r20
    1620:	8a 95       	dec	r24
    1622:	e2 f7       	brpl	.-8      	; 0x161c <GPIO_readPin+0x11a>
    1624:	ca 01       	movw	r24, r20
    1626:	81 70       	andi	r24, 0x01	; 1
    1628:	90 70       	andi	r25, 0x00	; 0
    162a:	88 23       	and	r24, r24
    162c:	19 f0       	breq	.+6      	; 0x1634 <GPIO_readPin+0x132>
    162e:	51 e0       	ldi	r21, 0x01	; 1
    1630:	5b 83       	std	Y+3, r21	; 0x03
    1632:	01 c0       	rjmp	.+2      	; 0x1636 <GPIO_readPin+0x134>
    1634:	1b 82       	std	Y+3, r1	; 0x03
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	8f 83       	std	Y+7, r24	; 0x07
    163a:	01 c0       	rjmp	.+2      	; 0x163e <GPIO_readPin+0x13c>
			break;
		}
	}
	return LOGIC_LOW;
    163c:	1f 82       	std	Y+7, r1	; 0x07
    163e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1640:	29 96       	adiw	r28, 0x09	; 9
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	00 d0       	rcall	.+0      	; 0x1658 <GPIO_setupPortDirection+0x6>
    1658:	00 d0       	rcall	.+0      	; 0x165a <GPIO_setupPortDirection+0x8>
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	90 f5       	brcc	.+100    	; 0x16cc <GPIO_setupPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port_num)
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	3c 83       	std	Y+4, r19	; 0x04
    1670:	2b 83       	std	Y+3, r18	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	91 05       	cpc	r25, r1
    167a:	d1 f0       	breq	.+52     	; 0x16b0 <GPIO_setupPortDirection+0x5e>
    167c:	2b 81       	ldd	r18, Y+3	; 0x03
    167e:	3c 81       	ldd	r19, Y+4	; 0x04
    1680:	22 30       	cpi	r18, 0x02	; 2
    1682:	31 05       	cpc	r19, r1
    1684:	2c f4       	brge	.+10     	; 0x1690 <GPIO_setupPortDirection+0x3e>
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	00 97       	sbiw	r24, 0x00	; 0
    168c:	61 f0       	breq	.+24     	; 0x16a6 <GPIO_setupPortDirection+0x54>
    168e:	1e c0       	rjmp	.+60     	; 0x16cc <GPIO_setupPortDirection+0x7a>
    1690:	2b 81       	ldd	r18, Y+3	; 0x03
    1692:	3c 81       	ldd	r19, Y+4	; 0x04
    1694:	22 30       	cpi	r18, 0x02	; 2
    1696:	31 05       	cpc	r19, r1
    1698:	81 f0       	breq	.+32     	; 0x16ba <GPIO_setupPortDirection+0x68>
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	83 30       	cpi	r24, 0x03	; 3
    16a0:	91 05       	cpc	r25, r1
    16a2:	81 f0       	breq	.+32     	; 0x16c4 <GPIO_setupPortDirection+0x72>
    16a4:	13 c0       	rjmp	.+38     	; 0x16cc <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    16a6:	ea e3       	ldi	r30, 0x3A	; 58
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	80 83       	st	Z, r24
    16ae:	0e c0       	rjmp	.+28     	; 0x16cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    16b0:	e7 e3       	ldi	r30, 0x37	; 55
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	8a 81       	ldd	r24, Y+2	; 0x02
    16b6:	80 83       	st	Z, r24
    16b8:	09 c0       	rjmp	.+18     	; 0x16cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    16ba:	e4 e3       	ldi	r30, 0x34	; 52
    16bc:	f0 e0       	ldi	r31, 0x00	; 0
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	80 83       	st	Z, r24
    16c2:	04 c0       	rjmp	.+8      	; 0x16cc <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    16c4:	e1 e3       	ldi	r30, 0x31	; 49
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	0f 90       	pop	r0
    16d4:	cf 91       	pop	r28
    16d6:	df 91       	pop	r29
    16d8:	08 95       	ret

000016da <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    16da:	df 93       	push	r29
    16dc:	cf 93       	push	r28
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <GPIO_writePort+0x6>
    16e0:	00 d0       	rcall	.+0      	; 0x16e2 <GPIO_writePort+0x8>
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	84 30       	cpi	r24, 0x04	; 4
    16ee:	90 f5       	brcc	.+100    	; 0x1754 <GPIO_writePort+0x7a>
	{
		/* Setup the port value as required */
		switch(port_num)
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	3c 83       	std	Y+4, r19	; 0x04
    16f8:	2b 83       	std	Y+3, r18	; 0x03
    16fa:	8b 81       	ldd	r24, Y+3	; 0x03
    16fc:	9c 81       	ldd	r25, Y+4	; 0x04
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	91 05       	cpc	r25, r1
    1702:	d1 f0       	breq	.+52     	; 0x1738 <GPIO_writePort+0x5e>
    1704:	2b 81       	ldd	r18, Y+3	; 0x03
    1706:	3c 81       	ldd	r19, Y+4	; 0x04
    1708:	22 30       	cpi	r18, 0x02	; 2
    170a:	31 05       	cpc	r19, r1
    170c:	2c f4       	brge	.+10     	; 0x1718 <GPIO_writePort+0x3e>
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	9c 81       	ldd	r25, Y+4	; 0x04
    1712:	00 97       	sbiw	r24, 0x00	; 0
    1714:	61 f0       	breq	.+24     	; 0x172e <GPIO_writePort+0x54>
    1716:	1e c0       	rjmp	.+60     	; 0x1754 <GPIO_writePort+0x7a>
    1718:	2b 81       	ldd	r18, Y+3	; 0x03
    171a:	3c 81       	ldd	r19, Y+4	; 0x04
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	81 f0       	breq	.+32     	; 0x1742 <GPIO_writePort+0x68>
    1722:	8b 81       	ldd	r24, Y+3	; 0x03
    1724:	9c 81       	ldd	r25, Y+4	; 0x04
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	91 05       	cpc	r25, r1
    172a:	81 f0       	breq	.+32     	; 0x174c <GPIO_writePort+0x72>
    172c:	13 c0       	rjmp	.+38     	; 0x1754 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    172e:	eb e3       	ldi	r30, 0x3B	; 59
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 83       	st	Z, r24
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1738:	e8 e3       	ldi	r30, 0x38	; 56
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	80 83       	st	Z, r24
    1740:	09 c0       	rjmp	.+18     	; 0x1754 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1742:	e5 e3       	ldi	r30, 0x35	; 53
    1744:	f0 e0       	ldi	r31, 0x00	; 0
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	80 83       	st	Z, r24
    174a:	04 c0       	rjmp	.+8      	; 0x1754 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    174c:	e2 e3       	ldi	r30, 0x32	; 50
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	8a 81       	ldd	r24, Y+2	; 0x02
    1752:	80 83       	st	Z, r24
			break;
		}
	}
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <GPIO_readPort>:
/*
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1762:	df 93       	push	r29
    1764:	cf 93       	push	r28
    1766:	00 d0       	rcall	.+0      	; 0x1768 <GPIO_readPort+0x6>
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_readPort+0x8>
    176a:	cd b7       	in	r28, 0x3d	; 61
    176c:	de b7       	in	r29, 0x3e	; 62
    176e:	89 83       	std	Y+1, r24	; 0x01
	if(port_num < NUM_OF_PORTS)
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	84 30       	cpi	r24, 0x04	; 4
    1774:	98 f5       	brcc	.+102    	; 0x17dc <GPIO_readPort+0x7a>
	{
		/* Return the value of the desired port as required */
		switch(port_num)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3c 83       	std	Y+4, r19	; 0x04
    177e:	2b 83       	std	Y+3, r18	; 0x03
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	9c 81       	ldd	r25, Y+4	; 0x04
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	d1 f0       	breq	.+52     	; 0x17be <GPIO_readPort+0x5c>
    178a:	2b 81       	ldd	r18, Y+3	; 0x03
    178c:	3c 81       	ldd	r19, Y+4	; 0x04
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <GPIO_readPort+0x3c>
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	9c 81       	ldd	r25, Y+4	; 0x04
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	61 f0       	breq	.+24     	; 0x17b4 <GPIO_readPort+0x52>
    179c:	1f c0       	rjmp	.+62     	; 0x17dc <GPIO_readPort+0x7a>
    179e:	2b 81       	ldd	r18, Y+3	; 0x03
    17a0:	3c 81       	ldd	r19, Y+4	; 0x04
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	81 f0       	breq	.+32     	; 0x17c8 <GPIO_readPort+0x66>
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	81 f0       	breq	.+32     	; 0x17d2 <GPIO_readPort+0x70>
    17b2:	14 c0       	rjmp	.+40     	; 0x17dc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    17b4:	e9 e3       	ldi	r30, 0x39	; 57
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	90 81       	ld	r25, Z
    17ba:	9a 83       	std	Y+2, r25	; 0x02
    17bc:	10 c0       	rjmp	.+32     	; 0x17de <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    17be:	e6 e3       	ldi	r30, 0x36	; 54
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	20 81       	ld	r18, Z
    17c4:	2a 83       	std	Y+2, r18	; 0x02
    17c6:	0b c0       	rjmp	.+22     	; 0x17de <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    17c8:	e3 e3       	ldi	r30, 0x33	; 51
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	30 81       	ld	r19, Z
    17ce:	3a 83       	std	Y+2, r19	; 0x02
    17d0:	06 c0       	rjmp	.+12     	; 0x17de <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    17d2:	e0 e3       	ldi	r30, 0x30	; 48
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8a 83       	std	Y+2, r24	; 0x02
    17da:	01 c0       	rjmp	.+2      	; 0x17de <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    17dc:	1a 82       	std	Y+2, r1	; 0x02
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
}
    17e0:	0f 90       	pop	r0
    17e2:	0f 90       	pop	r0
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62
    17f6:	60 97       	sbiw	r28, 0x10	; 16
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	de bf       	out	0x3e, r29	; 62
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1802:	83 e0       	ldi	r24, 0x03	; 3
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    180c:	83 e0       	ldi	r24, 0x03	; 3
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	40 e0       	ldi	r20, 0x00	; 0
    1812:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1816:	83 e0       	ldi	r24, 0x03	; 3
    1818:	62 e0       	ldi	r22, 0x02	; 2
    181a:	40 e0       	ldi	r20, 0x00	; 0
    181c:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1820:	83 e0       	ldi	r24, 0x03	; 3
    1822:	63 e0       	ldi	r22, 0x03	; 3
    1824:	40 e0       	ldi	r20, 0x00	; 0
    1826:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    182a:	83 e0       	ldi	r24, 0x03	; 3
    182c:	64 e0       	ldi	r22, 0x04	; 4
    182e:	40 e0       	ldi	r20, 0x00	; 0
    1830:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1834:	83 e0       	ldi	r24, 0x03	; 3
    1836:	65 e0       	ldi	r22, 0x05	; 5
    1838:	40 e0       	ldi	r20, 0x00	; 0
    183a:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	66 e0       	ldi	r22, 0x06	; 6
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1848:	83 e0       	ldi	r24, 0x03	; 3
    184a:	67 e0       	ldi	r22, 0x07	; 7
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1852:	1f 86       	std	Y+15, r1	; 0x0f
    1854:	ab c0       	rjmp	.+342    	; 0x19ac <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1856:	83 e0       	ldi	r24, 0x03	; 3
    1858:	6f 85       	ldd	r22, Y+15	; 0x0f
    185a:	41 e0       	ldi	r20, 0x01	; 1
    185c:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1860:	83 e0       	ldi	r24, 0x03	; 3
    1862:	6f 85       	ldd	r22, Y+15	; 0x0f
    1864:	40 e0       	ldi	r20, 0x00	; 0
    1866:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    186a:	18 8a       	std	Y+16, r1	; 0x10
    186c:	22 c0       	rjmp	.+68     	; 0x18b2 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    186e:	88 89       	ldd	r24, Y+16	; 0x10
    1870:	98 2f       	mov	r25, r24
    1872:	9c 5f       	subi	r25, 0xFC	; 252
    1874:	83 e0       	ldi	r24, 0x03	; 3
    1876:	69 2f       	mov	r22, r25
    1878:	0e 94 81 0a 	call	0x1502	; 0x1502 <GPIO_readPin>
    187c:	88 23       	and	r24, r24
    187e:	b1 f4       	brne	.+44     	; 0x18ac <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1880:	8f 85       	ldd	r24, Y+15	; 0x0f
    1882:	88 2f       	mov	r24, r24
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	98 2f       	mov	r25, r24
    1890:	88 89       	ldd	r24, Y+16	; 0x10
    1892:	89 0f       	add	r24, r25
    1894:	8f 5f       	subi	r24, 0xFF	; 255
    1896:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    189a:	60 96       	adiw	r28, 0x10	; 16
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    18ac:	88 89       	ldd	r24, Y+16	; 0x10
    18ae:	8f 5f       	subi	r24, 0xFF	; 255
    18b0:	88 8b       	std	Y+16, r24	; 0x10
    18b2:	88 89       	ldd	r24, Y+16	; 0x10
    18b4:	84 30       	cpi	r24, 0x04	; 4
    18b6:	d8 f2       	brcs	.-74     	; 0x186e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    18b8:	83 e0       	ldi	r24, 0x03	; 3
    18ba:	6f 85       	ldd	r22, Y+15	; 0x0f
    18bc:	40 e0       	ldi	r20, 0x00	; 0
    18be:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 ea       	ldi	r26, 0xA0	; 160
    18c8:	b0 e4       	ldi	r27, 0x40	; 64
    18ca:	8b 87       	std	Y+11, r24	; 0x0b
    18cc:	9c 87       	std	Y+12, r25	; 0x0c
    18ce:	ad 87       	std	Y+13, r26	; 0x0d
    18d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    18d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	4a e7       	ldi	r20, 0x7A	; 122
    18e0:	53 e4       	ldi	r21, 0x43	; 67
    18e2:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	8f 83       	std	Y+7, r24	; 0x07
    18ec:	98 87       	std	Y+8, r25	; 0x08
    18ee:	a9 87       	std	Y+9, r26	; 0x09
    18f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18f2:	6f 81       	ldd	r22, Y+7	; 0x07
    18f4:	78 85       	ldd	r23, Y+8	; 0x08
    18f6:	89 85       	ldd	r24, Y+9	; 0x09
    18f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	40 e8       	ldi	r20, 0x80	; 128
    1900:	5f e3       	ldi	r21, 0x3F	; 63
    1902:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1906:	88 23       	and	r24, r24
    1908:	2c f4       	brge	.+10     	; 0x1914 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	9e 83       	std	Y+6, r25	; 0x06
    1910:	8d 83       	std	Y+5, r24	; 0x05
    1912:	3f c0       	rjmp	.+126    	; 0x1992 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1914:	6f 81       	ldd	r22, Y+7	; 0x07
    1916:	78 85       	ldd	r23, Y+8	; 0x08
    1918:	89 85       	ldd	r24, Y+9	; 0x09
    191a:	9a 85       	ldd	r25, Y+10	; 0x0a
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	3f ef       	ldi	r19, 0xFF	; 255
    1920:	4f e7       	ldi	r20, 0x7F	; 127
    1922:	57 e4       	ldi	r21, 0x47	; 71
    1924:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1928:	18 16       	cp	r1, r24
    192a:	4c f5       	brge	.+82     	; 0x197e <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    192c:	6b 85       	ldd	r22, Y+11	; 0x0b
    192e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1930:	8d 85       	ldd	r24, Y+13	; 0x0d
    1932:	9e 85       	ldd	r25, Y+14	; 0x0e
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	40 e2       	ldi	r20, 0x20	; 32
    193a:	51 e4       	ldi	r21, 0x41	; 65
    193c:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	bc 01       	movw	r22, r24
    1946:	cd 01       	movw	r24, r26
    1948:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	9e 83       	std	Y+6, r25	; 0x06
    1952:	8d 83       	std	Y+5, r24	; 0x05
    1954:	0f c0       	rjmp	.+30     	; 0x1974 <KEYPAD_getPressedKey+0x186>
    1956:	89 e1       	ldi	r24, 0x19	; 25
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	9c 83       	std	Y+4, r25	; 0x04
    195c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    195e:	8b 81       	ldd	r24, Y+3	; 0x03
    1960:	9c 81       	ldd	r25, Y+4	; 0x04
    1962:	01 97       	sbiw	r24, 0x01	; 1
    1964:	f1 f7       	brne	.-4      	; 0x1962 <KEYPAD_getPressedKey+0x174>
    1966:	9c 83       	std	Y+4, r25	; 0x04
    1968:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	9e 81       	ldd	r25, Y+6	; 0x06
    196e:	01 97       	sbiw	r24, 0x01	; 1
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	69 f7       	brne	.-38     	; 0x1956 <KEYPAD_getPressedKey+0x168>
    197c:	14 c0       	rjmp	.+40     	; 0x19a6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    197e:	6f 81       	ldd	r22, Y+7	; 0x07
    1980:	78 85       	ldd	r23, Y+8	; 0x08
    1982:	89 85       	ldd	r24, Y+9	; 0x09
    1984:	9a 85       	ldd	r25, Y+10	; 0x0a
    1986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    198a:	dc 01       	movw	r26, r24
    198c:	cb 01       	movw	r24, r22
    198e:	9e 83       	std	Y+6, r25	; 0x06
    1990:	8d 83       	std	Y+5, r24	; 0x05
    1992:	8d 81       	ldd	r24, Y+5	; 0x05
    1994:	9e 81       	ldd	r25, Y+6	; 0x06
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	9a 81       	ldd	r25, Y+2	; 0x02
    199e:	01 97       	sbiw	r24, 0x01	; 1
    19a0:	f1 f7       	brne	.-4      	; 0x199e <KEYPAD_getPressedKey+0x1b0>
    19a2:	9a 83       	std	Y+2, r25	; 0x02
    19a4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a8:	8f 5f       	subi	r24, 0xFF	; 255
    19aa:	8f 87       	std	Y+15, r24	; 0x0f
    19ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ae:	84 30       	cpi	r24, 0x04	; 4
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <KEYPAD_getPressedKey+0x1c6>
    19b2:	51 cf       	rjmp	.-350    	; 0x1856 <KEYPAD_getPressedKey+0x68>
    19b4:	4e cf       	rjmp	.-356    	; 0x1852 <KEYPAD_getPressedKey+0x64>

000019b6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	00 d0       	rcall	.+0      	; 0x19bc <KEYPAD_4x4_adjustKeyNumber+0x6>
    19bc:	00 d0       	rcall	.+0      	; 0x19be <KEYPAD_4x4_adjustKeyNumber+0x8>
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    19c4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	3c 83       	std	Y+4, r19	; 0x04
    19ce:	2b 83       	std	Y+3, r18	; 0x03
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	9c 81       	ldd	r25, Y+4	; 0x04
    19d4:	88 30       	cpi	r24, 0x08	; 8
    19d6:	91 05       	cpc	r25, r1
    19d8:	09 f4       	brne	.+2      	; 0x19dc <KEYPAD_4x4_adjustKeyNumber+0x26>
    19da:	70 c0       	rjmp	.+224    	; 0x1abc <KEYPAD_4x4_adjustKeyNumber+0x106>
    19dc:	2b 81       	ldd	r18, Y+3	; 0x03
    19de:	3c 81       	ldd	r19, Y+4	; 0x04
    19e0:	29 30       	cpi	r18, 0x09	; 9
    19e2:	31 05       	cpc	r19, r1
    19e4:	5c f5       	brge	.+86     	; 0x1a3c <KEYPAD_4x4_adjustKeyNumber+0x86>
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	84 30       	cpi	r24, 0x04	; 4
    19ec:	91 05       	cpc	r25, r1
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    19f0:	59 c0       	rjmp	.+178    	; 0x1aa4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    19f2:	2b 81       	ldd	r18, Y+3	; 0x03
    19f4:	3c 81       	ldd	r19, Y+4	; 0x04
    19f6:	25 30       	cpi	r18, 0x05	; 5
    19f8:	31 05       	cpc	r19, r1
    19fa:	9c f4       	brge	.+38     	; 0x1a22 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1a00:	82 30       	cpi	r24, 0x02	; 2
    1a02:	91 05       	cpc	r25, r1
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a06:	48 c0       	rjmp	.+144    	; 0x1a98 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a08:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a0c:	23 30       	cpi	r18, 0x03	; 3
    1a0e:	31 05       	cpc	r19, r1
    1a10:	0c f0       	brlt	.+2      	; 0x1a14 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a12:	45 c0       	rjmp	.+138    	; 0x1a9e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a14:	8b 81       	ldd	r24, Y+3	; 0x03
    1a16:	9c 81       	ldd	r25, Y+4	; 0x04
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	91 05       	cpc	r25, r1
    1a1c:	09 f4       	brne	.+2      	; 0x1a20 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1a1e:	39 c0       	rjmp	.+114    	; 0x1a92 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1a20:	67 c0       	rjmp	.+206    	; 0x1af0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1a22:	2b 81       	ldd	r18, Y+3	; 0x03
    1a24:	3c 81       	ldd	r19, Y+4	; 0x04
    1a26:	26 30       	cpi	r18, 0x06	; 6
    1a28:	31 05       	cpc	r19, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1a2c:	41 c0       	rjmp	.+130    	; 0x1ab0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	87 30       	cpi	r24, 0x07	; 7
    1a34:	91 05       	cpc	r25, r1
    1a36:	0c f0       	brlt	.+2      	; 0x1a3a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1a38:	3e c0       	rjmp	.+124    	; 0x1ab6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1a3a:	37 c0       	rjmp	.+110    	; 0x1aaa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1a3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a40:	2c 30       	cpi	r18, 0x0C	; 12
    1a42:	31 05       	cpc	r19, r1
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1a46:	46 c0       	rjmp	.+140    	; 0x1ad4 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4c:	8d 30       	cpi	r24, 0x0D	; 13
    1a4e:	91 05       	cpc	r25, r1
    1a50:	5c f4       	brge	.+22     	; 0x1a68 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1a52:	2b 81       	ldd	r18, Y+3	; 0x03
    1a54:	3c 81       	ldd	r19, Y+4	; 0x04
    1a56:	2a 30       	cpi	r18, 0x0A	; 10
    1a58:	31 05       	cpc	r19, r1
    1a5a:	b1 f1       	breq	.+108    	; 0x1ac8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	8b 30       	cpi	r24, 0x0B	; 11
    1a62:	91 05       	cpc	r25, r1
    1a64:	a4 f5       	brge	.+104    	; 0x1ace <KEYPAD_4x4_adjustKeyNumber+0x118>
    1a66:	2d c0       	rjmp	.+90     	; 0x1ac2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1a68:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6c:	2e 30       	cpi	r18, 0x0E	; 14
    1a6e:	31 05       	cpc	r19, r1
    1a70:	b9 f1       	breq	.+110    	; 0x1ae0 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	9c 81       	ldd	r25, Y+4	; 0x04
    1a76:	8e 30       	cpi	r24, 0x0E	; 14
    1a78:	91 05       	cpc	r25, r1
    1a7a:	7c f1       	brlt	.+94     	; 0x1ada <KEYPAD_4x4_adjustKeyNumber+0x124>
    1a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a80:	2f 30       	cpi	r18, 0x0F	; 15
    1a82:	31 05       	cpc	r19, r1
    1a84:	79 f1       	breq	.+94     	; 0x1ae4 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	80 31       	cpi	r24, 0x10	; 16
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	69 f1       	breq	.+90     	; 0x1aea <KEYPAD_4x4_adjustKeyNumber+0x134>
    1a90:	2f c0       	rjmp	.+94     	; 0x1af0 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1a92:	87 e0       	ldi	r24, 0x07	; 7
    1a94:	89 83       	std	Y+1, r24	; 0x01
    1a96:	2e c0       	rjmp	.+92     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1a98:	88 e0       	ldi	r24, 0x08	; 8
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	2b c0       	rjmp	.+86     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1a9e:	89 e0       	ldi	r24, 0x09	; 9
    1aa0:	89 83       	std	Y+1, r24	; 0x01
    1aa2:	28 c0       	rjmp	.+80     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1aa4:	85 e2       	ldi	r24, 0x25	; 37
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	25 c0       	rjmp	.+74     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1aaa:	84 e0       	ldi	r24, 0x04	; 4
    1aac:	89 83       	std	Y+1, r24	; 0x01
    1aae:	22 c0       	rjmp	.+68     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1ab0:	85 e0       	ldi	r24, 0x05	; 5
    1ab2:	89 83       	std	Y+1, r24	; 0x01
    1ab4:	1f c0       	rjmp	.+62     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ab6:	86 e0       	ldi	r24, 0x06	; 6
    1ab8:	89 83       	std	Y+1, r24	; 0x01
    1aba:	1c c0       	rjmp	.+56     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1abc:	8a e2       	ldi	r24, 0x2A	; 42
    1abe:	89 83       	std	Y+1, r24	; 0x01
    1ac0:	19 c0       	rjmp	.+50     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1ac2:	81 e0       	ldi	r24, 0x01	; 1
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	16 c0       	rjmp	.+44     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	89 83       	std	Y+1, r24	; 0x01
    1acc:	13 c0       	rjmp	.+38     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1ace:	83 e0       	ldi	r24, 0x03	; 3
    1ad0:	89 83       	std	Y+1, r24	; 0x01
    1ad2:	10 c0       	rjmp	.+32     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1ad4:	8d e2       	ldi	r24, 0x2D	; 45
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1ada:	8d e0       	ldi	r24, 0x0D	; 13
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	0a c0       	rjmp	.+20     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1ae0:	19 82       	std	Y+1, r1	; 0x01
    1ae2:	08 c0       	rjmp	.+16     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1ae4:	8d e3       	ldi	r24, 0x3D	; 61
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	05 c0       	rjmp	.+10     	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1aea:	8b e2       	ldi	r24, 0x2B	; 43
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	02 c0       	rjmp	.+4      	; 0x1af4 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	0f 90       	pop	r0
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	08 95       	ret

00001b04 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b04:	df 93       	push	r29
    1b06:	cf 93       	push	r28
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
    1b0c:	2e 97       	sbiw	r28, 0x0e	; 14
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b18:	82 e0       	ldi	r24, 0x02	; 2
    1b1a:	60 e0       	ldi	r22, 0x00	; 0
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b22:	82 e0       	ldi	r24, 0x02	; 2
    1b24:	61 e0       	ldi	r22, 0x01	; 1
    1b26:	41 e0       	ldi	r20, 0x01	; 1
    1b28:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 ea       	ldi	r26, 0xA0	; 160
    1b32:	b1 e4       	ldi	r27, 0x41	; 65
    1b34:	8b 87       	std	Y+11, r24	; 0x0b
    1b36:	9c 87       	std	Y+12, r25	; 0x0c
    1b38:	ad 87       	std	Y+13, r26	; 0x0d
    1b3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a e7       	ldi	r20, 0x7A	; 122
    1b4a:	53 e4       	ldi	r21, 0x43	; 67
    1b4c:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	8f 83       	std	Y+7, r24	; 0x07
    1b56:	98 87       	std	Y+8, r25	; 0x08
    1b58:	a9 87       	std	Y+9, r26	; 0x09
    1b5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b5c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b5e:	78 85       	ldd	r23, Y+8	; 0x08
    1b60:	89 85       	ldd	r24, Y+9	; 0x09
    1b62:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <LCD_init+0x7a>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	9e 83       	std	Y+6, r25	; 0x06
    1bbc:	8d 83       	std	Y+5, r24	; 0x05
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <LCD_init+0xda>
    1bc0:	89 e1       	ldi	r24, 0x19	; 25
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	8b 83       	std	Y+3, r24	; 0x03
    1bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bca:	9c 81       	ldd	r25, Y+4	; 0x04
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_init+0xc8>
    1bd0:	9c 83       	std	Y+4, r25	; 0x04
    1bd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	9e 83       	std	Y+6, r25	; 0x06
    1bdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8d 81       	ldd	r24, Y+5	; 0x05
    1be0:	9e 81       	ldd	r25, Y+6	; 0x06
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <LCD_init+0xbc>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	8d 83       	std	Y+5, r24	; 0x05
    1bfc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bfe:	9e 81       	ldd	r25, Y+6	; 0x06
    1c00:	9a 83       	std	Y+2, r25	; 0x02
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_init+0x104>
    1c0c:	9a 83       	std	Y+2, r25	; 0x02
    1c0e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1c10:	82 e0       	ldi	r24, 0x02	; 2
    1c12:	64 e0       	ldi	r22, 0x04	; 4
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1c1a:	82 e0       	ldi	r24, 0x02	; 2
    1c1c:	65 e0       	ldi	r22, 0x05	; 5
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1c24:	82 e0       	ldi	r24, 0x02	; 2
    1c26:	66 e0       	ldi	r22, 0x06	; 6
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1c2e:	82 e0       	ldi	r24, 0x02	; 2
    1c30:	67 e0       	ldi	r22, 0x07	; 7
    1c32:	41 e0       	ldi	r20, 0x01	; 1
    1c34:	0e 94 9c 08 	call	0x1138	; 0x1138 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1c38:	83 e3       	ldi	r24, 0x33	; 51
    1c3a:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1c3e:	82 e3       	ldi	r24, 0x32	; 50
    1c40:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1c44:	88 e2       	ldi	r24, 0x28	; 40
    1c46:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c4a:	8c e0       	ldi	r24, 0x0C	; 12
    1c4c:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
}
    1c56:	2e 96       	adiw	r28, 0x0e	; 14
    1c58:	0f b6       	in	r0, 0x3f	; 63
    1c5a:	f8 94       	cli
    1c5c:	de bf       	out	0x3e, r29	; 62
    1c5e:	0f be       	out	0x3f, r0	; 63
    1c60:	cd bf       	out	0x3d, r28	; 61
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c68:	0f 93       	push	r16
    1c6a:	1f 93       	push	r17
    1c6c:	df 93       	push	r29
    1c6e:	cf 93       	push	r28
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	c3 56       	subi	r28, 0x63	; 99
    1c76:	d0 40       	sbci	r29, 0x00	; 0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	f8 94       	cli
    1c7c:	de bf       	out	0x3e, r29	; 62
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	cd bf       	out	0x3d, r28	; 61
    1c82:	fe 01       	movw	r30, r28
    1c84:	ed 59       	subi	r30, 0x9D	; 157
    1c86:	ff 4f       	sbci	r31, 0xFF	; 255
    1c88:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c8a:	82 e0       	ldi	r24, 0x02	; 2
    1c8c:	60 e0       	ldi	r22, 0x00	; 0
    1c8e:	40 e0       	ldi	r20, 0x00	; 0
    1c90:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    1c94:	fe 01       	movw	r30, r28
    1c96:	e1 5a       	subi	r30, 0xA1	; 161
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ca0:	bf e3       	ldi	r27, 0x3F	; 63
    1ca2:	80 83       	st	Z, r24
    1ca4:	91 83       	std	Z+1, r25	; 0x01
    1ca6:	a2 83       	std	Z+2, r26	; 0x02
    1ca8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	8e 01       	movw	r16, r28
    1cac:	05 5a       	subi	r16, 0xA5	; 165
    1cae:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e1 5a       	subi	r30, 0xA1	; 161
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	60 81       	ld	r22, Z
    1cb8:	71 81       	ldd	r23, Z+1	; 0x01
    1cba:	82 81       	ldd	r24, Z+2	; 0x02
    1cbc:	93 81       	ldd	r25, Z+3	; 0x03
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	4a e7       	ldi	r20, 0x7A	; 122
    1cc4:	53 e4       	ldi	r21, 0x43	; 67
    1cc6:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	f8 01       	movw	r30, r16
    1cd0:	80 83       	st	Z, r24
    1cd2:	91 83       	std	Z+1, r25	; 0x01
    1cd4:	a2 83       	std	Z+2, r26	; 0x02
    1cd6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e5 5a       	subi	r30, 0xA5	; 165
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	40 e8       	ldi	r20, 0x80	; 128
    1cec:	5f e3       	ldi	r21, 0x3F	; 63
    1cee:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1cf2:	88 23       	and	r24, r24
    1cf4:	44 f4       	brge	.+16     	; 0x1d06 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	e7 5a       	subi	r30, 0xA7	; 167
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	91 83       	std	Z+1, r25	; 0x01
    1d02:	80 83       	st	Z, r24
    1d04:	64 c0       	rjmp	.+200    	; 0x1dce <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d06:	fe 01       	movw	r30, r28
    1d08:	e5 5a       	subi	r30, 0xA5	; 165
    1d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0c:	60 81       	ld	r22, Z
    1d0e:	71 81       	ldd	r23, Z+1	; 0x01
    1d10:	82 81       	ldd	r24, Z+2	; 0x02
    1d12:	93 81       	ldd	r25, Z+3	; 0x03
    1d14:	20 e0       	ldi	r18, 0x00	; 0
    1d16:	3f ef       	ldi	r19, 0xFF	; 255
    1d18:	4f e7       	ldi	r20, 0x7F	; 127
    1d1a:	57 e4       	ldi	r21, 0x47	; 71
    1d1c:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1d20:	18 16       	cp	r1, r24
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <LCD_sendCommand+0xbe>
    1d24:	43 c0       	rjmp	.+134    	; 0x1dac <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	fe 01       	movw	r30, r28
    1d28:	e1 5a       	subi	r30, 0xA1	; 161
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	8e 01       	movw	r16, r28
    1d46:	07 5a       	subi	r16, 0xA7	; 167
    1d48:	1f 4f       	sbci	r17, 0xFF	; 255
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	f8 01       	movw	r30, r16
    1d58:	91 83       	std	Z+1, r25	; 0x01
    1d5a:	80 83       	st	Z, r24
    1d5c:	1f c0       	rjmp	.+62     	; 0x1d9c <LCD_sendCommand+0x134>
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e9 5a       	subi	r30, 0xA9	; 169
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	89 e1       	ldi	r24, 0x19	; 25
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	91 83       	std	Z+1, r25	; 0x01
    1d6a:	80 83       	st	Z, r24
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	e9 5a       	subi	r30, 0xA9	; 169
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	80 81       	ld	r24, Z
    1d74:	91 81       	ldd	r25, Z+1	; 0x01
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_sendCommand+0x10e>
    1d7a:	fe 01       	movw	r30, r28
    1d7c:	e9 5a       	subi	r30, 0xA9	; 169
    1d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d84:	de 01       	movw	r26, r28
    1d86:	a7 5a       	subi	r26, 0xA7	; 167
    1d88:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8a:	fe 01       	movw	r30, r28
    1d8c:	e7 5a       	subi	r30, 0xA7	; 167
    1d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d90:	80 81       	ld	r24, Z
    1d92:	91 81       	ldd	r25, Z+1	; 0x01
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	11 96       	adiw	r26, 0x01	; 1
    1d98:	9c 93       	st	X, r25
    1d9a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	e7 5a       	subi	r30, 0xA7	; 167
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	80 81       	ld	r24, Z
    1da4:	91 81       	ldd	r25, Z+1	; 0x01
    1da6:	00 97       	sbiw	r24, 0x00	; 0
    1da8:	d1 f6       	brne	.-76     	; 0x1d5e <LCD_sendCommand+0xf6>
    1daa:	27 c0       	rjmp	.+78     	; 0x1dfa <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dac:	8e 01       	movw	r16, r28
    1dae:	07 5a       	subi	r16, 0xA7	; 167
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	e5 5a       	subi	r30, 0xA5	; 165
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	f8 01       	movw	r30, r16
    1dca:	91 83       	std	Z+1, r25	; 0x01
    1dcc:	80 83       	st	Z, r24
    1dce:	de 01       	movw	r26, r28
    1dd0:	ab 5a       	subi	r26, 0xAB	; 171
    1dd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e7 5a       	subi	r30, 0xA7	; 167
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	80 81       	ld	r24, Z
    1ddc:	91 81       	ldd	r25, Z+1	; 0x01
    1dde:	8d 93       	st	X+, r24
    1de0:	9c 93       	st	X, r25
    1de2:	fe 01       	movw	r30, r28
    1de4:	eb 5a       	subi	r30, 0xAB	; 171
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <LCD_sendCommand+0x184>
    1df0:	fe 01       	movw	r30, r28
    1df2:	eb 5a       	subi	r30, 0xAB	; 171
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	91 83       	std	Z+1, r25	; 0x01
    1df8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	61 e0       	ldi	r22, 0x01	; 1
    1dfe:	41 e0       	ldi	r20, 0x01	; 1
    1e00:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    1e04:	fe 01       	movw	r30, r28
    1e06:	ef 5a       	subi	r30, 0xAF	; 175
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 e0       	ldi	r24, 0x00	; 0
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	a0 e8       	ldi	r26, 0x80	; 128
    1e10:	bf e3       	ldi	r27, 0x3F	; 63
    1e12:	80 83       	st	Z, r24
    1e14:	91 83       	std	Z+1, r25	; 0x01
    1e16:	a2 83       	std	Z+2, r26	; 0x02
    1e18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e1a:	8e 01       	movw	r16, r28
    1e1c:	03 5b       	subi	r16, 0xB3	; 179
    1e1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e20:	fe 01       	movw	r30, r28
    1e22:	ef 5a       	subi	r30, 0xAF	; 175
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	60 81       	ld	r22, Z
    1e28:	71 81       	ldd	r23, Z+1	; 0x01
    1e2a:	82 81       	ldd	r24, Z+2	; 0x02
    1e2c:	93 81       	ldd	r25, Z+3	; 0x03
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	4a e7       	ldi	r20, 0x7A	; 122
    1e34:	53 e4       	ldi	r21, 0x43	; 67
    1e36:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	f8 01       	movw	r30, r16
    1e40:	80 83       	st	Z, r24
    1e42:	91 83       	std	Z+1, r25	; 0x01
    1e44:	a2 83       	std	Z+2, r26	; 0x02
    1e46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e3 5b       	subi	r30, 0xB3	; 179
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	60 81       	ld	r22, Z
    1e50:	71 81       	ldd	r23, Z+1	; 0x01
    1e52:	82 81       	ldd	r24, Z+2	; 0x02
    1e54:	93 81       	ldd	r25, Z+3	; 0x03
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	44 f4       	brge	.+16     	; 0x1e76 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1e66:	fe 01       	movw	r30, r28
    1e68:	e5 5b       	subi	r30, 0xB5	; 181
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
    1e74:	64 c0       	rjmp	.+200    	; 0x1f3e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1e76:	fe 01       	movw	r30, r28
    1e78:	e3 5b       	subi	r30, 0xB3	; 179
    1e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7c:	60 81       	ld	r22, Z
    1e7e:	71 81       	ldd	r23, Z+1	; 0x01
    1e80:	82 81       	ldd	r24, Z+2	; 0x02
    1e82:	93 81       	ldd	r25, Z+3	; 0x03
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	3f ef       	ldi	r19, 0xFF	; 255
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	57 e4       	ldi	r21, 0x47	; 71
    1e8c:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	0c f0       	brlt	.+2      	; 0x1e96 <LCD_sendCommand+0x22e>
    1e94:	43 c0       	rjmp	.+134    	; 0x1f1c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e96:	fe 01       	movw	r30, r28
    1e98:	ef 5a       	subi	r30, 0xAF	; 175
    1e9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e9c:	60 81       	ld	r22, Z
    1e9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ea0:	82 81       	ldd	r24, Z+2	; 0x02
    1ea2:	93 81       	ldd	r25, Z+3	; 0x03
    1ea4:	20 e0       	ldi	r18, 0x00	; 0
    1ea6:	30 e0       	ldi	r19, 0x00	; 0
    1ea8:	40 e2       	ldi	r20, 0x20	; 32
    1eaa:	51 e4       	ldi	r21, 0x41	; 65
    1eac:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	8e 01       	movw	r16, r28
    1eb6:	05 5b       	subi	r16, 0xB5	; 181
    1eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	f8 01       	movw	r30, r16
    1ec8:	91 83       	std	Z+1, r25	; 0x01
    1eca:	80 83       	st	Z, r24
    1ecc:	1f c0       	rjmp	.+62     	; 0x1f0c <LCD_sendCommand+0x2a4>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e7 5b       	subi	r30, 0xB7	; 183
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	89 e1       	ldi	r24, 0x19	; 25
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	fe 01       	movw	r30, r28
    1ede:	e7 5b       	subi	r30, 0xB7	; 183
    1ee0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee2:	80 81       	ld	r24, Z
    1ee4:	91 81       	ldd	r25, Z+1	; 0x01
    1ee6:	01 97       	sbiw	r24, 0x01	; 1
    1ee8:	f1 f7       	brne	.-4      	; 0x1ee6 <LCD_sendCommand+0x27e>
    1eea:	fe 01       	movw	r30, r28
    1eec:	e7 5b       	subi	r30, 0xB7	; 183
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	91 83       	std	Z+1, r25	; 0x01
    1ef2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef4:	de 01       	movw	r26, r28
    1ef6:	a5 5b       	subi	r26, 0xB5	; 181
    1ef8:	bf 4f       	sbci	r27, 0xFF	; 255
    1efa:	fe 01       	movw	r30, r28
    1efc:	e5 5b       	subi	r30, 0xB5	; 181
    1efe:	ff 4f       	sbci	r31, 0xFF	; 255
    1f00:	80 81       	ld	r24, Z
    1f02:	91 81       	ldd	r25, Z+1	; 0x01
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	11 96       	adiw	r26, 0x01	; 1
    1f08:	9c 93       	st	X, r25
    1f0a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e5 5b       	subi	r30, 0xB5	; 181
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	d1 f6       	brne	.-76     	; 0x1ece <LCD_sendCommand+0x266>
    1f1a:	27 c0       	rjmp	.+78     	; 0x1f6a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	05 5b       	subi	r16, 0xB5	; 181
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	fe 01       	movw	r30, r28
    1f24:	e3 5b       	subi	r30, 0xB3	; 179
    1f26:	ff 4f       	sbci	r31, 0xFF	; 255
    1f28:	60 81       	ld	r22, Z
    1f2a:	71 81       	ldd	r23, Z+1	; 0x01
    1f2c:	82 81       	ldd	r24, Z+2	; 0x02
    1f2e:	93 81       	ldd	r25, Z+3	; 0x03
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	f8 01       	movw	r30, r16
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	de 01       	movw	r26, r28
    1f40:	a9 5b       	subi	r26, 0xB9	; 185
    1f42:	bf 4f       	sbci	r27, 0xFF	; 255
    1f44:	fe 01       	movw	r30, r28
    1f46:	e5 5b       	subi	r30, 0xB5	; 181
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	8d 93       	st	X+, r24
    1f50:	9c 93       	st	X, r25
    1f52:	fe 01       	movw	r30, r28
    1f54:	e9 5b       	subi	r30, 0xB9	; 185
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	80 81       	ld	r24, Z
    1f5a:	91 81       	ldd	r25, Z+1	; 0x01
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	f1 f7       	brne	.-4      	; 0x1f5c <LCD_sendCommand+0x2f4>
    1f60:	fe 01       	movw	r30, r28
    1f62:	e9 5b       	subi	r30, 0xB9	; 185
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	91 83       	std	Z+1, r25	; 0x01
    1f68:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1f6a:	fe 01       	movw	r30, r28
    1f6c:	ed 59       	subi	r30, 0x9D	; 157
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	80 81       	ld	r24, Z
    1f72:	88 2f       	mov	r24, r24
    1f74:	90 e0       	ldi	r25, 0x00	; 0
    1f76:	80 71       	andi	r24, 0x10	; 16
    1f78:	90 70       	andi	r25, 0x00	; 0
    1f7a:	95 95       	asr	r25
    1f7c:	87 95       	ror	r24
    1f7e:	95 95       	asr	r25
    1f80:	87 95       	ror	r24
    1f82:	95 95       	asr	r25
    1f84:	87 95       	ror	r24
    1f86:	95 95       	asr	r25
    1f88:	87 95       	ror	r24
    1f8a:	98 2f       	mov	r25, r24
    1f8c:	82 e0       	ldi	r24, 0x02	; 2
    1f8e:	64 e0       	ldi	r22, 0x04	; 4
    1f90:	49 2f       	mov	r20, r25
    1f92:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1f96:	fe 01       	movw	r30, r28
    1f98:	ed 59       	subi	r30, 0x9D	; 157
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 2f       	mov	r24, r24
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	80 72       	andi	r24, 0x20	; 32
    1fa4:	90 70       	andi	r25, 0x00	; 0
    1fa6:	95 95       	asr	r25
    1fa8:	87 95       	ror	r24
    1faa:	95 95       	asr	r25
    1fac:	87 95       	ror	r24
    1fae:	95 95       	asr	r25
    1fb0:	87 95       	ror	r24
    1fb2:	95 95       	asr	r25
    1fb4:	87 95       	ror	r24
    1fb6:	95 95       	asr	r25
    1fb8:	87 95       	ror	r24
    1fba:	98 2f       	mov	r25, r24
    1fbc:	82 e0       	ldi	r24, 0x02	; 2
    1fbe:	65 e0       	ldi	r22, 0x05	; 5
    1fc0:	49 2f       	mov	r20, r25
    1fc2:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1fc6:	fe 01       	movw	r30, r28
    1fc8:	ed 59       	subi	r30, 0x9D	; 157
    1fca:	ff 4f       	sbci	r31, 0xFF	; 255
    1fcc:	80 81       	ld	r24, Z
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	80 74       	andi	r24, 0x40	; 64
    1fd4:	90 70       	andi	r25, 0x00	; 0
    1fd6:	08 2e       	mov	r0, r24
    1fd8:	89 2f       	mov	r24, r25
    1fda:	00 0c       	add	r0, r0
    1fdc:	88 1f       	adc	r24, r24
    1fde:	99 0b       	sbc	r25, r25
    1fe0:	00 0c       	add	r0, r0
    1fe2:	88 1f       	adc	r24, r24
    1fe4:	99 1f       	adc	r25, r25
    1fe6:	98 2f       	mov	r25, r24
    1fe8:	82 e0       	ldi	r24, 0x02	; 2
    1fea:	66 e0       	ldi	r22, 0x06	; 6
    1fec:	49 2f       	mov	r20, r25
    1fee:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	ed 59       	subi	r30, 0x9D	; 157
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	80 81       	ld	r24, Z
    1ffa:	98 2f       	mov	r25, r24
    1ffc:	99 1f       	adc	r25, r25
    1ffe:	99 27       	eor	r25, r25
    2000:	99 1f       	adc	r25, r25
    2002:	82 e0       	ldi	r24, 0x02	; 2
    2004:	67 e0       	ldi	r22, 0x07	; 7
    2006:	49 2f       	mov	r20, r25
    2008:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    200c:	fe 01       	movw	r30, r28
    200e:	ed 5b       	subi	r30, 0xBD	; 189
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e8       	ldi	r26, 0x80	; 128
    2018:	bf e3       	ldi	r27, 0x3F	; 63
    201a:	80 83       	st	Z, r24
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	a2 83       	std	Z+2, r26	; 0x02
    2020:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	8e 01       	movw	r16, r28
    2024:	01 5c       	subi	r16, 0xC1	; 193
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	fe 01       	movw	r30, r28
    202a:	ed 5b       	subi	r30, 0xBD	; 189
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a e7       	ldi	r20, 0x7A	; 122
    203c:	53 e4       	ldi	r21, 0x43	; 67
    203e:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	f8 01       	movw	r30, r16
    2048:	80 83       	st	Z, r24
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	a2 83       	std	Z+2, r26	; 0x02
    204e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2050:	fe 01       	movw	r30, r28
    2052:	ff 96       	adiw	r30, 0x3f	; 63
    2054:	60 81       	ld	r22, Z
    2056:	71 81       	ldd	r23, Z+1	; 0x01
    2058:	82 81       	ldd	r24, Z+2	; 0x02
    205a:	93 81       	ldd	r25, Z+3	; 0x03
    205c:	20 e0       	ldi	r18, 0x00	; 0
    205e:	30 e0       	ldi	r19, 0x00	; 0
    2060:	40 e8       	ldi	r20, 0x80	; 128
    2062:	5f e3       	ldi	r21, 0x3F	; 63
    2064:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2068:	88 23       	and	r24, r24
    206a:	2c f4       	brge	.+10     	; 0x2076 <LCD_sendCommand+0x40e>
		__ticks = 1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	9e af       	std	Y+62, r25	; 0x3e
    2072:	8d af       	std	Y+61, r24	; 0x3d
    2074:	46 c0       	rjmp	.+140    	; 0x2102 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2076:	fe 01       	movw	r30, r28
    2078:	ff 96       	adiw	r30, 0x3f	; 63
    207a:	60 81       	ld	r22, Z
    207c:	71 81       	ldd	r23, Z+1	; 0x01
    207e:	82 81       	ldd	r24, Z+2	; 0x02
    2080:	93 81       	ldd	r25, Z+3	; 0x03
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	3f ef       	ldi	r19, 0xFF	; 255
    2086:	4f e7       	ldi	r20, 0x7F	; 127
    2088:	57 e4       	ldi	r21, 0x47	; 71
    208a:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    208e:	18 16       	cp	r1, r24
    2090:	64 f5       	brge	.+88     	; 0x20ea <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2092:	fe 01       	movw	r30, r28
    2094:	ed 5b       	subi	r30, 0xBD	; 189
    2096:	ff 4f       	sbci	r31, 0xFF	; 255
    2098:	60 81       	ld	r22, Z
    209a:	71 81       	ldd	r23, Z+1	; 0x01
    209c:	82 81       	ldd	r24, Z+2	; 0x02
    209e:	93 81       	ldd	r25, Z+3	; 0x03
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	40 e2       	ldi	r20, 0x20	; 32
    20a6:	51 e4       	ldi	r21, 0x41	; 65
    20a8:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	9e af       	std	Y+62, r25	; 0x3e
    20be:	8d af       	std	Y+61, r24	; 0x3d
    20c0:	0f c0       	rjmp	.+30     	; 0x20e0 <LCD_sendCommand+0x478>
    20c2:	89 e1       	ldi	r24, 0x19	; 25
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	9c af       	std	Y+60, r25	; 0x3c
    20c8:	8b af       	std	Y+59, r24	; 0x3b
    20ca:	8b ad       	ldd	r24, Y+59	; 0x3b
    20cc:	9c ad       	ldd	r25, Y+60	; 0x3c
    20ce:	01 97       	sbiw	r24, 0x01	; 1
    20d0:	f1 f7       	brne	.-4      	; 0x20ce <LCD_sendCommand+0x466>
    20d2:	9c af       	std	Y+60, r25	; 0x3c
    20d4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    20d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	9e af       	std	Y+62, r25	; 0x3e
    20de:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e0:	8d ad       	ldd	r24, Y+61	; 0x3d
    20e2:	9e ad       	ldd	r25, Y+62	; 0x3e
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	69 f7       	brne	.-38     	; 0x20c2 <LCD_sendCommand+0x45a>
    20e8:	16 c0       	rjmp	.+44     	; 0x2116 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ea:	fe 01       	movw	r30, r28
    20ec:	ff 96       	adiw	r30, 0x3f	; 63
    20ee:	60 81       	ld	r22, Z
    20f0:	71 81       	ldd	r23, Z+1	; 0x01
    20f2:	82 81       	ldd	r24, Z+2	; 0x02
    20f4:	93 81       	ldd	r25, Z+3	; 0x03
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9e af       	std	Y+62, r25	; 0x3e
    2100:	8d af       	std	Y+61, r24	; 0x3d
    2102:	8d ad       	ldd	r24, Y+61	; 0x3d
    2104:	9e ad       	ldd	r25, Y+62	; 0x3e
    2106:	9a af       	std	Y+58, r25	; 0x3a
    2108:	89 af       	std	Y+57, r24	; 0x39
    210a:	89 ad       	ldd	r24, Y+57	; 0x39
    210c:	9a ad       	ldd	r25, Y+58	; 0x3a
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_sendCommand+0x4a6>
    2112:	9a af       	std	Y+58, r25	; 0x3a
    2114:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2116:	82 e0       	ldi	r24, 0x02	; 2
    2118:	61 e0       	ldi	r22, 0x01	; 1
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e8       	ldi	r26, 0x80	; 128
    2126:	bf e3       	ldi	r27, 0x3F	; 63
    2128:	8d ab       	std	Y+53, r24	; 0x35
    212a:	9e ab       	std	Y+54, r25	; 0x36
    212c:	af ab       	std	Y+55, r26	; 0x37
    212e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	6d a9       	ldd	r22, Y+53	; 0x35
    2132:	7e a9       	ldd	r23, Y+54	; 0x36
    2134:	8f a9       	ldd	r24, Y+55	; 0x37
    2136:	98 ad       	ldd	r25, Y+56	; 0x38
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a e7       	ldi	r20, 0x7A	; 122
    213e:	53 e4       	ldi	r21, 0x43	; 67
    2140:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	89 ab       	std	Y+49, r24	; 0x31
    214a:	9a ab       	std	Y+50, r25	; 0x32
    214c:	ab ab       	std	Y+51, r26	; 0x33
    214e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2150:	69 a9       	ldd	r22, Y+49	; 0x31
    2152:	7a a9       	ldd	r23, Y+50	; 0x32
    2154:	8b a9       	ldd	r24, Y+51	; 0x33
    2156:	9c a9       	ldd	r25, Y+52	; 0x34
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 ab       	std	Y+48, r25	; 0x30
    216e:	8f a7       	std	Y+47, r24	; 0x2f
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2172:	69 a9       	ldd	r22, Y+49	; 0x31
    2174:	7a a9       	ldd	r23, Y+50	; 0x32
    2176:	8b a9       	ldd	r24, Y+51	; 0x33
    2178:	9c a9       	ldd	r25, Y+52	; 0x34
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	6d a9       	ldd	r22, Y+53	; 0x35
    218c:	7e a9       	ldd	r23, Y+54	; 0x36
    218e:	8f a9       	ldd	r24, Y+55	; 0x37
    2190:	98 ad       	ldd	r25, Y+56	; 0x38
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	98 ab       	std	Y+48, r25	; 0x30
    21b0:	8f a7       	std	Y+47, r24	; 0x2f
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <LCD_sendCommand+0x56a>
    21b4:	89 e1       	ldi	r24, 0x19	; 25
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9e a7       	std	Y+46, r25	; 0x2e
    21ba:	8d a7       	std	Y+45, r24	; 0x2d
    21bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    21be:	9e a5       	ldd	r25, Y+46	; 0x2e
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <LCD_sendCommand+0x558>
    21c4:	9e a7       	std	Y+46, r25	; 0x2e
    21c6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    21ca:	98 a9       	ldd	r25, Y+48	; 0x30
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	98 ab       	std	Y+48, r25	; 0x30
    21d0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    21d4:	98 a9       	ldd	r25, Y+48	; 0x30
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <LCD_sendCommand+0x54c>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	69 a9       	ldd	r22, Y+49	; 0x31
    21de:	7a a9       	ldd	r23, Y+50	; 0x32
    21e0:	8b a9       	ldd	r24, Y+51	; 0x33
    21e2:	9c a9       	ldd	r25, Y+52	; 0x34
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	98 ab       	std	Y+48, r25	; 0x30
    21ee:	8f a7       	std	Y+47, r24	; 0x2f
    21f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    21f2:	98 a9       	ldd	r25, Y+48	; 0x30
    21f4:	9c a7       	std	Y+44, r25	; 0x2c
    21f6:	8b a7       	std	Y+43, r24	; 0x2b
    21f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    21fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_sendCommand+0x594>
    2200:	9c a7       	std	Y+44, r25	; 0x2c
    2202:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2204:	82 e0       	ldi	r24, 0x02	; 2
    2206:	61 e0       	ldi	r22, 0x01	; 1
    2208:	41 e0       	ldi	r20, 0x01	; 1
    220a:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    220e:	80 e0       	ldi	r24, 0x00	; 0
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	a0 e8       	ldi	r26, 0x80	; 128
    2214:	bf e3       	ldi	r27, 0x3F	; 63
    2216:	8f a3       	std	Y+39, r24	; 0x27
    2218:	98 a7       	std	Y+40, r25	; 0x28
    221a:	a9 a7       	std	Y+41, r26	; 0x29
    221c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    221e:	6f a1       	ldd	r22, Y+39	; 0x27
    2220:	78 a5       	ldd	r23, Y+40	; 0x28
    2222:	89 a5       	ldd	r24, Y+41	; 0x29
    2224:	9a a5       	ldd	r25, Y+42	; 0x2a
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4a e7       	ldi	r20, 0x7A	; 122
    222c:	53 e4       	ldi	r21, 0x43	; 67
    222e:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	8b a3       	std	Y+35, r24	; 0x23
    2238:	9c a3       	std	Y+36, r25	; 0x24
    223a:	ad a3       	std	Y+37, r26	; 0x25
    223c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    223e:	6b a1       	ldd	r22, Y+35	; 0x23
    2240:	7c a1       	ldd	r23, Y+36	; 0x24
    2242:	8d a1       	ldd	r24, Y+37	; 0x25
    2244:	9e a1       	ldd	r25, Y+38	; 0x26
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e8       	ldi	r20, 0x80	; 128
    224c:	5f e3       	ldi	r21, 0x3F	; 63
    224e:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2252:	88 23       	and	r24, r24
    2254:	2c f4       	brge	.+10     	; 0x2260 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	3f c0       	rjmp	.+126    	; 0x22de <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2260:	6b a1       	ldd	r22, Y+35	; 0x23
    2262:	7c a1       	ldd	r23, Y+36	; 0x24
    2264:	8d a1       	ldd	r24, Y+37	; 0x25
    2266:	9e a1       	ldd	r25, Y+38	; 0x26
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	3f ef       	ldi	r19, 0xFF	; 255
    226c:	4f e7       	ldi	r20, 0x7F	; 127
    226e:	57 e4       	ldi	r21, 0x47	; 71
    2270:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2274:	18 16       	cp	r1, r24
    2276:	4c f5       	brge	.+82     	; 0x22ca <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2278:	6f a1       	ldd	r22, Y+39	; 0x27
    227a:	78 a5       	ldd	r23, Y+40	; 0x28
    227c:	89 a5       	ldd	r24, Y+41	; 0x29
    227e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2280:	20 e0       	ldi	r18, 0x00	; 0
    2282:	30 e0       	ldi	r19, 0x00	; 0
    2284:	40 e2       	ldi	r20, 0x20	; 32
    2286:	51 e4       	ldi	r21, 0x41	; 65
    2288:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    228c:	dc 01       	movw	r26, r24
    228e:	cb 01       	movw	r24, r22
    2290:	bc 01       	movw	r22, r24
    2292:	cd 01       	movw	r24, r26
    2294:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	9a a3       	std	Y+34, r25	; 0x22
    229e:	89 a3       	std	Y+33, r24	; 0x21
    22a0:	0f c0       	rjmp	.+30     	; 0x22c0 <LCD_sendCommand+0x658>
    22a2:	89 e1       	ldi	r24, 0x19	; 25
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	98 a3       	std	Y+32, r25	; 0x20
    22a8:	8f 8f       	std	Y+31, r24	; 0x1f
    22aa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22ac:	98 a1       	ldd	r25, Y+32	; 0x20
    22ae:	01 97       	sbiw	r24, 0x01	; 1
    22b0:	f1 f7       	brne	.-4      	; 0x22ae <LCD_sendCommand+0x646>
    22b2:	98 a3       	std	Y+32, r25	; 0x20
    22b4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b6:	89 a1       	ldd	r24, Y+33	; 0x21
    22b8:	9a a1       	ldd	r25, Y+34	; 0x22
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	9a a3       	std	Y+34, r25	; 0x22
    22be:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c0:	89 a1       	ldd	r24, Y+33	; 0x21
    22c2:	9a a1       	ldd	r25, Y+34	; 0x22
    22c4:	00 97       	sbiw	r24, 0x00	; 0
    22c6:	69 f7       	brne	.-38     	; 0x22a2 <LCD_sendCommand+0x63a>
    22c8:	14 c0       	rjmp	.+40     	; 0x22f2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ca:	6b a1       	ldd	r22, Y+35	; 0x23
    22cc:	7c a1       	ldd	r23, Y+36	; 0x24
    22ce:	8d a1       	ldd	r24, Y+37	; 0x25
    22d0:	9e a1       	ldd	r25, Y+38	; 0x26
    22d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	9a a3       	std	Y+34, r25	; 0x22
    22dc:	89 a3       	std	Y+33, r24	; 0x21
    22de:	89 a1       	ldd	r24, Y+33	; 0x21
    22e0:	9a a1       	ldd	r25, Y+34	; 0x22
    22e2:	9e 8f       	std	Y+30, r25	; 0x1e
    22e4:	8d 8f       	std	Y+29, r24	; 0x1d
    22e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	f1 f7       	brne	.-4      	; 0x22ea <LCD_sendCommand+0x682>
    22ee:	9e 8f       	std	Y+30, r25	; 0x1e
    22f0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    22f2:	fe 01       	movw	r30, r28
    22f4:	ed 59       	subi	r30, 0x9D	; 157
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	98 2f       	mov	r25, r24
    22fc:	91 70       	andi	r25, 0x01	; 1
    22fe:	82 e0       	ldi	r24, 0x02	; 2
    2300:	64 e0       	ldi	r22, 0x04	; 4
    2302:	49 2f       	mov	r20, r25
    2304:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2308:	fe 01       	movw	r30, r28
    230a:	ed 59       	subi	r30, 0x9D	; 157
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	82 70       	andi	r24, 0x02	; 2
    2316:	90 70       	andi	r25, 0x00	; 0
    2318:	95 95       	asr	r25
    231a:	87 95       	ror	r24
    231c:	98 2f       	mov	r25, r24
    231e:	82 e0       	ldi	r24, 0x02	; 2
    2320:	65 e0       	ldi	r22, 0x05	; 5
    2322:	49 2f       	mov	r20, r25
    2324:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2328:	fe 01       	movw	r30, r28
    232a:	ed 59       	subi	r30, 0x9D	; 157
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	80 81       	ld	r24, Z
    2330:	88 2f       	mov	r24, r24
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	84 70       	andi	r24, 0x04	; 4
    2336:	90 70       	andi	r25, 0x00	; 0
    2338:	95 95       	asr	r25
    233a:	87 95       	ror	r24
    233c:	95 95       	asr	r25
    233e:	87 95       	ror	r24
    2340:	98 2f       	mov	r25, r24
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	66 e0       	ldi	r22, 0x06	; 6
    2346:	49 2f       	mov	r20, r25
    2348:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    234c:	fe 01       	movw	r30, r28
    234e:	ed 59       	subi	r30, 0x9D	; 157
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 81       	ld	r24, Z
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	88 70       	andi	r24, 0x08	; 8
    235a:	90 70       	andi	r25, 0x00	; 0
    235c:	95 95       	asr	r25
    235e:	87 95       	ror	r24
    2360:	95 95       	asr	r25
    2362:	87 95       	ror	r24
    2364:	95 95       	asr	r25
    2366:	87 95       	ror	r24
    2368:	98 2f       	mov	r25, r24
    236a:	82 e0       	ldi	r24, 0x02	; 2
    236c:	67 e0       	ldi	r22, 0x07	; 7
    236e:	49 2f       	mov	r20, r25
    2370:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e8       	ldi	r26, 0x80	; 128
    237a:	bf e3       	ldi	r27, 0x3F	; 63
    237c:	89 8f       	std	Y+25, r24	; 0x19
    237e:	9a 8f       	std	Y+26, r25	; 0x1a
    2380:	ab 8f       	std	Y+27, r26	; 0x1b
    2382:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	69 8d       	ldd	r22, Y+25	; 0x19
    2386:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a e7       	ldi	r20, 0x7A	; 122
    2392:	53 e4       	ldi	r21, 0x43	; 67
    2394:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8d 8b       	std	Y+21, r24	; 0x15
    239e:	9e 8b       	std	Y+22, r25	; 0x16
    23a0:	af 8b       	std	Y+23, r26	; 0x17
    23a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23a4:	6d 89       	ldd	r22, Y+21	; 0x15
    23a6:	7e 89       	ldd	r23, Y+22	; 0x16
    23a8:	8f 89       	ldd	r24, Y+23	; 0x17
    23aa:	98 8d       	ldd	r25, Y+24	; 0x18
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9c 8b       	std	Y+20, r25	; 0x14
    23c2:	8b 8b       	std	Y+19, r24	; 0x13
    23c4:	3f c0       	rjmp	.+126    	; 0x2444 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    23c6:	6d 89       	ldd	r22, Y+21	; 0x15
    23c8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ca:	8f 89       	ldd	r24, Y+23	; 0x17
    23cc:	98 8d       	ldd	r25, Y+24	; 0x18
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	4c f5       	brge	.+82     	; 0x2430 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23de:	69 8d       	ldd	r22, Y+25	; 0x19
    23e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9c 8b       	std	Y+20, r25	; 0x14
    2404:	8b 8b       	std	Y+19, r24	; 0x13
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <LCD_sendCommand+0x7be>
    2408:	89 e1       	ldi	r24, 0x19	; 25
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9a 8b       	std	Y+18, r25	; 0x12
    240e:	89 8b       	std	Y+17, r24	; 0x11
    2410:	89 89       	ldd	r24, Y+17	; 0x11
    2412:	9a 89       	ldd	r25, Y+18	; 0x12
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_sendCommand+0x7ac>
    2418:	9a 8b       	std	Y+18, r25	; 0x12
    241a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	8b 89       	ldd	r24, Y+19	; 0x13
    241e:	9c 89       	ldd	r25, Y+20	; 0x14
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	9c 8b       	std	Y+20, r25	; 0x14
    2424:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	8b 89       	ldd	r24, Y+19	; 0x13
    2428:	9c 89       	ldd	r25, Y+20	; 0x14
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	69 f7       	brne	.-38     	; 0x2408 <LCD_sendCommand+0x7a0>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2430:	6d 89       	ldd	r22, Y+21	; 0x15
    2432:	7e 89       	ldd	r23, Y+22	; 0x16
    2434:	8f 89       	ldd	r24, Y+23	; 0x17
    2436:	98 8d       	ldd	r25, Y+24	; 0x18
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9c 8b       	std	Y+20, r25	; 0x14
    2442:	8b 8b       	std	Y+19, r24	; 0x13
    2444:	8b 89       	ldd	r24, Y+19	; 0x13
    2446:	9c 89       	ldd	r25, Y+20	; 0x14
    2448:	98 8b       	std	Y+16, r25	; 0x10
    244a:	8f 87       	std	Y+15, r24	; 0x0f
    244c:	8f 85       	ldd	r24, Y+15	; 0x0f
    244e:	98 89       	ldd	r25, Y+16	; 0x10
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_sendCommand+0x7e8>
    2454:	98 8b       	std	Y+16, r25	; 0x10
    2456:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2458:	82 e0       	ldi	r24, 0x02	; 2
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e8       	ldi	r26, 0x80	; 128
    2468:	bf e3       	ldi	r27, 0x3F	; 63
    246a:	8b 87       	std	Y+11, r24	; 0x0b
    246c:	9c 87       	std	Y+12, r25	; 0x0c
    246e:	ad 87       	std	Y+13, r26	; 0x0d
    2470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6b 85       	ldd	r22, Y+11	; 0x0b
    2474:	7c 85       	ldd	r23, Y+12	; 0x0c
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a e7       	ldi	r20, 0x7A	; 122
    2480:	53 e4       	ldi	r21, 0x43	; 67
    2482:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8f 83       	std	Y+7, r24	; 0x07
    248c:	98 87       	std	Y+8, r25	; 0x08
    248e:	a9 87       	std	Y+9, r26	; 0x09
    2490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    24b4:	6f 81       	ldd	r22, Y+7	; 0x07
    24b6:	78 85       	ldd	r23, Y+8	; 0x08
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <LCD_sendCommand+0x8ac>
    24f6:	89 e1       	ldi	r24, 0x19	; 25
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 83       	std	Y+4, r25	; 0x04
    24fc:	8b 83       	std	Y+3, r24	; 0x03
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_sendCommand+0x89a>
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <LCD_sendCommand+0x88e>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_sendCommand+0x8d6>
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2546:	cd 59       	subi	r28, 0x9D	; 157
    2548:	df 4f       	sbci	r29, 0xFF	; 255
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	cf 91       	pop	r28
    2556:	df 91       	pop	r29
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	08 95       	ret

0000255e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    255e:	0f 93       	push	r16
    2560:	1f 93       	push	r17
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	c3 56       	subi	r28, 0x63	; 99
    256c:	d0 40       	sbci	r29, 0x00	; 0
    256e:	0f b6       	in	r0, 0x3f	; 63
    2570:	f8 94       	cli
    2572:	de bf       	out	0x3e, r29	; 62
    2574:	0f be       	out	0x3f, r0	; 63
    2576:	cd bf       	out	0x3d, r28	; 61
    2578:	fe 01       	movw	r30, r28
    257a:	ed 59       	subi	r30, 0x9D	; 157
    257c:	ff 4f       	sbci	r31, 0xFF	; 255
    257e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2580:	82 e0       	ldi	r24, 0x02	; 2
    2582:	60 e0       	ldi	r22, 0x00	; 0
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    258a:	fe 01       	movw	r30, r28
    258c:	e1 5a       	subi	r30, 0xA1	; 161
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e8       	ldi	r26, 0x80	; 128
    2596:	bf e3       	ldi	r27, 0x3F	; 63
    2598:	80 83       	st	Z, r24
    259a:	91 83       	std	Z+1, r25	; 0x01
    259c:	a2 83       	std	Z+2, r26	; 0x02
    259e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a0:	8e 01       	movw	r16, r28
    25a2:	05 5a       	subi	r16, 0xA5	; 165
    25a4:	1f 4f       	sbci	r17, 0xFF	; 255
    25a6:	fe 01       	movw	r30, r28
    25a8:	e1 5a       	subi	r30, 0xA1	; 161
    25aa:	ff 4f       	sbci	r31, 0xFF	; 255
    25ac:	60 81       	ld	r22, Z
    25ae:	71 81       	ldd	r23, Z+1	; 0x01
    25b0:	82 81       	ldd	r24, Z+2	; 0x02
    25b2:	93 81       	ldd	r25, Z+3	; 0x03
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	4a e7       	ldi	r20, 0x7A	; 122
    25ba:	53 e4       	ldi	r21, 0x43	; 67
    25bc:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    25c0:	dc 01       	movw	r26, r24
    25c2:	cb 01       	movw	r24, r22
    25c4:	f8 01       	movw	r30, r16
    25c6:	80 83       	st	Z, r24
    25c8:	91 83       	std	Z+1, r25	; 0x01
    25ca:	a2 83       	std	Z+2, r26	; 0x02
    25cc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25ce:	fe 01       	movw	r30, r28
    25d0:	e5 5a       	subi	r30, 0xA5	; 165
    25d2:	ff 4f       	sbci	r31, 0xFF	; 255
    25d4:	60 81       	ld	r22, Z
    25d6:	71 81       	ldd	r23, Z+1	; 0x01
    25d8:	82 81       	ldd	r24, Z+2	; 0x02
    25da:	93 81       	ldd	r25, Z+3	; 0x03
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	40 e8       	ldi	r20, 0x80	; 128
    25e2:	5f e3       	ldi	r21, 0x3F	; 63
    25e4:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    25e8:	88 23       	and	r24, r24
    25ea:	44 f4       	brge	.+16     	; 0x25fc <LCD_displayCharacter+0x9e>
		__ticks = 1;
    25ec:	fe 01       	movw	r30, r28
    25ee:	e7 5a       	subi	r30, 0xA7	; 167
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	91 83       	std	Z+1, r25	; 0x01
    25f8:	80 83       	st	Z, r24
    25fa:	64 c0       	rjmp	.+200    	; 0x26c4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    25fc:	fe 01       	movw	r30, r28
    25fe:	e5 5a       	subi	r30, 0xA5	; 165
    2600:	ff 4f       	sbci	r31, 0xFF	; 255
    2602:	60 81       	ld	r22, Z
    2604:	71 81       	ldd	r23, Z+1	; 0x01
    2606:	82 81       	ldd	r24, Z+2	; 0x02
    2608:	93 81       	ldd	r25, Z+3	; 0x03
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	0c f0       	brlt	.+2      	; 0x261c <LCD_displayCharacter+0xbe>
    261a:	43 c0       	rjmp	.+134    	; 0x26a2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	fe 01       	movw	r30, r28
    261e:	e1 5a       	subi	r30, 0xA1	; 161
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	51 e4       	ldi	r21, 0x41	; 65
    2632:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	8e 01       	movw	r16, r28
    263c:	07 5a       	subi	r16, 0xA7	; 167
    263e:	1f 4f       	sbci	r17, 0xFF	; 255
    2640:	bc 01       	movw	r22, r24
    2642:	cd 01       	movw	r24, r26
    2644:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2648:	dc 01       	movw	r26, r24
    264a:	cb 01       	movw	r24, r22
    264c:	f8 01       	movw	r30, r16
    264e:	91 83       	std	Z+1, r25	; 0x01
    2650:	80 83       	st	Z, r24
    2652:	1f c0       	rjmp	.+62     	; 0x2692 <LCD_displayCharacter+0x134>
    2654:	fe 01       	movw	r30, r28
    2656:	e9 5a       	subi	r30, 0xA9	; 169
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	89 e1       	ldi	r24, 0x19	; 25
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24
    2662:	fe 01       	movw	r30, r28
    2664:	e9 5a       	subi	r30, 0xA9	; 169
    2666:	ff 4f       	sbci	r31, 0xFF	; 255
    2668:	80 81       	ld	r24, Z
    266a:	91 81       	ldd	r25, Z+1	; 0x01
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_displayCharacter+0x10e>
    2670:	fe 01       	movw	r30, r28
    2672:	e9 5a       	subi	r30, 0xA9	; 169
    2674:	ff 4f       	sbci	r31, 0xFF	; 255
    2676:	91 83       	std	Z+1, r25	; 0x01
    2678:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267a:	de 01       	movw	r26, r28
    267c:	a7 5a       	subi	r26, 0xA7	; 167
    267e:	bf 4f       	sbci	r27, 0xFF	; 255
    2680:	fe 01       	movw	r30, r28
    2682:	e7 5a       	subi	r30, 0xA7	; 167
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	91 81       	ldd	r25, Z+1	; 0x01
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	11 96       	adiw	r26, 0x01	; 1
    268e:	9c 93       	st	X, r25
    2690:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2692:	fe 01       	movw	r30, r28
    2694:	e7 5a       	subi	r30, 0xA7	; 167
    2696:	ff 4f       	sbci	r31, 0xFF	; 255
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	00 97       	sbiw	r24, 0x00	; 0
    269e:	d1 f6       	brne	.-76     	; 0x2654 <LCD_displayCharacter+0xf6>
    26a0:	27 c0       	rjmp	.+78     	; 0x26f0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a2:	8e 01       	movw	r16, r28
    26a4:	07 5a       	subi	r16, 0xA7	; 167
    26a6:	1f 4f       	sbci	r17, 0xFF	; 255
    26a8:	fe 01       	movw	r30, r28
    26aa:	e5 5a       	subi	r30, 0xA5	; 165
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	60 81       	ld	r22, Z
    26b0:	71 81       	ldd	r23, Z+1	; 0x01
    26b2:	82 81       	ldd	r24, Z+2	; 0x02
    26b4:	93 81       	ldd	r25, Z+3	; 0x03
    26b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ba:	dc 01       	movw	r26, r24
    26bc:	cb 01       	movw	r24, r22
    26be:	f8 01       	movw	r30, r16
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	de 01       	movw	r26, r28
    26c6:	ab 5a       	subi	r26, 0xAB	; 171
    26c8:	bf 4f       	sbci	r27, 0xFF	; 255
    26ca:	fe 01       	movw	r30, r28
    26cc:	e7 5a       	subi	r30, 0xA7	; 167
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	8d 93       	st	X+, r24
    26d6:	9c 93       	st	X, r25
    26d8:	fe 01       	movw	r30, r28
    26da:	eb 5a       	subi	r30, 0xAB	; 171
    26dc:	ff 4f       	sbci	r31, 0xFF	; 255
    26de:	80 81       	ld	r24, Z
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_displayCharacter+0x184>
    26e6:	fe 01       	movw	r30, r28
    26e8:	eb 5a       	subi	r30, 0xAB	; 171
    26ea:	ff 4f       	sbci	r31, 0xFF	; 255
    26ec:	91 83       	std	Z+1, r25	; 0x01
    26ee:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	41 e0       	ldi	r20, 0x01	; 1
    26f6:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    26fa:	fe 01       	movw	r30, r28
    26fc:	ef 5a       	subi	r30, 0xAF	; 175
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	a0 e8       	ldi	r26, 0x80	; 128
    2706:	bf e3       	ldi	r27, 0x3F	; 63
    2708:	80 83       	st	Z, r24
    270a:	91 83       	std	Z+1, r25	; 0x01
    270c:	a2 83       	std	Z+2, r26	; 0x02
    270e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2710:	8e 01       	movw	r16, r28
    2712:	03 5b       	subi	r16, 0xB3	; 179
    2714:	1f 4f       	sbci	r17, 0xFF	; 255
    2716:	fe 01       	movw	r30, r28
    2718:	ef 5a       	subi	r30, 0xAF	; 175
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	60 81       	ld	r22, Z
    271e:	71 81       	ldd	r23, Z+1	; 0x01
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	4a e7       	ldi	r20, 0x7A	; 122
    272a:	53 e4       	ldi	r21, 0x43	; 67
    272c:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	f8 01       	movw	r30, r16
    2736:	80 83       	st	Z, r24
    2738:	91 83       	std	Z+1, r25	; 0x01
    273a:	a2 83       	std	Z+2, r26	; 0x02
    273c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    273e:	fe 01       	movw	r30, r28
    2740:	e3 5b       	subi	r30, 0xB3	; 179
    2742:	ff 4f       	sbci	r31, 0xFF	; 255
    2744:	60 81       	ld	r22, Z
    2746:	71 81       	ldd	r23, Z+1	; 0x01
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	93 81       	ldd	r25, Z+3	; 0x03
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	30 e0       	ldi	r19, 0x00	; 0
    2750:	40 e8       	ldi	r20, 0x80	; 128
    2752:	5f e3       	ldi	r21, 0x3F	; 63
    2754:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2758:	88 23       	and	r24, r24
    275a:	44 f4       	brge	.+16     	; 0x276c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    275c:	fe 01       	movw	r30, r28
    275e:	e5 5b       	subi	r30, 0xB5	; 181
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
    276a:	64 c0       	rjmp	.+200    	; 0x2834 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    276c:	fe 01       	movw	r30, r28
    276e:	e3 5b       	subi	r30, 0xB3	; 179
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	60 81       	ld	r22, Z
    2774:	71 81       	ldd	r23, Z+1	; 0x01
    2776:	82 81       	ldd	r24, Z+2	; 0x02
    2778:	93 81       	ldd	r25, Z+3	; 0x03
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	3f ef       	ldi	r19, 0xFF	; 255
    277e:	4f e7       	ldi	r20, 0x7F	; 127
    2780:	57 e4       	ldi	r21, 0x47	; 71
    2782:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2786:	18 16       	cp	r1, r24
    2788:	0c f0       	brlt	.+2      	; 0x278c <LCD_displayCharacter+0x22e>
    278a:	43 c0       	rjmp	.+134    	; 0x2812 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    278c:	fe 01       	movw	r30, r28
    278e:	ef 5a       	subi	r30, 0xAF	; 175
    2790:	ff 4f       	sbci	r31, 0xFF	; 255
    2792:	60 81       	ld	r22, Z
    2794:	71 81       	ldd	r23, Z+1	; 0x01
    2796:	82 81       	ldd	r24, Z+2	; 0x02
    2798:	93 81       	ldd	r25, Z+3	; 0x03
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e2       	ldi	r20, 0x20	; 32
    27a0:	51 e4       	ldi	r21, 0x41	; 65
    27a2:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    27a6:	dc 01       	movw	r26, r24
    27a8:	cb 01       	movw	r24, r22
    27aa:	8e 01       	movw	r16, r28
    27ac:	05 5b       	subi	r16, 0xB5	; 181
    27ae:	1f 4f       	sbci	r17, 0xFF	; 255
    27b0:	bc 01       	movw	r22, r24
    27b2:	cd 01       	movw	r24, r26
    27b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b8:	dc 01       	movw	r26, r24
    27ba:	cb 01       	movw	r24, r22
    27bc:	f8 01       	movw	r30, r16
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
    27c2:	1f c0       	rjmp	.+62     	; 0x2802 <LCD_displayCharacter+0x2a4>
    27c4:	fe 01       	movw	r30, r28
    27c6:	e7 5b       	subi	r30, 0xB7	; 183
    27c8:	ff 4f       	sbci	r31, 0xFF	; 255
    27ca:	89 e1       	ldi	r24, 0x19	; 25
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
    27d2:	fe 01       	movw	r30, r28
    27d4:	e7 5b       	subi	r30, 0xB7	; 183
    27d6:	ff 4f       	sbci	r31, 0xFF	; 255
    27d8:	80 81       	ld	r24, Z
    27da:	91 81       	ldd	r25, Z+1	; 0x01
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	f1 f7       	brne	.-4      	; 0x27dc <LCD_displayCharacter+0x27e>
    27e0:	fe 01       	movw	r30, r28
    27e2:	e7 5b       	subi	r30, 0xB7	; 183
    27e4:	ff 4f       	sbci	r31, 0xFF	; 255
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ea:	de 01       	movw	r26, r28
    27ec:	a5 5b       	subi	r26, 0xB5	; 181
    27ee:	bf 4f       	sbci	r27, 0xFF	; 255
    27f0:	fe 01       	movw	r30, r28
    27f2:	e5 5b       	subi	r30, 0xB5	; 181
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	11 96       	adiw	r26, 0x01	; 1
    27fe:	9c 93       	st	X, r25
    2800:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2802:	fe 01       	movw	r30, r28
    2804:	e5 5b       	subi	r30, 0xB5	; 181
    2806:	ff 4f       	sbci	r31, 0xFF	; 255
    2808:	80 81       	ld	r24, Z
    280a:	91 81       	ldd	r25, Z+1	; 0x01
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	d1 f6       	brne	.-76     	; 0x27c4 <LCD_displayCharacter+0x266>
    2810:	27 c0       	rjmp	.+78     	; 0x2860 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2812:	8e 01       	movw	r16, r28
    2814:	05 5b       	subi	r16, 0xB5	; 181
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
    2818:	fe 01       	movw	r30, r28
    281a:	e3 5b       	subi	r30, 0xB3	; 179
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	60 81       	ld	r22, Z
    2820:	71 81       	ldd	r23, Z+1	; 0x01
    2822:	82 81       	ldd	r24, Z+2	; 0x02
    2824:	93 81       	ldd	r25, Z+3	; 0x03
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	f8 01       	movw	r30, r16
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	80 83       	st	Z, r24
    2834:	de 01       	movw	r26, r28
    2836:	a9 5b       	subi	r26, 0xB9	; 185
    2838:	bf 4f       	sbci	r27, 0xFF	; 255
    283a:	fe 01       	movw	r30, r28
    283c:	e5 5b       	subi	r30, 0xB5	; 181
    283e:	ff 4f       	sbci	r31, 0xFF	; 255
    2840:	80 81       	ld	r24, Z
    2842:	91 81       	ldd	r25, Z+1	; 0x01
    2844:	8d 93       	st	X+, r24
    2846:	9c 93       	st	X, r25
    2848:	fe 01       	movw	r30, r28
    284a:	e9 5b       	subi	r30, 0xB9	; 185
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	91 81       	ldd	r25, Z+1	; 0x01
    2852:	01 97       	sbiw	r24, 0x01	; 1
    2854:	f1 f7       	brne	.-4      	; 0x2852 <LCD_displayCharacter+0x2f4>
    2856:	fe 01       	movw	r30, r28
    2858:	e9 5b       	subi	r30, 0xB9	; 185
    285a:	ff 4f       	sbci	r31, 0xFF	; 255
    285c:	91 83       	std	Z+1, r25	; 0x01
    285e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2860:	fe 01       	movw	r30, r28
    2862:	ed 59       	subi	r30, 0x9D	; 157
    2864:	ff 4f       	sbci	r31, 0xFF	; 255
    2866:	80 81       	ld	r24, Z
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	80 71       	andi	r24, 0x10	; 16
    286e:	90 70       	andi	r25, 0x00	; 0
    2870:	95 95       	asr	r25
    2872:	87 95       	ror	r24
    2874:	95 95       	asr	r25
    2876:	87 95       	ror	r24
    2878:	95 95       	asr	r25
    287a:	87 95       	ror	r24
    287c:	95 95       	asr	r25
    287e:	87 95       	ror	r24
    2880:	98 2f       	mov	r25, r24
    2882:	82 e0       	ldi	r24, 0x02	; 2
    2884:	64 e0       	ldi	r22, 0x04	; 4
    2886:	49 2f       	mov	r20, r25
    2888:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    288c:	fe 01       	movw	r30, r28
    288e:	ed 59       	subi	r30, 0x9D	; 157
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	80 72       	andi	r24, 0x20	; 32
    289a:	90 70       	andi	r25, 0x00	; 0
    289c:	95 95       	asr	r25
    289e:	87 95       	ror	r24
    28a0:	95 95       	asr	r25
    28a2:	87 95       	ror	r24
    28a4:	95 95       	asr	r25
    28a6:	87 95       	ror	r24
    28a8:	95 95       	asr	r25
    28aa:	87 95       	ror	r24
    28ac:	95 95       	asr	r25
    28ae:	87 95       	ror	r24
    28b0:	98 2f       	mov	r25, r24
    28b2:	82 e0       	ldi	r24, 0x02	; 2
    28b4:	65 e0       	ldi	r22, 0x05	; 5
    28b6:	49 2f       	mov	r20, r25
    28b8:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    28bc:	fe 01       	movw	r30, r28
    28be:	ed 59       	subi	r30, 0x9D	; 157
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	80 81       	ld	r24, Z
    28c4:	88 2f       	mov	r24, r24
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	80 74       	andi	r24, 0x40	; 64
    28ca:	90 70       	andi	r25, 0x00	; 0
    28cc:	08 2e       	mov	r0, r24
    28ce:	89 2f       	mov	r24, r25
    28d0:	00 0c       	add	r0, r0
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 0b       	sbc	r25, r25
    28d6:	00 0c       	add	r0, r0
    28d8:	88 1f       	adc	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	98 2f       	mov	r25, r24
    28de:	82 e0       	ldi	r24, 0x02	; 2
    28e0:	66 e0       	ldi	r22, 0x06	; 6
    28e2:	49 2f       	mov	r20, r25
    28e4:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    28e8:	fe 01       	movw	r30, r28
    28ea:	ed 59       	subi	r30, 0x9D	; 157
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	80 81       	ld	r24, Z
    28f0:	98 2f       	mov	r25, r24
    28f2:	99 1f       	adc	r25, r25
    28f4:	99 27       	eor	r25, r25
    28f6:	99 1f       	adc	r25, r25
    28f8:	82 e0       	ldi	r24, 0x02	; 2
    28fa:	67 e0       	ldi	r22, 0x07	; 7
    28fc:	49 2f       	mov	r20, r25
    28fe:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2902:	fe 01       	movw	r30, r28
    2904:	ed 5b       	subi	r30, 0xBD	; 189
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 e8       	ldi	r26, 0x80	; 128
    290e:	bf e3       	ldi	r27, 0x3F	; 63
    2910:	80 83       	st	Z, r24
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	a2 83       	std	Z+2, r26	; 0x02
    2916:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	8e 01       	movw	r16, r28
    291a:	01 5c       	subi	r16, 0xC1	; 193
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	fe 01       	movw	r30, r28
    2920:	ed 5b       	subi	r30, 0xBD	; 189
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a e7       	ldi	r20, 0x7A	; 122
    2932:	53 e4       	ldi	r21, 0x43	; 67
    2934:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	f8 01       	movw	r30, r16
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2946:	fe 01       	movw	r30, r28
    2948:	ff 96       	adiw	r30, 0x3f	; 63
    294a:	60 81       	ld	r22, Z
    294c:	71 81       	ldd	r23, Z+1	; 0x01
    294e:	82 81       	ldd	r24, Z+2	; 0x02
    2950:	93 81       	ldd	r25, Z+3	; 0x03
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e8       	ldi	r20, 0x80	; 128
    2958:	5f e3       	ldi	r21, 0x3F	; 63
    295a:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    295e:	88 23       	and	r24, r24
    2960:	2c f4       	brge	.+10     	; 0x296c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	9e af       	std	Y+62, r25	; 0x3e
    2968:	8d af       	std	Y+61, r24	; 0x3d
    296a:	46 c0       	rjmp	.+140    	; 0x29f8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    296c:	fe 01       	movw	r30, r28
    296e:	ff 96       	adiw	r30, 0x3f	; 63
    2970:	60 81       	ld	r22, Z
    2972:	71 81       	ldd	r23, Z+1	; 0x01
    2974:	82 81       	ldd	r24, Z+2	; 0x02
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	20 e0       	ldi	r18, 0x00	; 0
    297a:	3f ef       	ldi	r19, 0xFF	; 255
    297c:	4f e7       	ldi	r20, 0x7F	; 127
    297e:	57 e4       	ldi	r21, 0x47	; 71
    2980:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2984:	18 16       	cp	r1, r24
    2986:	64 f5       	brge	.+88     	; 0x29e0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2988:	fe 01       	movw	r30, r28
    298a:	ed 5b       	subi	r30, 0xBD	; 189
    298c:	ff 4f       	sbci	r31, 0xFF	; 255
    298e:	60 81       	ld	r22, Z
    2990:	71 81       	ldd	r23, Z+1	; 0x01
    2992:	82 81       	ldd	r24, Z+2	; 0x02
    2994:	93 81       	ldd	r25, Z+3	; 0x03
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	40 e2       	ldi	r20, 0x20	; 32
    299c:	51 e4       	ldi	r21, 0x41	; 65
    299e:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	bc 01       	movw	r22, r24
    29a8:	cd 01       	movw	r24, r26
    29aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	9e af       	std	Y+62, r25	; 0x3e
    29b4:	8d af       	std	Y+61, r24	; 0x3d
    29b6:	0f c0       	rjmp	.+30     	; 0x29d6 <LCD_displayCharacter+0x478>
    29b8:	89 e1       	ldi	r24, 0x19	; 25
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	9c af       	std	Y+60, r25	; 0x3c
    29be:	8b af       	std	Y+59, r24	; 0x3b
    29c0:	8b ad       	ldd	r24, Y+59	; 0x3b
    29c2:	9c ad       	ldd	r25, Y+60	; 0x3c
    29c4:	01 97       	sbiw	r24, 0x01	; 1
    29c6:	f1 f7       	brne	.-4      	; 0x29c4 <LCD_displayCharacter+0x466>
    29c8:	9c af       	std	Y+60, r25	; 0x3c
    29ca:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29cc:	8d ad       	ldd	r24, Y+61	; 0x3d
    29ce:	9e ad       	ldd	r25, Y+62	; 0x3e
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	9e af       	std	Y+62, r25	; 0x3e
    29d4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d6:	8d ad       	ldd	r24, Y+61	; 0x3d
    29d8:	9e ad       	ldd	r25, Y+62	; 0x3e
    29da:	00 97       	sbiw	r24, 0x00	; 0
    29dc:	69 f7       	brne	.-38     	; 0x29b8 <LCD_displayCharacter+0x45a>
    29de:	16 c0       	rjmp	.+44     	; 0x2a0c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e0:	fe 01       	movw	r30, r28
    29e2:	ff 96       	adiw	r30, 0x3f	; 63
    29e4:	60 81       	ld	r22, Z
    29e6:	71 81       	ldd	r23, Z+1	; 0x01
    29e8:	82 81       	ldd	r24, Z+2	; 0x02
    29ea:	93 81       	ldd	r25, Z+3	; 0x03
    29ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f0:	dc 01       	movw	r26, r24
    29f2:	cb 01       	movw	r24, r22
    29f4:	9e af       	std	Y+62, r25	; 0x3e
    29f6:	8d af       	std	Y+61, r24	; 0x3d
    29f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    29fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    29fc:	9a af       	std	Y+58, r25	; 0x3a
    29fe:	89 af       	std	Y+57, r24	; 0x39
    2a00:	89 ad       	ldd	r24, Y+57	; 0x39
    2a02:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_displayCharacter+0x4a6>
    2a08:	9a af       	std	Y+58, r25	; 0x3a
    2a0a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	61 e0       	ldi	r22, 0x01	; 1
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 e8       	ldi	r26, 0x80	; 128
    2a1c:	bf e3       	ldi	r27, 0x3F	; 63
    2a1e:	8d ab       	std	Y+53, r24	; 0x35
    2a20:	9e ab       	std	Y+54, r25	; 0x36
    2a22:	af ab       	std	Y+55, r26	; 0x37
    2a24:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a26:	6d a9       	ldd	r22, Y+53	; 0x35
    2a28:	7e a9       	ldd	r23, Y+54	; 0x36
    2a2a:	8f a9       	ldd	r24, Y+55	; 0x37
    2a2c:	98 ad       	ldd	r25, Y+56	; 0x38
    2a2e:	20 e0       	ldi	r18, 0x00	; 0
    2a30:	30 e0       	ldi	r19, 0x00	; 0
    2a32:	4a e7       	ldi	r20, 0x7A	; 122
    2a34:	53 e4       	ldi	r21, 0x43	; 67
    2a36:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2a3a:	dc 01       	movw	r26, r24
    2a3c:	cb 01       	movw	r24, r22
    2a3e:	89 ab       	std	Y+49, r24	; 0x31
    2a40:	9a ab       	std	Y+50, r25	; 0x32
    2a42:	ab ab       	std	Y+51, r26	; 0x33
    2a44:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a46:	69 a9       	ldd	r22, Y+49	; 0x31
    2a48:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e8       	ldi	r20, 0x80	; 128
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2a5a:	88 23       	and	r24, r24
    2a5c:	2c f4       	brge	.+10     	; 0x2a68 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	98 ab       	std	Y+48, r25	; 0x30
    2a64:	8f a7       	std	Y+47, r24	; 0x2f
    2a66:	3f c0       	rjmp	.+126    	; 0x2ae6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2a68:	69 a9       	ldd	r22, Y+49	; 0x31
    2a6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	3f ef       	ldi	r19, 0xFF	; 255
    2a74:	4f e7       	ldi	r20, 0x7F	; 127
    2a76:	57 e4       	ldi	r21, 0x47	; 71
    2a78:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2a7c:	18 16       	cp	r1, r24
    2a7e:	4c f5       	brge	.+82     	; 0x2ad2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a80:	6d a9       	ldd	r22, Y+53	; 0x35
    2a82:	7e a9       	ldd	r23, Y+54	; 0x36
    2a84:	8f a9       	ldd	r24, Y+55	; 0x37
    2a86:	98 ad       	ldd	r25, Y+56	; 0x38
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	40 e2       	ldi	r20, 0x20	; 32
    2a8e:	51 e4       	ldi	r21, 0x41	; 65
    2a90:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	98 ab       	std	Y+48, r25	; 0x30
    2aa6:	8f a7       	std	Y+47, r24	; 0x2f
    2aa8:	0f c0       	rjmp	.+30     	; 0x2ac8 <LCD_displayCharacter+0x56a>
    2aaa:	89 e1       	ldi	r24, 0x19	; 25
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	9e a7       	std	Y+46, r25	; 0x2e
    2ab0:	8d a7       	std	Y+45, r24	; 0x2d
    2ab2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ab4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ab6:	01 97       	sbiw	r24, 0x01	; 1
    2ab8:	f1 f7       	brne	.-4      	; 0x2ab6 <LCD_displayCharacter+0x558>
    2aba:	9e a7       	std	Y+46, r25	; 0x2e
    2abc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abe:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ac0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ac2:	01 97       	sbiw	r24, 0x01	; 1
    2ac4:	98 ab       	std	Y+48, r25	; 0x30
    2ac6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2aca:	98 a9       	ldd	r25, Y+48	; 0x30
    2acc:	00 97       	sbiw	r24, 0x00	; 0
    2ace:	69 f7       	brne	.-38     	; 0x2aaa <LCD_displayCharacter+0x54c>
    2ad0:	14 c0       	rjmp	.+40     	; 0x2afa <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad8:	9c a9       	ldd	r25, Y+52	; 0x34
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	98 ab       	std	Y+48, r25	; 0x30
    2ae4:	8f a7       	std	Y+47, r24	; 0x2f
    2ae6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ae8:	98 a9       	ldd	r25, Y+48	; 0x30
    2aea:	9c a7       	std	Y+44, r25	; 0x2c
    2aec:	8b a7       	std	Y+43, r24	; 0x2b
    2aee:	8b a5       	ldd	r24, Y+43	; 0x2b
    2af0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2af2:	01 97       	sbiw	r24, 0x01	; 1
    2af4:	f1 f7       	brne	.-4      	; 0x2af2 <LCD_displayCharacter+0x594>
    2af6:	9c a7       	std	Y+44, r25	; 0x2c
    2af8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	61 e0       	ldi	r22, 0x01	; 1
    2afe:	41 e0       	ldi	r20, 0x01	; 1
    2b00:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2b04:	80 e0       	ldi	r24, 0x00	; 0
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	a0 e8       	ldi	r26, 0x80	; 128
    2b0a:	bf e3       	ldi	r27, 0x3F	; 63
    2b0c:	8f a3       	std	Y+39, r24	; 0x27
    2b0e:	98 a7       	std	Y+40, r25	; 0x28
    2b10:	a9 a7       	std	Y+41, r26	; 0x29
    2b12:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b14:	6f a1       	ldd	r22, Y+39	; 0x27
    2b16:	78 a5       	ldd	r23, Y+40	; 0x28
    2b18:	89 a5       	ldd	r24, Y+41	; 0x29
    2b1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a e7       	ldi	r20, 0x7A	; 122
    2b22:	53 e4       	ldi	r21, 0x43	; 67
    2b24:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	8b a3       	std	Y+35, r24	; 0x23
    2b2e:	9c a3       	std	Y+36, r25	; 0x24
    2b30:	ad a3       	std	Y+37, r26	; 0x25
    2b32:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b34:	6b a1       	ldd	r22, Y+35	; 0x23
    2b36:	7c a1       	ldd	r23, Y+36	; 0x24
    2b38:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3a:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3c:	20 e0       	ldi	r18, 0x00	; 0
    2b3e:	30 e0       	ldi	r19, 0x00	; 0
    2b40:	40 e8       	ldi	r20, 0x80	; 128
    2b42:	5f e3       	ldi	r21, 0x3F	; 63
    2b44:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2b48:	88 23       	and	r24, r24
    2b4a:	2c f4       	brge	.+10     	; 0x2b56 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2b4c:	81 e0       	ldi	r24, 0x01	; 1
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	9a a3       	std	Y+34, r25	; 0x22
    2b52:	89 a3       	std	Y+33, r24	; 0x21
    2b54:	3f c0       	rjmp	.+126    	; 0x2bd4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2b56:	6b a1       	ldd	r22, Y+35	; 0x23
    2b58:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	3f ef       	ldi	r19, 0xFF	; 255
    2b62:	4f e7       	ldi	r20, 0x7F	; 127
    2b64:	57 e4       	ldi	r21, 0x47	; 71
    2b66:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2b6a:	18 16       	cp	r1, r24
    2b6c:	4c f5       	brge	.+82     	; 0x2bc0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b6e:	6f a1       	ldd	r22, Y+39	; 0x27
    2b70:	78 a5       	ldd	r23, Y+40	; 0x28
    2b72:	89 a5       	ldd	r24, Y+41	; 0x29
    2b74:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b76:	20 e0       	ldi	r18, 0x00	; 0
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	40 e2       	ldi	r20, 0x20	; 32
    2b7c:	51 e4       	ldi	r21, 0x41	; 65
    2b7e:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2b82:	dc 01       	movw	r26, r24
    2b84:	cb 01       	movw	r24, r22
    2b86:	bc 01       	movw	r22, r24
    2b88:	cd 01       	movw	r24, r26
    2b8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	9a a3       	std	Y+34, r25	; 0x22
    2b94:	89 a3       	std	Y+33, r24	; 0x21
    2b96:	0f c0       	rjmp	.+30     	; 0x2bb6 <LCD_displayCharacter+0x658>
    2b98:	89 e1       	ldi	r24, 0x19	; 25
    2b9a:	90 e0       	ldi	r25, 0x00	; 0
    2b9c:	98 a3       	std	Y+32, r25	; 0x20
    2b9e:	8f 8f       	std	Y+31, r24	; 0x1f
    2ba0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ba2:	98 a1       	ldd	r25, Y+32	; 0x20
    2ba4:	01 97       	sbiw	r24, 0x01	; 1
    2ba6:	f1 f7       	brne	.-4      	; 0x2ba4 <LCD_displayCharacter+0x646>
    2ba8:	98 a3       	std	Y+32, r25	; 0x20
    2baa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bac:	89 a1       	ldd	r24, Y+33	; 0x21
    2bae:	9a a1       	ldd	r25, Y+34	; 0x22
    2bb0:	01 97       	sbiw	r24, 0x01	; 1
    2bb2:	9a a3       	std	Y+34, r25	; 0x22
    2bb4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bba:	00 97       	sbiw	r24, 0x00	; 0
    2bbc:	69 f7       	brne	.-38     	; 0x2b98 <LCD_displayCharacter+0x63a>
    2bbe:	14 c0       	rjmp	.+40     	; 0x2be8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc0:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc2:	7c a1       	ldd	r23, Y+36	; 0x24
    2bc4:	8d a1       	ldd	r24, Y+37	; 0x25
    2bc6:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	9a a3       	std	Y+34, r25	; 0x22
    2bd2:	89 a3       	std	Y+33, r24	; 0x21
    2bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    2bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    2bd8:	9e 8f       	std	Y+30, r25	; 0x1e
    2bda:	8d 8f       	std	Y+29, r24	; 0x1d
    2bdc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bde:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2be0:	01 97       	sbiw	r24, 0x01	; 1
    2be2:	f1 f7       	brne	.-4      	; 0x2be0 <LCD_displayCharacter+0x682>
    2be4:	9e 8f       	std	Y+30, r25	; 0x1e
    2be6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2be8:	fe 01       	movw	r30, r28
    2bea:	ed 59       	subi	r30, 0x9D	; 157
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	98 2f       	mov	r25, r24
    2bf2:	91 70       	andi	r25, 0x01	; 1
    2bf4:	82 e0       	ldi	r24, 0x02	; 2
    2bf6:	64 e0       	ldi	r22, 0x04	; 4
    2bf8:	49 2f       	mov	r20, r25
    2bfa:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ed 59       	subi	r30, 0x9D	; 157
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	82 70       	andi	r24, 0x02	; 2
    2c0c:	90 70       	andi	r25, 0x00	; 0
    2c0e:	95 95       	asr	r25
    2c10:	87 95       	ror	r24
    2c12:	98 2f       	mov	r25, r24
    2c14:	82 e0       	ldi	r24, 0x02	; 2
    2c16:	65 e0       	ldi	r22, 0x05	; 5
    2c18:	49 2f       	mov	r20, r25
    2c1a:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2c1e:	fe 01       	movw	r30, r28
    2c20:	ed 59       	subi	r30, 0x9D	; 157
    2c22:	ff 4f       	sbci	r31, 0xFF	; 255
    2c24:	80 81       	ld	r24, Z
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	84 70       	andi	r24, 0x04	; 4
    2c2c:	90 70       	andi	r25, 0x00	; 0
    2c2e:	95 95       	asr	r25
    2c30:	87 95       	ror	r24
    2c32:	95 95       	asr	r25
    2c34:	87 95       	ror	r24
    2c36:	98 2f       	mov	r25, r24
    2c38:	82 e0       	ldi	r24, 0x02	; 2
    2c3a:	66 e0       	ldi	r22, 0x06	; 6
    2c3c:	49 2f       	mov	r20, r25
    2c3e:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2c42:	fe 01       	movw	r30, r28
    2c44:	ed 59       	subi	r30, 0x9D	; 157
    2c46:	ff 4f       	sbci	r31, 0xFF	; 255
    2c48:	80 81       	ld	r24, Z
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	88 70       	andi	r24, 0x08	; 8
    2c50:	90 70       	andi	r25, 0x00	; 0
    2c52:	95 95       	asr	r25
    2c54:	87 95       	ror	r24
    2c56:	95 95       	asr	r25
    2c58:	87 95       	ror	r24
    2c5a:	95 95       	asr	r25
    2c5c:	87 95       	ror	r24
    2c5e:	98 2f       	mov	r25, r24
    2c60:	82 e0       	ldi	r24, 0x02	; 2
    2c62:	67 e0       	ldi	r22, 0x07	; 7
    2c64:	49 2f       	mov	r20, r25
    2c66:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	a0 e8       	ldi	r26, 0x80	; 128
    2c70:	bf e3       	ldi	r27, 0x3F	; 63
    2c72:	89 8f       	std	Y+25, r24	; 0x19
    2c74:	9a 8f       	std	Y+26, r25	; 0x1a
    2c76:	ab 8f       	std	Y+27, r26	; 0x1b
    2c78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c7a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	30 e0       	ldi	r19, 0x00	; 0
    2c86:	4a e7       	ldi	r20, 0x7A	; 122
    2c88:	53 e4       	ldi	r21, 0x43	; 67
    2c8a:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2c8e:	dc 01       	movw	r26, r24
    2c90:	cb 01       	movw	r24, r22
    2c92:	8d 8b       	std	Y+21, r24	; 0x15
    2c94:	9e 8b       	std	Y+22, r25	; 0x16
    2c96:	af 8b       	std	Y+23, r26	; 0x17
    2c98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c9a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c9c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ca0:	98 8d       	ldd	r25, Y+24	; 0x18
    2ca2:	20 e0       	ldi	r18, 0x00	; 0
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	40 e8       	ldi	r20, 0x80	; 128
    2ca8:	5f e3       	ldi	r21, 0x3F	; 63
    2caa:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2cae:	88 23       	and	r24, r24
    2cb0:	2c f4       	brge	.+10     	; 0x2cbc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2cb2:	81 e0       	ldi	r24, 0x01	; 1
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	9c 8b       	std	Y+20, r25	; 0x14
    2cb8:	8b 8b       	std	Y+19, r24	; 0x13
    2cba:	3f c0       	rjmp	.+126    	; 0x2d3a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2cbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2cc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2cc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2cc4:	20 e0       	ldi	r18, 0x00	; 0
    2cc6:	3f ef       	ldi	r19, 0xFF	; 255
    2cc8:	4f e7       	ldi	r20, 0x7F	; 127
    2cca:	57 e4       	ldi	r21, 0x47	; 71
    2ccc:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2cd0:	18 16       	cp	r1, r24
    2cd2:	4c f5       	brge	.+82     	; 0x2d26 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	40 e2       	ldi	r20, 0x20	; 32
    2ce2:	51 e4       	ldi	r21, 0x41	; 65
    2ce4:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	bc 01       	movw	r22, r24
    2cee:	cd 01       	movw	r24, r26
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9c 8b       	std	Y+20, r25	; 0x14
    2cfa:	8b 8b       	std	Y+19, r24	; 0x13
    2cfc:	0f c0       	rjmp	.+30     	; 0x2d1c <LCD_displayCharacter+0x7be>
    2cfe:	89 e1       	ldi	r24, 0x19	; 25
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	9a 8b       	std	Y+18, r25	; 0x12
    2d04:	89 8b       	std	Y+17, r24	; 0x11
    2d06:	89 89       	ldd	r24, Y+17	; 0x11
    2d08:	9a 89       	ldd	r25, Y+18	; 0x12
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <LCD_displayCharacter+0x7ac>
    2d0e:	9a 8b       	std	Y+18, r25	; 0x12
    2d10:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d12:	8b 89       	ldd	r24, Y+19	; 0x13
    2d14:	9c 89       	ldd	r25, Y+20	; 0x14
    2d16:	01 97       	sbiw	r24, 0x01	; 1
    2d18:	9c 8b       	std	Y+20, r25	; 0x14
    2d1a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d1c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d1e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	69 f7       	brne	.-38     	; 0x2cfe <LCD_displayCharacter+0x7a0>
    2d24:	14 c0       	rjmp	.+40     	; 0x2d4e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d26:	6d 89       	ldd	r22, Y+21	; 0x15
    2d28:	7e 89       	ldd	r23, Y+22	; 0x16
    2d2a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d2c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9c 8b       	std	Y+20, r25	; 0x14
    2d38:	8b 8b       	std	Y+19, r24	; 0x13
    2d3a:	8b 89       	ldd	r24, Y+19	; 0x13
    2d3c:	9c 89       	ldd	r25, Y+20	; 0x14
    2d3e:	98 8b       	std	Y+16, r25	; 0x10
    2d40:	8f 87       	std	Y+15, r24	; 0x0f
    2d42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d44:	98 89       	ldd	r25, Y+16	; 0x10
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_displayCharacter+0x7e8>
    2d4a:	98 8b       	std	Y+16, r25	; 0x10
    2d4c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d4e:	82 e0       	ldi	r24, 0x02	; 2
    2d50:	61 e0       	ldi	r22, 0x01	; 1
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	0e 94 87 09 	call	0x130e	; 0x130e <GPIO_writePin>
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	a0 e8       	ldi	r26, 0x80	; 128
    2d5e:	bf e3       	ldi	r27, 0x3F	; 63
    2d60:	8b 87       	std	Y+11, r24	; 0x0b
    2d62:	9c 87       	std	Y+12, r25	; 0x0c
    2d64:	ad 87       	std	Y+13, r26	; 0x0d
    2d66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	4a e7       	ldi	r20, 0x7A	; 122
    2d76:	53 e4       	ldi	r21, 0x43	; 67
    2d78:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	8f 83       	std	Y+7, r24	; 0x07
    2d82:	98 87       	std	Y+8, r25	; 0x08
    2d84:	a9 87       	std	Y+9, r26	; 0x09
    2d86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d88:	6f 81       	ldd	r22, Y+7	; 0x07
    2d8a:	78 85       	ldd	r23, Y+8	; 0x08
    2d8c:	89 85       	ldd	r24, Y+9	; 0x09
    2d8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e8       	ldi	r20, 0x80	; 128
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    2d9c:	88 23       	and	r24, r24
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9e 83       	std	Y+6, r25	; 0x06
    2da6:	8d 83       	std	Y+5, r24	; 0x05
    2da8:	3f c0       	rjmp	.+126    	; 0x2e28 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2daa:	6f 81       	ldd	r22, Y+7	; 0x07
    2dac:	78 85       	ldd	r23, Y+8	; 0x08
    2dae:	89 85       	ldd	r24, Y+9	; 0x09
    2db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	3f ef       	ldi	r19, 0xFF	; 255
    2db6:	4f e7       	ldi	r20, 0x7F	; 127
    2db8:	57 e4       	ldi	r21, 0x47	; 71
    2dba:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    2dbe:	18 16       	cp	r1, r24
    2dc0:	4c f5       	brge	.+82     	; 0x2e14 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dc4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dc6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dc8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	9e 83       	std	Y+6, r25	; 0x06
    2de8:	8d 83       	std	Y+5, r24	; 0x05
    2dea:	0f c0       	rjmp	.+30     	; 0x2e0a <LCD_displayCharacter+0x8ac>
    2dec:	89 e1       	ldi	r24, 0x19	; 25
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9c 83       	std	Y+4, r25	; 0x04
    2df2:	8b 83       	std	Y+3, r24	; 0x03
    2df4:	8b 81       	ldd	r24, Y+3	; 0x03
    2df6:	9c 81       	ldd	r25, Y+4	; 0x04
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <LCD_displayCharacter+0x89a>
    2dfc:	9c 83       	std	Y+4, r25	; 0x04
    2dfe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	69 f7       	brne	.-38     	; 0x2dec <LCD_displayCharacter+0x88e>
    2e12:	14 c0       	rjmp	.+40     	; 0x2e3c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	6f 81       	ldd	r22, Y+7	; 0x07
    2e16:	78 85       	ldd	r23, Y+8	; 0x08
    2e18:	89 85       	ldd	r24, Y+9	; 0x09
    2e1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	9e 83       	std	Y+6, r25	; 0x06
    2e26:	8d 83       	std	Y+5, r24	; 0x05
    2e28:	8d 81       	ldd	r24, Y+5	; 0x05
    2e2a:	9e 81       	ldd	r25, Y+6	; 0x06
    2e2c:	9a 83       	std	Y+2, r25	; 0x02
    2e2e:	89 83       	std	Y+1, r24	; 0x01
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	9a 81       	ldd	r25, Y+2	; 0x02
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LCD_displayCharacter+0x8d6>
    2e38:	9a 83       	std	Y+2, r25	; 0x02
    2e3a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2e3c:	cd 59       	subi	r28, 0x9D	; 157
    2e3e:	df 4f       	sbci	r29, 0xFF	; 255
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	cf 91       	pop	r28
    2e4c:	df 91       	pop	r29
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	08 95       	ret

00002e54 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	00 d0       	rcall	.+0      	; 0x2e5a <LCD_displayString+0x6>
    2e5a:	0f 92       	push	r0
    2e5c:	cd b7       	in	r28, 0x3d	; 61
    2e5e:	de b7       	in	r29, 0x3e	; 62
    2e60:	9b 83       	std	Y+3, r25	; 0x03
    2e62:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e64:	19 82       	std	Y+1, r1	; 0x01
    2e66:	0e c0       	rjmp	.+28     	; 0x2e84 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	28 2f       	mov	r18, r24
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
    2e72:	fc 01       	movw	r30, r24
    2e74:	e2 0f       	add	r30, r18
    2e76:	f3 1f       	adc	r31, r19
    2e78:	80 81       	ld	r24, Z
    2e7a:	0e 94 af 12 	call	0x255e	; 0x255e <LCD_displayCharacter>
		i++;
    2e7e:	89 81       	ldd	r24, Y+1	; 0x01
    2e80:	8f 5f       	subi	r24, 0xFF	; 255
    2e82:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2e84:	89 81       	ldd	r24, Y+1	; 0x01
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	fc 01       	movw	r30, r24
    2e90:	e2 0f       	add	r30, r18
    2e92:	f3 1f       	adc	r31, r19
    2e94:	80 81       	ld	r24, Z
    2e96:	88 23       	and	r24, r24
    2e98:	39 f7       	brne	.-50     	; 0x2e68 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	0f 90       	pop	r0
    2ea0:	cf 91       	pop	r28
    2ea2:	df 91       	pop	r29
    2ea4:	08 95       	ret

00002ea6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2ea6:	df 93       	push	r29
    2ea8:	cf 93       	push	r28
    2eaa:	00 d0       	rcall	.+0      	; 0x2eac <LCD_moveCursor+0x6>
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <LCD_moveCursor+0x8>
    2eae:	0f 92       	push	r0
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	8a 83       	std	Y+2, r24	; 0x02
    2eb6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eba:	28 2f       	mov	r18, r24
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	3d 83       	std	Y+5, r19	; 0x05
    2ec0:	2c 83       	std	Y+4, r18	; 0x04
    2ec2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec4:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec6:	81 30       	cpi	r24, 0x01	; 1
    2ec8:	91 05       	cpc	r25, r1
    2eca:	c1 f0       	breq	.+48     	; 0x2efc <LCD_moveCursor+0x56>
    2ecc:	2c 81       	ldd	r18, Y+4	; 0x04
    2ece:	3d 81       	ldd	r19, Y+5	; 0x05
    2ed0:	22 30       	cpi	r18, 0x02	; 2
    2ed2:	31 05       	cpc	r19, r1
    2ed4:	2c f4       	brge	.+10     	; 0x2ee0 <LCD_moveCursor+0x3a>
    2ed6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eda:	00 97       	sbiw	r24, 0x00	; 0
    2edc:	61 f0       	breq	.+24     	; 0x2ef6 <LCD_moveCursor+0x50>
    2ede:	19 c0       	rjmp	.+50     	; 0x2f12 <LCD_moveCursor+0x6c>
    2ee0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ee2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ee4:	22 30       	cpi	r18, 0x02	; 2
    2ee6:	31 05       	cpc	r19, r1
    2ee8:	69 f0       	breq	.+26     	; 0x2f04 <LCD_moveCursor+0x5e>
    2eea:	8c 81       	ldd	r24, Y+4	; 0x04
    2eec:	9d 81       	ldd	r25, Y+5	; 0x05
    2eee:	83 30       	cpi	r24, 0x03	; 3
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	61 f0       	breq	.+24     	; 0x2f0c <LCD_moveCursor+0x66>
    2ef4:	0e c0       	rjmp	.+28     	; 0x2f12 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef8:	89 83       	std	Y+1, r24	; 0x01
    2efa:	0b c0       	rjmp	.+22     	; 0x2f12 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	80 5c       	subi	r24, 0xC0	; 192
    2f00:	89 83       	std	Y+1, r24	; 0x01
    2f02:	07 c0       	rjmp	.+14     	; 0x2f12 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2f04:	8b 81       	ldd	r24, Y+3	; 0x03
    2f06:	80 5f       	subi	r24, 0xF0	; 240
    2f08:	89 83       	std	Y+1, r24	; 0x01
    2f0a:	03 c0       	rjmp	.+6      	; 0x2f12 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0e:	80 5b       	subi	r24, 0xB0	; 176
    2f10:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2f12:	89 81       	ldd	r24, Y+1	; 0x01
    2f14:	80 68       	ori	r24, 0x80	; 128
    2f16:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
}
    2f1a:	0f 90       	pop	r0
    2f1c:	0f 90       	pop	r0
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	0f 90       	pop	r0
    2f24:	cf 91       	pop	r28
    2f26:	df 91       	pop	r29
    2f28:	08 95       	ret

00002f2a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2f2a:	df 93       	push	r29
    2f2c:	cf 93       	push	r28
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <LCD_displayStringRowColumn+0x6>
    2f30:	00 d0       	rcall	.+0      	; 0x2f32 <LCD_displayStringRowColumn+0x8>
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	89 83       	std	Y+1, r24	; 0x01
    2f38:	6a 83       	std	Y+2, r22	; 0x02
    2f3a:	5c 83       	std	Y+4, r21	; 0x04
    2f3c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2f3e:	89 81       	ldd	r24, Y+1	; 0x01
    2f40:	6a 81       	ldd	r22, Y+2	; 0x02
    2f42:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_displayString>
}
    2f4e:	0f 90       	pop	r0
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	0f 90       	pop	r0
    2f56:	cf 91       	pop	r28
    2f58:	df 91       	pop	r29
    2f5a:	08 95       	ret

00002f5c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
    2f64:	62 97       	sbiw	r28, 0x12	; 18
    2f66:	0f b6       	in	r0, 0x3f	; 63
    2f68:	f8 94       	cli
    2f6a:	de bf       	out	0x3e, r29	; 62
    2f6c:	0f be       	out	0x3f, r0	; 63
    2f6e:	cd bf       	out	0x3d, r28	; 61
    2f70:	9a 8b       	std	Y+18, r25	; 0x12
    2f72:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2f74:	89 89       	ldd	r24, Y+17	; 0x11
    2f76:	9a 89       	ldd	r25, Y+18	; 0x12
    2f78:	9e 01       	movw	r18, r28
    2f7a:	2f 5f       	subi	r18, 0xFF	; 255
    2f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f7e:	b9 01       	movw	r22, r18
    2f80:	4a e0       	ldi	r20, 0x0A	; 10
    2f82:	50 e0       	ldi	r21, 0x00	; 0
    2f84:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <itoa>
   LCD_displayString(buff); /* Display the string */
    2f88:	ce 01       	movw	r24, r28
    2f8a:	01 96       	adiw	r24, 0x01	; 1
    2f8c:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_displayString>
}
    2f90:	62 96       	adiw	r28, 0x12	; 18
    2f92:	0f b6       	in	r0, 0x3f	; 63
    2f94:	f8 94       	cli
    2f96:	de bf       	out	0x3e, r29	; 62
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	cd bf       	out	0x3d, r28	; 61
    2f9c:	cf 91       	pop	r28
    2f9e:	df 91       	pop	r29
    2fa0:	08 95       	ret

00002fa2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2fa2:	df 93       	push	r29
    2fa4:	cf 93       	push	r28
    2fa6:	cd b7       	in	r28, 0x3d	; 61
    2fa8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <LCD_sendCommand>
}
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <numConcat>:
float64 result;
uint8 g_chars[16] = {0}, g_count = 0;
boolean g_newCalcFlag = FALSE;

float64 numConcat(int array[], int size)
{
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	28 97       	sbiw	r28, 0x08	; 8
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	9e 83       	std	Y+6, r25	; 0x06
    2fcc:	8d 83       	std	Y+5, r24	; 0x05
    2fce:	78 87       	std	Y+8, r23	; 0x08
    2fd0:	6f 83       	std	Y+7, r22	; 0x07
	int num = 0;
    2fd2:	1c 82       	std	Y+4, r1	; 0x04
    2fd4:	1b 82       	std	Y+3, r1	; 0x03
	for (int i = 0; i < size; i++)
    2fd6:	1a 82       	std	Y+2, r1	; 0x02
    2fd8:	19 82       	std	Y+1, r1	; 0x01
    2fda:	25 c0       	rjmp	.+74     	; 0x3026 <numConcat+0x70>
	{
		num *= 10;
    2fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fde:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe0:	9c 01       	movw	r18, r24
    2fe2:	22 0f       	add	r18, r18
    2fe4:	33 1f       	adc	r19, r19
    2fe6:	c9 01       	movw	r24, r18
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	82 0f       	add	r24, r18
    2ff2:	93 1f       	adc	r25, r19
    2ff4:	9c 83       	std	Y+4, r25	; 0x04
    2ff6:	8b 83       	std	Y+3, r24	; 0x03
		num += array[i];
    2ff8:	89 81       	ldd	r24, Y+1	; 0x01
    2ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    2ffc:	9c 01       	movw	r18, r24
    2ffe:	22 0f       	add	r18, r18
    3000:	33 1f       	adc	r19, r19
    3002:	8d 81       	ldd	r24, Y+5	; 0x05
    3004:	9e 81       	ldd	r25, Y+6	; 0x06
    3006:	fc 01       	movw	r30, r24
    3008:	e2 0f       	add	r30, r18
    300a:	f3 1f       	adc	r31, r19
    300c:	20 81       	ld	r18, Z
    300e:	31 81       	ldd	r19, Z+1	; 0x01
    3010:	8b 81       	ldd	r24, Y+3	; 0x03
    3012:	9c 81       	ldd	r25, Y+4	; 0x04
    3014:	82 0f       	add	r24, r18
    3016:	93 1f       	adc	r25, r19
    3018:	9c 83       	std	Y+4, r25	; 0x04
    301a:	8b 83       	std	Y+3, r24	; 0x03
boolean g_newCalcFlag = FALSE;

float64 numConcat(int array[], int size)
{
	int num = 0;
	for (int i = 0; i < size; i++)
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	9a 81       	ldd	r25, Y+2	; 0x02
    3020:	01 96       	adiw	r24, 0x01	; 1
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	29 81       	ldd	r18, Y+1	; 0x01
    3028:	3a 81       	ldd	r19, Y+2	; 0x02
    302a:	8f 81       	ldd	r24, Y+7	; 0x07
    302c:	98 85       	ldd	r25, Y+8	; 0x08
    302e:	28 17       	cp	r18, r24
    3030:	39 07       	cpc	r19, r25
    3032:	a4 f2       	brlt	.-88     	; 0x2fdc <numConcat+0x26>
	{
		num *= 10;
		num += array[i];
	}
	return num;
    3034:	8b 81       	ldd	r24, Y+3	; 0x03
    3036:	9c 81       	ldd	r25, Y+4	; 0x04
    3038:	aa 27       	eor	r26, r26
    303a:	97 fd       	sbrc	r25, 7
    303c:	a0 95       	com	r26
    303e:	ba 2f       	mov	r27, r26
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__floatsisf>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
}
    304c:	bc 01       	movw	r22, r24
    304e:	cd 01       	movw	r24, r26
    3050:	28 96       	adiw	r28, 0x08	; 8
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	f8 94       	cli
    3056:	de bf       	out	0x3e, r29	; 62
    3058:	0f be       	out	0x3f, r0	; 63
    305a:	cd bf       	out	0x3d, r28	; 61
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <clearAll>:

void clearAll()
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
	g_numsAndSigns[16] = 0;
    306a:	10 92 f6 01 	sts	0x01F6, r1
    306e:	10 92 f7 01 	sts	0x01F7, r1
    3072:	10 92 f8 01 	sts	0x01F8, r1
    3076:	10 92 f9 01 	sts	0x01F9, r1
    307a:	10 92 fa 01 	sts	0x01FA, r1
    307e:	10 92 fb 01 	sts	0x01FB, r1
    3082:	10 92 fc 01 	sts	0x01FC, r1
    3086:	10 92 fd 01 	sts	0x01FD, r1
	g_chars[16] = 0;
    308a:	10 92 06 02 	sts	0x0206, r1
	g_count = 0;
    308e:	10 92 06 02 	sts	0x0206, r1
	g_newCalcFlag = FALSE;
    3092:	10 92 07 02 	sts	0x0207, r1
	LCD_clearScreen();
    3096:	0e 94 d1 17 	call	0x2fa2	; 0x2fa2 <LCD_clearScreen>
	LCD_displayString("CALCULATOR:");
    309a:	80 e6       	ldi	r24, 0x60	; 96
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_displayString>
	LCD_moveCursor(1, 0);
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	60 e0       	ldi	r22, 0x00	; 0
    30a6:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <LCD_moveCursor>
}
    30aa:	cf 91       	pop	r28
    30ac:	df 91       	pop	r29
    30ae:	08 95       	ret

000030b0 <input>:

void input(uint8 key)
{
    30b0:	df 93       	push	r29
    30b2:	cf 93       	push	r28
    30b4:	0f 92       	push	r0
    30b6:	cd b7       	in	r28, 0x3d	; 61
    30b8:	de b7       	in	r29, 0x3e	; 62
    30ba:	89 83       	std	Y+1, r24	; 0x01
	if(g_count < 16)
    30bc:	80 91 06 02 	lds	r24, 0x0206
    30c0:	80 31       	cpi	r24, 0x10	; 16
    30c2:	c8 f4       	brcc	.+50     	; 0x30f6 <input+0x46>
	{
		if(key >= 0 && key <= 9) LCD_intgerToString(key);
    30c4:	89 81       	ldd	r24, Y+1	; 0x01
    30c6:	8a 30       	cpi	r24, 0x0A	; 10
    30c8:	30 f4       	brcc	.+12     	; 0x30d6 <input+0x26>
    30ca:	89 81       	ldd	r24, Y+1	; 0x01
    30cc:	88 2f       	mov	r24, r24
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <LCD_intgerToString>
    30d4:	03 c0       	rjmp	.+6      	; 0x30dc <input+0x2c>
		else LCD_displayCharacter(key);
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	0e 94 af 12 	call	0x255e	; 0x255e <LCD_displayCharacter>
		g_chars[g_count++] = key;
    30dc:	20 91 06 02 	lds	r18, 0x0206
    30e0:	82 2f       	mov	r24, r18
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	fc 01       	movw	r30, r24
    30e6:	ea 50       	subi	r30, 0x0A	; 10
    30e8:	fe 4f       	sbci	r31, 0xFE	; 254
    30ea:	89 81       	ldd	r24, Y+1	; 0x01
    30ec:	80 83       	st	Z, r24
    30ee:	82 2f       	mov	r24, r18
    30f0:	8f 5f       	subi	r24, 0xFF	; 255
    30f2:	80 93 06 02 	sts	0x0206, r24
	}
}
    30f6:	0f 90       	pop	r0
    30f8:	cf 91       	pop	r28
    30fa:	df 91       	pop	r29
    30fc:	08 95       	ret

000030fe <calculate>:

void calculate()
{
    30fe:	8f 92       	push	r8
    3100:	9f 92       	push	r9
    3102:	af 92       	push	r10
    3104:	bf 92       	push	r11
    3106:	cf 92       	push	r12
    3108:	df 92       	push	r13
    310a:	ef 92       	push	r14
    310c:	ff 92       	push	r15
    310e:	0f 93       	push	r16
    3110:	1f 93       	push	r17
    3112:	df 93       	push	r29
    3114:	cf 93       	push	r28
    3116:	cd b7       	in	r28, 0x3d	; 61
    3118:	de b7       	in	r29, 0x3e	; 62
    311a:	63 97       	sbiw	r28, 0x13	; 19
    311c:	0f b6       	in	r0, 0x3f	; 63
    311e:	f8 94       	cli
    3120:	de bf       	out	0x3e, r29	; 62
    3122:	0f be       	out	0x3f, r0	; 63
    3124:	cd bf       	out	0x3d, r28	; 61
	uint8 i, numsAndSignsIndex = 0, num[16] = {0}, numIndex = 0;
    3126:	1a 82       	std	Y+2, r1	; 0x02
    3128:	80 e1       	ldi	r24, 0x10	; 16
    312a:	fe 01       	movw	r30, r28
    312c:	34 96       	adiw	r30, 0x04	; 4
    312e:	df 01       	movw	r26, r30
    3130:	98 2f       	mov	r25, r24
    3132:	1d 92       	st	X+, r1
    3134:	9a 95       	dec	r25
    3136:	e9 f7       	brne	.-6      	; 0x3132 <calculate+0x34>
    3138:	19 82       	std	Y+1, r1	; 0x01
	for(i = 0; i <= g_count; i++)
    313a:	1b 82       	std	Y+3, r1	; 0x03
    313c:	96 c0       	rjmp	.+300    	; 0x326a <calculate+0x16c>
	{
		if(g_chars[i] == '+' || g_chars[i] == '-' || g_chars[i] == '*' || g_chars[i] == '%')
    313e:	8b 81       	ldd	r24, Y+3	; 0x03
    3140:	88 2f       	mov	r24, r24
    3142:	90 e0       	ldi	r25, 0x00	; 0
    3144:	fc 01       	movw	r30, r24
    3146:	ea 50       	subi	r30, 0x0A	; 10
    3148:	fe 4f       	sbci	r31, 0xFE	; 254
    314a:	80 81       	ld	r24, Z
    314c:	8b 32       	cpi	r24, 0x2B	; 43
    314e:	e1 f0       	breq	.+56     	; 0x3188 <calculate+0x8a>
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	88 2f       	mov	r24, r24
    3154:	90 e0       	ldi	r25, 0x00	; 0
    3156:	fc 01       	movw	r30, r24
    3158:	ea 50       	subi	r30, 0x0A	; 10
    315a:	fe 4f       	sbci	r31, 0xFE	; 254
    315c:	80 81       	ld	r24, Z
    315e:	8d 32       	cpi	r24, 0x2D	; 45
    3160:	99 f0       	breq	.+38     	; 0x3188 <calculate+0x8a>
    3162:	8b 81       	ldd	r24, Y+3	; 0x03
    3164:	88 2f       	mov	r24, r24
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	fc 01       	movw	r30, r24
    316a:	ea 50       	subi	r30, 0x0A	; 10
    316c:	fe 4f       	sbci	r31, 0xFE	; 254
    316e:	80 81       	ld	r24, Z
    3170:	8a 32       	cpi	r24, 0x2A	; 42
    3172:	51 f0       	breq	.+20     	; 0x3188 <calculate+0x8a>
    3174:	8b 81       	ldd	r24, Y+3	; 0x03
    3176:	88 2f       	mov	r24, r24
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	fc 01       	movw	r30, r24
    317c:	ea 50       	subi	r30, 0x0A	; 10
    317e:	fe 4f       	sbci	r31, 0xFE	; 254
    3180:	80 81       	ld	r24, Z
    3182:	85 32       	cpi	r24, 0x25	; 37
    3184:	09 f0       	breq	.+2      	; 0x3188 <calculate+0x8a>
    3186:	5b c0       	rjmp	.+182    	; 0x323e <calculate+0x140>
		{
			g_numsAndSigns[numsAndSignsIndex] = g_chars[i];
    3188:	8a 81       	ldd	r24, Y+2	; 0x02
    318a:	a8 2f       	mov	r26, r24
    318c:	b0 e0       	ldi	r27, 0x00	; 0
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	88 2f       	mov	r24, r24
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	fc 01       	movw	r30, r24
    3196:	ea 50       	subi	r30, 0x0A	; 10
    3198:	fe 4f       	sbci	r31, 0xFE	; 254
    319a:	80 81       	ld	r24, Z
    319c:	28 2f       	mov	r18, r24
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	40 e0       	ldi	r20, 0x00	; 0
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	70 e0       	ldi	r23, 0x00	; 0
    31a8:	80 e0       	ldi	r24, 0x00	; 0
    31aa:	90 e0       	ldi	r25, 0x00	; 0
    31ac:	fd 01       	movw	r30, r26
    31ae:	ee 0f       	add	r30, r30
    31b0:	ff 1f       	adc	r31, r31
    31b2:	ee 0f       	add	r30, r30
    31b4:	ff 1f       	adc	r31, r31
    31b6:	ee 0f       	add	r30, r30
    31b8:	ff 1f       	adc	r31, r31
    31ba:	ea 58       	subi	r30, 0x8A	; 138
    31bc:	fe 4f       	sbci	r31, 0xFE	; 254
    31be:	20 83       	st	Z, r18
    31c0:	31 83       	std	Z+1, r19	; 0x01
    31c2:	42 83       	std	Z+2, r20	; 0x02
    31c4:	53 83       	std	Z+3, r21	; 0x03
    31c6:	64 83       	std	Z+4, r22	; 0x04
    31c8:	75 83       	std	Z+5, r23	; 0x05
    31ca:	86 83       	std	Z+6, r24	; 0x06
    31cc:	97 83       	std	Z+7, r25	; 0x07
			if(numIndex != 0)
    31ce:	89 81       	ldd	r24, Y+1	; 0x01
    31d0:	88 23       	and	r24, r24
    31d2:	89 f1       	breq	.+98     	; 0x3236 <calculate+0x138>
				g_numsAndSigns[numsAndSignsIndex - 1] = numConcat(num, numIndex);
    31d4:	8a 81       	ldd	r24, Y+2	; 0x02
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	4c 01       	movw	r8, r24
    31dc:	08 94       	sec
    31de:	81 08       	sbc	r8, r1
    31e0:	91 08       	sbc	r9, r1
    31e2:	ae 01       	movw	r20, r28
    31e4:	4c 5f       	subi	r20, 0xFC	; 252
    31e6:	5f 4f       	sbci	r21, 0xFF	; 255
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	28 2f       	mov	r18, r24
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	ca 01       	movw	r24, r20
    31f0:	b9 01       	movw	r22, r18
    31f2:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <numConcat>
    31f6:	dc 01       	movw	r26, r24
    31f8:	cb 01       	movw	r24, r22
    31fa:	bc 01       	movw	r22, r24
    31fc:	cd 01       	movw	r24, r26
    31fe:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    3202:	a2 2e       	mov	r10, r18
    3204:	b3 2e       	mov	r11, r19
    3206:	c4 2e       	mov	r12, r20
    3208:	d5 2e       	mov	r13, r21
    320a:	e6 2e       	mov	r14, r22
    320c:	f7 2e       	mov	r15, r23
    320e:	08 2f       	mov	r16, r24
    3210:	19 2f       	mov	r17, r25
    3212:	c4 01       	movw	r24, r8
    3214:	88 0f       	add	r24, r24
    3216:	99 1f       	adc	r25, r25
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	fc 01       	movw	r30, r24
    3222:	ea 58       	subi	r30, 0x8A	; 138
    3224:	fe 4f       	sbci	r31, 0xFE	; 254
    3226:	a0 82       	st	Z, r10
    3228:	b1 82       	std	Z+1, r11	; 0x01
    322a:	c2 82       	std	Z+2, r12	; 0x02
    322c:	d3 82       	std	Z+3, r13	; 0x03
    322e:	e4 82       	std	Z+4, r14	; 0x04
    3230:	f5 82       	std	Z+5, r15	; 0x05
    3232:	06 83       	std	Z+6, r16	; 0x06
    3234:	17 83       	std	Z+7, r17	; 0x07
			numsAndSignsIndex++;
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	8f 5f       	subi	r24, 0xFF	; 255
    323a:	8a 83       	std	Y+2, r24	; 0x02
    323c:	13 c0       	rjmp	.+38     	; 0x3264 <calculate+0x166>
		}
		else
		{
			num[numIndex++] = g_chars[i];
    323e:	89 81       	ldd	r24, Y+1	; 0x01
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	8b 81       	ldd	r24, Y+3	; 0x03
    3246:	88 2f       	mov	r24, r24
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	fc 01       	movw	r30, r24
    324c:	ea 50       	subi	r30, 0x0A	; 10
    324e:	fe 4f       	sbci	r31, 0xFE	; 254
    3250:	40 81       	ld	r20, Z
    3252:	ce 01       	movw	r24, r28
    3254:	04 96       	adiw	r24, 0x04	; 4
    3256:	fc 01       	movw	r30, r24
    3258:	e2 0f       	add	r30, r18
    325a:	f3 1f       	adc	r31, r19
    325c:	40 83       	st	Z, r20
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	8f 5f       	subi	r24, 0xFF	; 255
    3262:	89 83       	std	Y+1, r24	; 0x01
}

void calculate()
{
	uint8 i, numsAndSignsIndex = 0, num[16] = {0}, numIndex = 0;
	for(i = 0; i <= g_count; i++)
    3264:	8b 81       	ldd	r24, Y+3	; 0x03
    3266:	8f 5f       	subi	r24, 0xFF	; 255
    3268:	8b 83       	std	Y+3, r24	; 0x03
    326a:	90 91 06 02 	lds	r25, 0x0206
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	98 17       	cp	r25, r24
    3272:	08 f0       	brcs	.+2      	; 0x3276 <calculate+0x178>
    3274:	64 cf       	rjmp	.-312    	; 0x313e <calculate+0x40>
		else
		{
			num[numIndex++] = g_chars[i];
		}
	}
	if(numsAndSignsIndex == 1)
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	81 30       	cpi	r24, 0x01	; 1
    327a:	69 f5       	brne	.+90     	; 0x32d6 <calculate+0x1d8>
		g_numsAndSigns[numsAndSignsIndex] = numConcat(num, numIndex);
    327c:	8a 81       	ldd	r24, Y+2	; 0x02
    327e:	88 2e       	mov	r8, r24
    3280:	99 24       	eor	r9, r9
    3282:	ae 01       	movw	r20, r28
    3284:	4c 5f       	subi	r20, 0xFC	; 252
    3286:	5f 4f       	sbci	r21, 0xFF	; 255
    3288:	89 81       	ldd	r24, Y+1	; 0x01
    328a:	28 2f       	mov	r18, r24
    328c:	30 e0       	ldi	r19, 0x00	; 0
    328e:	ca 01       	movw	r24, r20
    3290:	b9 01       	movw	r22, r18
    3292:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <numConcat>
    3296:	dc 01       	movw	r26, r24
    3298:	cb 01       	movw	r24, r22
    329a:	bc 01       	movw	r22, r24
    329c:	cd 01       	movw	r24, r26
    329e:	0e 94 75 00 	call	0xea	; 0xea <__fixunssfdi>
    32a2:	a2 2e       	mov	r10, r18
    32a4:	b3 2e       	mov	r11, r19
    32a6:	c4 2e       	mov	r12, r20
    32a8:	d5 2e       	mov	r13, r21
    32aa:	e6 2e       	mov	r14, r22
    32ac:	f7 2e       	mov	r15, r23
    32ae:	08 2f       	mov	r16, r24
    32b0:	19 2f       	mov	r17, r25
    32b2:	c4 01       	movw	r24, r8
    32b4:	88 0f       	add	r24, r24
    32b6:	99 1f       	adc	r25, r25
    32b8:	88 0f       	add	r24, r24
    32ba:	99 1f       	adc	r25, r25
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	fc 01       	movw	r30, r24
    32c2:	ea 58       	subi	r30, 0x8A	; 138
    32c4:	fe 4f       	sbci	r31, 0xFE	; 254
    32c6:	a0 82       	st	Z, r10
    32c8:	b1 82       	std	Z+1, r11	; 0x01
    32ca:	c2 82       	std	Z+2, r12	; 0x02
    32cc:	d3 82       	std	Z+3, r13	; 0x03
    32ce:	e4 82       	std	Z+4, r14	; 0x04
    32d0:	f5 82       	std	Z+5, r15	; 0x05
    32d2:	06 83       	std	Z+6, r16	; 0x06
    32d4:	17 83       	std	Z+7, r17	; 0x07
	LCD_displayStringRowColumn(3, 0, "=");
    32d6:	2c e6       	ldi	r18, 0x6C	; 108
    32d8:	30 e0       	ldi	r19, 0x00	; 0
    32da:	83 e0       	ldi	r24, 0x03	; 3
    32dc:	60 e0       	ldi	r22, 0x00	; 0
    32de:	a9 01       	movw	r20, r18
    32e0:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <LCD_displayStringRowColumn>
	LCD_intgerToString(g_numsAndSigns[0]);
    32e4:	20 91 76 01 	lds	r18, 0x0176
    32e8:	30 91 77 01 	lds	r19, 0x0177
    32ec:	40 91 78 01 	lds	r20, 0x0178
    32f0:	50 91 79 01 	lds	r21, 0x0179
    32f4:	60 91 7a 01 	lds	r22, 0x017A
    32f8:	70 91 7b 01 	lds	r23, 0x017B
    32fc:	80 91 7c 01 	lds	r24, 0x017C
    3300:	90 91 7d 01 	lds	r25, 0x017D
    3304:	c9 01       	movw	r24, r18
    3306:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <LCD_intgerToString>
	g_newCalcFlag = TRUE;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	80 93 07 02 	sts	0x0207, r24
}
    3310:	63 96       	adiw	r28, 0x13	; 19
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	cf 91       	pop	r28
    331e:	df 91       	pop	r29
    3320:	1f 91       	pop	r17
    3322:	0f 91       	pop	r16
    3324:	ff 90       	pop	r15
    3326:	ef 90       	pop	r14
    3328:	df 90       	pop	r13
    332a:	cf 90       	pop	r12
    332c:	bf 90       	pop	r11
    332e:	af 90       	pop	r10
    3330:	9f 90       	pop	r9
    3332:	8f 90       	pop	r8
    3334:	08 95       	ret

00003336 <main>:

int main(void)
{
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	61 97       	sbiw	r28, 0x11	; 17
    3340:	0f b6       	in	r0, 0x3f	; 63
    3342:	f8 94       	cli
    3344:	de bf       	out	0x3e, r29	; 62
    3346:	0f be       	out	0x3f, r0	; 63
    3348:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_init();
    334a:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <LCD_init>
	LCD_displayString("CALCULATOR:");
    334e:	80 e6       	ldi	r24, 0x60	; 96
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LCD_displayString>
	LCD_moveCursor(1, 0);
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <LCD_moveCursor>
	while(1)
	{
		key = KEYPAD_getPressedKey();
    335e:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <KEYPAD_getPressedKey>
    3362:	8f 87       	std	Y+15, r24	; 0x0f
		if(g_newCalcFlag) clearAll();
    3364:	80 91 07 02 	lds	r24, 0x0207
    3368:	88 23       	and	r24, r24
    336a:	11 f0       	breq	.+4      	; 0x3370 <main+0x3a>
    336c:	0e 94 31 18 	call	0x3062	; 0x3062 <clearAll>
		switch(key)
    3370:	8f 85       	ldd	r24, Y+15	; 0x0f
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	39 8b       	std	Y+17, r19	; 0x11
    3378:	28 8b       	std	Y+16, r18	; 0x10
    337a:	88 89       	ldd	r24, Y+16	; 0x10
    337c:	99 89       	ldd	r25, Y+17	; 0x11
    337e:	8d 30       	cpi	r24, 0x0D	; 13
    3380:	91 05       	cpc	r25, r1
    3382:	31 f0       	breq	.+12     	; 0x3390 <main+0x5a>
    3384:	28 89       	ldd	r18, Y+16	; 0x10
    3386:	39 89       	ldd	r19, Y+17	; 0x11
    3388:	2d 33       	cpi	r18, 0x3D	; 61
    338a:	31 05       	cpc	r19, r1
    338c:	21 f0       	breq	.+8      	; 0x3396 <main+0x60>
    338e:	06 c0       	rjmp	.+12     	; 0x339c <main+0x66>
		{
		case 13:
			clearAll();
    3390:	0e 94 31 18 	call	0x3062	; 0x3062 <clearAll>
    3394:	06 c0       	rjmp	.+12     	; 0x33a2 <main+0x6c>
			break;
		case '=':
			calculate();
    3396:	0e 94 7f 18 	call	0x30fe	; 0x30fe <calculate>
    339a:	03 c0       	rjmp	.+6      	; 0x33a2 <main+0x6c>
			break;
		default:
			input(key);
    339c:	8f 85       	ldd	r24, Y+15	; 0x0f
    339e:	0e 94 58 18 	call	0x30b0	; 0x30b0 <input>
    33a2:	80 e0       	ldi	r24, 0x00	; 0
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a8 e4       	ldi	r26, 0x48	; 72
    33a8:	b3 e4       	ldi	r27, 0x43	; 67
    33aa:	8b 87       	std	Y+11, r24	; 0x0b
    33ac:	9c 87       	std	Y+12, r25	; 0x0c
    33ae:	ad 87       	std	Y+13, r26	; 0x0d
    33b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    33b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    33b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    33b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    33ba:	20 e0       	ldi	r18, 0x00	; 0
    33bc:	30 e0       	ldi	r19, 0x00	; 0
    33be:	4a e7       	ldi	r20, 0x7A	; 122
    33c0:	53 e4       	ldi	r21, 0x43	; 67
    33c2:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    33c6:	dc 01       	movw	r26, r24
    33c8:	cb 01       	movw	r24, r22
    33ca:	8f 83       	std	Y+7, r24	; 0x07
    33cc:	98 87       	std	Y+8, r25	; 0x08
    33ce:	a9 87       	std	Y+9, r26	; 0x09
    33d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 e8       	ldi	r20, 0x80	; 128
    33e0:	5f e3       	ldi	r21, 0x3F	; 63
    33e2:	0e 94 cd 04 	call	0x99a	; 0x99a <__ltsf2>
    33e6:	88 23       	and	r24, r24
    33e8:	2c f4       	brge	.+10     	; 0x33f4 <main+0xbe>
		__ticks = 1;
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9e 83       	std	Y+6, r25	; 0x06
    33f0:	8d 83       	std	Y+5, r24	; 0x05
    33f2:	3f c0       	rjmp	.+126    	; 0x3472 <main+0x13c>
	else if (__tmp > 65535)
    33f4:	6f 81       	ldd	r22, Y+7	; 0x07
    33f6:	78 85       	ldd	r23, Y+8	; 0x08
    33f8:	89 85       	ldd	r24, Y+9	; 0x09
    33fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fc:	20 e0       	ldi	r18, 0x00	; 0
    33fe:	3f ef       	ldi	r19, 0xFF	; 255
    3400:	4f e7       	ldi	r20, 0x7F	; 127
    3402:	57 e4       	ldi	r21, 0x47	; 71
    3404:	0e 94 6d 04 	call	0x8da	; 0x8da <__gtsf2>
    3408:	18 16       	cp	r1, r24
    340a:	4c f5       	brge	.+82     	; 0x345e <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    340c:	6b 85       	ldd	r22, Y+11	; 0x0b
    340e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3410:	8d 85       	ldd	r24, Y+13	; 0x0d
    3412:	9e 85       	ldd	r25, Y+14	; 0x0e
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	40 e2       	ldi	r20, 0x20	; 32
    341a:	51 e4       	ldi	r21, 0x41	; 65
    341c:	0e 94 c7 02 	call	0x58e	; 0x58e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	bc 01       	movw	r22, r24
    3426:	cd 01       	movw	r24, r26
    3428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	9e 83       	std	Y+6, r25	; 0x06
    3432:	8d 83       	std	Y+5, r24	; 0x05
    3434:	0f c0       	rjmp	.+30     	; 0x3454 <main+0x11e>
    3436:	89 e1       	ldi	r24, 0x19	; 25
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9c 83       	std	Y+4, r25	; 0x04
    343c:	8b 83       	std	Y+3, r24	; 0x03
    343e:	8b 81       	ldd	r24, Y+3	; 0x03
    3440:	9c 81       	ldd	r25, Y+4	; 0x04
    3442:	01 97       	sbiw	r24, 0x01	; 1
    3444:	f1 f7       	brne	.-4      	; 0x3442 <main+0x10c>
    3446:	9c 83       	std	Y+4, r25	; 0x04
    3448:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	01 97       	sbiw	r24, 0x01	; 1
    3450:	9e 83       	std	Y+6, r25	; 0x06
    3452:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3454:	8d 81       	ldd	r24, Y+5	; 0x05
    3456:	9e 81       	ldd	r25, Y+6	; 0x06
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	69 f7       	brne	.-38     	; 0x3436 <main+0x100>
    345c:	80 cf       	rjmp	.-256    	; 0x335e <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	6f 81       	ldd	r22, Y+7	; 0x07
    3460:	78 85       	ldd	r23, Y+8	; 0x08
    3462:	89 85       	ldd	r24, Y+9	; 0x09
    3464:	9a 85       	ldd	r25, Y+10	; 0x0a
    3466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    346a:	dc 01       	movw	r26, r24
    346c:	cb 01       	movw	r24, r22
    346e:	9e 83       	std	Y+6, r25	; 0x06
    3470:	8d 83       	std	Y+5, r24	; 0x05
    3472:	8d 81       	ldd	r24, Y+5	; 0x05
    3474:	9e 81       	ldd	r25, Y+6	; 0x06
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	01 97       	sbiw	r24, 0x01	; 1
    3480:	f1 f7       	brne	.-4      	; 0x347e <main+0x148>
    3482:	9a 83       	std	Y+2, r25	; 0x02
    3484:	89 83       	std	Y+1, r24	; 0x01
    3486:	6b cf       	rjmp	.-298    	; 0x335e <main+0x28>

00003488 <__prologue_saves__>:
    3488:	2f 92       	push	r2
    348a:	3f 92       	push	r3
    348c:	4f 92       	push	r4
    348e:	5f 92       	push	r5
    3490:	6f 92       	push	r6
    3492:	7f 92       	push	r7
    3494:	8f 92       	push	r8
    3496:	9f 92       	push	r9
    3498:	af 92       	push	r10
    349a:	bf 92       	push	r11
    349c:	cf 92       	push	r12
    349e:	df 92       	push	r13
    34a0:	ef 92       	push	r14
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
    34ac:	cd b7       	in	r28, 0x3d	; 61
    34ae:	de b7       	in	r29, 0x3e	; 62
    34b0:	ca 1b       	sub	r28, r26
    34b2:	db 0b       	sbc	r29, r27
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	09 94       	ijmp

000034c0 <__epilogue_restores__>:
    34c0:	2a 88       	ldd	r2, Y+18	; 0x12
    34c2:	39 88       	ldd	r3, Y+17	; 0x11
    34c4:	48 88       	ldd	r4, Y+16	; 0x10
    34c6:	5f 84       	ldd	r5, Y+15	; 0x0f
    34c8:	6e 84       	ldd	r6, Y+14	; 0x0e
    34ca:	7d 84       	ldd	r7, Y+13	; 0x0d
    34cc:	8c 84       	ldd	r8, Y+12	; 0x0c
    34ce:	9b 84       	ldd	r9, Y+11	; 0x0b
    34d0:	aa 84       	ldd	r10, Y+10	; 0x0a
    34d2:	b9 84       	ldd	r11, Y+9	; 0x09
    34d4:	c8 84       	ldd	r12, Y+8	; 0x08
    34d6:	df 80       	ldd	r13, Y+7	; 0x07
    34d8:	ee 80       	ldd	r14, Y+6	; 0x06
    34da:	fd 80       	ldd	r15, Y+5	; 0x05
    34dc:	0c 81       	ldd	r16, Y+4	; 0x04
    34de:	1b 81       	ldd	r17, Y+3	; 0x03
    34e0:	aa 81       	ldd	r26, Y+2	; 0x02
    34e2:	b9 81       	ldd	r27, Y+1	; 0x01
    34e4:	ce 0f       	add	r28, r30
    34e6:	d1 1d       	adc	r29, r1
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	ed 01       	movw	r28, r26
    34f4:	08 95       	ret

000034f6 <itoa>:
    34f6:	fb 01       	movw	r30, r22
    34f8:	9f 01       	movw	r18, r30
    34fa:	e8 94       	clt
    34fc:	42 30       	cpi	r20, 0x02	; 2
    34fe:	c4 f0       	brlt	.+48     	; 0x3530 <itoa+0x3a>
    3500:	45 32       	cpi	r20, 0x25	; 37
    3502:	b4 f4       	brge	.+44     	; 0x3530 <itoa+0x3a>
    3504:	4a 30       	cpi	r20, 0x0A	; 10
    3506:	29 f4       	brne	.+10     	; 0x3512 <itoa+0x1c>
    3508:	97 fb       	bst	r25, 7
    350a:	1e f4       	brtc	.+6      	; 0x3512 <itoa+0x1c>
    350c:	90 95       	com	r25
    350e:	81 95       	neg	r24
    3510:	9f 4f       	sbci	r25, 0xFF	; 255
    3512:	64 2f       	mov	r22, r20
    3514:	77 27       	eor	r23, r23
    3516:	0e 94 ac 1a 	call	0x3558	; 0x3558 <__udivmodhi4>
    351a:	80 5d       	subi	r24, 0xD0	; 208
    351c:	8a 33       	cpi	r24, 0x3A	; 58
    351e:	0c f0       	brlt	.+2      	; 0x3522 <itoa+0x2c>
    3520:	89 5d       	subi	r24, 0xD9	; 217
    3522:	81 93       	st	Z+, r24
    3524:	cb 01       	movw	r24, r22
    3526:	00 97       	sbiw	r24, 0x00	; 0
    3528:	a1 f7       	brne	.-24     	; 0x3512 <itoa+0x1c>
    352a:	16 f4       	brtc	.+4      	; 0x3530 <itoa+0x3a>
    352c:	5d e2       	ldi	r21, 0x2D	; 45
    352e:	51 93       	st	Z+, r21
    3530:	10 82       	st	Z, r1
    3532:	c9 01       	movw	r24, r18
    3534:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <strrev>

00003538 <strrev>:
    3538:	dc 01       	movw	r26, r24
    353a:	fc 01       	movw	r30, r24
    353c:	67 2f       	mov	r22, r23
    353e:	71 91       	ld	r23, Z+
    3540:	77 23       	and	r23, r23
    3542:	e1 f7       	brne	.-8      	; 0x353c <strrev+0x4>
    3544:	32 97       	sbiw	r30, 0x02	; 2
    3546:	04 c0       	rjmp	.+8      	; 0x3550 <strrev+0x18>
    3548:	7c 91       	ld	r23, X
    354a:	6d 93       	st	X+, r22
    354c:	70 83       	st	Z, r23
    354e:	62 91       	ld	r22, -Z
    3550:	ae 17       	cp	r26, r30
    3552:	bf 07       	cpc	r27, r31
    3554:	c8 f3       	brcs	.-14     	; 0x3548 <strrev+0x10>
    3556:	08 95       	ret

00003558 <__udivmodhi4>:
    3558:	aa 1b       	sub	r26, r26
    355a:	bb 1b       	sub	r27, r27
    355c:	51 e1       	ldi	r21, 0x11	; 17
    355e:	07 c0       	rjmp	.+14     	; 0x356e <__udivmodhi4_ep>

00003560 <__udivmodhi4_loop>:
    3560:	aa 1f       	adc	r26, r26
    3562:	bb 1f       	adc	r27, r27
    3564:	a6 17       	cp	r26, r22
    3566:	b7 07       	cpc	r27, r23
    3568:	10 f0       	brcs	.+4      	; 0x356e <__udivmodhi4_ep>
    356a:	a6 1b       	sub	r26, r22
    356c:	b7 0b       	sbc	r27, r23

0000356e <__udivmodhi4_ep>:
    356e:	88 1f       	adc	r24, r24
    3570:	99 1f       	adc	r25, r25
    3572:	5a 95       	dec	r21
    3574:	a9 f7       	brne	.-22     	; 0x3560 <__udivmodhi4_loop>
    3576:	80 95       	com	r24
    3578:	90 95       	com	r25
    357a:	bc 01       	movw	r22, r24
    357c:	cd 01       	movw	r24, r26
    357e:	08 95       	ret

00003580 <_exit>:
    3580:	f8 94       	cli

00003582 <__stop_program>:
    3582:	ff cf       	rjmp	.-2      	; 0x3582 <__stop_program>
