
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003942  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00003942  000039d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000016  00800188  00800188  00003afe  2**0
                  ALLOC
  3 .stab         0000243c  00000000  00000000  00003b00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000da0  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00006cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00006ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  000070ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000997f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000afa7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000c388  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000c588  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000c897  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d2ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 39       	cpi	r26, 0x9E	; 158
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <main>
      8a:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e7       	ldi	r26, 0x7F	; 127
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 23 1c 	jmp	0x3846	; 0x3846 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8f e7       	ldi	r24, 0x7F	; 127
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3f 1c 	jmp	0x387e	; 0x387e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e7       	ldi	r22, 0x7F	; 127
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__gesf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__gesf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__gesf2+0x58>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 2f 1c 	jmp	0x385e	; 0x385e <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 4b 1c 	jmp	0x3896	; 0x3896 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 48 1c 	jmp	0x3890	; 0x3890 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 33 1c 	jmp	0x3866	; 0x3866 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 4f 1c 	jmp	0x389e	; 0x389e <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 2b 1c 	jmp	0x3856	; 0x3856 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 47 1c 	jmp	0x388e	; 0x388e <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e9 57       	subi	r30, 0x79	; 121
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <GPIO_setupPinDirection>:
/*
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	00 d0       	rcall	.+0      	; 0xf50 <GPIO_setupPinDirection+0x6>
     f50:	00 d0       	rcall	.+0      	; 0xf52 <GPIO_setupPinDirection+0x8>
     f52:	0f 92       	push	r0
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	89 83       	std	Y+1, r24	; 0x01
     f5a:	6a 83       	std	Y+2, r22	; 0x02
     f5c:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
     f5e:	8a 81       	ldd	r24, Y+2	; 0x02
     f60:	88 30       	cpi	r24, 0x08	; 8
     f62:	08 f0       	brcs	.+2      	; 0xf66 <GPIO_setupPinDirection+0x1c>
     f64:	d5 c0       	rjmp	.+426    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	84 30       	cpi	r24, 0x04	; 4
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <GPIO_setupPinDirection+0x24>
     f6c:	d1 c0       	rjmp	.+418    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	3d 83       	std	Y+5, r19	; 0x05
     f76:	2c 83       	std	Y+4, r18	; 0x04
     f78:	8c 81       	ldd	r24, Y+4	; 0x04
     f7a:	9d 81       	ldd	r25, Y+5	; 0x05
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	91 05       	cpc	r25, r1
     f80:	09 f4       	brne	.+2      	; 0xf84 <GPIO_setupPinDirection+0x3a>
     f82:	43 c0       	rjmp	.+134    	; 0x100a <GPIO_setupPinDirection+0xc0>
     f84:	2c 81       	ldd	r18, Y+4	; 0x04
     f86:	3d 81       	ldd	r19, Y+5	; 0x05
     f88:	22 30       	cpi	r18, 0x02	; 2
     f8a:	31 05       	cpc	r19, r1
     f8c:	2c f4       	brge	.+10     	; 0xf98 <GPIO_setupPinDirection+0x4e>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	00 97       	sbiw	r24, 0x00	; 0
     f94:	71 f0       	breq	.+28     	; 0xfb2 <GPIO_setupPinDirection+0x68>
     f96:	bc c0       	rjmp	.+376    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
     f98:	2c 81       	ldd	r18, Y+4	; 0x04
     f9a:	3d 81       	ldd	r19, Y+5	; 0x05
     f9c:	22 30       	cpi	r18, 0x02	; 2
     f9e:	31 05       	cpc	r19, r1
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <GPIO_setupPinDirection+0x5a>
     fa2:	5f c0       	rjmp	.+190    	; 0x1062 <GPIO_setupPinDirection+0x118>
     fa4:	8c 81       	ldd	r24, Y+4	; 0x04
     fa6:	9d 81       	ldd	r25, Y+5	; 0x05
     fa8:	83 30       	cpi	r24, 0x03	; 3
     faa:	91 05       	cpc	r25, r1
     fac:	09 f4       	brne	.+2      	; 0xfb0 <GPIO_setupPinDirection+0x66>
     fae:	85 c0       	rjmp	.+266    	; 0x10ba <GPIO_setupPinDirection+0x170>
     fb0:	af c0       	rjmp	.+350    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRA,pin_num);
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	a1 f4       	brne	.+40     	; 0xfe0 <GPIO_setupPinDirection+0x96>
     fb8:	aa e3       	ldi	r26, 0x3A	; 58
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	ea e3       	ldi	r30, 0x3A	; 58
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <GPIO_setupPinDirection+0x8c>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <GPIO_setupPinDirection+0x88>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	98 c0       	rjmp	.+304    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRA,pin_num);
     fe0:	aa e3       	ldi	r26, 0x3A	; 58
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ea e3       	ldi	r30, 0x3A	; 58
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <GPIO_setupPinDirection+0xb4>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <GPIO_setupPinDirection+0xb0>
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	83 c0       	rjmp	.+262    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRB,pin_num);
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	a1 f4       	brne	.+40     	; 0x1038 <GPIO_setupPinDirection+0xee>
    1010:	a7 e3       	ldi	r26, 0x37	; 55
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e7 e3       	ldi	r30, 0x37	; 55
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <GPIO_setupPinDirection+0xe4>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <GPIO_setupPinDirection+0xe0>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	6c c0       	rjmp	.+216    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRB,pin_num);
    1038:	a7 e3       	ldi	r26, 0x37	; 55
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e7 e3       	ldi	r30, 0x37	; 55
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <GPIO_setupPinDirection+0x10c>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <GPIO_setupPinDirection+0x108>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	57 c0       	rjmp	.+174    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRC,pin_num);
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	81 30       	cpi	r24, 0x01	; 1
    1066:	a1 f4       	brne	.+40     	; 0x1090 <GPIO_setupPinDirection+0x146>
    1068:	a4 e3       	ldi	r26, 0x34	; 52
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	e4 e3       	ldi	r30, 0x34	; 52
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	48 2f       	mov	r20, r24
    1074:	8a 81       	ldd	r24, Y+2	; 0x02
    1076:	28 2f       	mov	r18, r24
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	02 2e       	mov	r0, r18
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <GPIO_setupPinDirection+0x13c>
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	0a 94       	dec	r0
    1088:	e2 f7       	brpl	.-8      	; 0x1082 <GPIO_setupPinDirection+0x138>
    108a:	84 2b       	or	r24, r20
    108c:	8c 93       	st	X, r24
    108e:	40 c0       	rjmp	.+128    	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRC,pin_num);
    1090:	a4 e3       	ldi	r26, 0x34	; 52
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e4 e3       	ldi	r30, 0x34	; 52
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	48 2f       	mov	r20, r24
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	81 e0       	ldi	r24, 0x01	; 1
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	02 2e       	mov	r0, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_setupPinDirection+0x164>
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	0a 94       	dec	r0
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_setupPinDirection+0x160>
    10b2:	80 95       	com	r24
    10b4:	84 23       	and	r24, r20
    10b6:	8c 93       	st	X, r24
    10b8:	2b c0       	rjmp	.+86     	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT) SET_BIT(DDRD,pin_num);
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	a1 f4       	brne	.+40     	; 0x10e8 <GPIO_setupPinDirection+0x19e>
    10c0:	a1 e3       	ldi	r26, 0x31	; 49
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	e1 e3       	ldi	r30, 0x31	; 49
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	48 2f       	mov	r20, r24
    10cc:	8a 81       	ldd	r24, Y+2	; 0x02
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	02 2e       	mov	r0, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_setupPinDirection+0x194>
    10da:	88 0f       	add	r24, r24
    10dc:	99 1f       	adc	r25, r25
    10de:	0a 94       	dec	r0
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_setupPinDirection+0x190>
    10e2:	84 2b       	or	r24, r20
    10e4:	8c 93       	st	X, r24
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <GPIO_setupPinDirection+0x1c6>
			else CLEAR_BIT(DDRD,pin_num);
    10e8:	a1 e3       	ldi	r26, 0x31	; 49
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	e1 e3       	ldi	r30, 0x31	; 49
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	48 2f       	mov	r20, r24
    10f4:	8a 81       	ldd	r24, Y+2	; 0x02
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <GPIO_setupPinDirection+0x1bc>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <GPIO_setupPinDirection+0x1b8>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
			break;
		}
	}
}
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	00 d0       	rcall	.+0      	; 0x1126 <GPIO_writePin+0x6>
    1126:	00 d0       	rcall	.+0      	; 0x1128 <GPIO_writePin+0x8>
    1128:	0f 92       	push	r0
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	6a 83       	std	Y+2, r22	; 0x02
    1132:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	88 30       	cpi	r24, 0x08	; 8
    1138:	08 f0       	brcs	.+2      	; 0x113c <GPIO_writePin+0x1c>
    113a:	e4 c0       	rjmp	.+456    	; 0x1304 <GPIO_writePin+0x1e4>
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	84 30       	cpi	r24, 0x04	; 4
    1140:	08 f0       	brcs	.+2      	; 0x1144 <GPIO_writePin+0x24>
    1142:	e0 c0       	rjmp	.+448    	; 0x1304 <GPIO_writePin+0x1e4>
	{
		/* Set up the pin value as required */
		switch (port_num)
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	3d 83       	std	Y+5, r19	; 0x05
    114c:	2c 83       	std	Y+4, r18	; 0x04
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	9d 81       	ldd	r25, Y+5	; 0x05
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	09 f4       	brne	.+2      	; 0x115a <GPIO_writePin+0x3a>
    1158:	47 c0       	rjmp	.+142    	; 0x11e8 <GPIO_writePin+0xc8>
    115a:	2c 81       	ldd	r18, Y+4	; 0x04
    115c:	3d 81       	ldd	r19, Y+5	; 0x05
    115e:	22 30       	cpi	r18, 0x02	; 2
    1160:	31 05       	cpc	r19, r1
    1162:	2c f4       	brge	.+10     	; 0x116e <GPIO_writePin+0x4e>
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	9d 81       	ldd	r25, Y+5	; 0x05
    1168:	00 97       	sbiw	r24, 0x00	; 0
    116a:	71 f0       	breq	.+28     	; 0x1188 <GPIO_writePin+0x68>
    116c:	cb c0       	rjmp	.+406    	; 0x1304 <GPIO_writePin+0x1e4>
    116e:	2c 81       	ldd	r18, Y+4	; 0x04
    1170:	3d 81       	ldd	r19, Y+5	; 0x05
    1172:	22 30       	cpi	r18, 0x02	; 2
    1174:	31 05       	cpc	r19, r1
    1176:	09 f4       	brne	.+2      	; 0x117a <GPIO_writePin+0x5a>
    1178:	67 c0       	rjmp	.+206    	; 0x1248 <GPIO_writePin+0x128>
    117a:	8c 81       	ldd	r24, Y+4	; 0x04
    117c:	9d 81       	ldd	r25, Y+5	; 0x05
    117e:	83 30       	cpi	r24, 0x03	; 3
    1180:	91 05       	cpc	r25, r1
    1182:	09 f4       	brne	.+2      	; 0x1186 <GPIO_writePin+0x66>
    1184:	91 c0       	rjmp	.+290    	; 0x12a8 <GPIO_writePin+0x188>
    1186:	be c0       	rjmp	.+380    	; 0x1304 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTA, pin_num);
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	88 23       	and	r24, r24
    118c:	a9 f4       	brne	.+42     	; 0x11b8 <GPIO_writePin+0x98>
    118e:	ab e3       	ldi	r26, 0x3B	; 59
    1190:	b0 e0       	ldi	r27, 0x00	; 0
    1192:	eb e3       	ldi	r30, 0x3B	; 59
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	80 81       	ld	r24, Z
    1198:	48 2f       	mov	r20, r24
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	02 2e       	mov	r0, r18
    11a6:	02 c0       	rjmp	.+4      	; 0x11ac <GPIO_writePin+0x8c>
    11a8:	88 0f       	add	r24, r24
    11aa:	99 1f       	adc	r25, r25
    11ac:	0a 94       	dec	r0
    11ae:	e2 f7       	brpl	.-8      	; 0x11a8 <GPIO_writePin+0x88>
    11b0:	80 95       	com	r24
    11b2:	84 23       	and	r24, r20
    11b4:	8c 93       	st	X, r24
    11b6:	a6 c0       	rjmp	.+332    	; 0x1304 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTA, pin_num);
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <GPIO_writePin+0xa0>
    11be:	a2 c0       	rjmp	.+324    	; 0x1304 <GPIO_writePin+0x1e4>
    11c0:	ab e3       	ldi	r26, 0x3B	; 59
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	eb e3       	ldi	r30, 0x3B	; 59
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	48 2f       	mov	r20, r24
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 2e       	mov	r0, r18
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <GPIO_writePin+0xbe>
    11da:	88 0f       	add	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	0a 94       	dec	r0
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <GPIO_writePin+0xba>
    11e2:	84 2b       	or	r24, r20
    11e4:	8c 93       	st	X, r24
    11e6:	8e c0       	rjmp	.+284    	; 0x1304 <GPIO_writePin+0x1e4>
			break;
		case PORTB_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTB, pin_num);
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	88 23       	and	r24, r24
    11ec:	a9 f4       	brne	.+42     	; 0x1218 <GPIO_writePin+0xf8>
    11ee:	a8 e3       	ldi	r26, 0x38	; 56
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e8 e3       	ldi	r30, 0x38	; 56
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	48 2f       	mov	r20, r24
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	02 2e       	mov	r0, r18
    1206:	02 c0       	rjmp	.+4      	; 0x120c <GPIO_writePin+0xec>
    1208:	88 0f       	add	r24, r24
    120a:	99 1f       	adc	r25, r25
    120c:	0a 94       	dec	r0
    120e:	e2 f7       	brpl	.-8      	; 0x1208 <GPIO_writePin+0xe8>
    1210:	80 95       	com	r24
    1212:	84 23       	and	r24, r20
    1214:	8c 93       	st	X, r24
    1216:	76 c0       	rjmp	.+236    	; 0x1304 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTB, pin_num);
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	09 f0       	breq	.+2      	; 0x1220 <GPIO_writePin+0x100>
    121e:	72 c0       	rjmp	.+228    	; 0x1304 <GPIO_writePin+0x1e4>
    1220:	a8 e3       	ldi	r26, 0x38	; 56
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e8 e3       	ldi	r30, 0x38	; 56
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_writePin+0x11e>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_writePin+0x11a>
    1242:	84 2b       	or	r24, r20
    1244:	8c 93       	st	X, r24
    1246:	5e c0       	rjmp	.+188    	; 0x1304 <GPIO_writePin+0x1e4>
			break;
		case PORTC_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTC, pin_num);
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	88 23       	and	r24, r24
    124c:	a9 f4       	brne	.+42     	; 0x1278 <GPIO_writePin+0x158>
    124e:	a5 e3       	ldi	r26, 0x35	; 53
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e5 e3       	ldi	r30, 0x35	; 53
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	48 2f       	mov	r20, r24
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	02 2e       	mov	r0, r18
    1266:	02 c0       	rjmp	.+4      	; 0x126c <GPIO_writePin+0x14c>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	0a 94       	dec	r0
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <GPIO_writePin+0x148>
    1270:	80 95       	com	r24
    1272:	84 23       	and	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	46 c0       	rjmp	.+140    	; 0x1304 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTC, pin_num);
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	81 30       	cpi	r24, 0x01	; 1
    127c:	09 f0       	breq	.+2      	; 0x1280 <GPIO_writePin+0x160>
    127e:	42 c0       	rjmp	.+132    	; 0x1304 <GPIO_writePin+0x1e4>
    1280:	a5 e3       	ldi	r26, 0x35	; 53
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	e5 e3       	ldi	r30, 0x35	; 53
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <GPIO_writePin+0x17e>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <GPIO_writePin+0x17a>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	2e c0       	rjmp	.+92     	; 0x1304 <GPIO_writePin+0x1e4>
			break;
		case PORTD_ID:
			if(value == LOGIC_LOW) CLEAR_BIT(PORTD, pin_num);
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 23       	and	r24, r24
    12ac:	a9 f4       	brne	.+42     	; 0x12d8 <GPIO_writePin+0x1b8>
    12ae:	a2 e3       	ldi	r26, 0x32	; 50
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e2 e3       	ldi	r30, 0x32	; 50
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	80 81       	ld	r24, Z
    12b8:	48 2f       	mov	r20, r24
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	28 2f       	mov	r18, r24
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	02 2e       	mov	r0, r18
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <GPIO_writePin+0x1ac>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	0a 94       	dec	r0
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <GPIO_writePin+0x1a8>
    12d0:	80 95       	com	r24
    12d2:	84 23       	and	r24, r20
    12d4:	8c 93       	st	X, r24
    12d6:	16 c0       	rjmp	.+44     	; 0x1304 <GPIO_writePin+0x1e4>
			else if(value == LOGIC_HIGH) SET_BIT(PORTD, pin_num);
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	81 30       	cpi	r24, 0x01	; 1
    12dc:	99 f4       	brne	.+38     	; 0x1304 <GPIO_writePin+0x1e4>
    12de:	a2 e3       	ldi	r26, 0x32	; 50
    12e0:	b0 e0       	ldi	r27, 0x00	; 0
    12e2:	e2 e3       	ldi	r30, 0x32	; 50
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	48 2f       	mov	r20, r24
    12ea:	8a 81       	ldd	r24, Y+2	; 0x02
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	02 2e       	mov	r0, r18
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <GPIO_writePin+0x1dc>
    12f8:	88 0f       	add	r24, r24
    12fa:	99 1f       	adc	r25, r25
    12fc:	0a 94       	dec	r0
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <GPIO_writePin+0x1d8>
    1300:	84 2b       	or	r24, r20
    1302:	8c 93       	st	X, r24
			break;
		}
	}
}
    1304:	0f 90       	pop	r0
    1306:	0f 90       	pop	r0
    1308:	0f 90       	pop	r0
    130a:	0f 90       	pop	r0
    130c:	0f 90       	pop	r0
    130e:	cf 91       	pop	r28
    1310:	df 91       	pop	r29
    1312:	08 95       	ret

00001314 <GPIO_readPin>:
/*
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1314:	df 93       	push	r29
    1316:	cf 93       	push	r28
    1318:	cd b7       	in	r28, 0x3d	; 61
    131a:	de b7       	in	r29, 0x3e	; 62
    131c:	29 97       	sbiw	r28, 0x09	; 9
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	f8 94       	cli
    1322:	de bf       	out	0x3e, r29	; 62
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	89 83       	std	Y+1, r24	; 0x01
    132a:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num < NUM_OF_PINS_PER_PORT) && (port_num < NUM_OF_PORTS))
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	88 30       	cpi	r24, 0x08	; 8
    1330:	08 f0       	brcs	.+2      	; 0x1334 <GPIO_readPin+0x20>
    1332:	8d c0       	rjmp	.+282    	; 0x144e <GPIO_readPin+0x13a>
    1334:	89 81       	ldd	r24, Y+1	; 0x01
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	08 f0       	brcs	.+2      	; 0x133c <GPIO_readPin+0x28>
    133a:	89 c0       	rjmp	.+274    	; 0x144e <GPIO_readPin+0x13a>
	{
		/* Return the value of the desired pin as required */
		switch (port_num)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	39 87       	std	Y+9, r19	; 0x09
    1344:	28 87       	std	Y+8, r18	; 0x08
    1346:	48 85       	ldd	r20, Y+8	; 0x08
    1348:	59 85       	ldd	r21, Y+9	; 0x09
    134a:	41 30       	cpi	r20, 0x01	; 1
    134c:	51 05       	cpc	r21, r1
    134e:	89 f1       	breq	.+98     	; 0x13b2 <GPIO_readPin+0x9e>
    1350:	88 85       	ldd	r24, Y+8	; 0x08
    1352:	99 85       	ldd	r25, Y+9	; 0x09
    1354:	82 30       	cpi	r24, 0x02	; 2
    1356:	91 05       	cpc	r25, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <GPIO_readPin+0x52>
    135a:	28 85       	ldd	r18, Y+8	; 0x08
    135c:	39 85       	ldd	r19, Y+9	; 0x09
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	69 f0       	breq	.+26     	; 0x137e <GPIO_readPin+0x6a>
    1364:	74 c0       	rjmp	.+232    	; 0x144e <GPIO_readPin+0x13a>
    1366:	48 85       	ldd	r20, Y+8	; 0x08
    1368:	59 85       	ldd	r21, Y+9	; 0x09
    136a:	42 30       	cpi	r20, 0x02	; 2
    136c:	51 05       	cpc	r21, r1
    136e:	d9 f1       	breq	.+118    	; 0x13e6 <GPIO_readPin+0xd2>
    1370:	88 85       	ldd	r24, Y+8	; 0x08
    1372:	99 85       	ldd	r25, Y+9	; 0x09
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <GPIO_readPin+0x68>
    137a:	4f c0       	rjmp	.+158    	; 0x141a <GPIO_readPin+0x106>
    137c:	68 c0       	rjmp	.+208    	; 0x144e <GPIO_readPin+0x13a>
		{
		case PORTA_ID:
			return (BIT_IS_SET(PINA, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    137e:	e9 e3       	ldi	r30, 0x39	; 57
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	80 81       	ld	r24, Z
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	88 2f       	mov	r24, r24
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	a9 01       	movw	r20, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_readPin+0x82>
    1392:	55 95       	asr	r21
    1394:	47 95       	ror	r20
    1396:	8a 95       	dec	r24
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_readPin+0x7e>
    139a:	ca 01       	movw	r24, r20
    139c:	81 70       	andi	r24, 0x01	; 1
    139e:	90 70       	andi	r25, 0x00	; 0
    13a0:	88 23       	and	r24, r24
    13a2:	19 f0       	breq	.+6      	; 0x13aa <GPIO_readPin+0x96>
    13a4:	51 e0       	ldi	r21, 0x01	; 1
    13a6:	5e 83       	std	Y+6, r21	; 0x06
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <GPIO_readPin+0x98>
    13aa:	1e 82       	std	Y+6, r1	; 0x06
    13ac:	8e 81       	ldd	r24, Y+6	; 0x06
    13ae:	8f 83       	std	Y+7, r24	; 0x07
    13b0:	4f c0       	rjmp	.+158    	; 0x1450 <GPIO_readPin+0x13c>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    13b2:	e6 e3       	ldi	r30, 0x36	; 54
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	28 2f       	mov	r18, r24
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	8a 81       	ldd	r24, Y+2	; 0x02
    13be:	88 2f       	mov	r24, r24
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	a9 01       	movw	r20, r18
    13c4:	02 c0       	rjmp	.+4      	; 0x13ca <GPIO_readPin+0xb6>
    13c6:	55 95       	asr	r21
    13c8:	47 95       	ror	r20
    13ca:	8a 95       	dec	r24
    13cc:	e2 f7       	brpl	.-8      	; 0x13c6 <GPIO_readPin+0xb2>
    13ce:	ca 01       	movw	r24, r20
    13d0:	81 70       	andi	r24, 0x01	; 1
    13d2:	90 70       	andi	r25, 0x00	; 0
    13d4:	88 23       	and	r24, r24
    13d6:	19 f0       	breq	.+6      	; 0x13de <GPIO_readPin+0xca>
    13d8:	51 e0       	ldi	r21, 0x01	; 1
    13da:	5d 83       	std	Y+5, r21	; 0x05
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <GPIO_readPin+0xcc>
    13de:	1d 82       	std	Y+5, r1	; 0x05
    13e0:	8d 81       	ldd	r24, Y+5	; 0x05
    13e2:	8f 83       	std	Y+7, r24	; 0x07
    13e4:	35 c0       	rjmp	.+106    	; 0x1450 <GPIO_readPin+0x13c>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    13e6:	e3 e3       	ldi	r30, 0x33	; 51
    13e8:	f0 e0       	ldi	r31, 0x00	; 0
    13ea:	80 81       	ld	r24, Z
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	8a 81       	ldd	r24, Y+2	; 0x02
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a9 01       	movw	r20, r18
    13f8:	02 c0       	rjmp	.+4      	; 0x13fe <GPIO_readPin+0xea>
    13fa:	55 95       	asr	r21
    13fc:	47 95       	ror	r20
    13fe:	8a 95       	dec	r24
    1400:	e2 f7       	brpl	.-8      	; 0x13fa <GPIO_readPin+0xe6>
    1402:	ca 01       	movw	r24, r20
    1404:	81 70       	andi	r24, 0x01	; 1
    1406:	90 70       	andi	r25, 0x00	; 0
    1408:	88 23       	and	r24, r24
    140a:	19 f0       	breq	.+6      	; 0x1412 <GPIO_readPin+0xfe>
    140c:	51 e0       	ldi	r21, 0x01	; 1
    140e:	5c 83       	std	Y+4, r21	; 0x04
    1410:	01 c0       	rjmp	.+2      	; 0x1414 <GPIO_readPin+0x100>
    1412:	1c 82       	std	Y+4, r1	; 0x04
    1414:	8c 81       	ldd	r24, Y+4	; 0x04
    1416:	8f 83       	std	Y+7, r24	; 0x07
    1418:	1b c0       	rjmp	.+54     	; 0x1450 <GPIO_readPin+0x13c>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND, pin_num)? LOGIC_HIGH : LOGIC_LOW);
    141a:	e0 e3       	ldi	r30, 0x30	; 48
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	28 2f       	mov	r18, r24
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	8a 81       	ldd	r24, Y+2	; 0x02
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	a9 01       	movw	r20, r18
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <GPIO_readPin+0x11e>
    142e:	55 95       	asr	r21
    1430:	47 95       	ror	r20
    1432:	8a 95       	dec	r24
    1434:	e2 f7       	brpl	.-8      	; 0x142e <GPIO_readPin+0x11a>
    1436:	ca 01       	movw	r24, r20
    1438:	81 70       	andi	r24, 0x01	; 1
    143a:	90 70       	andi	r25, 0x00	; 0
    143c:	88 23       	and	r24, r24
    143e:	19 f0       	breq	.+6      	; 0x1446 <GPIO_readPin+0x132>
    1440:	51 e0       	ldi	r21, 0x01	; 1
    1442:	5b 83       	std	Y+3, r21	; 0x03
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <GPIO_readPin+0x134>
    1446:	1b 82       	std	Y+3, r1	; 0x03
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <GPIO_readPin+0x13c>
			break;
		}
	}
	return LOGIC_LOW;
    144e:	1f 82       	std	Y+7, r1	; 0x07
    1450:	8f 81       	ldd	r24, Y+7	; 0x07
}
    1452:	29 96       	adiw	r28, 0x09	; 9
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	de bf       	out	0x3e, r29	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	cd bf       	out	0x3d, r28	; 61
    145e:	cf 91       	pop	r28
    1460:	df 91       	pop	r29
    1462:	08 95       	ret

00001464 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1464:	df 93       	push	r29
    1466:	cf 93       	push	r28
    1468:	00 d0       	rcall	.+0      	; 0x146a <GPIO_setupPortDirection+0x6>
    146a:	00 d0       	rcall	.+0      	; 0x146c <GPIO_setupPortDirection+0x8>
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	84 30       	cpi	r24, 0x04	; 4
    1478:	90 f5       	brcc	.+100    	; 0x14de <GPIO_setupPortDirection+0x7a>
	{
		/* Setup the port direction as required */
		switch(port_num)
    147a:	89 81       	ldd	r24, Y+1	; 0x01
    147c:	28 2f       	mov	r18, r24
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	3c 83       	std	Y+4, r19	; 0x04
    1482:	2b 83       	std	Y+3, r18	; 0x03
    1484:	8b 81       	ldd	r24, Y+3	; 0x03
    1486:	9c 81       	ldd	r25, Y+4	; 0x04
    1488:	81 30       	cpi	r24, 0x01	; 1
    148a:	91 05       	cpc	r25, r1
    148c:	d1 f0       	breq	.+52     	; 0x14c2 <GPIO_setupPortDirection+0x5e>
    148e:	2b 81       	ldd	r18, Y+3	; 0x03
    1490:	3c 81       	ldd	r19, Y+4	; 0x04
    1492:	22 30       	cpi	r18, 0x02	; 2
    1494:	31 05       	cpc	r19, r1
    1496:	2c f4       	brge	.+10     	; 0x14a2 <GPIO_setupPortDirection+0x3e>
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	9c 81       	ldd	r25, Y+4	; 0x04
    149c:	00 97       	sbiw	r24, 0x00	; 0
    149e:	61 f0       	breq	.+24     	; 0x14b8 <GPIO_setupPortDirection+0x54>
    14a0:	1e c0       	rjmp	.+60     	; 0x14de <GPIO_setupPortDirection+0x7a>
    14a2:	2b 81       	ldd	r18, Y+3	; 0x03
    14a4:	3c 81       	ldd	r19, Y+4	; 0x04
    14a6:	22 30       	cpi	r18, 0x02	; 2
    14a8:	31 05       	cpc	r19, r1
    14aa:	81 f0       	breq	.+32     	; 0x14cc <GPIO_setupPortDirection+0x68>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	9c 81       	ldd	r25, Y+4	; 0x04
    14b0:	83 30       	cpi	r24, 0x03	; 3
    14b2:	91 05       	cpc	r25, r1
    14b4:	81 f0       	breq	.+32     	; 0x14d6 <GPIO_setupPortDirection+0x72>
    14b6:	13 c0       	rjmp	.+38     	; 0x14de <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14b8:	ea e3       	ldi	r30, 0x3A	; 58
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	80 83       	st	Z, r24
    14c0:	0e c0       	rjmp	.+28     	; 0x14de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14c2:	e7 e3       	ldi	r30, 0x37	; 55
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	80 83       	st	Z, r24
    14ca:	09 c0       	rjmp	.+18     	; 0x14de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14cc:	e4 e3       	ldi	r30, 0x34	; 52
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	8a 81       	ldd	r24, Y+2	; 0x02
    14d2:	80 83       	st	Z, r24
    14d4:	04 c0       	rjmp	.+8      	; 0x14de <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    14d6:	e1 e3       	ldi	r30, 0x31	; 49
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	80 83       	st	Z, r24
			break;
		}
	}
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <GPIO_writePort+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <GPIO_writePort+0x8>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num < NUM_OF_PORTS)
    14fc:	89 81       	ldd	r24, Y+1	; 0x01
    14fe:	84 30       	cpi	r24, 0x04	; 4
    1500:	90 f5       	brcc	.+100    	; 0x1566 <GPIO_writePort+0x7a>
	{
		/* Setup the port value as required */
		switch(port_num)
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	3c 83       	std	Y+4, r19	; 0x04
    150a:	2b 83       	std	Y+3, r18	; 0x03
    150c:	8b 81       	ldd	r24, Y+3	; 0x03
    150e:	9c 81       	ldd	r25, Y+4	; 0x04
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	91 05       	cpc	r25, r1
    1514:	d1 f0       	breq	.+52     	; 0x154a <GPIO_writePort+0x5e>
    1516:	2b 81       	ldd	r18, Y+3	; 0x03
    1518:	3c 81       	ldd	r19, Y+4	; 0x04
    151a:	22 30       	cpi	r18, 0x02	; 2
    151c:	31 05       	cpc	r19, r1
    151e:	2c f4       	brge	.+10     	; 0x152a <GPIO_writePort+0x3e>
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	9c 81       	ldd	r25, Y+4	; 0x04
    1524:	00 97       	sbiw	r24, 0x00	; 0
    1526:	61 f0       	breq	.+24     	; 0x1540 <GPIO_writePort+0x54>
    1528:	1e c0       	rjmp	.+60     	; 0x1566 <GPIO_writePort+0x7a>
    152a:	2b 81       	ldd	r18, Y+3	; 0x03
    152c:	3c 81       	ldd	r19, Y+4	; 0x04
    152e:	22 30       	cpi	r18, 0x02	; 2
    1530:	31 05       	cpc	r19, r1
    1532:	81 f0       	breq	.+32     	; 0x1554 <GPIO_writePort+0x68>
    1534:	8b 81       	ldd	r24, Y+3	; 0x03
    1536:	9c 81       	ldd	r25, Y+4	; 0x04
    1538:	83 30       	cpi	r24, 0x03	; 3
    153a:	91 05       	cpc	r25, r1
    153c:	81 f0       	breq	.+32     	; 0x155e <GPIO_writePort+0x72>
    153e:	13 c0       	rjmp	.+38     	; 0x1566 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1540:	eb e3       	ldi	r30, 0x3B	; 59
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	80 83       	st	Z, r24
    1548:	0e c0       	rjmp	.+28     	; 0x1566 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    154a:	e8 e3       	ldi	r30, 0x38	; 56
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	8a 81       	ldd	r24, Y+2	; 0x02
    1550:	80 83       	st	Z, r24
    1552:	09 c0       	rjmp	.+18     	; 0x1566 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1554:	e5 e3       	ldi	r30, 0x35	; 53
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	8a 81       	ldd	r24, Y+2	; 0x02
    155a:	80 83       	st	Z, r24
    155c:	04 c0       	rjmp	.+8      	; 0x1566 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    155e:	e2 e3       	ldi	r30, 0x32	; 50
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	80 83       	st	Z, r24
			break;
		}
	}
}
    1566:	0f 90       	pop	r0
    1568:	0f 90       	pop	r0
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <GPIO_readPort>:
/*
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <GPIO_readPort+0x6>
    157a:	00 d0       	rcall	.+0      	; 0x157c <GPIO_readPort+0x8>
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	89 83       	std	Y+1, r24	; 0x01
	if(port_num < NUM_OF_PORTS)
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	98 f5       	brcc	.+102    	; 0x15ee <GPIO_readPort+0x7a>
	{
		/* Return the value of the desired port as required */
		switch(port_num)
    1588:	89 81       	ldd	r24, Y+1	; 0x01
    158a:	28 2f       	mov	r18, r24
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	3c 83       	std	Y+4, r19	; 0x04
    1590:	2b 83       	std	Y+3, r18	; 0x03
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	81 30       	cpi	r24, 0x01	; 1
    1598:	91 05       	cpc	r25, r1
    159a:	d1 f0       	breq	.+52     	; 0x15d0 <GPIO_readPort+0x5c>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <GPIO_readPort+0x3c>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	00 97       	sbiw	r24, 0x00	; 0
    15ac:	61 f0       	breq	.+24     	; 0x15c6 <GPIO_readPort+0x52>
    15ae:	1f c0       	rjmp	.+62     	; 0x15ee <GPIO_readPort+0x7a>
    15b0:	2b 81       	ldd	r18, Y+3	; 0x03
    15b2:	3c 81       	ldd	r19, Y+4	; 0x04
    15b4:	22 30       	cpi	r18, 0x02	; 2
    15b6:	31 05       	cpc	r19, r1
    15b8:	81 f0       	breq	.+32     	; 0x15da <GPIO_readPort+0x66>
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	83 30       	cpi	r24, 0x03	; 3
    15c0:	91 05       	cpc	r25, r1
    15c2:	81 f0       	breq	.+32     	; 0x15e4 <GPIO_readPort+0x70>
    15c4:	14 c0       	rjmp	.+40     	; 0x15ee <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    15c6:	e9 e3       	ldi	r30, 0x39	; 57
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	90 81       	ld	r25, Z
    15cc:	9a 83       	std	Y+2, r25	; 0x02
    15ce:	10 c0       	rjmp	.+32     	; 0x15f0 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    15d0:	e6 e3       	ldi	r30, 0x36	; 54
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	20 81       	ld	r18, Z
    15d6:	2a 83       	std	Y+2, r18	; 0x02
    15d8:	0b c0       	rjmp	.+22     	; 0x15f0 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    15da:	e3 e3       	ldi	r30, 0x33	; 51
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	30 81       	ld	r19, Z
    15e0:	3a 83       	std	Y+2, r19	; 0x02
    15e2:	06 c0       	rjmp	.+12     	; 0x15f0 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    15e4:	e0 e3       	ldi	r30, 0x30	; 48
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	80 81       	ld	r24, Z
    15ea:	8a 83       	std	Y+2, r24	; 0x02
    15ec:	01 c0       	rjmp	.+2      	; 0x15f0 <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    15ee:	1a 82       	std	Y+2, r1	; 0x02
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	60 97       	sbiw	r28, 0x10	; 16
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	60 e0       	ldi	r22, 0x00	; 0
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	40 e0       	ldi	r20, 0x00	; 0
    1624:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1628:	83 e0       	ldi	r24, 0x03	; 3
    162a:	62 e0       	ldi	r22, 0x02	; 2
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1632:	83 e0       	ldi	r24, 0x03	; 3
    1634:	63 e0       	ldi	r22, 0x03	; 3
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    163c:	83 e0       	ldi	r24, 0x03	; 3
    163e:	64 e0       	ldi	r22, 0x04	; 4
    1640:	40 e0       	ldi	r20, 0x00	; 0
    1642:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1646:	83 e0       	ldi	r24, 0x03	; 3
    1648:	65 e0       	ldi	r22, 0x05	; 5
    164a:	40 e0       	ldi	r20, 0x00	; 0
    164c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	66 e0       	ldi	r22, 0x06	; 6
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	67 e0       	ldi	r22, 0x07	; 7
    165e:	40 e0       	ldi	r20, 0x00	; 0
    1660:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1664:	1f 86       	std	Y+15, r1	; 0x0f
    1666:	ab c0       	rjmp	.+342    	; 0x17be <KEYPAD_getPressedKey+0x1be>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1668:	83 e0       	ldi	r24, 0x03	; 3
    166a:	6f 85       	ldd	r22, Y+15	; 0x0f
    166c:	41 e0       	ldi	r20, 0x01	; 1
    166e:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1672:	83 e0       	ldi	r24, 0x03	; 3
    1674:	6f 85       	ldd	r22, Y+15	; 0x0f
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    167c:	18 8a       	std	Y+16, r1	; 0x10
    167e:	22 c0       	rjmp	.+68     	; 0x16c4 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1680:	88 89       	ldd	r24, Y+16	; 0x10
    1682:	98 2f       	mov	r25, r24
    1684:	9c 5f       	subi	r25, 0xFC	; 252
    1686:	83 e0       	ldi	r24, 0x03	; 3
    1688:	69 2f       	mov	r22, r25
    168a:	0e 94 8a 09 	call	0x1314	; 0x1314 <GPIO_readPin>
    168e:	88 23       	and	r24, r24
    1690:	b1 f4       	brne	.+44     	; 0x16be <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1692:	8f 85       	ldd	r24, Y+15	; 0x0f
    1694:	88 2f       	mov	r24, r24
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	98 2f       	mov	r25, r24
    16a2:	88 89       	ldd	r24, Y+16	; 0x10
    16a4:	89 0f       	add	r24, r25
    16a6:	8f 5f       	subi	r24, 0xFF	; 255
    16a8:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    16ac:	60 96       	adiw	r28, 0x10	; 16
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    16be:	88 89       	ldd	r24, Y+16	; 0x10
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	88 8b       	std	Y+16, r24	; 0x10
    16c4:	88 89       	ldd	r24, Y+16	; 0x10
    16c6:	84 30       	cpi	r24, 0x04	; 4
    16c8:	d8 f2       	brcs	.-74     	; 0x1680 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    16ce:	40 e0       	ldi	r20, 0x00	; 0
    16d0:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
    16d4:	80 e0       	ldi	r24, 0x00	; 0
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	a0 ea       	ldi	r26, 0xA0	; 160
    16da:	b0 e4       	ldi	r27, 0x40	; 64
    16dc:	8b 87       	std	Y+11, r24	; 0x0b
    16de:	9c 87       	std	Y+12, r25	; 0x0c
    16e0:	ad 87       	std	Y+13, r26	; 0x0d
    16e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    16e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    16ec:	20 e0       	ldi	r18, 0x00	; 0
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	4a e7       	ldi	r20, 0x7A	; 122
    16f2:	53 e4       	ldi	r21, 0x43	; 67
    16f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f8:	dc 01       	movw	r26, r24
    16fa:	cb 01       	movw	r24, r22
    16fc:	8f 83       	std	Y+7, r24	; 0x07
    16fe:	98 87       	std	Y+8, r25	; 0x08
    1700:	a9 87       	std	Y+9, r26	; 0x09
    1702:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1704:	6f 81       	ldd	r22, Y+7	; 0x07
    1706:	78 85       	ldd	r23, Y+8	; 0x08
    1708:	89 85       	ldd	r24, Y+9	; 0x09
    170a:	9a 85       	ldd	r25, Y+10	; 0x0a
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	40 e8       	ldi	r20, 0x80	; 128
    1712:	5f e3       	ldi	r21, 0x3F	; 63
    1714:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1718:	88 23       	and	r24, r24
    171a:	2c f4       	brge	.+10     	; 0x1726 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	9e 83       	std	Y+6, r25	; 0x06
    1722:	8d 83       	std	Y+5, r24	; 0x05
    1724:	3f c0       	rjmp	.+126    	; 0x17a4 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1726:	6f 81       	ldd	r22, Y+7	; 0x07
    1728:	78 85       	ldd	r23, Y+8	; 0x08
    172a:	89 85       	ldd	r24, Y+9	; 0x09
    172c:	9a 85       	ldd	r25, Y+10	; 0x0a
    172e:	20 e0       	ldi	r18, 0x00	; 0
    1730:	3f ef       	ldi	r19, 0xFF	; 255
    1732:	4f e7       	ldi	r20, 0x7F	; 127
    1734:	57 e4       	ldi	r21, 0x47	; 71
    1736:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    173a:	18 16       	cp	r1, r24
    173c:	4c f5       	brge	.+82     	; 0x1790 <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    173e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1740:	7c 85       	ldd	r23, Y+12	; 0x0c
    1742:	8d 85       	ldd	r24, Y+13	; 0x0d
    1744:	9e 85       	ldd	r25, Y+14	; 0x0e
    1746:	20 e0       	ldi	r18, 0x00	; 0
    1748:	30 e0       	ldi	r19, 0x00	; 0
    174a:	40 e2       	ldi	r20, 0x20	; 32
    174c:	51 e4       	ldi	r21, 0x41	; 65
    174e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1752:	dc 01       	movw	r26, r24
    1754:	cb 01       	movw	r24, r22
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	9e 83       	std	Y+6, r25	; 0x06
    1764:	8d 83       	std	Y+5, r24	; 0x05
    1766:	0f c0       	rjmp	.+30     	; 0x1786 <KEYPAD_getPressedKey+0x186>
    1768:	89 e1       	ldi	r24, 0x19	; 25
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	9c 83       	std	Y+4, r25	; 0x04
    176e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1770:	8b 81       	ldd	r24, Y+3	; 0x03
    1772:	9c 81       	ldd	r25, Y+4	; 0x04
    1774:	01 97       	sbiw	r24, 0x01	; 1
    1776:	f1 f7       	brne	.-4      	; 0x1774 <KEYPAD_getPressedKey+0x174>
    1778:	9c 83       	std	Y+4, r25	; 0x04
    177a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    177c:	8d 81       	ldd	r24, Y+5	; 0x05
    177e:	9e 81       	ldd	r25, Y+6	; 0x06
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9e 83       	std	Y+6, r25	; 0x06
    1784:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1786:	8d 81       	ldd	r24, Y+5	; 0x05
    1788:	9e 81       	ldd	r25, Y+6	; 0x06
    178a:	00 97       	sbiw	r24, 0x00	; 0
    178c:	69 f7       	brne	.-38     	; 0x1768 <KEYPAD_getPressedKey+0x168>
    178e:	14 c0       	rjmp	.+40     	; 0x17b8 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1790:	6f 81       	ldd	r22, Y+7	; 0x07
    1792:	78 85       	ldd	r23, Y+8	; 0x08
    1794:	89 85       	ldd	r24, Y+9	; 0x09
    1796:	9a 85       	ldd	r25, Y+10	; 0x0a
    1798:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	9e 83       	std	Y+6, r25	; 0x06
    17a2:	8d 83       	std	Y+5, r24	; 0x05
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
    17ac:	89 81       	ldd	r24, Y+1	; 0x01
    17ae:	9a 81       	ldd	r25, Y+2	; 0x02
    17b0:	01 97       	sbiw	r24, 0x01	; 1
    17b2:	f1 f7       	brne	.-4      	; 0x17b0 <KEYPAD_getPressedKey+0x1b0>
    17b4:	9a 83       	std	Y+2, r25	; 0x02
    17b6:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    17b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	8f 87       	std	Y+15, r24	; 0x0f
    17be:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	08 f4       	brcc	.+2      	; 0x17c6 <KEYPAD_getPressedKey+0x1c6>
    17c4:	51 cf       	rjmp	.-350    	; 0x1668 <KEYPAD_getPressedKey+0x68>
    17c6:	4e cf       	rjmp	.-356    	; 0x1664 <KEYPAD_getPressedKey+0x64>

000017c8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    17c8:	df 93       	push	r29
    17ca:	cf 93       	push	r28
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <KEYPAD_4x4_adjustKeyNumber+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <KEYPAD_4x4_adjustKeyNumber+0x8>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    17d6:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    17d8:	8a 81       	ldd	r24, Y+2	; 0x02
    17da:	28 2f       	mov	r18, r24
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	3c 83       	std	Y+4, r19	; 0x04
    17e0:	2b 83       	std	Y+3, r18	; 0x03
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	9c 81       	ldd	r25, Y+4	; 0x04
    17e6:	88 30       	cpi	r24, 0x08	; 8
    17e8:	91 05       	cpc	r25, r1
    17ea:	09 f4       	brne	.+2      	; 0x17ee <KEYPAD_4x4_adjustKeyNumber+0x26>
    17ec:	70 c0       	rjmp	.+224    	; 0x18ce <KEYPAD_4x4_adjustKeyNumber+0x106>
    17ee:	2b 81       	ldd	r18, Y+3	; 0x03
    17f0:	3c 81       	ldd	r19, Y+4	; 0x04
    17f2:	29 30       	cpi	r18, 0x09	; 9
    17f4:	31 05       	cpc	r19, r1
    17f6:	5c f5       	brge	.+86     	; 0x184e <KEYPAD_4x4_adjustKeyNumber+0x86>
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	9c 81       	ldd	r25, Y+4	; 0x04
    17fc:	84 30       	cpi	r24, 0x04	; 4
    17fe:	91 05       	cpc	r25, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1802:	59 c0       	rjmp	.+178    	; 0x18b6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1804:	2b 81       	ldd	r18, Y+3	; 0x03
    1806:	3c 81       	ldd	r19, Y+4	; 0x04
    1808:	25 30       	cpi	r18, 0x05	; 5
    180a:	31 05       	cpc	r19, r1
    180c:	9c f4       	brge	.+38     	; 0x1834 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	82 30       	cpi	r24, 0x02	; 2
    1814:	91 05       	cpc	r25, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1818:	48 c0       	rjmp	.+144    	; 0x18aa <KEYPAD_4x4_adjustKeyNumber+0xe2>
    181a:	2b 81       	ldd	r18, Y+3	; 0x03
    181c:	3c 81       	ldd	r19, Y+4	; 0x04
    181e:	23 30       	cpi	r18, 0x03	; 3
    1820:	31 05       	cpc	r19, r1
    1822:	0c f0       	brlt	.+2      	; 0x1826 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1824:	45 c0       	rjmp	.+138    	; 0x18b0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1826:	8b 81       	ldd	r24, Y+3	; 0x03
    1828:	9c 81       	ldd	r25, Y+4	; 0x04
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	91 05       	cpc	r25, r1
    182e:	09 f4       	brne	.+2      	; 0x1832 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1830:	39 c0       	rjmp	.+114    	; 0x18a4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1832:	67 c0       	rjmp	.+206    	; 0x1902 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1834:	2b 81       	ldd	r18, Y+3	; 0x03
    1836:	3c 81       	ldd	r19, Y+4	; 0x04
    1838:	26 30       	cpi	r18, 0x06	; 6
    183a:	31 05       	cpc	r19, r1
    183c:	09 f4       	brne	.+2      	; 0x1840 <KEYPAD_4x4_adjustKeyNumber+0x78>
    183e:	41 c0       	rjmp	.+130    	; 0x18c2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	9c 81       	ldd	r25, Y+4	; 0x04
    1844:	87 30       	cpi	r24, 0x07	; 7
    1846:	91 05       	cpc	r25, r1
    1848:	0c f0       	brlt	.+2      	; 0x184c <KEYPAD_4x4_adjustKeyNumber+0x84>
    184a:	3e c0       	rjmp	.+124    	; 0x18c8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    184c:	37 c0       	rjmp	.+110    	; 0x18bc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    184e:	2b 81       	ldd	r18, Y+3	; 0x03
    1850:	3c 81       	ldd	r19, Y+4	; 0x04
    1852:	2c 30       	cpi	r18, 0x0C	; 12
    1854:	31 05       	cpc	r19, r1
    1856:	09 f4       	brne	.+2      	; 0x185a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1858:	46 c0       	rjmp	.+140    	; 0x18e6 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    185a:	8b 81       	ldd	r24, Y+3	; 0x03
    185c:	9c 81       	ldd	r25, Y+4	; 0x04
    185e:	8d 30       	cpi	r24, 0x0D	; 13
    1860:	91 05       	cpc	r25, r1
    1862:	5c f4       	brge	.+22     	; 0x187a <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1864:	2b 81       	ldd	r18, Y+3	; 0x03
    1866:	3c 81       	ldd	r19, Y+4	; 0x04
    1868:	2a 30       	cpi	r18, 0x0A	; 10
    186a:	31 05       	cpc	r19, r1
    186c:	b1 f1       	breq	.+108    	; 0x18da <KEYPAD_4x4_adjustKeyNumber+0x112>
    186e:	8b 81       	ldd	r24, Y+3	; 0x03
    1870:	9c 81       	ldd	r25, Y+4	; 0x04
    1872:	8b 30       	cpi	r24, 0x0B	; 11
    1874:	91 05       	cpc	r25, r1
    1876:	a4 f5       	brge	.+104    	; 0x18e0 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1878:	2d c0       	rjmp	.+90     	; 0x18d4 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    187a:	2b 81       	ldd	r18, Y+3	; 0x03
    187c:	3c 81       	ldd	r19, Y+4	; 0x04
    187e:	2e 30       	cpi	r18, 0x0E	; 14
    1880:	31 05       	cpc	r19, r1
    1882:	b9 f1       	breq	.+110    	; 0x18f2 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	8e 30       	cpi	r24, 0x0E	; 14
    188a:	91 05       	cpc	r25, r1
    188c:	7c f1       	brlt	.+94     	; 0x18ec <KEYPAD_4x4_adjustKeyNumber+0x124>
    188e:	2b 81       	ldd	r18, Y+3	; 0x03
    1890:	3c 81       	ldd	r19, Y+4	; 0x04
    1892:	2f 30       	cpi	r18, 0x0F	; 15
    1894:	31 05       	cpc	r19, r1
    1896:	79 f1       	breq	.+94     	; 0x18f6 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1898:	8b 81       	ldd	r24, Y+3	; 0x03
    189a:	9c 81       	ldd	r25, Y+4	; 0x04
    189c:	80 31       	cpi	r24, 0x10	; 16
    189e:	91 05       	cpc	r25, r1
    18a0:	69 f1       	breq	.+90     	; 0x18fc <KEYPAD_4x4_adjustKeyNumber+0x134>
    18a2:	2f c0       	rjmp	.+94     	; 0x1902 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    18a4:	87 e0       	ldi	r24, 0x07	; 7
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	2e c0       	rjmp	.+92     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    18aa:	88 e0       	ldi	r24, 0x08	; 8
    18ac:	89 83       	std	Y+1, r24	; 0x01
    18ae:	2b c0       	rjmp	.+86     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    18b0:	89 e0       	ldi	r24, 0x09	; 9
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	28 c0       	rjmp	.+80     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    18b6:	85 e2       	ldi	r24, 0x25	; 37
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	25 c0       	rjmp	.+74     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    18bc:	84 e0       	ldi	r24, 0x04	; 4
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	22 c0       	rjmp	.+68     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    18c2:	85 e0       	ldi	r24, 0x05	; 5
    18c4:	89 83       	std	Y+1, r24	; 0x01
    18c6:	1f c0       	rjmp	.+62     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    18c8:	86 e0       	ldi	r24, 0x06	; 6
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	1c c0       	rjmp	.+56     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    18ce:	8a e2       	ldi	r24, 0x2A	; 42
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	19 c0       	rjmp	.+50     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    18d4:	81 e0       	ldi	r24, 0x01	; 1
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	16 c0       	rjmp	.+44     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    18da:	82 e0       	ldi	r24, 0x02	; 2
    18dc:	89 83       	std	Y+1, r24	; 0x01
    18de:	13 c0       	rjmp	.+38     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    18e0:	83 e0       	ldi	r24, 0x03	; 3
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	10 c0       	rjmp	.+32     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    18e6:	8d e2       	ldi	r24, 0x2D	; 45
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    18ec:	8d e0       	ldi	r24, 0x0D	; 13
    18ee:	89 83       	std	Y+1, r24	; 0x01
    18f0:	0a c0       	rjmp	.+20     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    18f2:	19 82       	std	Y+1, r1	; 0x01
    18f4:	08 c0       	rjmp	.+16     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    18f6:	8d e3       	ldi	r24, 0x3D	; 61
    18f8:	89 83       	std	Y+1, r24	; 0x01
    18fa:	05 c0       	rjmp	.+10     	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    18fc:	8b e2       	ldi	r24, 0x2B	; 43
    18fe:	89 83       	std	Y+1, r24	; 0x01
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
}
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	0f 90       	pop	r0
    1910:	cf 91       	pop	r28
    1912:	df 91       	pop	r29
    1914:	08 95       	ret

00001916 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1916:	df 93       	push	r29
    1918:	cf 93       	push	r28
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	2e 97       	sbiw	r28, 0x0e	; 14
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	41 e0       	ldi	r20, 0x01	; 1
    1930:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1934:	82 e0       	ldi	r24, 0x02	; 2
    1936:	61 e0       	ldi	r22, 0x01	; 1
    1938:	41 e0       	ldi	r20, 0x01	; 1
    193a:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
    193e:	80 e0       	ldi	r24, 0x00	; 0
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a0 ea       	ldi	r26, 0xA0	; 160
    1944:	b1 e4       	ldi	r27, 0x41	; 65
    1946:	8b 87       	std	Y+11, r24	; 0x0b
    1948:	9c 87       	std	Y+12, r25	; 0x0c
    194a:	ad 87       	std	Y+13, r26	; 0x0d
    194c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1950:	7c 85       	ldd	r23, Y+12	; 0x0c
    1952:	8d 85       	ldd	r24, Y+13	; 0x0d
    1954:	9e 85       	ldd	r25, Y+14	; 0x0e
    1956:	20 e0       	ldi	r18, 0x00	; 0
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	4a e7       	ldi	r20, 0x7A	; 122
    195c:	53 e4       	ldi	r21, 0x43	; 67
    195e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1962:	dc 01       	movw	r26, r24
    1964:	cb 01       	movw	r24, r22
    1966:	8f 83       	std	Y+7, r24	; 0x07
    1968:	98 87       	std	Y+8, r25	; 0x08
    196a:	a9 87       	std	Y+9, r26	; 0x09
    196c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    196e:	6f 81       	ldd	r22, Y+7	; 0x07
    1970:	78 85       	ldd	r23, Y+8	; 0x08
    1972:	89 85       	ldd	r24, Y+9	; 0x09
    1974:	9a 85       	ldd	r25, Y+10	; 0x0a
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	40 e8       	ldi	r20, 0x80	; 128
    197c:	5f e3       	ldi	r21, 0x3F	; 63
    197e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1982:	88 23       	and	r24, r24
    1984:	2c f4       	brge	.+10     	; 0x1990 <LCD_init+0x7a>
		__ticks = 1;
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	9e 83       	std	Y+6, r25	; 0x06
    198c:	8d 83       	std	Y+5, r24	; 0x05
    198e:	3f c0       	rjmp	.+126    	; 0x1a0e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1990:	6f 81       	ldd	r22, Y+7	; 0x07
    1992:	78 85       	ldd	r23, Y+8	; 0x08
    1994:	89 85       	ldd	r24, Y+9	; 0x09
    1996:	9a 85       	ldd	r25, Y+10	; 0x0a
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	3f ef       	ldi	r19, 0xFF	; 255
    199c:	4f e7       	ldi	r20, 0x7F	; 127
    199e:	57 e4       	ldi	r21, 0x47	; 71
    19a0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    19a4:	18 16       	cp	r1, r24
    19a6:	4c f5       	brge	.+82     	; 0x19fa <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    19aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	40 e2       	ldi	r20, 0x20	; 32
    19b6:	51 e4       	ldi	r21, 0x41	; 65
    19b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19bc:	dc 01       	movw	r26, r24
    19be:	cb 01       	movw	r24, r22
    19c0:	bc 01       	movw	r22, r24
    19c2:	cd 01       	movw	r24, r26
    19c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	9e 83       	std	Y+6, r25	; 0x06
    19ce:	8d 83       	std	Y+5, r24	; 0x05
    19d0:	0f c0       	rjmp	.+30     	; 0x19f0 <LCD_init+0xda>
    19d2:	89 e1       	ldi	r24, 0x19	; 25
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	9c 83       	std	Y+4, r25	; 0x04
    19d8:	8b 83       	std	Y+3, r24	; 0x03
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	01 97       	sbiw	r24, 0x01	; 1
    19e0:	f1 f7       	brne	.-4      	; 0x19de <LCD_init+0xc8>
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e6:	8d 81       	ldd	r24, Y+5	; 0x05
    19e8:	9e 81       	ldd	r25, Y+6	; 0x06
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	9e 83       	std	Y+6, r25	; 0x06
    19ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f7       	brne	.-38     	; 0x19d2 <LCD_init+0xbc>
    19f8:	14 c0       	rjmp	.+40     	; 0x1a22 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19fa:	6f 81       	ldd	r22, Y+7	; 0x07
    19fc:	78 85       	ldd	r23, Y+8	; 0x08
    19fe:	89 85       	ldd	r24, Y+9	; 0x09
    1a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a06:	dc 01       	movw	r26, r24
    1a08:	cb 01       	movw	r24, r22
    1a0a:	9e 83       	std	Y+6, r25	; 0x06
    1a0c:	8d 83       	std	Y+5, r24	; 0x05
    1a0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a10:	9e 81       	ldd	r25, Y+6	; 0x06
    1a12:	9a 83       	std	Y+2, r25	; 0x02
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	9a 81       	ldd	r25, Y+2	; 0x02
    1a1a:	01 97       	sbiw	r24, 0x01	; 1
    1a1c:	f1 f7       	brne	.-4      	; 0x1a1a <LCD_init+0x104>
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1a22:	82 e0       	ldi	r24, 0x02	; 2
    1a24:	64 e0       	ldi	r22, 0x04	; 4
    1a26:	41 e0       	ldi	r20, 0x01	; 1
    1a28:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1a2c:	82 e0       	ldi	r24, 0x02	; 2
    1a2e:	65 e0       	ldi	r22, 0x05	; 5
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1a36:	82 e0       	ldi	r24, 0x02	; 2
    1a38:	66 e0       	ldi	r22, 0x06	; 6
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1a40:	82 e0       	ldi	r24, 0x02	; 2
    1a42:	67 e0       	ldi	r22, 0x07	; 7
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	0e 94 a5 07 	call	0xf4a	; 0xf4a <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1a4a:	83 e3       	ldi	r24, 0x33	; 51
    1a4c:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1a50:	82 e3       	ldi	r24, 0x32	; 50
    1a52:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1a56:	88 e2       	ldi	r24, 0x28	; 40
    1a58:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a5c:	8c e0       	ldi	r24, 0x0C	; 12
    1a5e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
}
    1a68:	2e 96       	adiw	r28, 0x0e	; 14
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a7a:	0f 93       	push	r16
    1a7c:	1f 93       	push	r17
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	c3 56       	subi	r28, 0x63	; 99
    1a88:	d0 40       	sbci	r29, 0x00	; 0
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	fe 01       	movw	r30, r28
    1a96:	ed 59       	subi	r30, 0x9D	; 157
    1a98:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a9c:	82 e0       	ldi	r24, 0x02	; 2
    1a9e:	60 e0       	ldi	r22, 0x00	; 0
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	e1 5a       	subi	r30, 0xA1	; 161
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	a0 e8       	ldi	r26, 0x80	; 128
    1ab2:	bf e3       	ldi	r27, 0x3F	; 63
    1ab4:	80 83       	st	Z, r24
    1ab6:	91 83       	std	Z+1, r25	; 0x01
    1ab8:	a2 83       	std	Z+2, r26	; 0x02
    1aba:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abc:	8e 01       	movw	r16, r28
    1abe:	05 5a       	subi	r16, 0xA5	; 165
    1ac0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ac2:	fe 01       	movw	r30, r28
    1ac4:	e1 5a       	subi	r30, 0xA1	; 161
    1ac6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac8:	60 81       	ld	r22, Z
    1aca:	71 81       	ldd	r23, Z+1	; 0x01
    1acc:	82 81       	ldd	r24, Z+2	; 0x02
    1ace:	93 81       	ldd	r25, Z+3	; 0x03
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	4a e7       	ldi	r20, 0x7A	; 122
    1ad6:	53 e4       	ldi	r21, 0x43	; 67
    1ad8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1adc:	dc 01       	movw	r26, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	f8 01       	movw	r30, r16
    1ae2:	80 83       	st	Z, r24
    1ae4:	91 83       	std	Z+1, r25	; 0x01
    1ae6:	a2 83       	std	Z+2, r26	; 0x02
    1ae8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1aea:	fe 01       	movw	r30, r28
    1aec:	e5 5a       	subi	r30, 0xA5	; 165
    1aee:	ff 4f       	sbci	r31, 0xFF	; 255
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	44 f4       	brge	.+16     	; 0x1b18 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1b08:	fe 01       	movw	r30, r28
    1b0a:	e7 5a       	subi	r30, 0xA7	; 167
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
    1b16:	64 c0       	rjmp	.+200    	; 0x1be0 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e5 5a       	subi	r30, 0xA5	; 165
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	3f ef       	ldi	r19, 0xFF	; 255
    1b2a:	4f e7       	ldi	r20, 0x7F	; 127
    1b2c:	57 e4       	ldi	r21, 0x47	; 71
    1b2e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1b32:	18 16       	cp	r1, r24
    1b34:	0c f0       	brlt	.+2      	; 0x1b38 <LCD_sendCommand+0xbe>
    1b36:	43 c0       	rjmp	.+134    	; 0x1bbe <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b38:	fe 01       	movw	r30, r28
    1b3a:	e1 5a       	subi	r30, 0xA1	; 161
    1b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b3e:	60 81       	ld	r22, Z
    1b40:	71 81       	ldd	r23, Z+1	; 0x01
    1b42:	82 81       	ldd	r24, Z+2	; 0x02
    1b44:	93 81       	ldd	r25, Z+3	; 0x03
    1b46:	20 e0       	ldi	r18, 0x00	; 0
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	40 e2       	ldi	r20, 0x20	; 32
    1b4c:	51 e4       	ldi	r21, 0x41	; 65
    1b4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b52:	dc 01       	movw	r26, r24
    1b54:	cb 01       	movw	r24, r22
    1b56:	8e 01       	movw	r16, r28
    1b58:	07 5a       	subi	r16, 0xA7	; 167
    1b5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5c:	bc 01       	movw	r22, r24
    1b5e:	cd 01       	movw	r24, r26
    1b60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b64:	dc 01       	movw	r26, r24
    1b66:	cb 01       	movw	r24, r22
    1b68:	f8 01       	movw	r30, r16
    1b6a:	91 83       	std	Z+1, r25	; 0x01
    1b6c:	80 83       	st	Z, r24
    1b6e:	1f c0       	rjmp	.+62     	; 0x1bae <LCD_sendCommand+0x134>
    1b70:	fe 01       	movw	r30, r28
    1b72:	e9 5a       	subi	r30, 0xA9	; 169
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	89 e1       	ldi	r24, 0x19	; 25
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	91 83       	std	Z+1, r25	; 0x01
    1b7c:	80 83       	st	Z, r24
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e9 5a       	subi	r30, 0xA9	; 169
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	80 81       	ld	r24, Z
    1b86:	91 81       	ldd	r25, Z+1	; 0x01
    1b88:	01 97       	sbiw	r24, 0x01	; 1
    1b8a:	f1 f7       	brne	.-4      	; 0x1b88 <LCD_sendCommand+0x10e>
    1b8c:	fe 01       	movw	r30, r28
    1b8e:	e9 5a       	subi	r30, 0xA9	; 169
    1b90:	ff 4f       	sbci	r31, 0xFF	; 255
    1b92:	91 83       	std	Z+1, r25	; 0x01
    1b94:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b96:	de 01       	movw	r26, r28
    1b98:	a7 5a       	subi	r26, 0xA7	; 167
    1b9a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b9c:	fe 01       	movw	r30, r28
    1b9e:	e7 5a       	subi	r30, 0xA7	; 167
    1ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba2:	80 81       	ld	r24, Z
    1ba4:	91 81       	ldd	r25, Z+1	; 0x01
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	11 96       	adiw	r26, 0x01	; 1
    1baa:	9c 93       	st	X, r25
    1bac:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bae:	fe 01       	movw	r30, r28
    1bb0:	e7 5a       	subi	r30, 0xA7	; 167
    1bb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb4:	80 81       	ld	r24, Z
    1bb6:	91 81       	ldd	r25, Z+1	; 0x01
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	d1 f6       	brne	.-76     	; 0x1b70 <LCD_sendCommand+0xf6>
    1bbc:	27 c0       	rjmp	.+78     	; 0x1c0c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bbe:	8e 01       	movw	r16, r28
    1bc0:	07 5a       	subi	r16, 0xA7	; 167
    1bc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e5 5a       	subi	r30, 0xA5	; 165
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	60 81       	ld	r22, Z
    1bcc:	71 81       	ldd	r23, Z+1	; 0x01
    1bce:	82 81       	ldd	r24, Z+2	; 0x02
    1bd0:	93 81       	ldd	r25, Z+3	; 0x03
    1bd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd6:	dc 01       	movw	r26, r24
    1bd8:	cb 01       	movw	r24, r22
    1bda:	f8 01       	movw	r30, r16
    1bdc:	91 83       	std	Z+1, r25	; 0x01
    1bde:	80 83       	st	Z, r24
    1be0:	de 01       	movw	r26, r28
    1be2:	ab 5a       	subi	r26, 0xAB	; 171
    1be4:	bf 4f       	sbci	r27, 0xFF	; 255
    1be6:	fe 01       	movw	r30, r28
    1be8:	e7 5a       	subi	r30, 0xA7	; 167
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	91 81       	ldd	r25, Z+1	; 0x01
    1bf0:	8d 93       	st	X+, r24
    1bf2:	9c 93       	st	X, r25
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	eb 5a       	subi	r30, 0xAB	; 171
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	01 97       	sbiw	r24, 0x01	; 1
    1c00:	f1 f7       	brne	.-4      	; 0x1bfe <LCD_sendCommand+0x184>
    1c02:	fe 01       	movw	r30, r28
    1c04:	eb 5a       	subi	r30, 0xAB	; 171
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	91 83       	std	Z+1, r25	; 0x01
    1c0a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	41 e0       	ldi	r20, 0x01	; 1
    1c12:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    1c16:	fe 01       	movw	r30, r28
    1c18:	ef 5a       	subi	r30, 0xAF	; 175
    1c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 e8       	ldi	r26, 0x80	; 128
    1c22:	bf e3       	ldi	r27, 0x3F	; 63
    1c24:	80 83       	st	Z, r24
    1c26:	91 83       	std	Z+1, r25	; 0x01
    1c28:	a2 83       	std	Z+2, r26	; 0x02
    1c2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	8e 01       	movw	r16, r28
    1c2e:	03 5b       	subi	r16, 0xB3	; 179
    1c30:	1f 4f       	sbci	r17, 0xFF	; 255
    1c32:	fe 01       	movw	r30, r28
    1c34:	ef 5a       	subi	r30, 0xAF	; 175
    1c36:	ff 4f       	sbci	r31, 0xFF	; 255
    1c38:	60 81       	ld	r22, Z
    1c3a:	71 81       	ldd	r23, Z+1	; 0x01
    1c3c:	82 81       	ldd	r24, Z+2	; 0x02
    1c3e:	93 81       	ldd	r25, Z+3	; 0x03
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	4a e7       	ldi	r20, 0x7A	; 122
    1c46:	53 e4       	ldi	r21, 0x43	; 67
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	f8 01       	movw	r30, r16
    1c52:	80 83       	st	Z, r24
    1c54:	91 83       	std	Z+1, r25	; 0x01
    1c56:	a2 83       	std	Z+2, r26	; 0x02
    1c58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	e3 5b       	subi	r30, 0xB3	; 179
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	60 81       	ld	r22, Z
    1c62:	71 81       	ldd	r23, Z+1	; 0x01
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	40 e8       	ldi	r20, 0x80	; 128
    1c6e:	5f e3       	ldi	r21, 0x3F	; 63
    1c70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1c74:	88 23       	and	r24, r24
    1c76:	44 f4       	brge	.+16     	; 0x1c88 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1c78:	fe 01       	movw	r30, r28
    1c7a:	e5 5b       	subi	r30, 0xB5	; 181
    1c7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	91 83       	std	Z+1, r25	; 0x01
    1c84:	80 83       	st	Z, r24
    1c86:	64 c0       	rjmp	.+200    	; 0x1d50 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1c88:	fe 01       	movw	r30, r28
    1c8a:	e3 5b       	subi	r30, 0xB3	; 179
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	60 81       	ld	r22, Z
    1c90:	71 81       	ldd	r23, Z+1	; 0x01
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	3f ef       	ldi	r19, 0xFF	; 255
    1c9a:	4f e7       	ldi	r20, 0x7F	; 127
    1c9c:	57 e4       	ldi	r21, 0x47	; 71
    1c9e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ca2:	18 16       	cp	r1, r24
    1ca4:	0c f0       	brlt	.+2      	; 0x1ca8 <LCD_sendCommand+0x22e>
    1ca6:	43 c0       	rjmp	.+134    	; 0x1d2e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ef 5a       	subi	r30, 0xAF	; 175
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e2       	ldi	r20, 0x20	; 32
    1cbc:	51 e4       	ldi	r21, 0x41	; 65
    1cbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	8e 01       	movw	r16, r28
    1cc8:	05 5b       	subi	r16, 0xB5	; 181
    1cca:	1f 4f       	sbci	r17, 0xFF	; 255
    1ccc:	bc 01       	movw	r22, r24
    1cce:	cd 01       	movw	r24, r26
    1cd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	f8 01       	movw	r30, r16
    1cda:	91 83       	std	Z+1, r25	; 0x01
    1cdc:	80 83       	st	Z, r24
    1cde:	1f c0       	rjmp	.+62     	; 0x1d1e <LCD_sendCommand+0x2a4>
    1ce0:	fe 01       	movw	r30, r28
    1ce2:	e7 5b       	subi	r30, 0xB7	; 183
    1ce4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce6:	89 e1       	ldi	r24, 0x19	; 25
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	80 83       	st	Z, r24
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e7 5b       	subi	r30, 0xB7	; 183
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_sendCommand+0x27e>
    1cfc:	fe 01       	movw	r30, r28
    1cfe:	e7 5b       	subi	r30, 0xB7	; 183
    1d00:	ff 4f       	sbci	r31, 0xFF	; 255
    1d02:	91 83       	std	Z+1, r25	; 0x01
    1d04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	de 01       	movw	r26, r28
    1d08:	a5 5b       	subi	r26, 0xB5	; 181
    1d0a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e5 5b       	subi	r30, 0xB5	; 181
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 81       	ld	r24, Z
    1d14:	91 81       	ldd	r25, Z+1	; 0x01
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	9c 93       	st	X, r25
    1d1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e5 5b       	subi	r30, 0xB5	; 181
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	80 81       	ld	r24, Z
    1d26:	91 81       	ldd	r25, Z+1	; 0x01
    1d28:	00 97       	sbiw	r24, 0x00	; 0
    1d2a:	d1 f6       	brne	.-76     	; 0x1ce0 <LCD_sendCommand+0x266>
    1d2c:	27 c0       	rjmp	.+78     	; 0x1d7c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d2e:	8e 01       	movw	r16, r28
    1d30:	05 5b       	subi	r16, 0xB5	; 181
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	fe 01       	movw	r30, r28
    1d36:	e3 5b       	subi	r30, 0xB3	; 179
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	60 81       	ld	r22, Z
    1d3c:	71 81       	ldd	r23, Z+1	; 0x01
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	93 81       	ldd	r25, Z+3	; 0x03
    1d42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	f8 01       	movw	r30, r16
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	80 83       	st	Z, r24
    1d50:	de 01       	movw	r26, r28
    1d52:	a9 5b       	subi	r26, 0xB9	; 185
    1d54:	bf 4f       	sbci	r27, 0xFF	; 255
    1d56:	fe 01       	movw	r30, r28
    1d58:	e5 5b       	subi	r30, 0xB5	; 181
    1d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5c:	80 81       	ld	r24, Z
    1d5e:	91 81       	ldd	r25, Z+1	; 0x01
    1d60:	8d 93       	st	X+, r24
    1d62:	9c 93       	st	X, r25
    1d64:	fe 01       	movw	r30, r28
    1d66:	e9 5b       	subi	r30, 0xB9	; 185
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	80 81       	ld	r24, Z
    1d6c:	91 81       	ldd	r25, Z+1	; 0x01
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <LCD_sendCommand+0x2f4>
    1d72:	fe 01       	movw	r30, r28
    1d74:	e9 5b       	subi	r30, 0xB9	; 185
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	91 83       	std	Z+1, r25	; 0x01
    1d7a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1d7c:	fe 01       	movw	r30, r28
    1d7e:	ed 59       	subi	r30, 0x9D	; 157
    1d80:	ff 4f       	sbci	r31, 0xFF	; 255
    1d82:	80 81       	ld	r24, Z
    1d84:	88 2f       	mov	r24, r24
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	80 71       	andi	r24, 0x10	; 16
    1d8a:	90 70       	andi	r25, 0x00	; 0
    1d8c:	95 95       	asr	r25
    1d8e:	87 95       	ror	r24
    1d90:	95 95       	asr	r25
    1d92:	87 95       	ror	r24
    1d94:	95 95       	asr	r25
    1d96:	87 95       	ror	r24
    1d98:	95 95       	asr	r25
    1d9a:	87 95       	ror	r24
    1d9c:	98 2f       	mov	r25, r24
    1d9e:	82 e0       	ldi	r24, 0x02	; 2
    1da0:	64 e0       	ldi	r22, 0x04	; 4
    1da2:	49 2f       	mov	r20, r25
    1da4:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1da8:	fe 01       	movw	r30, r28
    1daa:	ed 59       	subi	r30, 0x9D	; 157
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 81       	ld	r24, Z
    1db0:	88 2f       	mov	r24, r24
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	80 72       	andi	r24, 0x20	; 32
    1db6:	90 70       	andi	r25, 0x00	; 0
    1db8:	95 95       	asr	r25
    1dba:	87 95       	ror	r24
    1dbc:	95 95       	asr	r25
    1dbe:	87 95       	ror	r24
    1dc0:	95 95       	asr	r25
    1dc2:	87 95       	ror	r24
    1dc4:	95 95       	asr	r25
    1dc6:	87 95       	ror	r24
    1dc8:	95 95       	asr	r25
    1dca:	87 95       	ror	r24
    1dcc:	98 2f       	mov	r25, r24
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	65 e0       	ldi	r22, 0x05	; 5
    1dd2:	49 2f       	mov	r20, r25
    1dd4:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ed 59       	subi	r30, 0x9D	; 157
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	88 2f       	mov	r24, r24
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	80 74       	andi	r24, 0x40	; 64
    1de6:	90 70       	andi	r25, 0x00	; 0
    1de8:	08 2e       	mov	r0, r24
    1dea:	89 2f       	mov	r24, r25
    1dec:	00 0c       	add	r0, r0
    1dee:	88 1f       	adc	r24, r24
    1df0:	99 0b       	sbc	r25, r25
    1df2:	00 0c       	add	r0, r0
    1df4:	88 1f       	adc	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	98 2f       	mov	r25, r24
    1dfa:	82 e0       	ldi	r24, 0x02	; 2
    1dfc:	66 e0       	ldi	r22, 0x06	; 6
    1dfe:	49 2f       	mov	r20, r25
    1e00:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1e04:	fe 01       	movw	r30, r28
    1e06:	ed 59       	subi	r30, 0x9D	; 157
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	98 2f       	mov	r25, r24
    1e0e:	99 1f       	adc	r25, r25
    1e10:	99 27       	eor	r25, r25
    1e12:	99 1f       	adc	r25, r25
    1e14:	82 e0       	ldi	r24, 0x02	; 2
    1e16:	67 e0       	ldi	r22, 0x07	; 7
    1e18:	49 2f       	mov	r20, r25
    1e1a:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    1e1e:	fe 01       	movw	r30, r28
    1e20:	ed 5b       	subi	r30, 0xBD	; 189
    1e22:	ff 4f       	sbci	r31, 0xFF	; 255
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	a0 e8       	ldi	r26, 0x80	; 128
    1e2a:	bf e3       	ldi	r27, 0x3F	; 63
    1e2c:	80 83       	st	Z, r24
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	a2 83       	std	Z+2, r26	; 0x02
    1e32:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e34:	8e 01       	movw	r16, r28
    1e36:	01 5c       	subi	r16, 0xC1	; 193
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ed 5b       	subi	r30, 0xBD	; 189
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	60 81       	ld	r22, Z
    1e42:	71 81       	ldd	r23, Z+1	; 0x01
    1e44:	82 81       	ldd	r24, Z+2	; 0x02
    1e46:	93 81       	ldd	r25, Z+3	; 0x03
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4a e7       	ldi	r20, 0x7A	; 122
    1e4e:	53 e4       	ldi	r21, 0x43	; 67
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	f8 01       	movw	r30, r16
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	a2 83       	std	Z+2, r26	; 0x02
    1e60:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e62:	fe 01       	movw	r30, r28
    1e64:	ff 96       	adiw	r30, 0x3f	; 63
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	2c f4       	brge	.+10     	; 0x1e88 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	9e af       	std	Y+62, r25	; 0x3e
    1e84:	8d af       	std	Y+61, r24	; 0x3d
    1e86:	46 c0       	rjmp	.+140    	; 0x1f14 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1e88:	fe 01       	movw	r30, r28
    1e8a:	ff 96       	adiw	r30, 0x3f	; 63
    1e8c:	60 81       	ld	r22, Z
    1e8e:	71 81       	ldd	r23, Z+1	; 0x01
    1e90:	82 81       	ldd	r24, Z+2	; 0x02
    1e92:	93 81       	ldd	r25, Z+3	; 0x03
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	3f ef       	ldi	r19, 0xFF	; 255
    1e98:	4f e7       	ldi	r20, 0x7F	; 127
    1e9a:	57 e4       	ldi	r21, 0x47	; 71
    1e9c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1ea0:	18 16       	cp	r1, r24
    1ea2:	64 f5       	brge	.+88     	; 0x1efc <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea4:	fe 01       	movw	r30, r28
    1ea6:	ed 5b       	subi	r30, 0xBD	; 189
    1ea8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eaa:	60 81       	ld	r22, Z
    1eac:	71 81       	ldd	r23, Z+1	; 0x01
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	20 e0       	ldi	r18, 0x00	; 0
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	40 e2       	ldi	r20, 0x20	; 32
    1eb8:	51 e4       	ldi	r21, 0x41	; 65
    1eba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	cb 01       	movw	r24, r22
    1ec2:	bc 01       	movw	r22, r24
    1ec4:	cd 01       	movw	r24, r26
    1ec6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	9e af       	std	Y+62, r25	; 0x3e
    1ed0:	8d af       	std	Y+61, r24	; 0x3d
    1ed2:	0f c0       	rjmp	.+30     	; 0x1ef2 <LCD_sendCommand+0x478>
    1ed4:	89 e1       	ldi	r24, 0x19	; 25
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	9c af       	std	Y+60, r25	; 0x3c
    1eda:	8b af       	std	Y+59, r24	; 0x3b
    1edc:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ede:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ee0:	01 97       	sbiw	r24, 0x01	; 1
    1ee2:	f1 f7       	brne	.-4      	; 0x1ee0 <LCD_sendCommand+0x466>
    1ee4:	9c af       	std	Y+60, r25	; 0x3c
    1ee6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eea:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9e af       	std	Y+62, r25	; 0x3e
    1ef0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ef2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ef4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	69 f7       	brne	.-38     	; 0x1ed4 <LCD_sendCommand+0x45a>
    1efa:	16 c0       	rjmp	.+44     	; 0x1f28 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1efc:	fe 01       	movw	r30, r28
    1efe:	ff 96       	adiw	r30, 0x3f	; 63
    1f00:	60 81       	ld	r22, Z
    1f02:	71 81       	ldd	r23, Z+1	; 0x01
    1f04:	82 81       	ldd	r24, Z+2	; 0x02
    1f06:	93 81       	ldd	r25, Z+3	; 0x03
    1f08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f0c:	dc 01       	movw	r26, r24
    1f0e:	cb 01       	movw	r24, r22
    1f10:	9e af       	std	Y+62, r25	; 0x3e
    1f12:	8d af       	std	Y+61, r24	; 0x3d
    1f14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f18:	9a af       	std	Y+58, r25	; 0x3a
    1f1a:	89 af       	std	Y+57, r24	; 0x39
    1f1c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f1e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	f1 f7       	brne	.-4      	; 0x1f20 <LCD_sendCommand+0x4a6>
    1f24:	9a af       	std	Y+58, r25	; 0x3a
    1f26:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f28:	82 e0       	ldi	r24, 0x02	; 2
    1f2a:	61 e0       	ldi	r22, 0x01	; 1
    1f2c:	40 e0       	ldi	r20, 0x00	; 0
    1f2e:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	90 e0       	ldi	r25, 0x00	; 0
    1f36:	a0 e8       	ldi	r26, 0x80	; 128
    1f38:	bf e3       	ldi	r27, 0x3F	; 63
    1f3a:	8d ab       	std	Y+53, r24	; 0x35
    1f3c:	9e ab       	std	Y+54, r25	; 0x36
    1f3e:	af ab       	std	Y+55, r26	; 0x37
    1f40:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f42:	6d a9       	ldd	r22, Y+53	; 0x35
    1f44:	7e a9       	ldd	r23, Y+54	; 0x36
    1f46:	8f a9       	ldd	r24, Y+55	; 0x37
    1f48:	98 ad       	ldd	r25, Y+56	; 0x38
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	4a e7       	ldi	r20, 0x7A	; 122
    1f50:	53 e4       	ldi	r21, 0x43	; 67
    1f52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f56:	dc 01       	movw	r26, r24
    1f58:	cb 01       	movw	r24, r22
    1f5a:	89 ab       	std	Y+49, r24	; 0x31
    1f5c:	9a ab       	std	Y+50, r25	; 0x32
    1f5e:	ab ab       	std	Y+51, r26	; 0x33
    1f60:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f62:	69 a9       	ldd	r22, Y+49	; 0x31
    1f64:	7a a9       	ldd	r23, Y+50	; 0x32
    1f66:	8b a9       	ldd	r24, Y+51	; 0x33
    1f68:	9c a9       	ldd	r25, Y+52	; 0x34
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 e8       	ldi	r20, 0x80	; 128
    1f70:	5f e3       	ldi	r21, 0x3F	; 63
    1f72:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1f76:	88 23       	and	r24, r24
    1f78:	2c f4       	brge	.+10     	; 0x1f84 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	98 ab       	std	Y+48, r25	; 0x30
    1f80:	8f a7       	std	Y+47, r24	; 0x2f
    1f82:	3f c0       	rjmp	.+126    	; 0x2002 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1f84:	69 a9       	ldd	r22, Y+49	; 0x31
    1f86:	7a a9       	ldd	r23, Y+50	; 0x32
    1f88:	8b a9       	ldd	r24, Y+51	; 0x33
    1f8a:	9c a9       	ldd	r25, Y+52	; 0x34
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	3f ef       	ldi	r19, 0xFF	; 255
    1f90:	4f e7       	ldi	r20, 0x7F	; 127
    1f92:	57 e4       	ldi	r21, 0x47	; 71
    1f94:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    1f98:	18 16       	cp	r1, r24
    1f9a:	4c f5       	brge	.+82     	; 0x1fee <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f9c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f9e:	7e a9       	ldd	r23, Y+54	; 0x36
    1fa0:	8f a9       	ldd	r24, Y+55	; 0x37
    1fa2:	98 ad       	ldd	r25, Y+56	; 0x38
    1fa4:	20 e0       	ldi	r18, 0x00	; 0
    1fa6:	30 e0       	ldi	r19, 0x00	; 0
    1fa8:	40 e2       	ldi	r20, 0x20	; 32
    1faa:	51 e4       	ldi	r21, 0x41	; 65
    1fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	cb 01       	movw	r24, r22
    1fb4:	bc 01       	movw	r22, r24
    1fb6:	cd 01       	movw	r24, r26
    1fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	98 ab       	std	Y+48, r25	; 0x30
    1fc2:	8f a7       	std	Y+47, r24	; 0x2f
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <LCD_sendCommand+0x56a>
    1fc6:	89 e1       	ldi	r24, 0x19	; 25
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	9e a7       	std	Y+46, r25	; 0x2e
    1fcc:	8d a7       	std	Y+45, r24	; 0x2d
    1fce:	8d a5       	ldd	r24, Y+45	; 0x2d
    1fd0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_sendCommand+0x558>
    1fd6:	9e a7       	std	Y+46, r25	; 0x2e
    1fd8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fda:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fdc:	98 a9       	ldd	r25, Y+48	; 0x30
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	98 ab       	std	Y+48, r25	; 0x30
    1fe2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fe4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fe6:	98 a9       	ldd	r25, Y+48	; 0x30
    1fe8:	00 97       	sbiw	r24, 0x00	; 0
    1fea:	69 f7       	brne	.-38     	; 0x1fc6 <LCD_sendCommand+0x54c>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fee:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffa:	dc 01       	movw	r26, r24
    1ffc:	cb 01       	movw	r24, r22
    1ffe:	98 ab       	std	Y+48, r25	; 0x30
    2000:	8f a7       	std	Y+47, r24	; 0x2f
    2002:	8f a5       	ldd	r24, Y+47	; 0x2f
    2004:	98 a9       	ldd	r25, Y+48	; 0x30
    2006:	9c a7       	std	Y+44, r25	; 0x2c
    2008:	8b a7       	std	Y+43, r24	; 0x2b
    200a:	8b a5       	ldd	r24, Y+43	; 0x2b
    200c:	9c a5       	ldd	r25, Y+44	; 0x2c
    200e:	01 97       	sbiw	r24, 0x01	; 1
    2010:	f1 f7       	brne	.-4      	; 0x200e <LCD_sendCommand+0x594>
    2012:	9c a7       	std	Y+44, r25	; 0x2c
    2014:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	61 e0       	ldi	r22, 0x01	; 1
    201a:	41 e0       	ldi	r20, 0x01	; 1
    201c:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	90 e0       	ldi	r25, 0x00	; 0
    2024:	a0 e8       	ldi	r26, 0x80	; 128
    2026:	bf e3       	ldi	r27, 0x3F	; 63
    2028:	8f a3       	std	Y+39, r24	; 0x27
    202a:	98 a7       	std	Y+40, r25	; 0x28
    202c:	a9 a7       	std	Y+41, r26	; 0x29
    202e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2030:	6f a1       	ldd	r22, Y+39	; 0x27
    2032:	78 a5       	ldd	r23, Y+40	; 0x28
    2034:	89 a5       	ldd	r24, Y+41	; 0x29
    2036:	9a a5       	ldd	r25, Y+42	; 0x2a
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	4a e7       	ldi	r20, 0x7A	; 122
    203e:	53 e4       	ldi	r21, 0x43	; 67
    2040:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8b a3       	std	Y+35, r24	; 0x23
    204a:	9c a3       	std	Y+36, r25	; 0x24
    204c:	ad a3       	std	Y+37, r26	; 0x25
    204e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2050:	6b a1       	ldd	r22, Y+35	; 0x23
    2052:	7c a1       	ldd	r23, Y+36	; 0x24
    2054:	8d a1       	ldd	r24, Y+37	; 0x25
    2056:	9e a1       	ldd	r25, Y+38	; 0x26
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e8       	ldi	r20, 0x80	; 128
    205e:	5f e3       	ldi	r21, 0x3F	; 63
    2060:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2064:	88 23       	and	r24, r24
    2066:	2c f4       	brge	.+10     	; 0x2072 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	9a a3       	std	Y+34, r25	; 0x22
    206e:	89 a3       	std	Y+33, r24	; 0x21
    2070:	3f c0       	rjmp	.+126    	; 0x20f0 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2072:	6b a1       	ldd	r22, Y+35	; 0x23
    2074:	7c a1       	ldd	r23, Y+36	; 0x24
    2076:	8d a1       	ldd	r24, Y+37	; 0x25
    2078:	9e a1       	ldd	r25, Y+38	; 0x26
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	4f e7       	ldi	r20, 0x7F	; 127
    2080:	57 e4       	ldi	r21, 0x47	; 71
    2082:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2086:	18 16       	cp	r1, r24
    2088:	4c f5       	brge	.+82     	; 0x20dc <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    208a:	6f a1       	ldd	r22, Y+39	; 0x27
    208c:	78 a5       	ldd	r23, Y+40	; 0x28
    208e:	89 a5       	ldd	r24, Y+41	; 0x29
    2090:	9a a5       	ldd	r25, Y+42	; 0x2a
    2092:	20 e0       	ldi	r18, 0x00	; 0
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	40 e2       	ldi	r20, 0x20	; 32
    2098:	51 e4       	ldi	r21, 0x41	; 65
    209a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    209e:	dc 01       	movw	r26, r24
    20a0:	cb 01       	movw	r24, r22
    20a2:	bc 01       	movw	r22, r24
    20a4:	cd 01       	movw	r24, r26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9a a3       	std	Y+34, r25	; 0x22
    20b0:	89 a3       	std	Y+33, r24	; 0x21
    20b2:	0f c0       	rjmp	.+30     	; 0x20d2 <LCD_sendCommand+0x658>
    20b4:	89 e1       	ldi	r24, 0x19	; 25
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	98 a3       	std	Y+32, r25	; 0x20
    20ba:	8f 8f       	std	Y+31, r24	; 0x1f
    20bc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20be:	98 a1       	ldd	r25, Y+32	; 0x20
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	f1 f7       	brne	.-4      	; 0x20c0 <LCD_sendCommand+0x646>
    20c4:	98 a3       	std	Y+32, r25	; 0x20
    20c6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c8:	89 a1       	ldd	r24, Y+33	; 0x21
    20ca:	9a a1       	ldd	r25, Y+34	; 0x22
    20cc:	01 97       	sbiw	r24, 0x01	; 1
    20ce:	9a a3       	std	Y+34, r25	; 0x22
    20d0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20d2:	89 a1       	ldd	r24, Y+33	; 0x21
    20d4:	9a a1       	ldd	r25, Y+34	; 0x22
    20d6:	00 97       	sbiw	r24, 0x00	; 0
    20d8:	69 f7       	brne	.-38     	; 0x20b4 <LCD_sendCommand+0x63a>
    20da:	14 c0       	rjmp	.+40     	; 0x2104 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20dc:	6b a1       	ldd	r22, Y+35	; 0x23
    20de:	7c a1       	ldd	r23, Y+36	; 0x24
    20e0:	8d a1       	ldd	r24, Y+37	; 0x25
    20e2:	9e a1       	ldd	r25, Y+38	; 0x26
    20e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	9a a3       	std	Y+34, r25	; 0x22
    20ee:	89 a3       	std	Y+33, r24	; 0x21
    20f0:	89 a1       	ldd	r24, Y+33	; 0x21
    20f2:	9a a1       	ldd	r25, Y+34	; 0x22
    20f4:	9e 8f       	std	Y+30, r25	; 0x1e
    20f6:	8d 8f       	std	Y+29, r24	; 0x1d
    20f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20fa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_sendCommand+0x682>
    2100:	9e 8f       	std	Y+30, r25	; 0x1e
    2102:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2104:	fe 01       	movw	r30, r28
    2106:	ed 59       	subi	r30, 0x9D	; 157
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 81       	ld	r24, Z
    210c:	98 2f       	mov	r25, r24
    210e:	91 70       	andi	r25, 0x01	; 1
    2110:	82 e0       	ldi	r24, 0x02	; 2
    2112:	64 e0       	ldi	r22, 0x04	; 4
    2114:	49 2f       	mov	r20, r25
    2116:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    211a:	fe 01       	movw	r30, r28
    211c:	ed 59       	subi	r30, 0x9D	; 157
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	82 70       	andi	r24, 0x02	; 2
    2128:	90 70       	andi	r25, 0x00	; 0
    212a:	95 95       	asr	r25
    212c:	87 95       	ror	r24
    212e:	98 2f       	mov	r25, r24
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	65 e0       	ldi	r22, 0x05	; 5
    2134:	49 2f       	mov	r20, r25
    2136:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    213a:	fe 01       	movw	r30, r28
    213c:	ed 59       	subi	r30, 0x9D	; 157
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	80 81       	ld	r24, Z
    2142:	88 2f       	mov	r24, r24
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	84 70       	andi	r24, 0x04	; 4
    2148:	90 70       	andi	r25, 0x00	; 0
    214a:	95 95       	asr	r25
    214c:	87 95       	ror	r24
    214e:	95 95       	asr	r25
    2150:	87 95       	ror	r24
    2152:	98 2f       	mov	r25, r24
    2154:	82 e0       	ldi	r24, 0x02	; 2
    2156:	66 e0       	ldi	r22, 0x06	; 6
    2158:	49 2f       	mov	r20, r25
    215a:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    215e:	fe 01       	movw	r30, r28
    2160:	ed 59       	subi	r30, 0x9D	; 157
    2162:	ff 4f       	sbci	r31, 0xFF	; 255
    2164:	80 81       	ld	r24, Z
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	88 70       	andi	r24, 0x08	; 8
    216c:	90 70       	andi	r25, 0x00	; 0
    216e:	95 95       	asr	r25
    2170:	87 95       	ror	r24
    2172:	95 95       	asr	r25
    2174:	87 95       	ror	r24
    2176:	95 95       	asr	r25
    2178:	87 95       	ror	r24
    217a:	98 2f       	mov	r25, r24
    217c:	82 e0       	ldi	r24, 0x02	; 2
    217e:	67 e0       	ldi	r22, 0x07	; 7
    2180:	49 2f       	mov	r20, r25
    2182:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a0 e8       	ldi	r26, 0x80	; 128
    218c:	bf e3       	ldi	r27, 0x3F	; 63
    218e:	89 8f       	std	Y+25, r24	; 0x19
    2190:	9a 8f       	std	Y+26, r25	; 0x1a
    2192:	ab 8f       	std	Y+27, r26	; 0x1b
    2194:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	69 8d       	ldd	r22, Y+25	; 0x19
    2198:	7a 8d       	ldd	r23, Y+26	; 0x1a
    219a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    219c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    219e:	20 e0       	ldi	r18, 0x00	; 0
    21a0:	30 e0       	ldi	r19, 0x00	; 0
    21a2:	4a e7       	ldi	r20, 0x7A	; 122
    21a4:	53 e4       	ldi	r21, 0x43	; 67
    21a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	8d 8b       	std	Y+21, r24	; 0x15
    21b0:	9e 8b       	std	Y+22, r25	; 0x16
    21b2:	af 8b       	std	Y+23, r26	; 0x17
    21b4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21b6:	6d 89       	ldd	r22, Y+21	; 0x15
    21b8:	7e 89       	ldd	r23, Y+22	; 0x16
    21ba:	8f 89       	ldd	r24, Y+23	; 0x17
    21bc:	98 8d       	ldd	r25, Y+24	; 0x18
    21be:	20 e0       	ldi	r18, 0x00	; 0
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	40 e8       	ldi	r20, 0x80	; 128
    21c4:	5f e3       	ldi	r21, 0x3F	; 63
    21c6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    21ca:	88 23       	and	r24, r24
    21cc:	2c f4       	brge	.+10     	; 0x21d8 <LCD_sendCommand+0x75e>
		__ticks = 1;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
    21d6:	3f c0       	rjmp	.+126    	; 0x2256 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    21d8:	6d 89       	ldd	r22, Y+21	; 0x15
    21da:	7e 89       	ldd	r23, Y+22	; 0x16
    21dc:	8f 89       	ldd	r24, Y+23	; 0x17
    21de:	98 8d       	ldd	r25, Y+24	; 0x18
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	3f ef       	ldi	r19, 0xFF	; 255
    21e4:	4f e7       	ldi	r20, 0x7F	; 127
    21e6:	57 e4       	ldi	r21, 0x47	; 71
    21e8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    21ec:	18 16       	cp	r1, r24
    21ee:	4c f5       	brge	.+82     	; 0x2242 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f0:	69 8d       	ldd	r22, Y+25	; 0x19
    21f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e2       	ldi	r20, 0x20	; 32
    21fe:	51 e4       	ldi	r21, 0x41	; 65
    2200:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	bc 01       	movw	r22, r24
    220a:	cd 01       	movw	r24, r26
    220c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2210:	dc 01       	movw	r26, r24
    2212:	cb 01       	movw	r24, r22
    2214:	9c 8b       	std	Y+20, r25	; 0x14
    2216:	8b 8b       	std	Y+19, r24	; 0x13
    2218:	0f c0       	rjmp	.+30     	; 0x2238 <LCD_sendCommand+0x7be>
    221a:	89 e1       	ldi	r24, 0x19	; 25
    221c:	90 e0       	ldi	r25, 0x00	; 0
    221e:	9a 8b       	std	Y+18, r25	; 0x12
    2220:	89 8b       	std	Y+17, r24	; 0x11
    2222:	89 89       	ldd	r24, Y+17	; 0x11
    2224:	9a 89       	ldd	r25, Y+18	; 0x12
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	f1 f7       	brne	.-4      	; 0x2226 <LCD_sendCommand+0x7ac>
    222a:	9a 8b       	std	Y+18, r25	; 0x12
    222c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    222e:	8b 89       	ldd	r24, Y+19	; 0x13
    2230:	9c 89       	ldd	r25, Y+20	; 0x14
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	9c 8b       	std	Y+20, r25	; 0x14
    2236:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2238:	8b 89       	ldd	r24, Y+19	; 0x13
    223a:	9c 89       	ldd	r25, Y+20	; 0x14
    223c:	00 97       	sbiw	r24, 0x00	; 0
    223e:	69 f7       	brne	.-38     	; 0x221a <LCD_sendCommand+0x7a0>
    2240:	14 c0       	rjmp	.+40     	; 0x226a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2242:	6d 89       	ldd	r22, Y+21	; 0x15
    2244:	7e 89       	ldd	r23, Y+22	; 0x16
    2246:	8f 89       	ldd	r24, Y+23	; 0x17
    2248:	98 8d       	ldd	r25, Y+24	; 0x18
    224a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	9c 8b       	std	Y+20, r25	; 0x14
    2254:	8b 8b       	std	Y+19, r24	; 0x13
    2256:	8b 89       	ldd	r24, Y+19	; 0x13
    2258:	9c 89       	ldd	r25, Y+20	; 0x14
    225a:	98 8b       	std	Y+16, r25	; 0x10
    225c:	8f 87       	std	Y+15, r24	; 0x0f
    225e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2260:	98 89       	ldd	r25, Y+16	; 0x10
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <LCD_sendCommand+0x7e8>
    2266:	98 8b       	std	Y+16, r25	; 0x10
    2268:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    226a:	82 e0       	ldi	r24, 0x02	; 2
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a0 e8       	ldi	r26, 0x80	; 128
    227a:	bf e3       	ldi	r27, 0x3F	; 63
    227c:	8b 87       	std	Y+11, r24	; 0x0b
    227e:	9c 87       	std	Y+12, r25	; 0x0c
    2280:	ad 87       	std	Y+13, r26	; 0x0d
    2282:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2284:	6b 85       	ldd	r22, Y+11	; 0x0b
    2286:	7c 85       	ldd	r23, Y+12	; 0x0c
    2288:	8d 85       	ldd	r24, Y+13	; 0x0d
    228a:	9e 85       	ldd	r25, Y+14	; 0x0e
    228c:	20 e0       	ldi	r18, 0x00	; 0
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	4a e7       	ldi	r20, 0x7A	; 122
    2292:	53 e4       	ldi	r21, 0x43	; 67
    2294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2298:	dc 01       	movw	r26, r24
    229a:	cb 01       	movw	r24, r22
    229c:	8f 83       	std	Y+7, r24	; 0x07
    229e:	98 87       	std	Y+8, r25	; 0x08
    22a0:	a9 87       	std	Y+9, r26	; 0x09
    22a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22a4:	6f 81       	ldd	r22, Y+7	; 0x07
    22a6:	78 85       	ldd	r23, Y+8	; 0x08
    22a8:	89 85       	ldd	r24, Y+9	; 0x09
    22aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ac:	20 e0       	ldi	r18, 0x00	; 0
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	40 e8       	ldi	r20, 0x80	; 128
    22b2:	5f e3       	ldi	r21, 0x3F	; 63
    22b4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22b8:	88 23       	and	r24, r24
    22ba:	2c f4       	brge	.+10     	; 0x22c6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	3f c0       	rjmp	.+126    	; 0x2344 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	3f ef       	ldi	r19, 0xFF	; 255
    22d2:	4f e7       	ldi	r20, 0x7F	; 127
    22d4:	57 e4       	ldi	r21, 0x47	; 71
    22d6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    22da:	18 16       	cp	r1, r24
    22dc:	4c f5       	brge	.+82     	; 0x2330 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22de:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e2       	ldi	r20, 0x20	; 32
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	bc 01       	movw	r22, r24
    22f8:	cd 01       	movw	r24, r26
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	0f c0       	rjmp	.+30     	; 0x2326 <LCD_sendCommand+0x8ac>
    2308:	89 e1       	ldi	r24, 0x19	; 25
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	9c 83       	std	Y+4, r25	; 0x04
    230e:	8b 83       	std	Y+3, r24	; 0x03
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	9c 81       	ldd	r25, Y+4	; 0x04
    2314:	01 97       	sbiw	r24, 0x01	; 1
    2316:	f1 f7       	brne	.-4      	; 0x2314 <LCD_sendCommand+0x89a>
    2318:	9c 83       	std	Y+4, r25	; 0x04
    231a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	9e 83       	std	Y+6, r25	; 0x06
    2324:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	8d 81       	ldd	r24, Y+5	; 0x05
    2328:	9e 81       	ldd	r25, Y+6	; 0x06
    232a:	00 97       	sbiw	r24, 0x00	; 0
    232c:	69 f7       	brne	.-38     	; 0x2308 <LCD_sendCommand+0x88e>
    232e:	14 c0       	rjmp	.+40     	; 0x2358 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2330:	6f 81       	ldd	r22, Y+7	; 0x07
    2332:	78 85       	ldd	r23, Y+8	; 0x08
    2334:	89 85       	ldd	r24, Y+9	; 0x09
    2336:	9a 85       	ldd	r25, Y+10	; 0x0a
    2338:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    233c:	dc 01       	movw	r26, r24
    233e:	cb 01       	movw	r24, r22
    2340:	9e 83       	std	Y+6, r25	; 0x06
    2342:	8d 83       	std	Y+5, r24	; 0x05
    2344:	8d 81       	ldd	r24, Y+5	; 0x05
    2346:	9e 81       	ldd	r25, Y+6	; 0x06
    2348:	9a 83       	std	Y+2, r25	; 0x02
    234a:	89 83       	std	Y+1, r24	; 0x01
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	9a 81       	ldd	r25, Y+2	; 0x02
    2350:	01 97       	sbiw	r24, 0x01	; 1
    2352:	f1 f7       	brne	.-4      	; 0x2350 <LCD_sendCommand+0x8d6>
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2358:	cd 59       	subi	r28, 0x9D	; 157
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	de bf       	out	0x3e, r29	; 62
    2362:	0f be       	out	0x3f, r0	; 63
    2364:	cd bf       	out	0x3d, r28	; 61
    2366:	cf 91       	pop	r28
    2368:	df 91       	pop	r29
    236a:	1f 91       	pop	r17
    236c:	0f 91       	pop	r16
    236e:	08 95       	ret

00002370 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	df 93       	push	r29
    2376:	cf 93       	push	r28
    2378:	cd b7       	in	r28, 0x3d	; 61
    237a:	de b7       	in	r29, 0x3e	; 62
    237c:	c3 56       	subi	r28, 0x63	; 99
    237e:	d0 40       	sbci	r29, 0x00	; 0
    2380:	0f b6       	in	r0, 0x3f	; 63
    2382:	f8 94       	cli
    2384:	de bf       	out	0x3e, r29	; 62
    2386:	0f be       	out	0x3f, r0	; 63
    2388:	cd bf       	out	0x3d, r28	; 61
    238a:	fe 01       	movw	r30, r28
    238c:	ed 59       	subi	r30, 0x9D	; 157
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	60 e0       	ldi	r22, 0x00	; 0
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    239c:	fe 01       	movw	r30, r28
    239e:	e1 5a       	subi	r30, 0xA1	; 161
    23a0:	ff 4f       	sbci	r31, 0xFF	; 255
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a0 e8       	ldi	r26, 0x80	; 128
    23a8:	bf e3       	ldi	r27, 0x3F	; 63
    23aa:	80 83       	st	Z, r24
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	a2 83       	std	Z+2, r26	; 0x02
    23b0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	8e 01       	movw	r16, r28
    23b4:	05 5a       	subi	r16, 0xA5	; 165
    23b6:	1f 4f       	sbci	r17, 0xFF	; 255
    23b8:	fe 01       	movw	r30, r28
    23ba:	e1 5a       	subi	r30, 0xA1	; 161
    23bc:	ff 4f       	sbci	r31, 0xFF	; 255
    23be:	60 81       	ld	r22, Z
    23c0:	71 81       	ldd	r23, Z+1	; 0x01
    23c2:	82 81       	ldd	r24, Z+2	; 0x02
    23c4:	93 81       	ldd	r25, Z+3	; 0x03
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a e7       	ldi	r20, 0x7A	; 122
    23cc:	53 e4       	ldi	r21, 0x43	; 67
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	f8 01       	movw	r30, r16
    23d8:	80 83       	st	Z, r24
    23da:	91 83       	std	Z+1, r25	; 0x01
    23dc:	a2 83       	std	Z+2, r26	; 0x02
    23de:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23e0:	fe 01       	movw	r30, r28
    23e2:	e5 5a       	subi	r30, 0xA5	; 165
    23e4:	ff 4f       	sbci	r31, 0xFF	; 255
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e8       	ldi	r20, 0x80	; 128
    23f4:	5f e3       	ldi	r21, 0x3F	; 63
    23f6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    23fa:	88 23       	and	r24, r24
    23fc:	44 f4       	brge	.+16     	; 0x240e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    23fe:	fe 01       	movw	r30, r28
    2400:	e7 5a       	subi	r30, 0xA7	; 167
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	81 e0       	ldi	r24, 0x01	; 1
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24
    240c:	64 c0       	rjmp	.+200    	; 0x24d6 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    240e:	fe 01       	movw	r30, r28
    2410:	e5 5a       	subi	r30, 0xA5	; 165
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	60 81       	ld	r22, Z
    2416:	71 81       	ldd	r23, Z+1	; 0x01
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	3f ef       	ldi	r19, 0xFF	; 255
    2420:	4f e7       	ldi	r20, 0x7F	; 127
    2422:	57 e4       	ldi	r21, 0x47	; 71
    2424:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2428:	18 16       	cp	r1, r24
    242a:	0c f0       	brlt	.+2      	; 0x242e <LCD_displayCharacter+0xbe>
    242c:	43 c0       	rjmp	.+134    	; 0x24b4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    242e:	fe 01       	movw	r30, r28
    2430:	e1 5a       	subi	r30, 0xA1	; 161
    2432:	ff 4f       	sbci	r31, 0xFF	; 255
    2434:	60 81       	ld	r22, Z
    2436:	71 81       	ldd	r23, Z+1	; 0x01
    2438:	82 81       	ldd	r24, Z+2	; 0x02
    243a:	93 81       	ldd	r25, Z+3	; 0x03
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	8e 01       	movw	r16, r28
    244e:	07 5a       	subi	r16, 0xA7	; 167
    2450:	1f 4f       	sbci	r17, 0xFF	; 255
    2452:	bc 01       	movw	r22, r24
    2454:	cd 01       	movw	r24, r26
    2456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	f8 01       	movw	r30, r16
    2460:	91 83       	std	Z+1, r25	; 0x01
    2462:	80 83       	st	Z, r24
    2464:	1f c0       	rjmp	.+62     	; 0x24a4 <LCD_displayCharacter+0x134>
    2466:	fe 01       	movw	r30, r28
    2468:	e9 5a       	subi	r30, 0xA9	; 169
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	89 e1       	ldi	r24, 0x19	; 25
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	91 83       	std	Z+1, r25	; 0x01
    2472:	80 83       	st	Z, r24
    2474:	fe 01       	movw	r30, r28
    2476:	e9 5a       	subi	r30, 0xA9	; 169
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	80 81       	ld	r24, Z
    247c:	91 81       	ldd	r25, Z+1	; 0x01
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <LCD_displayCharacter+0x10e>
    2482:	fe 01       	movw	r30, r28
    2484:	e9 5a       	subi	r30, 0xA9	; 169
    2486:	ff 4f       	sbci	r31, 0xFF	; 255
    2488:	91 83       	std	Z+1, r25	; 0x01
    248a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248c:	de 01       	movw	r26, r28
    248e:	a7 5a       	subi	r26, 0xA7	; 167
    2490:	bf 4f       	sbci	r27, 0xFF	; 255
    2492:	fe 01       	movw	r30, r28
    2494:	e7 5a       	subi	r30, 0xA7	; 167
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 81       	ld	r24, Z
    249a:	91 81       	ldd	r25, Z+1	; 0x01
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	11 96       	adiw	r26, 0x01	; 1
    24a0:	9c 93       	st	X, r25
    24a2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a4:	fe 01       	movw	r30, r28
    24a6:	e7 5a       	subi	r30, 0xA7	; 167
    24a8:	ff 4f       	sbci	r31, 0xFF	; 255
    24aa:	80 81       	ld	r24, Z
    24ac:	91 81       	ldd	r25, Z+1	; 0x01
    24ae:	00 97       	sbiw	r24, 0x00	; 0
    24b0:	d1 f6       	brne	.-76     	; 0x2466 <LCD_displayCharacter+0xf6>
    24b2:	27 c0       	rjmp	.+78     	; 0x2502 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b4:	8e 01       	movw	r16, r28
    24b6:	07 5a       	subi	r16, 0xA7	; 167
    24b8:	1f 4f       	sbci	r17, 0xFF	; 255
    24ba:	fe 01       	movw	r30, r28
    24bc:	e5 5a       	subi	r30, 0xA5	; 165
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	60 81       	ld	r22, Z
    24c2:	71 81       	ldd	r23, Z+1	; 0x01
    24c4:	82 81       	ldd	r24, Z+2	; 0x02
    24c6:	93 81       	ldd	r25, Z+3	; 0x03
    24c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24cc:	dc 01       	movw	r26, r24
    24ce:	cb 01       	movw	r24, r22
    24d0:	f8 01       	movw	r30, r16
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
    24d6:	de 01       	movw	r26, r28
    24d8:	ab 5a       	subi	r26, 0xAB	; 171
    24da:	bf 4f       	sbci	r27, 0xFF	; 255
    24dc:	fe 01       	movw	r30, r28
    24de:	e7 5a       	subi	r30, 0xA7	; 167
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	8d 93       	st	X+, r24
    24e8:	9c 93       	st	X, r25
    24ea:	fe 01       	movw	r30, r28
    24ec:	eb 5a       	subi	r30, 0xAB	; 171
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_displayCharacter+0x184>
    24f8:	fe 01       	movw	r30, r28
    24fa:	eb 5a       	subi	r30, 0xAB	; 171
    24fc:	ff 4f       	sbci	r31, 0xFF	; 255
    24fe:	91 83       	std	Z+1, r25	; 0x01
    2500:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2502:	82 e0       	ldi	r24, 0x02	; 2
    2504:	61 e0       	ldi	r22, 0x01	; 1
    2506:	41 e0       	ldi	r20, 0x01	; 1
    2508:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    250c:	fe 01       	movw	r30, r28
    250e:	ef 5a       	subi	r30, 0xAF	; 175
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	a0 e8       	ldi	r26, 0x80	; 128
    2518:	bf e3       	ldi	r27, 0x3F	; 63
    251a:	80 83       	st	Z, r24
    251c:	91 83       	std	Z+1, r25	; 0x01
    251e:	a2 83       	std	Z+2, r26	; 0x02
    2520:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	8e 01       	movw	r16, r28
    2524:	03 5b       	subi	r16, 0xB3	; 179
    2526:	1f 4f       	sbci	r17, 0xFF	; 255
    2528:	fe 01       	movw	r30, r28
    252a:	ef 5a       	subi	r30, 0xAF	; 175
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	60 81       	ld	r22, Z
    2530:	71 81       	ldd	r23, Z+1	; 0x01
    2532:	82 81       	ldd	r24, Z+2	; 0x02
    2534:	93 81       	ldd	r25, Z+3	; 0x03
    2536:	20 e0       	ldi	r18, 0x00	; 0
    2538:	30 e0       	ldi	r19, 0x00	; 0
    253a:	4a e7       	ldi	r20, 0x7A	; 122
    253c:	53 e4       	ldi	r21, 0x43	; 67
    253e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2542:	dc 01       	movw	r26, r24
    2544:	cb 01       	movw	r24, r22
    2546:	f8 01       	movw	r30, r16
    2548:	80 83       	st	Z, r24
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	a2 83       	std	Z+2, r26	; 0x02
    254e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2550:	fe 01       	movw	r30, r28
    2552:	e3 5b       	subi	r30, 0xB3	; 179
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	60 81       	ld	r22, Z
    2558:	71 81       	ldd	r23, Z+1	; 0x01
    255a:	82 81       	ldd	r24, Z+2	; 0x02
    255c:	93 81       	ldd	r25, Z+3	; 0x03
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e8       	ldi	r20, 0x80	; 128
    2564:	5f e3       	ldi	r21, 0x3F	; 63
    2566:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    256a:	88 23       	and	r24, r24
    256c:	44 f4       	brge	.+16     	; 0x257e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    256e:	fe 01       	movw	r30, r28
    2570:	e5 5b       	subi	r30, 0xB5	; 181
    2572:	ff 4f       	sbci	r31, 0xFF	; 255
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
    257c:	64 c0       	rjmp	.+200    	; 0x2646 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    257e:	fe 01       	movw	r30, r28
    2580:	e3 5b       	subi	r30, 0xB3	; 179
    2582:	ff 4f       	sbci	r31, 0xFF	; 255
    2584:	60 81       	ld	r22, Z
    2586:	71 81       	ldd	r23, Z+1	; 0x01
    2588:	82 81       	ldd	r24, Z+2	; 0x02
    258a:	93 81       	ldd	r25, Z+3	; 0x03
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	3f ef       	ldi	r19, 0xFF	; 255
    2590:	4f e7       	ldi	r20, 0x7F	; 127
    2592:	57 e4       	ldi	r21, 0x47	; 71
    2594:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2598:	18 16       	cp	r1, r24
    259a:	0c f0       	brlt	.+2      	; 0x259e <LCD_displayCharacter+0x22e>
    259c:	43 c0       	rjmp	.+134    	; 0x2624 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259e:	fe 01       	movw	r30, r28
    25a0:	ef 5a       	subi	r30, 0xAF	; 175
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	60 81       	ld	r22, Z
    25a6:	71 81       	ldd	r23, Z+1	; 0x01
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	93 81       	ldd	r25, Z+3	; 0x03
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	30 e0       	ldi	r19, 0x00	; 0
    25b0:	40 e2       	ldi	r20, 0x20	; 32
    25b2:	51 e4       	ldi	r21, 0x41	; 65
    25b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b8:	dc 01       	movw	r26, r24
    25ba:	cb 01       	movw	r24, r22
    25bc:	8e 01       	movw	r16, r28
    25be:	05 5b       	subi	r16, 0xB5	; 181
    25c0:	1f 4f       	sbci	r17, 0xFF	; 255
    25c2:	bc 01       	movw	r22, r24
    25c4:	cd 01       	movw	r24, r26
    25c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	f8 01       	movw	r30, r16
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
    25d4:	1f c0       	rjmp	.+62     	; 0x2614 <LCD_displayCharacter+0x2a4>
    25d6:	fe 01       	movw	r30, r28
    25d8:	e7 5b       	subi	r30, 0xB7	; 183
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	89 e1       	ldi	r24, 0x19	; 25
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	91 83       	std	Z+1, r25	; 0x01
    25e2:	80 83       	st	Z, r24
    25e4:	fe 01       	movw	r30, r28
    25e6:	e7 5b       	subi	r30, 0xB7	; 183
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	91 81       	ldd	r25, Z+1	; 0x01
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <LCD_displayCharacter+0x27e>
    25f2:	fe 01       	movw	r30, r28
    25f4:	e7 5b       	subi	r30, 0xB7	; 183
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	91 83       	std	Z+1, r25	; 0x01
    25fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	de 01       	movw	r26, r28
    25fe:	a5 5b       	subi	r26, 0xB5	; 181
    2600:	bf 4f       	sbci	r27, 0xFF	; 255
    2602:	fe 01       	movw	r30, r28
    2604:	e5 5b       	subi	r30, 0xB5	; 181
    2606:	ff 4f       	sbci	r31, 0xFF	; 255
    2608:	80 81       	ld	r24, Z
    260a:	91 81       	ldd	r25, Z+1	; 0x01
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	11 96       	adiw	r26, 0x01	; 1
    2610:	9c 93       	st	X, r25
    2612:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2614:	fe 01       	movw	r30, r28
    2616:	e5 5b       	subi	r30, 0xB5	; 181
    2618:	ff 4f       	sbci	r31, 0xFF	; 255
    261a:	80 81       	ld	r24, Z
    261c:	91 81       	ldd	r25, Z+1	; 0x01
    261e:	00 97       	sbiw	r24, 0x00	; 0
    2620:	d1 f6       	brne	.-76     	; 0x25d6 <LCD_displayCharacter+0x266>
    2622:	27 c0       	rjmp	.+78     	; 0x2672 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2624:	8e 01       	movw	r16, r28
    2626:	05 5b       	subi	r16, 0xB5	; 181
    2628:	1f 4f       	sbci	r17, 0xFF	; 255
    262a:	fe 01       	movw	r30, r28
    262c:	e3 5b       	subi	r30, 0xB3	; 179
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	60 81       	ld	r22, Z
    2632:	71 81       	ldd	r23, Z+1	; 0x01
    2634:	82 81       	ldd	r24, Z+2	; 0x02
    2636:	93 81       	ldd	r25, Z+3	; 0x03
    2638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263c:	dc 01       	movw	r26, r24
    263e:	cb 01       	movw	r24, r22
    2640:	f8 01       	movw	r30, r16
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
    2646:	de 01       	movw	r26, r28
    2648:	a9 5b       	subi	r26, 0xB9	; 185
    264a:	bf 4f       	sbci	r27, 0xFF	; 255
    264c:	fe 01       	movw	r30, r28
    264e:	e5 5b       	subi	r30, 0xB5	; 181
    2650:	ff 4f       	sbci	r31, 0xFF	; 255
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	8d 93       	st	X+, r24
    2658:	9c 93       	st	X, r25
    265a:	fe 01       	movw	r30, r28
    265c:	e9 5b       	subi	r30, 0xB9	; 185
    265e:	ff 4f       	sbci	r31, 0xFF	; 255
    2660:	80 81       	ld	r24, Z
    2662:	91 81       	ldd	r25, Z+1	; 0x01
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	f1 f7       	brne	.-4      	; 0x2664 <LCD_displayCharacter+0x2f4>
    2668:	fe 01       	movw	r30, r28
    266a:	e9 5b       	subi	r30, 0xB9	; 185
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	91 83       	std	Z+1, r25	; 0x01
    2670:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2672:	fe 01       	movw	r30, r28
    2674:	ed 59       	subi	r30, 0x9D	; 157
    2676:	ff 4f       	sbci	r31, 0xFF	; 255
    2678:	80 81       	ld	r24, Z
    267a:	88 2f       	mov	r24, r24
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	80 71       	andi	r24, 0x10	; 16
    2680:	90 70       	andi	r25, 0x00	; 0
    2682:	95 95       	asr	r25
    2684:	87 95       	ror	r24
    2686:	95 95       	asr	r25
    2688:	87 95       	ror	r24
    268a:	95 95       	asr	r25
    268c:	87 95       	ror	r24
    268e:	95 95       	asr	r25
    2690:	87 95       	ror	r24
    2692:	98 2f       	mov	r25, r24
    2694:	82 e0       	ldi	r24, 0x02	; 2
    2696:	64 e0       	ldi	r22, 0x04	; 4
    2698:	49 2f       	mov	r20, r25
    269a:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    269e:	fe 01       	movw	r30, r28
    26a0:	ed 59       	subi	r30, 0x9D	; 157
    26a2:	ff 4f       	sbci	r31, 0xFF	; 255
    26a4:	80 81       	ld	r24, Z
    26a6:	88 2f       	mov	r24, r24
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	80 72       	andi	r24, 0x20	; 32
    26ac:	90 70       	andi	r25, 0x00	; 0
    26ae:	95 95       	asr	r25
    26b0:	87 95       	ror	r24
    26b2:	95 95       	asr	r25
    26b4:	87 95       	ror	r24
    26b6:	95 95       	asr	r25
    26b8:	87 95       	ror	r24
    26ba:	95 95       	asr	r25
    26bc:	87 95       	ror	r24
    26be:	95 95       	asr	r25
    26c0:	87 95       	ror	r24
    26c2:	98 2f       	mov	r25, r24
    26c4:	82 e0       	ldi	r24, 0x02	; 2
    26c6:	65 e0       	ldi	r22, 0x05	; 5
    26c8:	49 2f       	mov	r20, r25
    26ca:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    26ce:	fe 01       	movw	r30, r28
    26d0:	ed 59       	subi	r30, 0x9D	; 157
    26d2:	ff 4f       	sbci	r31, 0xFF	; 255
    26d4:	80 81       	ld	r24, Z
    26d6:	88 2f       	mov	r24, r24
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	80 74       	andi	r24, 0x40	; 64
    26dc:	90 70       	andi	r25, 0x00	; 0
    26de:	08 2e       	mov	r0, r24
    26e0:	89 2f       	mov	r24, r25
    26e2:	00 0c       	add	r0, r0
    26e4:	88 1f       	adc	r24, r24
    26e6:	99 0b       	sbc	r25, r25
    26e8:	00 0c       	add	r0, r0
    26ea:	88 1f       	adc	r24, r24
    26ec:	99 1f       	adc	r25, r25
    26ee:	98 2f       	mov	r25, r24
    26f0:	82 e0       	ldi	r24, 0x02	; 2
    26f2:	66 e0       	ldi	r22, 0x06	; 6
    26f4:	49 2f       	mov	r20, r25
    26f6:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    26fa:	fe 01       	movw	r30, r28
    26fc:	ed 59       	subi	r30, 0x9D	; 157
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	80 81       	ld	r24, Z
    2702:	98 2f       	mov	r25, r24
    2704:	99 1f       	adc	r25, r25
    2706:	99 27       	eor	r25, r25
    2708:	99 1f       	adc	r25, r25
    270a:	82 e0       	ldi	r24, 0x02	; 2
    270c:	67 e0       	ldi	r22, 0x07	; 7
    270e:	49 2f       	mov	r20, r25
    2710:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2714:	fe 01       	movw	r30, r28
    2716:	ed 5b       	subi	r30, 0xBD	; 189
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	80 e0       	ldi	r24, 0x00	; 0
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	a0 e8       	ldi	r26, 0x80	; 128
    2720:	bf e3       	ldi	r27, 0x3F	; 63
    2722:	80 83       	st	Z, r24
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	a2 83       	std	Z+2, r26	; 0x02
    2728:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272a:	8e 01       	movw	r16, r28
    272c:	01 5c       	subi	r16, 0xC1	; 193
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	fe 01       	movw	r30, r28
    2732:	ed 5b       	subi	r30, 0xBD	; 189
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	60 81       	ld	r22, Z
    2738:	71 81       	ldd	r23, Z+1	; 0x01
    273a:	82 81       	ldd	r24, Z+2	; 0x02
    273c:	93 81       	ldd	r25, Z+3	; 0x03
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	4a e7       	ldi	r20, 0x7A	; 122
    2744:	53 e4       	ldi	r21, 0x43	; 67
    2746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	f8 01       	movw	r30, r16
    2750:	80 83       	st	Z, r24
    2752:	91 83       	std	Z+1, r25	; 0x01
    2754:	a2 83       	std	Z+2, r26	; 0x02
    2756:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2758:	fe 01       	movw	r30, r28
    275a:	ff 96       	adiw	r30, 0x3f	; 63
    275c:	60 81       	ld	r22, Z
    275e:	71 81       	ldd	r23, Z+1	; 0x01
    2760:	82 81       	ldd	r24, Z+2	; 0x02
    2762:	93 81       	ldd	r25, Z+3	; 0x03
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e8       	ldi	r20, 0x80	; 128
    276a:	5f e3       	ldi	r21, 0x3F	; 63
    276c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2770:	88 23       	and	r24, r24
    2772:	2c f4       	brge	.+10     	; 0x277e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	9e af       	std	Y+62, r25	; 0x3e
    277a:	8d af       	std	Y+61, r24	; 0x3d
    277c:	46 c0       	rjmp	.+140    	; 0x280a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    277e:	fe 01       	movw	r30, r28
    2780:	ff 96       	adiw	r30, 0x3f	; 63
    2782:	60 81       	ld	r22, Z
    2784:	71 81       	ldd	r23, Z+1	; 0x01
    2786:	82 81       	ldd	r24, Z+2	; 0x02
    2788:	93 81       	ldd	r25, Z+3	; 0x03
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	3f ef       	ldi	r19, 0xFF	; 255
    278e:	4f e7       	ldi	r20, 0x7F	; 127
    2790:	57 e4       	ldi	r21, 0x47	; 71
    2792:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2796:	18 16       	cp	r1, r24
    2798:	64 f5       	brge	.+88     	; 0x27f2 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279a:	fe 01       	movw	r30, r28
    279c:	ed 5b       	subi	r30, 0xBD	; 189
    279e:	ff 4f       	sbci	r31, 0xFF	; 255
    27a0:	60 81       	ld	r22, Z
    27a2:	71 81       	ldd	r23, Z+1	; 0x01
    27a4:	82 81       	ldd	r24, Z+2	; 0x02
    27a6:	93 81       	ldd	r25, Z+3	; 0x03
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e2       	ldi	r20, 0x20	; 32
    27ae:	51 e4       	ldi	r21, 0x41	; 65
    27b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	bc 01       	movw	r22, r24
    27ba:	cd 01       	movw	r24, r26
    27bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27c0:	dc 01       	movw	r26, r24
    27c2:	cb 01       	movw	r24, r22
    27c4:	9e af       	std	Y+62, r25	; 0x3e
    27c6:	8d af       	std	Y+61, r24	; 0x3d
    27c8:	0f c0       	rjmp	.+30     	; 0x27e8 <LCD_displayCharacter+0x478>
    27ca:	89 e1       	ldi	r24, 0x19	; 25
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	9c af       	std	Y+60, r25	; 0x3c
    27d0:	8b af       	std	Y+59, r24	; 0x3b
    27d2:	8b ad       	ldd	r24, Y+59	; 0x3b
    27d4:	9c ad       	ldd	r25, Y+60	; 0x3c
    27d6:	01 97       	sbiw	r24, 0x01	; 1
    27d8:	f1 f7       	brne	.-4      	; 0x27d6 <LCD_displayCharacter+0x466>
    27da:	9c af       	std	Y+60, r25	; 0x3c
    27dc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27de:	8d ad       	ldd	r24, Y+61	; 0x3d
    27e0:	9e ad       	ldd	r25, Y+62	; 0x3e
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	9e af       	std	Y+62, r25	; 0x3e
    27e6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    27ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	69 f7       	brne	.-38     	; 0x27ca <LCD_displayCharacter+0x45a>
    27f0:	16 c0       	rjmp	.+44     	; 0x281e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27f2:	fe 01       	movw	r30, r28
    27f4:	ff 96       	adiw	r30, 0x3f	; 63
    27f6:	60 81       	ld	r22, Z
    27f8:	71 81       	ldd	r23, Z+1	; 0x01
    27fa:	82 81       	ldd	r24, Z+2	; 0x02
    27fc:	93 81       	ldd	r25, Z+3	; 0x03
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	9e af       	std	Y+62, r25	; 0x3e
    2808:	8d af       	std	Y+61, r24	; 0x3d
    280a:	8d ad       	ldd	r24, Y+61	; 0x3d
    280c:	9e ad       	ldd	r25, Y+62	; 0x3e
    280e:	9a af       	std	Y+58, r25	; 0x3a
    2810:	89 af       	std	Y+57, r24	; 0x39
    2812:	89 ad       	ldd	r24, Y+57	; 0x39
    2814:	9a ad       	ldd	r25, Y+58	; 0x3a
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <LCD_displayCharacter+0x4a6>
    281a:	9a af       	std	Y+58, r25	; 0x3a
    281c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    281e:	82 e0       	ldi	r24, 0x02	; 2
    2820:	61 e0       	ldi	r22, 0x01	; 1
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	a0 e8       	ldi	r26, 0x80	; 128
    282e:	bf e3       	ldi	r27, 0x3F	; 63
    2830:	8d ab       	std	Y+53, r24	; 0x35
    2832:	9e ab       	std	Y+54, r25	; 0x36
    2834:	af ab       	std	Y+55, r26	; 0x37
    2836:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6d a9       	ldd	r22, Y+53	; 0x35
    283a:	7e a9       	ldd	r23, Y+54	; 0x36
    283c:	8f a9       	ldd	r24, Y+55	; 0x37
    283e:	98 ad       	ldd	r25, Y+56	; 0x38
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a e7       	ldi	r20, 0x7A	; 122
    2846:	53 e4       	ldi	r21, 0x43	; 67
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	89 ab       	std	Y+49, r24	; 0x31
    2852:	9a ab       	std	Y+50, r25	; 0x32
    2854:	ab ab       	std	Y+51, r26	; 0x33
    2856:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2858:	69 a9       	ldd	r22, Y+49	; 0x31
    285a:	7a a9       	ldd	r23, Y+50	; 0x32
    285c:	8b a9       	ldd	r24, Y+51	; 0x33
    285e:	9c a9       	ldd	r25, Y+52	; 0x34
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	98 ab       	std	Y+48, r25	; 0x30
    2876:	8f a7       	std	Y+47, r24	; 0x2f
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    287a:	69 a9       	ldd	r22, Y+49	; 0x31
    287c:	7a a9       	ldd	r23, Y+50	; 0x32
    287e:	8b a9       	ldd	r24, Y+51	; 0x33
    2880:	9c a9       	ldd	r25, Y+52	; 0x34
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6d a9       	ldd	r22, Y+53	; 0x35
    2894:	7e a9       	ldd	r23, Y+54	; 0x36
    2896:	8f a9       	ldd	r24, Y+55	; 0x37
    2898:	98 ad       	ldd	r25, Y+56	; 0x38
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	98 ab       	std	Y+48, r25	; 0x30
    28b8:	8f a7       	std	Y+47, r24	; 0x2f
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <LCD_displayCharacter+0x56a>
    28bc:	89 e1       	ldi	r24, 0x19	; 25
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9e a7       	std	Y+46, r25	; 0x2e
    28c2:	8d a7       	std	Y+45, r24	; 0x2d
    28c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <LCD_displayCharacter+0x558>
    28cc:	9e a7       	std	Y+46, r25	; 0x2e
    28ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d2:	98 a9       	ldd	r25, Y+48	; 0x30
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	98 ab       	std	Y+48, r25	; 0x30
    28d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8f a5       	ldd	r24, Y+47	; 0x2f
    28dc:	98 a9       	ldd	r25, Y+48	; 0x30
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <LCD_displayCharacter+0x54c>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	69 a9       	ldd	r22, Y+49	; 0x31
    28e6:	7a a9       	ldd	r23, Y+50	; 0x32
    28e8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ea:	9c a9       	ldd	r25, Y+52	; 0x34
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	98 ab       	std	Y+48, r25	; 0x30
    28f6:	8f a7       	std	Y+47, r24	; 0x2f
    28f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fa:	98 a9       	ldd	r25, Y+48	; 0x30
    28fc:	9c a7       	std	Y+44, r25	; 0x2c
    28fe:	8b a7       	std	Y+43, r24	; 0x2b
    2900:	8b a5       	ldd	r24, Y+43	; 0x2b
    2902:	9c a5       	ldd	r25, Y+44	; 0x2c
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <LCD_displayCharacter+0x594>
    2908:	9c a7       	std	Y+44, r25	; 0x2c
    290a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    290c:	82 e0       	ldi	r24, 0x02	; 2
    290e:	61 e0       	ldi	r22, 0x01	; 1
    2910:	41 e0       	ldi	r20, 0x01	; 1
    2912:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2916:	80 e0       	ldi	r24, 0x00	; 0
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a0 e8       	ldi	r26, 0x80	; 128
    291c:	bf e3       	ldi	r27, 0x3F	; 63
    291e:	8f a3       	std	Y+39, r24	; 0x27
    2920:	98 a7       	std	Y+40, r25	; 0x28
    2922:	a9 a7       	std	Y+41, r26	; 0x29
    2924:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2926:	6f a1       	ldd	r22, Y+39	; 0x27
    2928:	78 a5       	ldd	r23, Y+40	; 0x28
    292a:	89 a5       	ldd	r24, Y+41	; 0x29
    292c:	9a a5       	ldd	r25, Y+42	; 0x2a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	4a e7       	ldi	r20, 0x7A	; 122
    2934:	53 e4       	ldi	r21, 0x43	; 67
    2936:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    293a:	dc 01       	movw	r26, r24
    293c:	cb 01       	movw	r24, r22
    293e:	8b a3       	std	Y+35, r24	; 0x23
    2940:	9c a3       	std	Y+36, r25	; 0x24
    2942:	ad a3       	std	Y+37, r26	; 0x25
    2944:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2946:	6b a1       	ldd	r22, Y+35	; 0x23
    2948:	7c a1       	ldd	r23, Y+36	; 0x24
    294a:	8d a1       	ldd	r24, Y+37	; 0x25
    294c:	9e a1       	ldd	r25, Y+38	; 0x26
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	40 e8       	ldi	r20, 0x80	; 128
    2954:	5f e3       	ldi	r21, 0x3F	; 63
    2956:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    295a:	88 23       	and	r24, r24
    295c:	2c f4       	brge	.+10     	; 0x2968 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9a a3       	std	Y+34, r25	; 0x22
    2964:	89 a3       	std	Y+33, r24	; 0x21
    2966:	3f c0       	rjmp	.+126    	; 0x29e6 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2968:	6b a1       	ldd	r22, Y+35	; 0x23
    296a:	7c a1       	ldd	r23, Y+36	; 0x24
    296c:	8d a1       	ldd	r24, Y+37	; 0x25
    296e:	9e a1       	ldd	r25, Y+38	; 0x26
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	3f ef       	ldi	r19, 0xFF	; 255
    2974:	4f e7       	ldi	r20, 0x7F	; 127
    2976:	57 e4       	ldi	r21, 0x47	; 71
    2978:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    297c:	18 16       	cp	r1, r24
    297e:	4c f5       	brge	.+82     	; 0x29d2 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2980:	6f a1       	ldd	r22, Y+39	; 0x27
    2982:	78 a5       	ldd	r23, Y+40	; 0x28
    2984:	89 a5       	ldd	r24, Y+41	; 0x29
    2986:	9a a5       	ldd	r25, Y+42	; 0x2a
    2988:	20 e0       	ldi	r18, 0x00	; 0
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	40 e2       	ldi	r20, 0x20	; 32
    298e:	51 e4       	ldi	r21, 0x41	; 65
    2990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	bc 01       	movw	r22, r24
    299a:	cd 01       	movw	r24, r26
    299c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	9a a3       	std	Y+34, r25	; 0x22
    29a6:	89 a3       	std	Y+33, r24	; 0x21
    29a8:	0f c0       	rjmp	.+30     	; 0x29c8 <LCD_displayCharacter+0x658>
    29aa:	89 e1       	ldi	r24, 0x19	; 25
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	98 a3       	std	Y+32, r25	; 0x20
    29b0:	8f 8f       	std	Y+31, r24	; 0x1f
    29b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29b4:	98 a1       	ldd	r25, Y+32	; 0x20
    29b6:	01 97       	sbiw	r24, 0x01	; 1
    29b8:	f1 f7       	brne	.-4      	; 0x29b6 <LCD_displayCharacter+0x646>
    29ba:	98 a3       	std	Y+32, r25	; 0x20
    29bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29be:	89 a1       	ldd	r24, Y+33	; 0x21
    29c0:	9a a1       	ldd	r25, Y+34	; 0x22
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	9a a3       	std	Y+34, r25	; 0x22
    29c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ca:	9a a1       	ldd	r25, Y+34	; 0x22
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	69 f7       	brne	.-38     	; 0x29aa <LCD_displayCharacter+0x63a>
    29d0:	14 c0       	rjmp	.+40     	; 0x29fa <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	6b a1       	ldd	r22, Y+35	; 0x23
    29d4:	7c a1       	ldd	r23, Y+36	; 0x24
    29d6:	8d a1       	ldd	r24, Y+37	; 0x25
    29d8:	9e a1       	ldd	r25, Y+38	; 0x26
    29da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29de:	dc 01       	movw	r26, r24
    29e0:	cb 01       	movw	r24, r22
    29e2:	9a a3       	std	Y+34, r25	; 0x22
    29e4:	89 a3       	std	Y+33, r24	; 0x21
    29e6:	89 a1       	ldd	r24, Y+33	; 0x21
    29e8:	9a a1       	ldd	r25, Y+34	; 0x22
    29ea:	9e 8f       	std	Y+30, r25	; 0x1e
    29ec:	8d 8f       	std	Y+29, r24	; 0x1d
    29ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29f2:	01 97       	sbiw	r24, 0x01	; 1
    29f4:	f1 f7       	brne	.-4      	; 0x29f2 <LCD_displayCharacter+0x682>
    29f6:	9e 8f       	std	Y+30, r25	; 0x1e
    29f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    29fa:	fe 01       	movw	r30, r28
    29fc:	ed 59       	subi	r30, 0x9D	; 157
    29fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2a00:	80 81       	ld	r24, Z
    2a02:	98 2f       	mov	r25, r24
    2a04:	91 70       	andi	r25, 0x01	; 1
    2a06:	82 e0       	ldi	r24, 0x02	; 2
    2a08:	64 e0       	ldi	r22, 0x04	; 4
    2a0a:	49 2f       	mov	r20, r25
    2a0c:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2a10:	fe 01       	movw	r30, r28
    2a12:	ed 59       	subi	r30, 0x9D	; 157
    2a14:	ff 4f       	sbci	r31, 0xFF	; 255
    2a16:	80 81       	ld	r24, Z
    2a18:	88 2f       	mov	r24, r24
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	82 70       	andi	r24, 0x02	; 2
    2a1e:	90 70       	andi	r25, 0x00	; 0
    2a20:	95 95       	asr	r25
    2a22:	87 95       	ror	r24
    2a24:	98 2f       	mov	r25, r24
    2a26:	82 e0       	ldi	r24, 0x02	; 2
    2a28:	65 e0       	ldi	r22, 0x05	; 5
    2a2a:	49 2f       	mov	r20, r25
    2a2c:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2a30:	fe 01       	movw	r30, r28
    2a32:	ed 59       	subi	r30, 0x9D	; 157
    2a34:	ff 4f       	sbci	r31, 0xFF	; 255
    2a36:	80 81       	ld	r24, Z
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	84 70       	andi	r24, 0x04	; 4
    2a3e:	90 70       	andi	r25, 0x00	; 0
    2a40:	95 95       	asr	r25
    2a42:	87 95       	ror	r24
    2a44:	95 95       	asr	r25
    2a46:	87 95       	ror	r24
    2a48:	98 2f       	mov	r25, r24
    2a4a:	82 e0       	ldi	r24, 0x02	; 2
    2a4c:	66 e0       	ldi	r22, 0x06	; 6
    2a4e:	49 2f       	mov	r20, r25
    2a50:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2a54:	fe 01       	movw	r30, r28
    2a56:	ed 59       	subi	r30, 0x9D	; 157
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	88 2f       	mov	r24, r24
    2a5e:	90 e0       	ldi	r25, 0x00	; 0
    2a60:	88 70       	andi	r24, 0x08	; 8
    2a62:	90 70       	andi	r25, 0x00	; 0
    2a64:	95 95       	asr	r25
    2a66:	87 95       	ror	r24
    2a68:	95 95       	asr	r25
    2a6a:	87 95       	ror	r24
    2a6c:	95 95       	asr	r25
    2a6e:	87 95       	ror	r24
    2a70:	98 2f       	mov	r25, r24
    2a72:	82 e0       	ldi	r24, 0x02	; 2
    2a74:	67 e0       	ldi	r22, 0x07	; 7
    2a76:	49 2f       	mov	r20, r25
    2a78:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	a0 e8       	ldi	r26, 0x80	; 128
    2a82:	bf e3       	ldi	r27, 0x3F	; 63
    2a84:	89 8f       	std	Y+25, r24	; 0x19
    2a86:	9a 8f       	std	Y+26, r25	; 0x1a
    2a88:	ab 8f       	std	Y+27, r26	; 0x1b
    2a8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a94:	20 e0       	ldi	r18, 0x00	; 0
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	4a e7       	ldi	r20, 0x7A	; 122
    2a9a:	53 e4       	ldi	r21, 0x43	; 67
    2a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa0:	dc 01       	movw	r26, r24
    2aa2:	cb 01       	movw	r24, r22
    2aa4:	8d 8b       	std	Y+21, r24	; 0x15
    2aa6:	9e 8b       	std	Y+22, r25	; 0x16
    2aa8:	af 8b       	std	Y+23, r26	; 0x17
    2aaa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2aac:	6d 89       	ldd	r22, Y+21	; 0x15
    2aae:	7e 89       	ldd	r23, Y+22	; 0x16
    2ab0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ab2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
    2ab6:	30 e0       	ldi	r19, 0x00	; 0
    2ab8:	40 e8       	ldi	r20, 0x80	; 128
    2aba:	5f e3       	ldi	r21, 0x3F	; 63
    2abc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ac0:	88 23       	and	r24, r24
    2ac2:	2c f4       	brge	.+10     	; 0x2ace <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	9c 8b       	std	Y+20, r25	; 0x14
    2aca:	8b 8b       	std	Y+19, r24	; 0x13
    2acc:	3f c0       	rjmp	.+126    	; 0x2b4c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ace:	6d 89       	ldd	r22, Y+21	; 0x15
    2ad0:	7e 89       	ldd	r23, Y+22	; 0x16
    2ad2:	8f 89       	ldd	r24, Y+23	; 0x17
    2ad4:	98 8d       	ldd	r25, Y+24	; 0x18
    2ad6:	20 e0       	ldi	r18, 0x00	; 0
    2ad8:	3f ef       	ldi	r19, 0xFF	; 255
    2ada:	4f e7       	ldi	r20, 0x7F	; 127
    2adc:	57 e4       	ldi	r21, 0x47	; 71
    2ade:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ae2:	18 16       	cp	r1, r24
    2ae4:	4c f5       	brge	.+82     	; 0x2b38 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae6:	69 8d       	ldd	r22, Y+25	; 0x19
    2ae8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2aec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	30 e0       	ldi	r19, 0x00	; 0
    2af2:	40 e2       	ldi	r20, 0x20	; 32
    2af4:	51 e4       	ldi	r21, 0x41	; 65
    2af6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	bc 01       	movw	r22, r24
    2b00:	cd 01       	movw	r24, r26
    2b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b06:	dc 01       	movw	r26, r24
    2b08:	cb 01       	movw	r24, r22
    2b0a:	9c 8b       	std	Y+20, r25	; 0x14
    2b0c:	8b 8b       	std	Y+19, r24	; 0x13
    2b0e:	0f c0       	rjmp	.+30     	; 0x2b2e <LCD_displayCharacter+0x7be>
    2b10:	89 e1       	ldi	r24, 0x19	; 25
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	9a 8b       	std	Y+18, r25	; 0x12
    2b16:	89 8b       	std	Y+17, r24	; 0x11
    2b18:	89 89       	ldd	r24, Y+17	; 0x11
    2b1a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b1c:	01 97       	sbiw	r24, 0x01	; 1
    2b1e:	f1 f7       	brne	.-4      	; 0x2b1c <LCD_displayCharacter+0x7ac>
    2b20:	9a 8b       	std	Y+18, r25	; 0x12
    2b22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b24:	8b 89       	ldd	r24, Y+19	; 0x13
    2b26:	9c 89       	ldd	r25, Y+20	; 0x14
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	9c 8b       	std	Y+20, r25	; 0x14
    2b2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    2b30:	9c 89       	ldd	r25, Y+20	; 0x14
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	69 f7       	brne	.-38     	; 0x2b10 <LCD_displayCharacter+0x7a0>
    2b36:	14 c0       	rjmp	.+40     	; 0x2b60 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b38:	6d 89       	ldd	r22, Y+21	; 0x15
    2b3a:	7e 89       	ldd	r23, Y+22	; 0x16
    2b3c:	8f 89       	ldd	r24, Y+23	; 0x17
    2b3e:	98 8d       	ldd	r25, Y+24	; 0x18
    2b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b44:	dc 01       	movw	r26, r24
    2b46:	cb 01       	movw	r24, r22
    2b48:	9c 8b       	std	Y+20, r25	; 0x14
    2b4a:	8b 8b       	std	Y+19, r24	; 0x13
    2b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b50:	98 8b       	std	Y+16, r25	; 0x10
    2b52:	8f 87       	std	Y+15, r24	; 0x0f
    2b54:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b56:	98 89       	ldd	r25, Y+16	; 0x10
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <LCD_displayCharacter+0x7e8>
    2b5c:	98 8b       	std	Y+16, r25	; 0x10
    2b5e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2b60:	82 e0       	ldi	r24, 0x02	; 2
    2b62:	61 e0       	ldi	r22, 0x01	; 1
    2b64:	40 e0       	ldi	r20, 0x00	; 0
    2b66:	0e 94 90 08 	call	0x1120	; 0x1120 <GPIO_writePin>
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	90 e0       	ldi	r25, 0x00	; 0
    2b6e:	a0 e8       	ldi	r26, 0x80	; 128
    2b70:	bf e3       	ldi	r27, 0x3F	; 63
    2b72:	8b 87       	std	Y+11, r24	; 0x0b
    2b74:	9c 87       	std	Y+12, r25	; 0x0c
    2b76:	ad 87       	std	Y+13, r26	; 0x0d
    2b78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b80:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	4a e7       	ldi	r20, 0x7A	; 122
    2b88:	53 e4       	ldi	r21, 0x43	; 67
    2b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8e:	dc 01       	movw	r26, r24
    2b90:	cb 01       	movw	r24, r22
    2b92:	8f 83       	std	Y+7, r24	; 0x07
    2b94:	98 87       	std	Y+8, r25	; 0x08
    2b96:	a9 87       	std	Y+9, r26	; 0x09
    2b98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b9c:	78 85       	ldd	r23, Y+8	; 0x08
    2b9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ba0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ba2:	20 e0       	ldi	r18, 0x00	; 0
    2ba4:	30 e0       	ldi	r19, 0x00	; 0
    2ba6:	40 e8       	ldi	r20, 0x80	; 128
    2ba8:	5f e3       	ldi	r21, 0x3F	; 63
    2baa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bae:	88 23       	and	r24, r24
    2bb0:	2c f4       	brge	.+10     	; 0x2bbc <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2bb2:	81 e0       	ldi	r24, 0x01	; 1
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	9e 83       	std	Y+6, r25	; 0x06
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
    2bba:	3f c0       	rjmp	.+126    	; 0x2c3a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2bbc:	6f 81       	ldd	r22, Y+7	; 0x07
    2bbe:	78 85       	ldd	r23, Y+8	; 0x08
    2bc0:	89 85       	ldd	r24, Y+9	; 0x09
    2bc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	3f ef       	ldi	r19, 0xFF	; 255
    2bc8:	4f e7       	ldi	r20, 0x7F	; 127
    2bca:	57 e4       	ldi	r21, 0x47	; 71
    2bcc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bd0:	18 16       	cp	r1, r24
    2bd2:	4c f5       	brge	.+82     	; 0x2c26 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2bd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2bda:	9e 85       	ldd	r25, Y+14	; 0x0e
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 e2       	ldi	r20, 0x20	; 32
    2be2:	51 e4       	ldi	r21, 0x41	; 65
    2be4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be8:	dc 01       	movw	r26, r24
    2bea:	cb 01       	movw	r24, r22
    2bec:	bc 01       	movw	r22, r24
    2bee:	cd 01       	movw	r24, r26
    2bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf4:	dc 01       	movw	r26, r24
    2bf6:	cb 01       	movw	r24, r22
    2bf8:	9e 83       	std	Y+6, r25	; 0x06
    2bfa:	8d 83       	std	Y+5, r24	; 0x05
    2bfc:	0f c0       	rjmp	.+30     	; 0x2c1c <LCD_displayCharacter+0x8ac>
    2bfe:	89 e1       	ldi	r24, 0x19	; 25
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	9c 83       	std	Y+4, r25	; 0x04
    2c04:	8b 83       	std	Y+3, r24	; 0x03
    2c06:	8b 81       	ldd	r24, Y+3	; 0x03
    2c08:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0a:	01 97       	sbiw	r24, 0x01	; 1
    2c0c:	f1 f7       	brne	.-4      	; 0x2c0a <LCD_displayCharacter+0x89a>
    2c0e:	9c 83       	std	Y+4, r25	; 0x04
    2c10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c12:	8d 81       	ldd	r24, Y+5	; 0x05
    2c14:	9e 81       	ldd	r25, Y+6	; 0x06
    2c16:	01 97       	sbiw	r24, 0x01	; 1
    2c18:	9e 83       	std	Y+6, r25	; 0x06
    2c1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	00 97       	sbiw	r24, 0x00	; 0
    2c22:	69 f7       	brne	.-38     	; 0x2bfe <LCD_displayCharacter+0x88e>
    2c24:	14 c0       	rjmp	.+40     	; 0x2c4e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c26:	6f 81       	ldd	r22, Y+7	; 0x07
    2c28:	78 85       	ldd	r23, Y+8	; 0x08
    2c2a:	89 85       	ldd	r24, Y+9	; 0x09
    2c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c32:	dc 01       	movw	r26, r24
    2c34:	cb 01       	movw	r24, r22
    2c36:	9e 83       	std	Y+6, r25	; 0x06
    2c38:	8d 83       	std	Y+5, r24	; 0x05
    2c3a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c3c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c3e:	9a 83       	std	Y+2, r25	; 0x02
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	9a 81       	ldd	r25, Y+2	; 0x02
    2c46:	01 97       	sbiw	r24, 0x01	; 1
    2c48:	f1 f7       	brne	.-4      	; 0x2c46 <LCD_displayCharacter+0x8d6>
    2c4a:	9a 83       	std	Y+2, r25	; 0x02
    2c4c:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2c4e:	cd 59       	subi	r28, 0x9D	; 157
    2c50:	df 4f       	sbci	r29, 0xFF	; 255
    2c52:	0f b6       	in	r0, 0x3f	; 63
    2c54:	f8 94       	cli
    2c56:	de bf       	out	0x3e, r29	; 62
    2c58:	0f be       	out	0x3f, r0	; 63
    2c5a:	cd bf       	out	0x3d, r28	; 61
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	1f 91       	pop	r17
    2c62:	0f 91       	pop	r16
    2c64:	08 95       	ret

00002c66 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2c66:	df 93       	push	r29
    2c68:	cf 93       	push	r28
    2c6a:	00 d0       	rcall	.+0      	; 0x2c6c <LCD_displayString+0x6>
    2c6c:	0f 92       	push	r0
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	9b 83       	std	Y+3, r25	; 0x03
    2c74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c76:	19 82       	std	Y+1, r1	; 0x01
    2c78:	0e c0       	rjmp	.+28     	; 0x2c96 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	8a 81       	ldd	r24, Y+2	; 0x02
    2c82:	9b 81       	ldd	r25, Y+3	; 0x03
    2c84:	fc 01       	movw	r30, r24
    2c86:	e2 0f       	add	r30, r18
    2c88:	f3 1f       	adc	r31, r19
    2c8a:	80 81       	ld	r24, Z
    2c8c:	0e 94 b8 11 	call	0x2370	; 0x2370 <LCD_displayCharacter>
		i++;
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca0:	fc 01       	movw	r30, r24
    2ca2:	e2 0f       	add	r30, r18
    2ca4:	f3 1f       	adc	r31, r19
    2ca6:	80 81       	ld	r24, Z
    2ca8:	88 23       	and	r24, r24
    2caa:	39 f7       	brne	.-50     	; 0x2c7a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	cf 91       	pop	r28
    2cb4:	df 91       	pop	r29
    2cb6:	08 95       	ret

00002cb8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2cb8:	df 93       	push	r29
    2cba:	cf 93       	push	r28
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <LCD_moveCursor+0x6>
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <LCD_moveCursor+0x8>
    2cc0:	0f 92       	push	r0
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	8a 83       	std	Y+2, r24	; 0x02
    2cc8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	3d 83       	std	Y+5, r19	; 0x05
    2cd2:	2c 83       	std	Y+4, r18	; 0x04
    2cd4:	8c 81       	ldd	r24, Y+4	; 0x04
    2cd6:	9d 81       	ldd	r25, Y+5	; 0x05
    2cd8:	81 30       	cpi	r24, 0x01	; 1
    2cda:	91 05       	cpc	r25, r1
    2cdc:	c1 f0       	breq	.+48     	; 0x2d0e <LCD_moveCursor+0x56>
    2cde:	2c 81       	ldd	r18, Y+4	; 0x04
    2ce0:	3d 81       	ldd	r19, Y+5	; 0x05
    2ce2:	22 30       	cpi	r18, 0x02	; 2
    2ce4:	31 05       	cpc	r19, r1
    2ce6:	2c f4       	brge	.+10     	; 0x2cf2 <LCD_moveCursor+0x3a>
    2ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    2cea:	9d 81       	ldd	r25, Y+5	; 0x05
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	61 f0       	breq	.+24     	; 0x2d08 <LCD_moveCursor+0x50>
    2cf0:	19 c0       	rjmp	.+50     	; 0x2d24 <LCD_moveCursor+0x6c>
    2cf2:	2c 81       	ldd	r18, Y+4	; 0x04
    2cf4:	3d 81       	ldd	r19, Y+5	; 0x05
    2cf6:	22 30       	cpi	r18, 0x02	; 2
    2cf8:	31 05       	cpc	r19, r1
    2cfa:	69 f0       	breq	.+26     	; 0x2d16 <LCD_moveCursor+0x5e>
    2cfc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cfe:	9d 81       	ldd	r25, Y+5	; 0x05
    2d00:	83 30       	cpi	r24, 0x03	; 3
    2d02:	91 05       	cpc	r25, r1
    2d04:	61 f0       	breq	.+24     	; 0x2d1e <LCD_moveCursor+0x66>
    2d06:	0e c0       	rjmp	.+28     	; 0x2d24 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	0b c0       	rjmp	.+22     	; 0x2d24 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d10:	80 5c       	subi	r24, 0xC0	; 192
    2d12:	89 83       	std	Y+1, r24	; 0x01
    2d14:	07 c0       	rjmp	.+14     	; 0x2d24 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2d16:	8b 81       	ldd	r24, Y+3	; 0x03
    2d18:	80 5f       	subi	r24, 0xF0	; 240
    2d1a:	89 83       	std	Y+1, r24	; 0x01
    2d1c:	03 c0       	rjmp	.+6      	; 0x2d24 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d20:	80 5b       	subi	r24, 0xB0	; 176
    2d22:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2d24:	89 81       	ldd	r24, Y+1	; 0x01
    2d26:	80 68       	ori	r24, 0x80	; 128
    2d28:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
}
    2d2c:	0f 90       	pop	r0
    2d2e:	0f 90       	pop	r0
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	0f 90       	pop	r0
    2d36:	cf 91       	pop	r28
    2d38:	df 91       	pop	r29
    2d3a:	08 95       	ret

00002d3c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2d3c:	df 93       	push	r29
    2d3e:	cf 93       	push	r28
    2d40:	00 d0       	rcall	.+0      	; 0x2d42 <LCD_displayStringRowColumn+0x6>
    2d42:	00 d0       	rcall	.+0      	; 0x2d44 <LCD_displayStringRowColumn+0x8>
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	89 83       	std	Y+1, r24	; 0x01
    2d4a:	6a 83       	std	Y+2, r22	; 0x02
    2d4c:	5c 83       	std	Y+4, r21	; 0x04
    2d4e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	6a 81       	ldd	r22, Y+2	; 0x02
    2d54:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d5c:	0e 94 33 16 	call	0x2c66	; 0x2c66 <LCD_displayString>
}
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	08 95       	ret

00002d6e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2d6e:	df 93       	push	r29
    2d70:	cf 93       	push	r28
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
    2d76:	62 97       	sbiw	r28, 0x12	; 18
    2d78:	0f b6       	in	r0, 0x3f	; 63
    2d7a:	f8 94       	cli
    2d7c:	de bf       	out	0x3e, r29	; 62
    2d7e:	0f be       	out	0x3f, r0	; 63
    2d80:	cd bf       	out	0x3d, r28	; 61
    2d82:	9a 8b       	std	Y+18, r25	; 0x12
    2d84:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2d86:	89 89       	ldd	r24, Y+17	; 0x11
    2d88:	9a 89       	ldd	r25, Y+18	; 0x12
    2d8a:	9e 01       	movw	r18, r28
    2d8c:	2f 5f       	subi	r18, 0xFF	; 255
    2d8e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d90:	b9 01       	movw	r22, r18
    2d92:	4a e0       	ldi	r20, 0x0A	; 10
    2d94:	50 e0       	ldi	r21, 0x00	; 0
    2d96:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <itoa>
   LCD_displayString(buff); /* Display the string */
    2d9a:	ce 01       	movw	r24, r28
    2d9c:	01 96       	adiw	r24, 0x01	; 1
    2d9e:	0e 94 33 16 	call	0x2c66	; 0x2c66 <LCD_displayString>
}
    2da2:	62 96       	adiw	r28, 0x12	; 18
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	cf 91       	pop	r28
    2db0:	df 91       	pop	r29
    2db2:	08 95       	ret

00002db4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2db4:	df 93       	push	r29
    2db6:	cf 93       	push	r28
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LCD_sendCommand>
}
    2dc2:	cf 91       	pop	r28
    2dc4:	df 91       	pop	r29
    2dc6:	08 95       	ret

00002dc8 <displayArray>:

/*******************************************************************************
 *                                Function Definitions                         *
 *******************************************************************************/
void displayArray(float64 arr[], uint8 size)
{
    2dc8:	df 93       	push	r29
    2dca:	cf 93       	push	r28
    2dcc:	cd b7       	in	r28, 0x3d	; 61
    2dce:	de b7       	in	r29, 0x3e	; 62
    2dd0:	62 97       	sbiw	r28, 0x12	; 18
    2dd2:	0f b6       	in	r0, 0x3f	; 63
    2dd4:	f8 94       	cli
    2dd6:	de bf       	out	0x3e, r29	; 62
    2dd8:	0f be       	out	0x3f, r0	; 63
    2dda:	cd bf       	out	0x3d, r28	; 61
    2ddc:	99 8b       	std	Y+17, r25	; 0x11
    2dde:	88 8b       	std	Y+16, r24	; 0x10
    2de0:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
	LCD_displayStringRowColumn(2, 0, "                ");
    2de2:	20 e6       	ldi	r18, 0x60	; 96
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	60 e0       	ldi	r22, 0x00	; 0
    2dea:	a9 01       	movw	r20, r18
    2dec:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <LCD_displayStringRowColumn>
	LCD_moveCursor(2, 0);
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	60 e0       	ldi	r22, 0x00	; 0
    2df4:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <LCD_moveCursor>
	for(i = 0; i < size; i++)
    2df8:	1f 86       	std	Y+15, r1	; 0x0f
    2dfa:	1f c0       	rjmp	.+62     	; 0x2e3a <displayArray+0x72>
	{
		LCD_intgerToString(arr[i]);
    2dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfe:	88 2f       	mov	r24, r24
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	9c 01       	movw	r18, r24
    2e04:	22 0f       	add	r18, r18
    2e06:	33 1f       	adc	r19, r19
    2e08:	22 0f       	add	r18, r18
    2e0a:	33 1f       	adc	r19, r19
    2e0c:	88 89       	ldd	r24, Y+16	; 0x10
    2e0e:	99 89       	ldd	r25, Y+17	; 0x11
    2e10:	fc 01       	movw	r30, r24
    2e12:	e2 0f       	add	r30, r18
    2e14:	f3 1f       	adc	r31, r19
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	a2 81       	ldd	r26, Z+2	; 0x02
    2e1c:	b3 81       	ldd	r27, Z+3	; 0x03
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    2e26:	dc 01       	movw	r26, r24
    2e28:	cb 01       	movw	r24, r22
    2e2a:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_intgerToString>
		LCD_displayCharacter(',');
    2e2e:	8c e2       	ldi	r24, 0x2C	; 44
    2e30:	0e 94 b8 11 	call	0x2370	; 0x2370 <LCD_displayCharacter>
void displayArray(float64 arr[], uint8 size)
{
	uint8 i;
	LCD_displayStringRowColumn(2, 0, "                ");
	LCD_moveCursor(2, 0);
	for(i = 0; i < size; i++)
    2e34:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e36:	8f 5f       	subi	r24, 0xFF	; 255
    2e38:	8f 87       	std	Y+15, r24	; 0x0f
    2e3a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2e3c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e3e:	98 17       	cp	r25, r24
    2e40:	e8 f2       	brcs	.-70     	; 0x2dfc <displayArray+0x34>
    2e42:	80 e0       	ldi	r24, 0x00	; 0
    2e44:	90 e8       	ldi	r25, 0x80	; 128
    2e46:	ab eb       	ldi	r26, 0xBB	; 187
    2e48:	b4 e4       	ldi	r27, 0x44	; 68
    2e4a:	8b 87       	std	Y+11, r24	; 0x0b
    2e4c:	9c 87       	std	Y+12, r25	; 0x0c
    2e4e:	ad 87       	std	Y+13, r26	; 0x0d
    2e50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e52:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e54:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e56:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e58:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e5a:	20 e0       	ldi	r18, 0x00	; 0
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	4a e7       	ldi	r20, 0x7A	; 122
    2e60:	53 e4       	ldi	r21, 0x43	; 67
    2e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e66:	dc 01       	movw	r26, r24
    2e68:	cb 01       	movw	r24, r22
    2e6a:	8f 83       	std	Y+7, r24	; 0x07
    2e6c:	98 87       	std	Y+8, r25	; 0x08
    2e6e:	a9 87       	std	Y+9, r26	; 0x09
    2e70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e72:	6f 81       	ldd	r22, Y+7	; 0x07
    2e74:	78 85       	ldd	r23, Y+8	; 0x08
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	30 e0       	ldi	r19, 0x00	; 0
    2e7e:	40 e8       	ldi	r20, 0x80	; 128
    2e80:	5f e3       	ldi	r21, 0x3F	; 63
    2e82:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e86:	88 23       	and	r24, r24
    2e88:	2c f4       	brge	.+10     	; 0x2e94 <displayArray+0xcc>
		__ticks = 1;
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	9e 83       	std	Y+6, r25	; 0x06
    2e90:	8d 83       	std	Y+5, r24	; 0x05
    2e92:	3f c0       	rjmp	.+126    	; 0x2f12 <displayArray+0x14a>
	else if (__tmp > 65535)
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	3f ef       	ldi	r19, 0xFF	; 255
    2ea0:	4f e7       	ldi	r20, 0x7F	; 127
    2ea2:	57 e4       	ldi	r21, 0x47	; 71
    2ea4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ea8:	18 16       	cp	r1, r24
    2eaa:	4c f5       	brge	.+82     	; 0x2efe <displayArray+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e2       	ldi	r20, 0x20	; 32
    2eba:	51 e4       	ldi	r21, 0x41	; 65
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ecc:	dc 01       	movw	r26, r24
    2ece:	cb 01       	movw	r24, r22
    2ed0:	9e 83       	std	Y+6, r25	; 0x06
    2ed2:	8d 83       	std	Y+5, r24	; 0x05
    2ed4:	0f c0       	rjmp	.+30     	; 0x2ef4 <displayArray+0x12c>
    2ed6:	89 e1       	ldi	r24, 0x19	; 25
    2ed8:	90 e0       	ldi	r25, 0x00	; 0
    2eda:	9c 83       	std	Y+4, r25	; 0x04
    2edc:	8b 83       	std	Y+3, r24	; 0x03
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <displayArray+0x11a>
    2ee6:	9c 83       	std	Y+4, r25	; 0x04
    2ee8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eea:	8d 81       	ldd	r24, Y+5	; 0x05
    2eec:	9e 81       	ldd	r25, Y+6	; 0x06
    2eee:	01 97       	sbiw	r24, 0x01	; 1
    2ef0:	9e 83       	std	Y+6, r25	; 0x06
    2ef2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	69 f7       	brne	.-38     	; 0x2ed6 <displayArray+0x10e>
    2efc:	14 c0       	rjmp	.+40     	; 0x2f26 <displayArray+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2efe:	6f 81       	ldd	r22, Y+7	; 0x07
    2f00:	78 85       	ldd	r23, Y+8	; 0x08
    2f02:	89 85       	ldd	r24, Y+9	; 0x09
    2f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0a:	dc 01       	movw	r26, r24
    2f0c:	cb 01       	movw	r24, r22
    2f0e:	9e 83       	std	Y+6, r25	; 0x06
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	8d 81       	ldd	r24, Y+5	; 0x05
    2f14:	9e 81       	ldd	r25, Y+6	; 0x06
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	01 97       	sbiw	r24, 0x01	; 1
    2f20:	f1 f7       	brne	.-4      	; 0x2f1e <displayArray+0x156>
    2f22:	9a 83       	std	Y+2, r25	; 0x02
    2f24:	89 83       	std	Y+1, r24	; 0x01
	{
		LCD_intgerToString(arr[i]);
		LCD_displayCharacter(',');
	}
	_delay_ms(1500);
}
    2f26:	62 96       	adiw	r28, 0x12	; 18
    2f28:	0f b6       	in	r0, 0x3f	; 63
    2f2a:	f8 94       	cli
    2f2c:	de bf       	out	0x3e, r29	; 62
    2f2e:	0f be       	out	0x3f, r0	; 63
    2f30:	cd bf       	out	0x3d, r28	; 61
    2f32:	cf 91       	pop	r28
    2f34:	df 91       	pop	r29
    2f36:	08 95       	ret

00002f38 <numConcat>:

/* Concatenates Characters To Become a Full Number */
float64 numConcat(uint8 array[], uint8 size)
{
    2f38:	df 93       	push	r29
    2f3a:	cf 93       	push	r28
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	28 97       	sbiw	r28, 0x08	; 8
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	9f 83       	std	Y+7, r25	; 0x07
    2f4e:	8e 83       	std	Y+6, r24	; 0x06
    2f50:	68 87       	std	Y+8, r22	; 0x08
	float64 num = 0;
    2f52:	80 e0       	ldi	r24, 0x00	; 0
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a0 e0       	ldi	r26, 0x00	; 0
    2f58:	b0 e0       	ldi	r27, 0x00	; 0
    2f5a:	8a 83       	std	Y+2, r24	; 0x02
    2f5c:	9b 83       	std	Y+3, r25	; 0x03
    2f5e:	ac 83       	std	Y+4, r26	; 0x04
    2f60:	bd 83       	std	Y+5, r27	; 0x05
	uint8 i;
	for (i = 0; i < size; i++)
    2f62:	19 82       	std	Y+1, r1	; 0x01
    2f64:	34 c0       	rjmp	.+104    	; 0x2fce <numConcat+0x96>
	{
		num *= 10;
    2f66:	6a 81       	ldd	r22, Y+2	; 0x02
    2f68:	7b 81       	ldd	r23, Y+3	; 0x03
    2f6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	40 e2       	ldi	r20, 0x20	; 32
    2f74:	51 e4       	ldi	r21, 0x41	; 65
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	8a 83       	std	Y+2, r24	; 0x02
    2f80:	9b 83       	std	Y+3, r25	; 0x03
    2f82:	ac 83       	std	Y+4, r26	; 0x04
    2f84:	bd 83       	std	Y+5, r27	; 0x05
		num += array[i];
    2f86:	89 81       	ldd	r24, Y+1	; 0x01
    2f88:	28 2f       	mov	r18, r24
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f8e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f90:	fc 01       	movw	r30, r24
    2f92:	e2 0f       	add	r30, r18
    2f94:	f3 1f       	adc	r31, r19
    2f96:	80 81       	ld	r24, Z
    2f98:	88 2f       	mov	r24, r24
    2f9a:	90 e0       	ldi	r25, 0x00	; 0
    2f9c:	aa 27       	eor	r26, r26
    2f9e:	97 fd       	sbrc	r25, 7
    2fa0:	a0 95       	com	r26
    2fa2:	ba 2f       	mov	r27, r26
    2fa4:	bc 01       	movw	r22, r24
    2fa6:	cd 01       	movw	r24, r26
    2fa8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2fac:	9b 01       	movw	r18, r22
    2fae:	ac 01       	movw	r20, r24
    2fb0:	6a 81       	ldd	r22, Y+2	; 0x02
    2fb2:	7b 81       	ldd	r23, Y+3	; 0x03
    2fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2fbc:	dc 01       	movw	r26, r24
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	8a 83       	std	Y+2, r24	; 0x02
    2fc2:	9b 83       	std	Y+3, r25	; 0x03
    2fc4:	ac 83       	std	Y+4, r26	; 0x04
    2fc6:	bd 83       	std	Y+5, r27	; 0x05
/* Concatenates Characters To Become a Full Number */
float64 numConcat(uint8 array[], uint8 size)
{
	float64 num = 0;
	uint8 i;
	for (i = 0; i < size; i++)
    2fc8:	89 81       	ldd	r24, Y+1	; 0x01
    2fca:	8f 5f       	subi	r24, 0xFF	; 255
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	99 81       	ldd	r25, Y+1	; 0x01
    2fd0:	88 85       	ldd	r24, Y+8	; 0x08
    2fd2:	98 17       	cp	r25, r24
    2fd4:	40 f2       	brcs	.-112    	; 0x2f66 <numConcat+0x2e>
	{
		num *= 10;
		num += array[i];
	}
	return num;
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	ac 81       	ldd	r26, Y+4	; 0x04
    2fdc:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2fde:	bc 01       	movw	r22, r24
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	28 96       	adiw	r28, 0x08	; 8
    2fe4:	0f b6       	in	r0, 0x3f	; 63
    2fe6:	f8 94       	cli
    2fe8:	de bf       	out	0x3e, r29	; 62
    2fea:	0f be       	out	0x3f, r0	; 63
    2fec:	cd bf       	out	0x3d, r28	; 61
    2fee:	cf 91       	pop	r28
    2ff0:	df 91       	pop	r29
    2ff2:	08 95       	ret

00002ff4 <operation>:

float64 operation(float64 num1, float64 num2, uint8 sign)
{
    2ff4:	0f 93       	push	r16
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	2f 97       	sbiw	r28, 0x0f	; 15
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	69 83       	std	Y+1, r22	; 0x01
    300c:	7a 83       	std	Y+2, r23	; 0x02
    300e:	8b 83       	std	Y+3, r24	; 0x03
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	2d 83       	std	Y+5, r18	; 0x05
    3014:	3e 83       	std	Y+6, r19	; 0x06
    3016:	4f 83       	std	Y+7, r20	; 0x07
    3018:	58 87       	std	Y+8, r21	; 0x08
    301a:	09 87       	std	Y+9, r16	; 0x09
	switch(sign)
    301c:	89 85       	ldd	r24, Y+9	; 0x09
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	3f 87       	std	Y+15, r19	; 0x0f
    3024:	2e 87       	std	Y+14, r18	; 0x0e
    3026:	8e 85       	ldd	r24, Y+14	; 0x0e
    3028:	9f 85       	ldd	r25, Y+15	; 0x0f
    302a:	8a 32       	cpi	r24, 0x2A	; 42
    302c:	91 05       	cpc	r25, r1
    302e:	c9 f1       	breq	.+114    	; 0x30a2 <operation+0xae>
    3030:	ae 85       	ldd	r26, Y+14	; 0x0e
    3032:	bf 85       	ldd	r27, Y+15	; 0x0f
    3034:	ab 32       	cpi	r26, 0x2B	; 43
    3036:	b1 05       	cpc	r27, r1
    3038:	3c f4       	brge	.+14     	; 0x3048 <operation+0x54>
    303a:	2e 85       	ldd	r18, Y+14	; 0x0e
    303c:	3f 85       	ldd	r19, Y+15	; 0x0f
    303e:	25 32       	cpi	r18, 0x25	; 37
    3040:	31 05       	cpc	r19, r1
    3042:	09 f4       	brne	.+2      	; 0x3046 <operation+0x52>
    3044:	3f c0       	rjmp	.+126    	; 0x30c4 <operation+0xd0>
    3046:	4f c0       	rjmp	.+158    	; 0x30e6 <operation+0xf2>
    3048:	8e 85       	ldd	r24, Y+14	; 0x0e
    304a:	9f 85       	ldd	r25, Y+15	; 0x0f
    304c:	8b 32       	cpi	r24, 0x2B	; 43
    304e:	91 05       	cpc	r25, r1
    3050:	31 f0       	breq	.+12     	; 0x305e <operation+0x6a>
    3052:	ae 85       	ldd	r26, Y+14	; 0x0e
    3054:	bf 85       	ldd	r27, Y+15	; 0x0f
    3056:	ad 32       	cpi	r26, 0x2D	; 45
    3058:	b1 05       	cpc	r27, r1
    305a:	91 f0       	breq	.+36     	; 0x3080 <operation+0x8c>
    305c:	44 c0       	rjmp	.+136    	; 0x30e6 <operation+0xf2>
	{
	case '+':
		return num1 + num2;
    305e:	69 81       	ldd	r22, Y+1	; 0x01
    3060:	7a 81       	ldd	r23, Y+2	; 0x02
    3062:	8b 81       	ldd	r24, Y+3	; 0x03
    3064:	9c 81       	ldd	r25, Y+4	; 0x04
    3066:	2d 81       	ldd	r18, Y+5	; 0x05
    3068:	3e 81       	ldd	r19, Y+6	; 0x06
    306a:	4f 81       	ldd	r20, Y+7	; 0x07
    306c:	58 85       	ldd	r21, Y+8	; 0x08
    306e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    3072:	dc 01       	movw	r26, r24
    3074:	cb 01       	movw	r24, r22
    3076:	8a 87       	std	Y+10, r24	; 0x0a
    3078:	9b 87       	std	Y+11, r25	; 0x0b
    307a:	ac 87       	std	Y+12, r26	; 0x0c
    307c:	bd 87       	std	Y+13, r27	; 0x0d
    307e:	3b c0       	rjmp	.+118    	; 0x30f6 <operation+0x102>
		break;
	case '-':
		return num1 - num2;
    3080:	69 81       	ldd	r22, Y+1	; 0x01
    3082:	7a 81       	ldd	r23, Y+2	; 0x02
    3084:	8b 81       	ldd	r24, Y+3	; 0x03
    3086:	9c 81       	ldd	r25, Y+4	; 0x04
    3088:	2d 81       	ldd	r18, Y+5	; 0x05
    308a:	3e 81       	ldd	r19, Y+6	; 0x06
    308c:	4f 81       	ldd	r20, Y+7	; 0x07
    308e:	58 85       	ldd	r21, Y+8	; 0x08
    3090:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    3094:	dc 01       	movw	r26, r24
    3096:	cb 01       	movw	r24, r22
    3098:	8a 87       	std	Y+10, r24	; 0x0a
    309a:	9b 87       	std	Y+11, r25	; 0x0b
    309c:	ac 87       	std	Y+12, r26	; 0x0c
    309e:	bd 87       	std	Y+13, r27	; 0x0d
    30a0:	2a c0       	rjmp	.+84     	; 0x30f6 <operation+0x102>
		break;
	case '*':
		return num1 * num2;
    30a2:	69 81       	ldd	r22, Y+1	; 0x01
    30a4:	7a 81       	ldd	r23, Y+2	; 0x02
    30a6:	8b 81       	ldd	r24, Y+3	; 0x03
    30a8:	9c 81       	ldd	r25, Y+4	; 0x04
    30aa:	2d 81       	ldd	r18, Y+5	; 0x05
    30ac:	3e 81       	ldd	r19, Y+6	; 0x06
    30ae:	4f 81       	ldd	r20, Y+7	; 0x07
    30b0:	58 85       	ldd	r21, Y+8	; 0x08
    30b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30b6:	dc 01       	movw	r26, r24
    30b8:	cb 01       	movw	r24, r22
    30ba:	8a 87       	std	Y+10, r24	; 0x0a
    30bc:	9b 87       	std	Y+11, r25	; 0x0b
    30be:	ac 87       	std	Y+12, r26	; 0x0c
    30c0:	bd 87       	std	Y+13, r27	; 0x0d
    30c2:	19 c0       	rjmp	.+50     	; 0x30f6 <operation+0x102>
		break;
	case '%':
		return num1 / num2;
    30c4:	69 81       	ldd	r22, Y+1	; 0x01
    30c6:	7a 81       	ldd	r23, Y+2	; 0x02
    30c8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ca:	9c 81       	ldd	r25, Y+4	; 0x04
    30cc:	2d 81       	ldd	r18, Y+5	; 0x05
    30ce:	3e 81       	ldd	r19, Y+6	; 0x06
    30d0:	4f 81       	ldd	r20, Y+7	; 0x07
    30d2:	58 85       	ldd	r21, Y+8	; 0x08
    30d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8a 87       	std	Y+10, r24	; 0x0a
    30de:	9b 87       	std	Y+11, r25	; 0x0b
    30e0:	ac 87       	std	Y+12, r26	; 0x0c
    30e2:	bd 87       	std	Y+13, r27	; 0x0d
    30e4:	08 c0       	rjmp	.+16     	; 0x30f6 <operation+0x102>
	default:
		break;
	}
	return 0;
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	a0 e0       	ldi	r26, 0x00	; 0
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	8a 87       	std	Y+10, r24	; 0x0a
    30f0:	9b 87       	std	Y+11, r25	; 0x0b
    30f2:	ac 87       	std	Y+12, r26	; 0x0c
    30f4:	bd 87       	std	Y+13, r27	; 0x0d
    30f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    30f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    30fa:	ac 85       	ldd	r26, Y+12	; 0x0c
    30fc:	bd 85       	ldd	r27, Y+13	; 0x0d
}
    30fe:	bc 01       	movw	r22, r24
    3100:	cd 01       	movw	r24, r26
    3102:	2f 96       	adiw	r28, 0x0f	; 15
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	0f 91       	pop	r16
    3114:	08 95       	ret

00003116 <clearAll>:

/* Function That Clears The Array & Screen */
void clearAll()
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
	g_array[16] = 0;
    311e:	10 92 98 01 	sts	0x0198, r1
	g_arrayIndex = 0;
    3122:	10 92 98 01 	sts	0x0198, r1
	g_newCalcFlag = FALSE;
    3126:	10 92 99 01 	sts	0x0199, r1
	LCD_clearScreen();
    312a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <LCD_clearScreen>
	LCD_displayString("CALCULATOR:");
    312e:	81 e7       	ldi	r24, 0x71	; 113
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	0e 94 33 16 	call	0x2c66	; 0x2c66 <LCD_displayString>
	LCD_moveCursor(1, 0);
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <LCD_moveCursor>
}
    313e:	cf 91       	pop	r28
    3140:	df 91       	pop	r29
    3142:	08 95       	ret

00003144 <input>:

/* Displays Character on LCD Screen & Pushes It in The Array of Characters */
void input(uint8 key)
{
    3144:	df 93       	push	r29
    3146:	cf 93       	push	r28
    3148:	0f 92       	push	r0
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
    314e:	89 83       	std	Y+1, r24	; 0x01
	if(g_arrayIndex < 16)
    3150:	80 91 98 01 	lds	r24, 0x0198
    3154:	80 31       	cpi	r24, 0x10	; 16
    3156:	c8 f4       	brcc	.+50     	; 0x318a <input+0x46>
	{
		if(key >= 0 && key <= 9) LCD_intgerToString(key);
    3158:	89 81       	ldd	r24, Y+1	; 0x01
    315a:	8a 30       	cpi	r24, 0x0A	; 10
    315c:	30 f4       	brcc	.+12     	; 0x316a <input+0x26>
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	88 2f       	mov	r24, r24
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_intgerToString>
    3168:	03 c0       	rjmp	.+6      	; 0x3170 <input+0x2c>
		else LCD_displayCharacter(key);
    316a:	89 81       	ldd	r24, Y+1	; 0x01
    316c:	0e 94 b8 11 	call	0x2370	; 0x2370 <LCD_displayCharacter>
		g_array[g_arrayIndex++] = key;
    3170:	20 91 98 01 	lds	r18, 0x0198
    3174:	82 2f       	mov	r24, r18
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	fc 01       	movw	r30, r24
    317a:	e8 57       	subi	r30, 0x78	; 120
    317c:	fe 4f       	sbci	r31, 0xFE	; 254
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	80 83       	st	Z, r24
    3182:	82 2f       	mov	r24, r18
    3184:	8f 5f       	subi	r24, 0xFF	; 255
    3186:	80 93 98 01 	sts	0x0198, r24
	}
}
    318a:	0f 90       	pop	r0
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	08 95       	ret

00003192 <calculate>:

/*  */
void calculate()
{
    3192:	8f 92       	push	r8
    3194:	9f 92       	push	r9
    3196:	af 92       	push	r10
    3198:	bf 92       	push	r11
    319a:	cf 92       	push	r12
    319c:	df 92       	push	r13
    319e:	ef 92       	push	r14
    31a0:	ff 92       	push	r15
    31a2:	0f 93       	push	r16
    31a4:	1f 93       	push	r17
    31a6:	df 93       	push	r29
    31a8:	cf 93       	push	r28
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	c5 55       	subi	r28, 0x55	; 85
    31b0:	d0 40       	sbci	r29, 0x00	; 0
    31b2:	0f b6       	in	r0, 0x3f	; 63
    31b4:	f8 94       	cli
    31b6:	de bf       	out	0x3e, r29	; 62
    31b8:	0f be       	out	0x3f, r0	; 63
    31ba:	cd bf       	out	0x3d, r28	; 61
	float64 numsAndSigns[16] = {0}; 			/* Array for All Numbers & Signs in Equation */
    31bc:	80 e4       	ldi	r24, 0x40	; 64
    31be:	fe 01       	movw	r30, r28
    31c0:	36 96       	adiw	r30, 0x06	; 6
    31c2:	df 01       	movw	r26, r30
    31c4:	98 2f       	mov	r25, r24
    31c6:	1d 92       	st	X+, r1
    31c8:	9a 95       	dec	r25
    31ca:	e9 f7       	brne	.-6      	; 0x31c6 <calculate+0x34>
	uint8 i, numsAndSignsIndex = 0, num[16] = {0}, numIndex = 0;
    31cc:	1c 82       	std	Y+4, r1	; 0x04
    31ce:	ce 01       	movw	r24, r28
    31d0:	8a 5b       	subi	r24, 0xBA	; 186
    31d2:	9f 4f       	sbci	r25, 0xFF	; 255
    31d4:	20 e1       	ldi	r18, 0x10	; 16
    31d6:	fc 01       	movw	r30, r24
    31d8:	df 01       	movw	r26, r30
    31da:	82 2f       	mov	r24, r18
    31dc:	1d 92       	st	X+, r1
    31de:	8a 95       	dec	r24
    31e0:	e9 f7       	brne	.-6      	; 0x31dc <calculate+0x4a>
    31e2:	1b 82       	std	Y+3, r1	; 0x03
	for(i = 0; i < g_arrayIndex; i++)
    31e4:	1d 82       	std	Y+5, r1	; 0x05
    31e6:	8f c0       	rjmp	.+286    	; 0x3306 <calculate+0x174>
	{
		if(g_array[i] >= 0 && g_array[i] <= 9)
    31e8:	8d 81       	ldd	r24, Y+5	; 0x05
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	fc 01       	movw	r30, r24
    31f0:	e8 57       	subi	r30, 0x78	; 120
    31f2:	fe 4f       	sbci	r31, 0xFE	; 254
    31f4:	80 81       	ld	r24, Z
    31f6:	8a 30       	cpi	r24, 0x0A	; 10
    31f8:	08 f0       	brcs	.+2      	; 0x31fc <calculate+0x6a>
    31fa:	3e c0       	rjmp	.+124    	; 0x3278 <calculate+0xe6>
		{
			num[numIndex++] = g_array[i];
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	88 2f       	mov	r24, r24
    3206:	90 e0       	ldi	r25, 0x00	; 0
    3208:	fc 01       	movw	r30, r24
    320a:	e8 57       	subi	r30, 0x78	; 120
    320c:	fe 4f       	sbci	r31, 0xFE	; 254
    320e:	40 81       	ld	r20, Z
    3210:	ce 01       	movw	r24, r28
    3212:	8a 5b       	subi	r24, 0xBA	; 186
    3214:	9f 4f       	sbci	r25, 0xFF	; 255
    3216:	fc 01       	movw	r30, r24
    3218:	e2 0f       	add	r30, r18
    321a:	f3 1f       	adc	r31, r19
    321c:	40 83       	st	Z, r20
    321e:	8b 81       	ldd	r24, Y+3	; 0x03
    3220:	8f 5f       	subi	r24, 0xFF	; 255
    3222:	8b 83       	std	Y+3, r24	; 0x03
			if(i == g_arrayIndex - 1)
    3224:	8d 81       	ldd	r24, Y+5	; 0x05
    3226:	28 2f       	mov	r18, r24
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	80 91 98 01 	lds	r24, 0x0198
    322e:	88 2f       	mov	r24, r24
    3230:	90 e0       	ldi	r25, 0x00	; 0
    3232:	01 97       	sbiw	r24, 0x01	; 1
    3234:	28 17       	cp	r18, r24
    3236:	39 07       	cpc	r19, r25
    3238:	09 f0       	breq	.+2      	; 0x323c <calculate+0xaa>
    323a:	62 c0       	rjmp	.+196    	; 0x3300 <calculate+0x16e>
				numsAndSigns[numsAndSignsIndex++] = numConcat(num, numIndex);
    323c:	8c 81       	ldd	r24, Y+4	; 0x04
    323e:	08 2f       	mov	r16, r24
    3240:	10 e0       	ldi	r17, 0x00	; 0
    3242:	ce 01       	movw	r24, r28
    3244:	8a 5b       	subi	r24, 0xBA	; 186
    3246:	9f 4f       	sbci	r25, 0xFF	; 255
    3248:	6b 81       	ldd	r22, Y+3	; 0x03
    324a:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <numConcat>
    324e:	ab 01       	movw	r20, r22
    3250:	bc 01       	movw	r22, r24
    3252:	98 01       	movw	r18, r16
    3254:	22 0f       	add	r18, r18
    3256:	33 1f       	adc	r19, r19
    3258:	22 0f       	add	r18, r18
    325a:	33 1f       	adc	r19, r19
    325c:	ce 01       	movw	r24, r28
    325e:	01 96       	adiw	r24, 0x01	; 1
    3260:	82 0f       	add	r24, r18
    3262:	93 1f       	adc	r25, r19
    3264:	fc 01       	movw	r30, r24
    3266:	35 96       	adiw	r30, 0x05	; 5
    3268:	40 83       	st	Z, r20
    326a:	51 83       	std	Z+1, r21	; 0x01
    326c:	62 83       	std	Z+2, r22	; 0x02
    326e:	73 83       	std	Z+3, r23	; 0x03
    3270:	8c 81       	ldd	r24, Y+4	; 0x04
    3272:	8f 5f       	subi	r24, 0xFF	; 255
    3274:	8c 83       	std	Y+4, r24	; 0x04
    3276:	44 c0       	rjmp	.+136    	; 0x3300 <calculate+0x16e>
		}
		else
		{
			numsAndSigns[numsAndSignsIndex++] = numConcat(num, numIndex);
    3278:	8c 81       	ldd	r24, Y+4	; 0x04
    327a:	08 2f       	mov	r16, r24
    327c:	10 e0       	ldi	r17, 0x00	; 0
    327e:	ce 01       	movw	r24, r28
    3280:	8a 5b       	subi	r24, 0xBA	; 186
    3282:	9f 4f       	sbci	r25, 0xFF	; 255
    3284:	6b 81       	ldd	r22, Y+3	; 0x03
    3286:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <numConcat>
    328a:	ab 01       	movw	r20, r22
    328c:	bc 01       	movw	r22, r24
    328e:	98 01       	movw	r18, r16
    3290:	22 0f       	add	r18, r18
    3292:	33 1f       	adc	r19, r19
    3294:	22 0f       	add	r18, r18
    3296:	33 1f       	adc	r19, r19
    3298:	ce 01       	movw	r24, r28
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	82 0f       	add	r24, r18
    329e:	93 1f       	adc	r25, r19
    32a0:	fc 01       	movw	r30, r24
    32a2:	35 96       	adiw	r30, 0x05	; 5
    32a4:	40 83       	st	Z, r20
    32a6:	51 83       	std	Z+1, r21	; 0x01
    32a8:	62 83       	std	Z+2, r22	; 0x02
    32aa:	73 83       	std	Z+3, r23	; 0x03
    32ac:	8c 81       	ldd	r24, Y+4	; 0x04
    32ae:	8f 5f       	subi	r24, 0xFF	; 255
    32b0:	8c 83       	std	Y+4, r24	; 0x04
			numsAndSigns[numsAndSignsIndex++] = g_array[i];
    32b2:	8c 81       	ldd	r24, Y+4	; 0x04
    32b4:	08 2f       	mov	r16, r24
    32b6:	10 e0       	ldi	r17, 0x00	; 0
    32b8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ba:	88 2f       	mov	r24, r24
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	fc 01       	movw	r30, r24
    32c0:	e8 57       	subi	r30, 0x78	; 120
    32c2:	fe 4f       	sbci	r31, 0xFE	; 254
    32c4:	80 81       	ld	r24, Z
    32c6:	88 2f       	mov	r24, r24
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	a0 e0       	ldi	r26, 0x00	; 0
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	bc 01       	movw	r22, r24
    32d0:	cd 01       	movw	r24, r26
    32d2:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    32d6:	ab 01       	movw	r20, r22
    32d8:	bc 01       	movw	r22, r24
    32da:	98 01       	movw	r18, r16
    32dc:	22 0f       	add	r18, r18
    32de:	33 1f       	adc	r19, r19
    32e0:	22 0f       	add	r18, r18
    32e2:	33 1f       	adc	r19, r19
    32e4:	ce 01       	movw	r24, r28
    32e6:	01 96       	adiw	r24, 0x01	; 1
    32e8:	82 0f       	add	r24, r18
    32ea:	93 1f       	adc	r25, r19
    32ec:	fc 01       	movw	r30, r24
    32ee:	35 96       	adiw	r30, 0x05	; 5
    32f0:	40 83       	st	Z, r20
    32f2:	51 83       	std	Z+1, r21	; 0x01
    32f4:	62 83       	std	Z+2, r22	; 0x02
    32f6:	73 83       	std	Z+3, r23	; 0x03
    32f8:	8c 81       	ldd	r24, Y+4	; 0x04
    32fa:	8f 5f       	subi	r24, 0xFF	; 255
    32fc:	8c 83       	std	Y+4, r24	; 0x04
			numIndex = 0;
    32fe:	1b 82       	std	Y+3, r1	; 0x03
/*  */
void calculate()
{
	float64 numsAndSigns[16] = {0}; 			/* Array for All Numbers & Signs in Equation */
	uint8 i, numsAndSignsIndex = 0, num[16] = {0}, numIndex = 0;
	for(i = 0; i < g_arrayIndex; i++)
    3300:	8d 81       	ldd	r24, Y+5	; 0x05
    3302:	8f 5f       	subi	r24, 0xFF	; 255
    3304:	8d 83       	std	Y+5, r24	; 0x05
    3306:	90 91 98 01 	lds	r25, 0x0198
    330a:	8d 81       	ldd	r24, Y+5	; 0x05
    330c:	89 17       	cp	r24, r25
    330e:	08 f4       	brcc	.+2      	; 0x3312 <calculate+0x180>
    3310:	6b cf       	rjmp	.-298    	; 0x31e8 <calculate+0x56>
			numsAndSigns[numsAndSignsIndex++] = numConcat(num, numIndex);
			numsAndSigns[numsAndSignsIndex++] = g_array[i];
			numIndex = 0;
		}
	}
	displayArray(numsAndSigns, numsAndSignsIndex);
    3312:	ce 01       	movw	r24, r28
    3314:	06 96       	adiw	r24, 0x06	; 6
    3316:	6c 81       	ldd	r22, Y+4	; 0x04
    3318:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <displayArray>
	for(i = 0; i < numsAndSignsIndex; i++)
    331c:	1d 82       	std	Y+5, r1	; 0x05
    331e:	cd c0       	rjmp	.+410    	; 0x34ba <calculate+0x328>
	{
		if(numsAndSigns[i] == '*' || numsAndSigns[i] == '%')
    3320:	8d 81       	ldd	r24, Y+5	; 0x05
    3322:	88 2f       	mov	r24, r24
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	9c 01       	movw	r18, r24
    3328:	22 0f       	add	r18, r18
    332a:	33 1f       	adc	r19, r19
    332c:	22 0f       	add	r18, r18
    332e:	33 1f       	adc	r19, r19
    3330:	ce 01       	movw	r24, r28
    3332:	01 96       	adiw	r24, 0x01	; 1
    3334:	82 0f       	add	r24, r18
    3336:	93 1f       	adc	r25, r19
    3338:	fc 01       	movw	r30, r24
    333a:	35 96       	adiw	r30, 0x05	; 5
    333c:	80 81       	ld	r24, Z
    333e:	91 81       	ldd	r25, Z+1	; 0x01
    3340:	a2 81       	ldd	r26, Z+2	; 0x02
    3342:	b3 81       	ldd	r27, Z+3	; 0x03
    3344:	bc 01       	movw	r22, r24
    3346:	cd 01       	movw	r24, r26
    3348:	20 e0       	ldi	r18, 0x00	; 0
    334a:	30 e0       	ldi	r19, 0x00	; 0
    334c:	48 e2       	ldi	r20, 0x28	; 40
    334e:	52 e4       	ldi	r21, 0x42	; 66
    3350:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3354:	88 23       	and	r24, r24
    3356:	e9 f0       	breq	.+58     	; 0x3392 <calculate+0x200>
    3358:	8d 81       	ldd	r24, Y+5	; 0x05
    335a:	88 2f       	mov	r24, r24
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	9c 01       	movw	r18, r24
    3360:	22 0f       	add	r18, r18
    3362:	33 1f       	adc	r19, r19
    3364:	22 0f       	add	r18, r18
    3366:	33 1f       	adc	r19, r19
    3368:	ce 01       	movw	r24, r28
    336a:	01 96       	adiw	r24, 0x01	; 1
    336c:	82 0f       	add	r24, r18
    336e:	93 1f       	adc	r25, r19
    3370:	fc 01       	movw	r30, r24
    3372:	35 96       	adiw	r30, 0x05	; 5
    3374:	80 81       	ld	r24, Z
    3376:	91 81       	ldd	r25, Z+1	; 0x01
    3378:	a2 81       	ldd	r26, Z+2	; 0x02
    337a:	b3 81       	ldd	r27, Z+3	; 0x03
    337c:	bc 01       	movw	r22, r24
    337e:	cd 01       	movw	r24, r26
    3380:	20 e0       	ldi	r18, 0x00	; 0
    3382:	30 e0       	ldi	r19, 0x00	; 0
    3384:	44 e1       	ldi	r20, 0x14	; 20
    3386:	52 e4       	ldi	r21, 0x42	; 66
    3388:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    338c:	88 23       	and	r24, r24
    338e:	09 f0       	breq	.+2      	; 0x3392 <calculate+0x200>
    3390:	91 c0       	rjmp	.+290    	; 0x34b4 <calculate+0x322>
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
    3392:	8d 81       	ldd	r24, Y+5	; 0x05
    3394:	88 2f       	mov	r24, r24
    3396:	90 e0       	ldi	r25, 0x00	; 0
    3398:	4c 01       	movw	r8, r24
    339a:	08 94       	sec
    339c:	81 08       	sbc	r8, r1
    339e:	91 08       	sbc	r9, r1
    33a0:	8d 81       	ldd	r24, Y+5	; 0x05
    33a2:	88 2f       	mov	r24, r24
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	01 97       	sbiw	r24, 0x01	; 1
    33a8:	9c 01       	movw	r18, r24
    33aa:	22 0f       	add	r18, r18
    33ac:	33 1f       	adc	r19, r19
    33ae:	22 0f       	add	r18, r18
    33b0:	33 1f       	adc	r19, r19
    33b2:	ce 01       	movw	r24, r28
    33b4:	01 96       	adiw	r24, 0x01	; 1
    33b6:	82 0f       	add	r24, r18
    33b8:	93 1f       	adc	r25, r19
    33ba:	fc 01       	movw	r30, r24
    33bc:	35 96       	adiw	r30, 0x05	; 5
    33be:	a0 80       	ld	r10, Z
    33c0:	b1 80       	ldd	r11, Z+1	; 0x01
    33c2:	c2 80       	ldd	r12, Z+2	; 0x02
    33c4:	d3 80       	ldd	r13, Z+3	; 0x03
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	88 2f       	mov	r24, r24
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	01 96       	adiw	r24, 0x01	; 1
    33ce:	9c 01       	movw	r18, r24
    33d0:	22 0f       	add	r18, r18
    33d2:	33 1f       	adc	r19, r19
    33d4:	22 0f       	add	r18, r18
    33d6:	33 1f       	adc	r19, r19
    33d8:	ce 01       	movw	r24, r28
    33da:	01 96       	adiw	r24, 0x01	; 1
    33dc:	82 0f       	add	r24, r18
    33de:	93 1f       	adc	r25, r19
    33e0:	fc 01       	movw	r30, r24
    33e2:	35 96       	adiw	r30, 0x05	; 5
    33e4:	e0 80       	ld	r14, Z
    33e6:	f1 80       	ldd	r15, Z+1	; 0x01
    33e8:	02 81       	ldd	r16, Z+2	; 0x02
    33ea:	13 81       	ldd	r17, Z+3	; 0x03
    33ec:	8d 81       	ldd	r24, Y+5	; 0x05
    33ee:	88 2f       	mov	r24, r24
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	9c 01       	movw	r18, r24
    33f4:	22 0f       	add	r18, r18
    33f6:	33 1f       	adc	r19, r19
    33f8:	22 0f       	add	r18, r18
    33fa:	33 1f       	adc	r19, r19
    33fc:	ce 01       	movw	r24, r28
    33fe:	01 96       	adiw	r24, 0x01	; 1
    3400:	82 0f       	add	r24, r18
    3402:	93 1f       	adc	r25, r19
    3404:	fc 01       	movw	r30, r24
    3406:	35 96       	adiw	r30, 0x05	; 5
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	a2 81       	ldd	r26, Z+2	; 0x02
    340e:	b3 81       	ldd	r27, Z+3	; 0x03
    3410:	bc 01       	movw	r22, r24
    3412:	cd 01       	movw	r24, r26
    3414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3418:	dc 01       	movw	r26, r24
    341a:	cb 01       	movw	r24, r22
    341c:	e8 2f       	mov	r30, r24
    341e:	c6 01       	movw	r24, r12
    3420:	b5 01       	movw	r22, r10
    3422:	a8 01       	movw	r20, r16
    3424:	97 01       	movw	r18, r14
    3426:	0e 2f       	mov	r16, r30
    3428:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <operation>
    342c:	ab 01       	movw	r20, r22
    342e:	bc 01       	movw	r22, r24
    3430:	94 01       	movw	r18, r8
    3432:	22 0f       	add	r18, r18
    3434:	33 1f       	adc	r19, r19
    3436:	22 0f       	add	r18, r18
    3438:	33 1f       	adc	r19, r19
    343a:	ce 01       	movw	r24, r28
    343c:	01 96       	adiw	r24, 0x01	; 1
    343e:	82 0f       	add	r24, r18
    3440:	93 1f       	adc	r25, r19
    3442:	fc 01       	movw	r30, r24
    3444:	35 96       	adiw	r30, 0x05	; 5
    3446:	40 83       	st	Z, r20
    3448:	51 83       	std	Z+1, r21	; 0x01
    344a:	62 83       	std	Z+2, r22	; 0x02
    344c:	73 83       	std	Z+3, r23	; 0x03
			uint8 j;
			for(j = i; j < numsAndSignsIndex; j++)
    344e:	8d 81       	ldd	r24, Y+5	; 0x05
    3450:	8a 83       	std	Y+2, r24	; 0x02
    3452:	28 c0       	rjmp	.+80     	; 0x34a4 <calculate+0x312>
			{
				numsAndSigns[j] = numsAndSigns[j+2];
    3454:	8a 81       	ldd	r24, Y+2	; 0x02
    3456:	a8 2f       	mov	r26, r24
    3458:	b0 e0       	ldi	r27, 0x00	; 0
    345a:	8a 81       	ldd	r24, Y+2	; 0x02
    345c:	88 2f       	mov	r24, r24
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	02 96       	adiw	r24, 0x02	; 2
    3462:	9c 01       	movw	r18, r24
    3464:	22 0f       	add	r18, r18
    3466:	33 1f       	adc	r19, r19
    3468:	22 0f       	add	r18, r18
    346a:	33 1f       	adc	r19, r19
    346c:	ce 01       	movw	r24, r28
    346e:	01 96       	adiw	r24, 0x01	; 1
    3470:	82 0f       	add	r24, r18
    3472:	93 1f       	adc	r25, r19
    3474:	fc 01       	movw	r30, r24
    3476:	35 96       	adiw	r30, 0x05	; 5
    3478:	40 81       	ld	r20, Z
    347a:	51 81       	ldd	r21, Z+1	; 0x01
    347c:	62 81       	ldd	r22, Z+2	; 0x02
    347e:	73 81       	ldd	r23, Z+3	; 0x03
    3480:	9d 01       	movw	r18, r26
    3482:	22 0f       	add	r18, r18
    3484:	33 1f       	adc	r19, r19
    3486:	22 0f       	add	r18, r18
    3488:	33 1f       	adc	r19, r19
    348a:	ce 01       	movw	r24, r28
    348c:	01 96       	adiw	r24, 0x01	; 1
    348e:	82 0f       	add	r24, r18
    3490:	93 1f       	adc	r25, r19
    3492:	fc 01       	movw	r30, r24
    3494:	35 96       	adiw	r30, 0x05	; 5
    3496:	40 83       	st	Z, r20
    3498:	51 83       	std	Z+1, r21	; 0x01
    349a:	62 83       	std	Z+2, r22	; 0x02
    349c:	73 83       	std	Z+3, r23	; 0x03
	{
		if(numsAndSigns[i] == '*' || numsAndSigns[i] == '%')
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
			uint8 j;
			for(j = i; j < numsAndSignsIndex; j++)
    349e:	8a 81       	ldd	r24, Y+2	; 0x02
    34a0:	8f 5f       	subi	r24, 0xFF	; 255
    34a2:	8a 83       	std	Y+2, r24	; 0x02
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
    34a6:	8c 81       	ldd	r24, Y+4	; 0x04
    34a8:	98 17       	cp	r25, r24
    34aa:	a0 f2       	brcs	.-88     	; 0x3454 <calculate+0x2c2>
			{
				numsAndSigns[j] = numsAndSigns[j+2];
			}
			numsAndSignsIndex-=2;
    34ac:	8c 81       	ldd	r24, Y+4	; 0x04
    34ae:	82 50       	subi	r24, 0x02	; 2
    34b0:	8c 83       	std	Y+4, r24	; 0x04
			i = 0;
    34b2:	1d 82       	std	Y+5, r1	; 0x05
			numsAndSigns[numsAndSignsIndex++] = g_array[i];
			numIndex = 0;
		}
	}
	displayArray(numsAndSigns, numsAndSignsIndex);
	for(i = 0; i < numsAndSignsIndex; i++)
    34b4:	8d 81       	ldd	r24, Y+5	; 0x05
    34b6:	8f 5f       	subi	r24, 0xFF	; 255
    34b8:	8d 83       	std	Y+5, r24	; 0x05
    34ba:	9d 81       	ldd	r25, Y+5	; 0x05
    34bc:	8c 81       	ldd	r24, Y+4	; 0x04
    34be:	98 17       	cp	r25, r24
    34c0:	08 f4       	brcc	.+2      	; 0x34c4 <calculate+0x332>
    34c2:	2e cf       	rjmp	.-420    	; 0x3320 <calculate+0x18e>
			}
			numsAndSignsIndex-=2;
			i = 0;
		}
	}
	displayArray(numsAndSigns, numsAndSignsIndex);
    34c4:	ce 01       	movw	r24, r28
    34c6:	06 96       	adiw	r24, 0x06	; 6
    34c8:	6c 81       	ldd	r22, Y+4	; 0x04
    34ca:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <displayArray>
	for(i = 0; i < numsAndSignsIndex; i++)
    34ce:	1d 82       	std	Y+5, r1	; 0x05
    34d0:	cd c0       	rjmp	.+410    	; 0x366c <calculate+0x4da>
	{
		if(numsAndSigns[i] == '+' || numsAndSigns[i] == '-')
    34d2:	8d 81       	ldd	r24, Y+5	; 0x05
    34d4:	88 2f       	mov	r24, r24
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	9c 01       	movw	r18, r24
    34da:	22 0f       	add	r18, r18
    34dc:	33 1f       	adc	r19, r19
    34de:	22 0f       	add	r18, r18
    34e0:	33 1f       	adc	r19, r19
    34e2:	ce 01       	movw	r24, r28
    34e4:	01 96       	adiw	r24, 0x01	; 1
    34e6:	82 0f       	add	r24, r18
    34e8:	93 1f       	adc	r25, r19
    34ea:	fc 01       	movw	r30, r24
    34ec:	35 96       	adiw	r30, 0x05	; 5
    34ee:	80 81       	ld	r24, Z
    34f0:	91 81       	ldd	r25, Z+1	; 0x01
    34f2:	a2 81       	ldd	r26, Z+2	; 0x02
    34f4:	b3 81       	ldd	r27, Z+3	; 0x03
    34f6:	bc 01       	movw	r22, r24
    34f8:	cd 01       	movw	r24, r26
    34fa:	20 e0       	ldi	r18, 0x00	; 0
    34fc:	30 e0       	ldi	r19, 0x00	; 0
    34fe:	4c e2       	ldi	r20, 0x2C	; 44
    3500:	52 e4       	ldi	r21, 0x42	; 66
    3502:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    3506:	88 23       	and	r24, r24
    3508:	e9 f0       	breq	.+58     	; 0x3544 <calculate+0x3b2>
    350a:	8d 81       	ldd	r24, Y+5	; 0x05
    350c:	88 2f       	mov	r24, r24
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	9c 01       	movw	r18, r24
    3512:	22 0f       	add	r18, r18
    3514:	33 1f       	adc	r19, r19
    3516:	22 0f       	add	r18, r18
    3518:	33 1f       	adc	r19, r19
    351a:	ce 01       	movw	r24, r28
    351c:	01 96       	adiw	r24, 0x01	; 1
    351e:	82 0f       	add	r24, r18
    3520:	93 1f       	adc	r25, r19
    3522:	fc 01       	movw	r30, r24
    3524:	35 96       	adiw	r30, 0x05	; 5
    3526:	80 81       	ld	r24, Z
    3528:	91 81       	ldd	r25, Z+1	; 0x01
    352a:	a2 81       	ldd	r26, Z+2	; 0x02
    352c:	b3 81       	ldd	r27, Z+3	; 0x03
    352e:	bc 01       	movw	r22, r24
    3530:	cd 01       	movw	r24, r26
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	44 e3       	ldi	r20, 0x34	; 52
    3538:	52 e4       	ldi	r21, 0x42	; 66
    353a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    353e:	88 23       	and	r24, r24
    3540:	09 f0       	breq	.+2      	; 0x3544 <calculate+0x3b2>
    3542:	91 c0       	rjmp	.+290    	; 0x3666 <calculate+0x4d4>
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
    3544:	8d 81       	ldd	r24, Y+5	; 0x05
    3546:	88 2f       	mov	r24, r24
    3548:	90 e0       	ldi	r25, 0x00	; 0
    354a:	4c 01       	movw	r8, r24
    354c:	08 94       	sec
    354e:	81 08       	sbc	r8, r1
    3550:	91 08       	sbc	r9, r1
    3552:	8d 81       	ldd	r24, Y+5	; 0x05
    3554:	88 2f       	mov	r24, r24
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	01 97       	sbiw	r24, 0x01	; 1
    355a:	9c 01       	movw	r18, r24
    355c:	22 0f       	add	r18, r18
    355e:	33 1f       	adc	r19, r19
    3560:	22 0f       	add	r18, r18
    3562:	33 1f       	adc	r19, r19
    3564:	ce 01       	movw	r24, r28
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	82 0f       	add	r24, r18
    356a:	93 1f       	adc	r25, r19
    356c:	fc 01       	movw	r30, r24
    356e:	35 96       	adiw	r30, 0x05	; 5
    3570:	a0 80       	ld	r10, Z
    3572:	b1 80       	ldd	r11, Z+1	; 0x01
    3574:	c2 80       	ldd	r12, Z+2	; 0x02
    3576:	d3 80       	ldd	r13, Z+3	; 0x03
    3578:	8d 81       	ldd	r24, Y+5	; 0x05
    357a:	88 2f       	mov	r24, r24
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	01 96       	adiw	r24, 0x01	; 1
    3580:	9c 01       	movw	r18, r24
    3582:	22 0f       	add	r18, r18
    3584:	33 1f       	adc	r19, r19
    3586:	22 0f       	add	r18, r18
    3588:	33 1f       	adc	r19, r19
    358a:	ce 01       	movw	r24, r28
    358c:	01 96       	adiw	r24, 0x01	; 1
    358e:	82 0f       	add	r24, r18
    3590:	93 1f       	adc	r25, r19
    3592:	fc 01       	movw	r30, r24
    3594:	35 96       	adiw	r30, 0x05	; 5
    3596:	e0 80       	ld	r14, Z
    3598:	f1 80       	ldd	r15, Z+1	; 0x01
    359a:	02 81       	ldd	r16, Z+2	; 0x02
    359c:	13 81       	ldd	r17, Z+3	; 0x03
    359e:	8d 81       	ldd	r24, Y+5	; 0x05
    35a0:	88 2f       	mov	r24, r24
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9c 01       	movw	r18, r24
    35a6:	22 0f       	add	r18, r18
    35a8:	33 1f       	adc	r19, r19
    35aa:	22 0f       	add	r18, r18
    35ac:	33 1f       	adc	r19, r19
    35ae:	ce 01       	movw	r24, r28
    35b0:	01 96       	adiw	r24, 0x01	; 1
    35b2:	82 0f       	add	r24, r18
    35b4:	93 1f       	adc	r25, r19
    35b6:	fc 01       	movw	r30, r24
    35b8:	35 96       	adiw	r30, 0x05	; 5
    35ba:	80 81       	ld	r24, Z
    35bc:	91 81       	ldd	r25, Z+1	; 0x01
    35be:	a2 81       	ldd	r26, Z+2	; 0x02
    35c0:	b3 81       	ldd	r27, Z+3	; 0x03
    35c2:	bc 01       	movw	r22, r24
    35c4:	cd 01       	movw	r24, r26
    35c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ca:	dc 01       	movw	r26, r24
    35cc:	cb 01       	movw	r24, r22
    35ce:	e8 2f       	mov	r30, r24
    35d0:	c6 01       	movw	r24, r12
    35d2:	b5 01       	movw	r22, r10
    35d4:	a8 01       	movw	r20, r16
    35d6:	97 01       	movw	r18, r14
    35d8:	0e 2f       	mov	r16, r30
    35da:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <operation>
    35de:	ab 01       	movw	r20, r22
    35e0:	bc 01       	movw	r22, r24
    35e2:	94 01       	movw	r18, r8
    35e4:	22 0f       	add	r18, r18
    35e6:	33 1f       	adc	r19, r19
    35e8:	22 0f       	add	r18, r18
    35ea:	33 1f       	adc	r19, r19
    35ec:	ce 01       	movw	r24, r28
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	82 0f       	add	r24, r18
    35f2:	93 1f       	adc	r25, r19
    35f4:	fc 01       	movw	r30, r24
    35f6:	35 96       	adiw	r30, 0x05	; 5
    35f8:	40 83       	st	Z, r20
    35fa:	51 83       	std	Z+1, r21	; 0x01
    35fc:	62 83       	std	Z+2, r22	; 0x02
    35fe:	73 83       	std	Z+3, r23	; 0x03
			uint8 j;
			for(j = i; j < numsAndSignsIndex; j++)
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	89 83       	std	Y+1, r24	; 0x01
    3604:	28 c0       	rjmp	.+80     	; 0x3656 <calculate+0x4c4>
			{
				numsAndSigns[j] = numsAndSigns[j+2];
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	a8 2f       	mov	r26, r24
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	88 2f       	mov	r24, r24
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	02 96       	adiw	r24, 0x02	; 2
    3614:	9c 01       	movw	r18, r24
    3616:	22 0f       	add	r18, r18
    3618:	33 1f       	adc	r19, r19
    361a:	22 0f       	add	r18, r18
    361c:	33 1f       	adc	r19, r19
    361e:	ce 01       	movw	r24, r28
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	82 0f       	add	r24, r18
    3624:	93 1f       	adc	r25, r19
    3626:	fc 01       	movw	r30, r24
    3628:	35 96       	adiw	r30, 0x05	; 5
    362a:	40 81       	ld	r20, Z
    362c:	51 81       	ldd	r21, Z+1	; 0x01
    362e:	62 81       	ldd	r22, Z+2	; 0x02
    3630:	73 81       	ldd	r23, Z+3	; 0x03
    3632:	9d 01       	movw	r18, r26
    3634:	22 0f       	add	r18, r18
    3636:	33 1f       	adc	r19, r19
    3638:	22 0f       	add	r18, r18
    363a:	33 1f       	adc	r19, r19
    363c:	ce 01       	movw	r24, r28
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	82 0f       	add	r24, r18
    3642:	93 1f       	adc	r25, r19
    3644:	fc 01       	movw	r30, r24
    3646:	35 96       	adiw	r30, 0x05	; 5
    3648:	40 83       	st	Z, r20
    364a:	51 83       	std	Z+1, r21	; 0x01
    364c:	62 83       	std	Z+2, r22	; 0x02
    364e:	73 83       	std	Z+3, r23	; 0x03
	{
		if(numsAndSigns[i] == '+' || numsAndSigns[i] == '-')
		{
			numsAndSigns[i-1] = operation(numsAndSigns[i-1], numsAndSigns[i+1], numsAndSigns[i]);
			uint8 j;
			for(j = i; j < numsAndSignsIndex; j++)
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	8f 5f       	subi	r24, 0xFF	; 255
    3654:	89 83       	std	Y+1, r24	; 0x01
    3656:	99 81       	ldd	r25, Y+1	; 0x01
    3658:	8c 81       	ldd	r24, Y+4	; 0x04
    365a:	98 17       	cp	r25, r24
    365c:	a0 f2       	brcs	.-88     	; 0x3606 <calculate+0x474>
			{
				numsAndSigns[j] = numsAndSigns[j+2];
			}
			numsAndSignsIndex-=2;
    365e:	8c 81       	ldd	r24, Y+4	; 0x04
    3660:	82 50       	subi	r24, 0x02	; 2
    3662:	8c 83       	std	Y+4, r24	; 0x04
			i = 0;
    3664:	1d 82       	std	Y+5, r1	; 0x05
			numsAndSignsIndex-=2;
			i = 0;
		}
	}
	displayArray(numsAndSigns, numsAndSignsIndex);
	for(i = 0; i < numsAndSignsIndex; i++)
    3666:	8d 81       	ldd	r24, Y+5	; 0x05
    3668:	8f 5f       	subi	r24, 0xFF	; 255
    366a:	8d 83       	std	Y+5, r24	; 0x05
    366c:	9d 81       	ldd	r25, Y+5	; 0x05
    366e:	8c 81       	ldd	r24, Y+4	; 0x04
    3670:	98 17       	cp	r25, r24
    3672:	08 f4       	brcc	.+2      	; 0x3676 <calculate+0x4e4>
    3674:	2e cf       	rjmp	.-420    	; 0x34d2 <calculate+0x340>
			}
			numsAndSignsIndex-=2;
			i = 0;
		}
	}
	displayArray(numsAndSigns, numsAndSignsIndex);
    3676:	ce 01       	movw	r24, r28
    3678:	06 96       	adiw	r24, 0x06	; 6
    367a:	6c 81       	ldd	r22, Y+4	; 0x04
    367c:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <displayArray>
	result = numsAndSigns[0];
    3680:	8e 81       	ldd	r24, Y+6	; 0x06
    3682:	9f 81       	ldd	r25, Y+7	; 0x07
    3684:	a8 85       	ldd	r26, Y+8	; 0x08
    3686:	b9 85       	ldd	r27, Y+9	; 0x09
    3688:	80 93 9a 01 	sts	0x019A, r24
    368c:	90 93 9b 01 	sts	0x019B, r25
    3690:	a0 93 9c 01 	sts	0x019C, r26
    3694:	b0 93 9d 01 	sts	0x019D, r27
	LCD_displayStringRowColumn(3, 0, "=");
    3698:	2d e7       	ldi	r18, 0x7D	; 125
    369a:	30 e0       	ldi	r19, 0x00	; 0
    369c:	83 e0       	ldi	r24, 0x03	; 3
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	a9 01       	movw	r20, r18
    36a2:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <LCD_displayStringRowColumn>
	LCD_intgerToString(result);
    36a6:	80 91 9a 01 	lds	r24, 0x019A
    36aa:	90 91 9b 01 	lds	r25, 0x019B
    36ae:	a0 91 9c 01 	lds	r26, 0x019C
    36b2:	b0 91 9d 01 	lds	r27, 0x019D
    36b6:	bc 01       	movw	r22, r24
    36b8:	cd 01       	movw	r24, r26
    36ba:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    36be:	dc 01       	movw	r26, r24
    36c0:	cb 01       	movw	r24, r22
    36c2:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <LCD_intgerToString>
	g_newCalcFlag = TRUE;
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	80 93 99 01 	sts	0x0199, r24
}
    36cc:	cb 5a       	subi	r28, 0xAB	; 171
    36ce:	df 4f       	sbci	r29, 0xFF	; 255
    36d0:	0f b6       	in	r0, 0x3f	; 63
    36d2:	f8 94       	cli
    36d4:	de bf       	out	0x3e, r29	; 62
    36d6:	0f be       	out	0x3f, r0	; 63
    36d8:	cd bf       	out	0x3d, r28	; 61
    36da:	cf 91       	pop	r28
    36dc:	df 91       	pop	r29
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	ff 90       	pop	r15
    36e4:	ef 90       	pop	r14
    36e6:	df 90       	pop	r13
    36e8:	cf 90       	pop	r12
    36ea:	bf 90       	pop	r11
    36ec:	af 90       	pop	r10
    36ee:	9f 90       	pop	r9
    36f0:	8f 90       	pop	r8
    36f2:	08 95       	ret

000036f4 <main>:
/*******************************************************************************
 *                                Main Function                                *
 *******************************************************************************/

int main(void)
{
    36f4:	df 93       	push	r29
    36f6:	cf 93       	push	r28
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62
    36fc:	61 97       	sbiw	r28, 0x11	; 17
    36fe:	0f b6       	in	r0, 0x3f	; 63
    3700:	f8 94       	cli
    3702:	de bf       	out	0x3e, r29	; 62
    3704:	0f be       	out	0x3f, r0	; 63
    3706:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_init();
    3708:	0e 94 8b 0c 	call	0x1916	; 0x1916 <LCD_init>
	LCD_displayString("CALCULATOR:");
    370c:	81 e7       	ldi	r24, 0x71	; 113
    370e:	90 e0       	ldi	r25, 0x00	; 0
    3710:	0e 94 33 16 	call	0x2c66	; 0x2c66 <LCD_displayString>
	LCD_moveCursor(1, 0);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <LCD_moveCursor>
	while(1)
	{
		key = KEYPAD_getPressedKey();	/* Reads Pressed Key */
    371c:	0e 94 00 0b 	call	0x1600	; 0x1600 <KEYPAD_getPressedKey>
    3720:	8f 87       	std	Y+15, r24	; 0x0f
		if(g_newCalcFlag) clearAll();	/* If Its New Calculation Clears The Previous */
    3722:	80 91 99 01 	lds	r24, 0x0199
    3726:	88 23       	and	r24, r24
    3728:	11 f0       	breq	.+4      	; 0x372e <main+0x3a>
    372a:	0e 94 8b 18 	call	0x3116	; 0x3116 <clearAll>
		/* Checks The Pressed Key */
		switch(key)
    372e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3730:	28 2f       	mov	r18, r24
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	39 8b       	std	Y+17, r19	; 0x11
    3736:	28 8b       	std	Y+16, r18	; 0x10
    3738:	88 89       	ldd	r24, Y+16	; 0x10
    373a:	99 89       	ldd	r25, Y+17	; 0x11
    373c:	8d 30       	cpi	r24, 0x0D	; 13
    373e:	91 05       	cpc	r25, r1
    3740:	31 f0       	breq	.+12     	; 0x374e <main+0x5a>
    3742:	28 89       	ldd	r18, Y+16	; 0x10
    3744:	39 89       	ldd	r19, Y+17	; 0x11
    3746:	2d 33       	cpi	r18, 0x3D	; 61
    3748:	31 05       	cpc	r19, r1
    374a:	21 f0       	breq	.+8      	; 0x3754 <main+0x60>
    374c:	06 c0       	rjmp	.+12     	; 0x375a <main+0x66>
		{
		/* If Its "Enter", Clear Everything */
		case 13:
			clearAll();
    374e:	0e 94 8b 18 	call	0x3116	; 0x3116 <clearAll>
    3752:	06 c0       	rjmp	.+12     	; 0x3760 <main+0x6c>
			break;
		/* If Its "=", Calculate The Written Equation */
		case '=':
			calculate();
    3754:	0e 94 c9 18 	call	0x3192	; 0x3192 <calculate>
    3758:	03 c0       	rjmp	.+6      	; 0x3760 <main+0x6c>
			break;
		/* If Its a Number or a Sign, Call Input Function */
		default:
			input(key);
    375a:	8f 85       	ldd	r24, Y+15	; 0x0f
    375c:	0e 94 a2 18 	call	0x3144	; 0x3144 <input>
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	a8 e4       	ldi	r26, 0x48	; 72
    3766:	b3 e4       	ldi	r27, 0x43	; 67
    3768:	8b 87       	std	Y+11, r24	; 0x0b
    376a:	9c 87       	std	Y+12, r25	; 0x0c
    376c:	ad 87       	std	Y+13, r26	; 0x0d
    376e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3770:	6b 85       	ldd	r22, Y+11	; 0x0b
    3772:	7c 85       	ldd	r23, Y+12	; 0x0c
    3774:	8d 85       	ldd	r24, Y+13	; 0x0d
    3776:	9e 85       	ldd	r25, Y+14	; 0x0e
    3778:	20 e0       	ldi	r18, 0x00	; 0
    377a:	30 e0       	ldi	r19, 0x00	; 0
    377c:	4a e7       	ldi	r20, 0x7A	; 122
    377e:	53 e4       	ldi	r21, 0x43	; 67
    3780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	8f 83       	std	Y+7, r24	; 0x07
    378a:	98 87       	std	Y+8, r25	; 0x08
    378c:	a9 87       	std	Y+9, r26	; 0x09
    378e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3790:	6f 81       	ldd	r22, Y+7	; 0x07
    3792:	78 85       	ldd	r23, Y+8	; 0x08
    3794:	89 85       	ldd	r24, Y+9	; 0x09
    3796:	9a 85       	ldd	r25, Y+10	; 0x0a
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e8       	ldi	r20, 0x80	; 128
    379e:	5f e3       	ldi	r21, 0x3F	; 63
    37a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    37a4:	88 23       	and	r24, r24
    37a6:	2c f4       	brge	.+10     	; 0x37b2 <main+0xbe>
		__ticks = 1;
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	9e 83       	std	Y+6, r25	; 0x06
    37ae:	8d 83       	std	Y+5, r24	; 0x05
    37b0:	3f c0       	rjmp	.+126    	; 0x3830 <main+0x13c>
	else if (__tmp > 65535)
    37b2:	6f 81       	ldd	r22, Y+7	; 0x07
    37b4:	78 85       	ldd	r23, Y+8	; 0x08
    37b6:	89 85       	ldd	r24, Y+9	; 0x09
    37b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ba:	20 e0       	ldi	r18, 0x00	; 0
    37bc:	3f ef       	ldi	r19, 0xFF	; 255
    37be:	4f e7       	ldi	r20, 0x7F	; 127
    37c0:	57 e4       	ldi	r21, 0x47	; 71
    37c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    37c6:	18 16       	cp	r1, r24
    37c8:	4c f5       	brge	.+82     	; 0x381c <main+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    37cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    37ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    37d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    37d2:	20 e0       	ldi	r18, 0x00	; 0
    37d4:	30 e0       	ldi	r19, 0x00	; 0
    37d6:	40 e2       	ldi	r20, 0x20	; 32
    37d8:	51 e4       	ldi	r21, 0x41	; 65
    37da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37de:	dc 01       	movw	r26, r24
    37e0:	cb 01       	movw	r24, r22
    37e2:	bc 01       	movw	r22, r24
    37e4:	cd 01       	movw	r24, r26
    37e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	9e 83       	std	Y+6, r25	; 0x06
    37f0:	8d 83       	std	Y+5, r24	; 0x05
    37f2:	0f c0       	rjmp	.+30     	; 0x3812 <main+0x11e>
    37f4:	89 e1       	ldi	r24, 0x19	; 25
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	9c 83       	std	Y+4, r25	; 0x04
    37fa:	8b 83       	std	Y+3, r24	; 0x03
    37fc:	8b 81       	ldd	r24, Y+3	; 0x03
    37fe:	9c 81       	ldd	r25, Y+4	; 0x04
    3800:	01 97       	sbiw	r24, 0x01	; 1
    3802:	f1 f7       	brne	.-4      	; 0x3800 <main+0x10c>
    3804:	9c 83       	std	Y+4, r25	; 0x04
    3806:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3808:	8d 81       	ldd	r24, Y+5	; 0x05
    380a:	9e 81       	ldd	r25, Y+6	; 0x06
    380c:	01 97       	sbiw	r24, 0x01	; 1
    380e:	9e 83       	std	Y+6, r25	; 0x06
    3810:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3812:	8d 81       	ldd	r24, Y+5	; 0x05
    3814:	9e 81       	ldd	r25, Y+6	; 0x06
    3816:	00 97       	sbiw	r24, 0x00	; 0
    3818:	69 f7       	brne	.-38     	; 0x37f4 <main+0x100>
    381a:	80 cf       	rjmp	.-256    	; 0x371c <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    381c:	6f 81       	ldd	r22, Y+7	; 0x07
    381e:	78 85       	ldd	r23, Y+8	; 0x08
    3820:	89 85       	ldd	r24, Y+9	; 0x09
    3822:	9a 85       	ldd	r25, Y+10	; 0x0a
    3824:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	9e 83       	std	Y+6, r25	; 0x06
    382e:	8d 83       	std	Y+5, r24	; 0x05
    3830:	8d 81       	ldd	r24, Y+5	; 0x05
    3832:	9e 81       	ldd	r25, Y+6	; 0x06
    3834:	9a 83       	std	Y+2, r25	; 0x02
    3836:	89 83       	std	Y+1, r24	; 0x01
    3838:	89 81       	ldd	r24, Y+1	; 0x01
    383a:	9a 81       	ldd	r25, Y+2	; 0x02
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	f1 f7       	brne	.-4      	; 0x383c <main+0x148>
    3840:	9a 83       	std	Y+2, r25	; 0x02
    3842:	89 83       	std	Y+1, r24	; 0x01
    3844:	6b cf       	rjmp	.-298    	; 0x371c <main+0x28>

00003846 <__prologue_saves__>:
    3846:	2f 92       	push	r2
    3848:	3f 92       	push	r3
    384a:	4f 92       	push	r4
    384c:	5f 92       	push	r5
    384e:	6f 92       	push	r6
    3850:	7f 92       	push	r7
    3852:	8f 92       	push	r8
    3854:	9f 92       	push	r9
    3856:	af 92       	push	r10
    3858:	bf 92       	push	r11
    385a:	cf 92       	push	r12
    385c:	df 92       	push	r13
    385e:	ef 92       	push	r14
    3860:	ff 92       	push	r15
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	cd b7       	in	r28, 0x3d	; 61
    386c:	de b7       	in	r29, 0x3e	; 62
    386e:	ca 1b       	sub	r28, r26
    3870:	db 0b       	sbc	r29, r27
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	de bf       	out	0x3e, r29	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	cd bf       	out	0x3d, r28	; 61
    387c:	09 94       	ijmp

0000387e <__epilogue_restores__>:
    387e:	2a 88       	ldd	r2, Y+18	; 0x12
    3880:	39 88       	ldd	r3, Y+17	; 0x11
    3882:	48 88       	ldd	r4, Y+16	; 0x10
    3884:	5f 84       	ldd	r5, Y+15	; 0x0f
    3886:	6e 84       	ldd	r6, Y+14	; 0x0e
    3888:	7d 84       	ldd	r7, Y+13	; 0x0d
    388a:	8c 84       	ldd	r8, Y+12	; 0x0c
    388c:	9b 84       	ldd	r9, Y+11	; 0x0b
    388e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3890:	b9 84       	ldd	r11, Y+9	; 0x09
    3892:	c8 84       	ldd	r12, Y+8	; 0x08
    3894:	df 80       	ldd	r13, Y+7	; 0x07
    3896:	ee 80       	ldd	r14, Y+6	; 0x06
    3898:	fd 80       	ldd	r15, Y+5	; 0x05
    389a:	0c 81       	ldd	r16, Y+4	; 0x04
    389c:	1b 81       	ldd	r17, Y+3	; 0x03
    389e:	aa 81       	ldd	r26, Y+2	; 0x02
    38a0:	b9 81       	ldd	r27, Y+1	; 0x01
    38a2:	ce 0f       	add	r28, r30
    38a4:	d1 1d       	adc	r29, r1
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	ed 01       	movw	r28, r26
    38b2:	08 95       	ret

000038b4 <itoa>:
    38b4:	fb 01       	movw	r30, r22
    38b6:	9f 01       	movw	r18, r30
    38b8:	e8 94       	clt
    38ba:	42 30       	cpi	r20, 0x02	; 2
    38bc:	c4 f0       	brlt	.+48     	; 0x38ee <itoa+0x3a>
    38be:	45 32       	cpi	r20, 0x25	; 37
    38c0:	b4 f4       	brge	.+44     	; 0x38ee <itoa+0x3a>
    38c2:	4a 30       	cpi	r20, 0x0A	; 10
    38c4:	29 f4       	brne	.+10     	; 0x38d0 <itoa+0x1c>
    38c6:	97 fb       	bst	r25, 7
    38c8:	1e f4       	brtc	.+6      	; 0x38d0 <itoa+0x1c>
    38ca:	90 95       	com	r25
    38cc:	81 95       	neg	r24
    38ce:	9f 4f       	sbci	r25, 0xFF	; 255
    38d0:	64 2f       	mov	r22, r20
    38d2:	77 27       	eor	r23, r23
    38d4:	0e 94 8b 1c 	call	0x3916	; 0x3916 <__udivmodhi4>
    38d8:	80 5d       	subi	r24, 0xD0	; 208
    38da:	8a 33       	cpi	r24, 0x3A	; 58
    38dc:	0c f0       	brlt	.+2      	; 0x38e0 <itoa+0x2c>
    38de:	89 5d       	subi	r24, 0xD9	; 217
    38e0:	81 93       	st	Z+, r24
    38e2:	cb 01       	movw	r24, r22
    38e4:	00 97       	sbiw	r24, 0x00	; 0
    38e6:	a1 f7       	brne	.-24     	; 0x38d0 <itoa+0x1c>
    38e8:	16 f4       	brtc	.+4      	; 0x38ee <itoa+0x3a>
    38ea:	5d e2       	ldi	r21, 0x2D	; 45
    38ec:	51 93       	st	Z+, r21
    38ee:	10 82       	st	Z, r1
    38f0:	c9 01       	movw	r24, r18
    38f2:	0c 94 7b 1c 	jmp	0x38f6	; 0x38f6 <strrev>

000038f6 <strrev>:
    38f6:	dc 01       	movw	r26, r24
    38f8:	fc 01       	movw	r30, r24
    38fa:	67 2f       	mov	r22, r23
    38fc:	71 91       	ld	r23, Z+
    38fe:	77 23       	and	r23, r23
    3900:	e1 f7       	brne	.-8      	; 0x38fa <strrev+0x4>
    3902:	32 97       	sbiw	r30, 0x02	; 2
    3904:	04 c0       	rjmp	.+8      	; 0x390e <strrev+0x18>
    3906:	7c 91       	ld	r23, X
    3908:	6d 93       	st	X+, r22
    390a:	70 83       	st	Z, r23
    390c:	62 91       	ld	r22, -Z
    390e:	ae 17       	cp	r26, r30
    3910:	bf 07       	cpc	r27, r31
    3912:	c8 f3       	brcs	.-14     	; 0x3906 <strrev+0x10>
    3914:	08 95       	ret

00003916 <__udivmodhi4>:
    3916:	aa 1b       	sub	r26, r26
    3918:	bb 1b       	sub	r27, r27
    391a:	51 e1       	ldi	r21, 0x11	; 17
    391c:	07 c0       	rjmp	.+14     	; 0x392c <__udivmodhi4_ep>

0000391e <__udivmodhi4_loop>:
    391e:	aa 1f       	adc	r26, r26
    3920:	bb 1f       	adc	r27, r27
    3922:	a6 17       	cp	r26, r22
    3924:	b7 07       	cpc	r27, r23
    3926:	10 f0       	brcs	.+4      	; 0x392c <__udivmodhi4_ep>
    3928:	a6 1b       	sub	r26, r22
    392a:	b7 0b       	sbc	r27, r23

0000392c <__udivmodhi4_ep>:
    392c:	88 1f       	adc	r24, r24
    392e:	99 1f       	adc	r25, r25
    3930:	5a 95       	dec	r21
    3932:	a9 f7       	brne	.-22     	; 0x391e <__udivmodhi4_loop>
    3934:	80 95       	com	r24
    3936:	90 95       	com	r25
    3938:	bc 01       	movw	r22, r24
    393a:	cd 01       	movw	r24, r26
    393c:	08 95       	ret

0000393e <_exit>:
    393e:	f8 94       	cli

00003940 <__stop_program>:
    3940:	ff cf       	rjmp	.-2      	; 0x3940 <__stop_program>
